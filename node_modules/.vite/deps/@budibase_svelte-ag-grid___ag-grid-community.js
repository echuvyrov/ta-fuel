import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/@budibase/svelte-ag-grid/node_modules/ag-grid-community/dist/ag-grid-community.cjs.js
var require_ag_grid_community_cjs = __commonJS({
  "node_modules/@budibase/svelte-ag-grid/node_modules/ag-grid-community/dist/ag-grid-community.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function makeNull(value) {
      return value == null || value === "" ? null : value;
    }
    function exists(value, allowEmptyString) {
      if (allowEmptyString === void 0) {
        allowEmptyString = false;
      }
      return value != null && (allowEmptyString || value !== "");
    }
    function missing(value) {
      return !exists(value);
    }
    function missingOrEmpty(value) {
      return !value || missing(value) || value.length === 0;
    }
    function toStringOrNull(value) {
      return exists(value) && value.toString ? value.toString() : null;
    }
    function attrToNumber(value) {
      if (value === void 0) {
        return;
      }
      if (value === null || value === "") {
        return null;
      }
      if (typeof value === "number") {
        return isNaN(value) ? void 0 : value;
      }
      var valueParsed = parseInt(value, 10);
      return isNaN(valueParsed) ? void 0 : valueParsed;
    }
    function attrToBoolean(value) {
      if (value === void 0) {
        return;
      }
      if (value === null || value === "") {
        return false;
      }
      if (value === true || value === false) {
        return value;
      }
      return /true/i.test(value);
    }
    function attrToString(value) {
      if (value == null || value === "") {
        return;
      }
      return value;
    }
    function referenceCompare(left, right) {
      if (left == null && right == null) {
        return true;
      }
      if (left == null && right != null) {
        return false;
      }
      if (left != null && right == null) {
        return false;
      }
      return left === right;
    }
    function jsonEquals(val1, val2) {
      var val1Json = val1 ? JSON.stringify(val1) : null;
      var val2Json = val2 ? JSON.stringify(val2) : null;
      return val1Json === val2Json;
    }
    function defaultComparator(valueA, valueB, accentedCompare) {
      if (accentedCompare === void 0) {
        accentedCompare = false;
      }
      var valueAMissing = valueA == null;
      var valueBMissing = valueB == null;
      if (valueA && valueA.toNumber) {
        valueA = valueA.toNumber();
      }
      if (valueB && valueB.toNumber) {
        valueB = valueB.toNumber();
      }
      if (valueAMissing && valueBMissing) {
        return 0;
      }
      if (valueAMissing) {
        return -1;
      }
      if (valueBMissing) {
        return 1;
      }
      function doQuickCompare(a, b) {
        return a > b ? 1 : a < b ? -1 : 0;
      }
      if (typeof valueA !== "string") {
        return doQuickCompare(valueA, valueB);
      }
      if (!accentedCompare) {
        return doQuickCompare(valueA, valueB);
      }
      try {
        return valueA.localeCompare(valueB);
      } catch (e) {
        return doQuickCompare(valueA, valueB);
      }
    }
    function find(collection, predicate, value) {
      if (collection === null || collection === void 0) {
        return null;
      }
      if (!Array.isArray(collection)) {
        var objToArray = values(collection);
        return find(objToArray, predicate, value);
      }
      var collectionAsArray = collection;
      var firstMatchingItem = null;
      for (var i = 0; i < collectionAsArray.length; i++) {
        var item = collectionAsArray[i];
        if (typeof predicate === "string") {
          if (item[predicate] === value) {
            firstMatchingItem = item;
            break;
          }
        } else {
          var callback = predicate;
          if (callback(item)) {
            firstMatchingItem = item;
            break;
          }
        }
      }
      return firstMatchingItem;
    }
    function values(object) {
      if (object instanceof Set || object instanceof Map) {
        var values_1 = [];
        object.forEach(function(value) {
          return values_1.push(value);
        });
        return values_1;
      }
      return Object.keys(object).map(function(key) {
        return object[key];
      });
    }
    var GenericUtils = Object.freeze({
      __proto__: null,
      makeNull,
      exists,
      missing,
      missingOrEmpty,
      toStringOrNull,
      attrToNumber,
      attrToBoolean,
      attrToString,
      referenceCompare,
      jsonEquals,
      defaultComparator,
      find,
      values
    });
    var ColumnKeyCreator = function() {
      function ColumnKeyCreator2() {
        this.existingKeys = {};
      }
      ColumnKeyCreator2.prototype.addExistingKeys = function(keys2) {
        for (var i = 0; i < keys2.length; i++) {
          this.existingKeys[keys2[i]] = true;
        }
      };
      ColumnKeyCreator2.prototype.getUniqueKey = function(colId, colField) {
        colId = toStringOrNull(colId);
        var count = 0;
        while (true) {
          var idToTry = void 0;
          if (colId) {
            idToTry = colId;
            if (count !== 0) {
              idToTry += "_" + count;
            }
          } else if (colField) {
            idToTry = colField;
            if (count !== 0) {
              idToTry += "_" + count;
            }
          } else {
            idToTry = "" + count;
          }
          if (!this.existingKeys[idToTry]) {
            this.existingKeys[idToTry] = true;
            return idToTry;
          }
          count++;
        }
      };
      return ColumnKeyCreator2;
    }();
    function firstExistingValue() {
      var values2 = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        values2[_i] = arguments[_i];
      }
      for (var i = 0; i < values2.length; i++) {
        var value = values2[i];
        if (exists(value)) {
          return value;
        }
      }
      return null;
    }
    function anyExists(values2) {
      return values2 && firstExistingValue(values2) != null;
    }
    function existsAndNotEmpty(value) {
      return value != null && value.length > 0;
    }
    function last(arr) {
      if (!arr || !arr.length) {
        return void 0;
      }
      return arr[arr.length - 1];
    }
    function areEqual(a, b, comparator) {
      if (a == null && b == null) {
        return true;
      }
      return a != null && b != null && a.length === b.length && every(a, function(value, index) {
        return comparator ? comparator(value, b[index]) : b[index] === value;
      });
    }
    function compareArrays(array1, array2) {
      return areEqual(array1, array2);
    }
    function shallowCompare(arr1, arr2) {
      return areEqual(arr1, arr2);
    }
    function sortNumerically(array) {
      return array.sort(function(a, b) {
        return a - b;
      });
    }
    function removeRepeatsFromArray(array, object) {
      if (!array) {
        return;
      }
      for (var index = array.length - 2; index >= 0; index--) {
        var thisOneMatches = array[index] === object;
        var nextOneMatches = array[index + 1] === object;
        if (thisOneMatches && nextOneMatches) {
          array.splice(index + 1, 1);
        }
      }
    }
    function removeFromArray(array, object) {
      var index = array.indexOf(object);
      if (index >= 0) {
        array.splice(index, 1);
      }
    }
    function removeAllFromArray(array, toRemove) {
      forEach(toRemove, function(item) {
        return removeFromArray(array, item);
      });
    }
    function insertIntoArray(array, object, toIndex) {
      array.splice(toIndex, 0, object);
    }
    function insertArrayIntoArray(dest, src, toIndex) {
      if (dest == null || src == null) {
        return;
      }
      for (var i = src.length - 1; i >= 0; i--) {
        var item = src[i];
        insertIntoArray(dest, item, toIndex);
      }
    }
    function moveInArray(array, objectsToMove, toIndex) {
      removeAllFromArray(array, objectsToMove);
      forEach(objectsToMove.slice().reverse(), function(obj) {
        return insertIntoArray(array, obj, toIndex);
      });
    }
    function includes(array, value) {
      return array.indexOf(value) > -1;
    }
    function flatten(arrayOfArrays) {
      return [].concat.apply([], arrayOfArrays);
    }
    function pushAll(target, source) {
      if (source == null || target == null) {
        return;
      }
      forEach(source, function(value) {
        return target.push(value);
      });
    }
    function toStrings(array) {
      return map(array, toStringOrNull);
    }
    function findIndex(collection, predicate) {
      for (var i = 0; i < collection.length; i++) {
        if (predicate(collection[i], i, collection)) {
          return i;
        }
      }
      return -1;
    }
    function every(list, predicate) {
      if (list == null) {
        return true;
      }
      for (var i = 0; i < list.length; i++) {
        if (!predicate(list[i], i)) {
          return false;
        }
      }
      return true;
    }
    function some(list, predicate) {
      if (list == null) {
        return false;
      }
      for (var i = 0; i < list.length; i++) {
        if (predicate(list[i], i)) {
          return true;
        }
      }
      return false;
    }
    function forEach(list, action) {
      if (list == null) {
        return;
      }
      for (var i = 0; i < list.length; i++) {
        action(list[i], i);
      }
    }
    function forEachReverse(list, action) {
      if (list == null) {
        return;
      }
      for (var i = list.length - 1; i >= 0; i--) {
        action(list[i], i);
      }
    }
    function map(list, process) {
      if (list == null) {
        return null;
      }
      var mapped = [];
      for (var i = 0; i < list.length; i++) {
        mapped.push(process(list[i], i));
      }
      return mapped;
    }
    function filter(list, predicate) {
      if (list == null) {
        return null;
      }
      var filtered = [];
      for (var i = 0; i < list.length; i++) {
        if (predicate(list[i], i)) {
          filtered.push(list[i]);
        }
      }
      return filtered;
    }
    function reduce(list, step, initial) {
      if (list == null || initial == null) {
        return null;
      }
      var result = initial;
      for (var i = 0; i < list.length; i++) {
        result = step(result, list[i], i);
      }
      return result;
    }
    function forEachSnapshotFirst(list, callback) {
      if (!list) {
        return;
      }
      var arrayCopy = list.slice(0);
      arrayCopy.forEach(callback);
    }
    var ArrayUtils = Object.freeze({
      __proto__: null,
      firstExistingValue,
      anyExists,
      existsAndNotEmpty,
      last,
      areEqual,
      compareArrays,
      shallowCompare,
      sortNumerically,
      removeRepeatsFromArray,
      removeFromArray,
      removeAllFromArray,
      insertIntoArray,
      insertArrayIntoArray,
      moveInArray,
      includes,
      flatten,
      pushAll,
      toStrings,
      findIndex,
      every,
      some,
      forEach,
      forEachReverse,
      map,
      filter,
      reduce,
      forEachSnapshotFirst
    });
    function iterateObject(object, callback) {
      if (object == null) {
        return;
      }
      if (Array.isArray(object)) {
        forEach(object, function(value, index) {
          return callback("" + index, value);
        });
      } else {
        forEach(Object.keys(object), function(key) {
          return callback(key, object[key]);
        });
      }
    }
    function cloneObject(object) {
      var copy = {};
      var keys2 = Object.keys(object);
      for (var i = 0; i < keys2.length; i++) {
        var key = keys2[i];
        var value = object[key];
        copy[key] = value;
      }
      return copy;
    }
    function deepCloneObject(object) {
      return JSON.parse(JSON.stringify(object));
    }
    function deepCloneDefinition(object, keysToSkip) {
      if (!object) {
        return;
      }
      var obj = object;
      var res = {};
      Object.keys(obj).forEach(function(key) {
        if (keysToSkip && keysToSkip.indexOf(key) >= 0) {
          return;
        }
        var value = obj[key];
        var sourceIsSimpleObject = typeof value === "object" && value.constructor === Object;
        if (sourceIsSimpleObject) {
          res[key] = deepCloneDefinition(value);
        } else {
          res[key] = value;
        }
      });
      return res;
    }
    function getProperty(object, key) {
      return object[key];
    }
    function setProperty(object, key, value) {
      object[key] = value;
    }
    function copyPropertiesIfPresent(source, target) {
      var properties = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        properties[_i - 2] = arguments[_i];
      }
      forEach(properties, function(p) {
        return copyPropertyIfPresent(source, target, p);
      });
    }
    function copyPropertyIfPresent(source, target, property, transform) {
      var value = getProperty(source, property);
      if (value !== void 0) {
        setProperty(target, property, transform ? transform(value) : value);
      }
    }
    function getAllKeysInObjects(objects) {
      var allValues = {};
      objects.filter(function(obj) {
        return obj != null;
      }).forEach(function(obj) {
        forEach(Object.keys(obj), function(key) {
          return allValues[key] = null;
        });
      });
      return Object.keys(allValues);
    }
    function mergeDeep(dest, source, copyUndefined, makeCopyOfSimpleObjects) {
      if (copyUndefined === void 0) {
        copyUndefined = true;
      }
      if (makeCopyOfSimpleObjects === void 0) {
        makeCopyOfSimpleObjects = false;
      }
      if (!exists(source)) {
        return;
      }
      iterateObject(source, function(key, sourceValue) {
        var destValue = dest[key];
        if (destValue === sourceValue) {
          return;
        }
        if (makeCopyOfSimpleObjects) {
          var objectIsDueToBeCopied = destValue == null && sourceValue != null;
          if (objectIsDueToBeCopied) {
            var sourceIsSimpleObject = typeof sourceValue === "object" && sourceValue.constructor === Object;
            var dontCopy = sourceIsSimpleObject;
            if (dontCopy) {
              destValue = {};
              dest[key] = destValue;
            }
          }
        }
        if (isNonNullObject(sourceValue) && isNonNullObject(destValue) && !Array.isArray(destValue)) {
          mergeDeep(destValue, sourceValue, copyUndefined, makeCopyOfSimpleObjects);
        } else if (copyUndefined || sourceValue !== void 0) {
          dest[key] = sourceValue;
        }
      });
    }
    function assign(object) {
      var sources = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
      }
      forEach(sources, function(source) {
        return iterateObject(source, function(key, value) {
          return object[key] = value;
        });
      });
      return object;
    }
    function missingOrEmptyObject(value) {
      return missing(value) || Object.keys(value).length === 0;
    }
    function get(source, expression, defaultValue) {
      if (source == null) {
        return defaultValue;
      }
      var keys2 = expression.split(".");
      var objectToRead = source;
      while (keys2.length > 1) {
        objectToRead = objectToRead[keys2.shift()];
        if (objectToRead == null) {
          return defaultValue;
        }
      }
      var value = objectToRead[keys2[0]];
      return value != null ? value : defaultValue;
    }
    function set(target, expression, value) {
      if (target == null) {
        return;
      }
      var keys2 = expression.split(".");
      var objectToUpdate = target;
      while (keys2.length > 1) {
        objectToUpdate = objectToUpdate[keys2.shift()];
        if (objectToUpdate == null) {
          return;
        }
      }
      objectToUpdate[keys2[0]] = value;
    }
    function deepFreeze(object) {
      Object.freeze(object);
      forEach(values(object), function(v) {
        if (isNonNullObject(v) || typeof v === "function") {
          deepFreeze(v);
        }
      });
      return object;
    }
    function getValueUsingField(data, field, fieldContainsDots) {
      if (!field || !data) {
        return;
      }
      if (!fieldContainsDots) {
        return data[field];
      }
      var fields = field.split(".");
      var currentObject = data;
      for (var i = 0; i < fields.length; i++) {
        if (missing(currentObject)) {
          return null;
        }
        currentObject = currentObject[fields[i]];
      }
      return currentObject;
    }
    function removeAllReferences(obj, objectName) {
      Object.keys(obj).forEach(function(key) {
        var value = obj[key];
        if (typeof value === "object") {
          obj[key] = void 0;
        }
      });
      var proto = Object.getPrototypeOf(obj);
      var properties = {};
      Object.keys(proto).forEach(function(key) {
        var value = proto[key];
        if (typeof value === "function") {
          var func = function() {
            console.warn("ag-Grid: " + objectName + " function " + key + "() cannot be called as the grid has been \ndestroyed. Please don't call grid API functions on destroyed grids - as a matter of fact you \nshouldn't be keeping the API reference, your application has a memory leak! Remove the API reference \nwhen the grid is destroyed.");
          };
          properties[key] = { value: func, writable: true };
        }
      });
      Object.defineProperties(obj, properties);
    }
    function isNonNullObject(value) {
      return typeof value === "object" && value !== null;
    }
    var ObjectUtils = Object.freeze({
      __proto__: null,
      iterateObject,
      cloneObject,
      deepCloneObject,
      deepCloneDefinition,
      getProperty,
      setProperty,
      copyPropertiesIfPresent,
      copyPropertyIfPresent,
      getAllKeysInObjects,
      mergeDeep,
      assign,
      missingOrEmptyObject,
      get,
      set,
      deepFreeze,
      getValueUsingField,
      removeAllReferences,
      isNonNullObject
    });
    var FUNCTION_STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
    var FUNCTION_ARGUMENT_NAMES = /([^\s,]+)/g;
    var doOnceFlags = {};
    function doOnce(func, key) {
      if (doOnceFlags[key]) {
        return;
      }
      func();
      doOnceFlags[key] = true;
    }
    function getFunctionName(funcConstructor) {
      if (funcConstructor.name) {
        return funcConstructor.name;
      }
      var matches = /function\s+([^\(]+)/.exec(funcConstructor.toString());
      return matches && matches.length === 2 ? matches[1].trim() : null;
    }
    function getFunctionParameters(func) {
      var fnStr = func.toString().replace(FUNCTION_STRIP_COMMENTS, "");
      return fnStr.slice(fnStr.indexOf("(") + 1, fnStr.indexOf(")")).match(FUNCTION_ARGUMENT_NAMES) || [];
    }
    function isFunction(val) {
      return !!(val && val.constructor && val.call && val.apply);
    }
    function executeInAWhile(funcs) {
      executeAfter(funcs, 400);
    }
    function executeNextVMTurn(funcs) {
      executeAfter(funcs, 0);
    }
    function executeAfter(funcs, milliseconds) {
      if (milliseconds === void 0) {
        milliseconds = 0;
      }
      if (funcs.length > 0) {
        window.setTimeout(function() {
          return funcs.forEach(function(func) {
            return func();
          });
        }, milliseconds);
      }
    }
    function debounce(func, wait, immediate) {
      if (immediate === void 0) {
        immediate = false;
      }
      var timeout;
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var context = this;
        var callNow = immediate && !timeout;
        window.clearTimeout(timeout);
        timeout = window.setTimeout(function() {
          timeout = null;
          if (!immediate) {
            func.apply(context, args);
          }
        }, wait);
        if (callNow) {
          func.apply(context, args);
        }
      };
    }
    function compose() {
      var fns = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
      }
      return function(arg) {
        return fns.reduce(function(composed, f) {
          return f(composed);
        }, arg);
      };
    }
    function callIfPresent(func) {
      if (func) {
        func();
      }
    }
    var FunctionUtils = Object.freeze({
      __proto__: null,
      doOnce,
      getFunctionName,
      getFunctionParameters,
      isFunction,
      executeInAWhile,
      executeNextVMTurn,
      executeAfter,
      debounce,
      compose,
      callIfPresent
    });
    var Context = function() {
      function Context2(params, logger) {
        this.beanWrappers = {};
        this.destroyed = false;
        if (!params || !params.beanClasses) {
          return;
        }
        this.contextParams = params;
        this.logger = logger;
        this.logger.log(">> creating ag-Application Context");
        this.createBeans();
        var beanInstances = this.getBeanInstances();
        this.wireBeans(beanInstances);
        this.logger.log(">> ag-Application Context ready - component is alive");
      }
      Context2.prototype.getBeanInstances = function() {
        return values(this.beanWrappers).map(function(beanEntry) {
          return beanEntry.beanInstance;
        });
      };
      Context2.prototype.createBean = function(bean, afterPreCreateCallback) {
        if (!bean) {
          throw Error("Can't wire to bean since it is null");
        }
        this.wireBeans([bean], afterPreCreateCallback);
        return bean;
      };
      Context2.prototype.wireBeans = function(beanInstances, afterPreCreateCallback) {
        this.autoWireBeans(beanInstances);
        this.methodWireBeans(beanInstances);
        this.callLifeCycleMethods(beanInstances, "preConstructMethods");
        if (exists(afterPreCreateCallback)) {
          beanInstances.forEach(afterPreCreateCallback);
        }
        this.callLifeCycleMethods(beanInstances, "postConstructMethods");
      };
      Context2.prototype.createBeans = function() {
        var _this = this;
        this.contextParams.beanClasses.forEach(this.createBeanWrapper.bind(this));
        iterateObject(this.beanWrappers, function(key, beanEntry) {
          var constructorParamsMeta;
          if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {
            constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;
          }
          var constructorParams = _this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);
          var newInstance = applyToConstructor(beanEntry.bean, constructorParams);
          beanEntry.beanInstance = newInstance;
        });
        var createdBeanNames = Object.keys(this.beanWrappers).join(", ");
        this.logger.log("created beans: " + createdBeanNames);
      };
      Context2.prototype.createBeanWrapper = function(Bean2) {
        var metaData = Bean2.__agBeanMetaData;
        if (!metaData) {
          var beanName = void 0;
          if (Bean2.prototype.constructor) {
            beanName = getFunctionName(Bean2.prototype.constructor);
          } else {
            beanName = "" + Bean2;
          }
          console.error("Context item " + beanName + " is not a bean");
          return;
        }
        var beanEntry = {
          bean: Bean2,
          beanInstance: null,
          beanName: metaData.beanName
        };
        this.beanWrappers[metaData.beanName] = beanEntry;
      };
      Context2.prototype.autoWireBeans = function(beanInstances) {
        var _this = this;
        beanInstances.forEach(function(beanInstance) {
          _this.forEachMetaDataInHierarchy(beanInstance, function(metaData, beanName) {
            var attributes = metaData.agClassAttributes;
            if (!attributes) {
              return;
            }
            attributes.forEach(function(attribute) {
              var otherBean = _this.lookupBeanInstance(beanName, attribute.beanName, attribute.optional);
              beanInstance[attribute.attributeName] = otherBean;
            });
          });
        });
      };
      Context2.prototype.methodWireBeans = function(beanInstances) {
        var _this = this;
        beanInstances.forEach(function(beanInstance) {
          _this.forEachMetaDataInHierarchy(beanInstance, function(metaData, beanName) {
            iterateObject(metaData.autowireMethods, function(methodName, wireParams) {
              if (methodName === "agConstructor") {
                return;
              }
              var initParams = _this.getBeansForParameters(wireParams, beanName);
              beanInstance[methodName].apply(beanInstance, initParams);
            });
          });
        });
      };
      Context2.prototype.forEachMetaDataInHierarchy = function(beanInstance, callback) {
        var prototype = Object.getPrototypeOf(beanInstance);
        while (prototype != null) {
          var constructor = prototype.constructor;
          if (constructor.hasOwnProperty("__agBeanMetaData")) {
            var metaData = constructor.__agBeanMetaData;
            var beanName = this.getBeanName(constructor);
            callback(metaData, beanName);
          }
          prototype = Object.getPrototypeOf(prototype);
        }
      };
      Context2.prototype.getBeanName = function(constructor) {
        if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {
          return constructor.__agBeanMetaData.beanName;
        }
        var constructorString = constructor.toString();
        var beanName = constructorString.substring(9, constructorString.indexOf("("));
        return beanName;
      };
      Context2.prototype.getBeansForParameters = function(parameters, beanName) {
        var _this = this;
        var beansList = [];
        if (parameters) {
          iterateObject(parameters, function(paramIndex, otherBeanName) {
            var otherBean = _this.lookupBeanInstance(beanName, otherBeanName);
            beansList[Number(paramIndex)] = otherBean;
          });
        }
        return beansList;
      };
      Context2.prototype.lookupBeanInstance = function(wiringBean, beanName, optional) {
        if (optional === void 0) {
          optional = false;
        }
        if (beanName === "context") {
          return this;
        }
        if (this.contextParams.providedBeanInstances && this.contextParams.providedBeanInstances.hasOwnProperty(beanName)) {
          return this.contextParams.providedBeanInstances[beanName];
        }
        var beanEntry = this.beanWrappers[beanName];
        if (beanEntry) {
          return beanEntry.beanInstance;
        }
        if (!optional) {
          console.error("ag-Grid: unable to find bean reference " + beanName + " while initialising " + wiringBean);
        }
        return null;
      };
      Context2.prototype.callLifeCycleMethods = function(beanInstances, lifeCycleMethod) {
        var _this = this;
        beanInstances.forEach(function(beanInstance) {
          return _this.callLifeCycleMethodsOnBean(beanInstance, lifeCycleMethod);
        });
      };
      Context2.prototype.callLifeCycleMethodsOnBean = function(beanInstance, lifeCycleMethod, methodToIgnore) {
        var allMethods = {};
        this.forEachMetaDataInHierarchy(beanInstance, function(metaData) {
          var methods = metaData[lifeCycleMethod];
          if (methods) {
            methods.forEach(function(methodName) {
              if (methodName != methodToIgnore) {
                allMethods[methodName] = true;
              }
            });
          }
        });
        var allMethodsList = Object.keys(allMethods);
        allMethodsList.forEach(function(methodName) {
          return beanInstance[methodName]();
        });
      };
      Context2.prototype.getBean = function(name) {
        return this.lookupBeanInstance("getBean", name, true);
      };
      Context2.prototype.destroy = function() {
        if (this.destroyed) {
          return;
        }
        this.logger.log(">> Shutting down ag-Application Context");
        var beanInstances = this.getBeanInstances();
        this.destroyBeans(beanInstances);
        this.contextParams.providedBeanInstances = null;
        this.destroyed = true;
        this.logger.log(">> ag-Application Context shut down - component is dead");
      };
      Context2.prototype.destroyBean = function(bean) {
        if (!bean) {
          return;
        }
        this.destroyBeans([bean]);
      };
      Context2.prototype.destroyBeans = function(beans) {
        var _this = this;
        if (!beans) {
          return [];
        }
        beans.forEach(function(bean) {
          _this.callLifeCycleMethodsOnBean(bean, "preDestroyMethods", "destroy");
          var beanAny = bean;
          if (typeof beanAny.destroy === "function") {
            beanAny.destroy();
          }
        });
        return [];
      };
      return Context2;
    }();
    function applyToConstructor(constructor, argArray) {
      var args = [null].concat(argArray);
      var factoryFunction = constructor.bind.apply(constructor, args);
      return new factoryFunction();
    }
    function PreConstruct(target, methodName, descriptor) {
      var props = getOrCreateProps(target.constructor);
      if (!props.preConstructMethods) {
        props.preConstructMethods = [];
      }
      props.preConstructMethods.push(methodName);
    }
    function PostConstruct(target, methodName, descriptor) {
      var props = getOrCreateProps(target.constructor);
      if (!props.postConstructMethods) {
        props.postConstructMethods = [];
      }
      props.postConstructMethods.push(methodName);
    }
    function PreDestroy(target, methodName, descriptor) {
      var props = getOrCreateProps(target.constructor);
      if (!props.preDestroyMethods) {
        props.preDestroyMethods = [];
      }
      props.preDestroyMethods.push(methodName);
    }
    function Bean(beanName) {
      return function(classConstructor) {
        var props = getOrCreateProps(classConstructor);
        props.beanName = beanName;
      };
    }
    function Autowired(name) {
      return function(target, propertyKey, descriptor) {
        autowiredFunc(target, name, false, target, propertyKey, null);
      };
    }
    function Optional(name) {
      return function(target, propertyKey, descriptor) {
        autowiredFunc(target, name, true, target, propertyKey, null);
      };
    }
    function autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {
      if (name === null) {
        console.error("ag-Grid: Autowired name should not be null");
        return;
      }
      if (typeof index === "number") {
        console.error("ag-Grid: Autowired should be on an attribute");
        return;
      }
      var props = getOrCreateProps(target.constructor);
      if (!props.agClassAttributes) {
        props.agClassAttributes = [];
      }
      props.agClassAttributes.push({
        attributeName: methodOrAttributeName,
        beanName: name,
        optional
      });
    }
    function Qualifier(name) {
      return function(classPrototype, methodOrAttributeName, index) {
        var constructor = typeof classPrototype == "function" ? classPrototype : classPrototype.constructor;
        var props;
        if (typeof index === "number") {
          var methodName = void 0;
          if (methodOrAttributeName) {
            props = getOrCreateProps(constructor);
            methodName = methodOrAttributeName;
          } else {
            props = getOrCreateProps(constructor);
            methodName = "agConstructor";
          }
          if (!props.autowireMethods) {
            props.autowireMethods = {};
          }
          if (!props.autowireMethods[methodName]) {
            props.autowireMethods[methodName] = {};
          }
          props.autowireMethods[methodName][index] = name;
        }
      };
    }
    function getOrCreateProps(target) {
      if (!target.hasOwnProperty("__agBeanMetaData")) {
        target.__agBeanMetaData = {};
      }
      return target.__agBeanMetaData;
    }
    var __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var EventService = function() {
      function EventService2() {
        this.allSyncListeners = /* @__PURE__ */ new Map();
        this.allAsyncListeners = /* @__PURE__ */ new Map();
        this.globalSyncListeners = /* @__PURE__ */ new Set();
        this.globalAsyncListeners = /* @__PURE__ */ new Set();
        this.asyncFunctionsQueue = [];
        this.scheduled = false;
        this.firedEvents = {};
      }
      EventService2.prototype.setBeans = function(loggerFactory, gridOptionsWrapper, globalEventListener) {
        if (globalEventListener === void 0) {
          globalEventListener = null;
        }
        this.logger = loggerFactory.create("EventService");
        if (globalEventListener) {
          var async = gridOptionsWrapper.useAsyncEvents();
          this.addGlobalListener(globalEventListener, async);
        }
      };
      EventService2.prototype.getListeners = function(eventType, async) {
        var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
        var listeners = listenerMap.get(eventType);
        if (!listeners) {
          listeners = /* @__PURE__ */ new Set();
          listenerMap.set(eventType, listeners);
        }
        return listeners;
      };
      EventService2.prototype.addEventListener = function(eventType, listener, async) {
        if (async === void 0) {
          async = false;
        }
        this.getListeners(eventType, async).add(listener);
      };
      EventService2.prototype.removeEventListener = function(eventType, listener, async) {
        if (async === void 0) {
          async = false;
        }
        this.getListeners(eventType, async).delete(listener);
      };
      EventService2.prototype.addGlobalListener = function(listener, async) {
        if (async === void 0) {
          async = false;
        }
        (async ? this.globalAsyncListeners : this.globalSyncListeners).add(listener);
      };
      EventService2.prototype.removeGlobalListener = function(listener, async) {
        if (async === void 0) {
          async = false;
        }
        (async ? this.globalAsyncListeners : this.globalSyncListeners).delete(listener);
      };
      EventService2.prototype.dispatchEvent = function(event) {
        this.dispatchToListeners(event, true);
        this.dispatchToListeners(event, false);
        this.firedEvents[event.type] = true;
      };
      EventService2.prototype.dispatchEventOnce = function(event) {
        if (!this.firedEvents[event.type]) {
          this.dispatchEvent(event);
        }
      };
      EventService2.prototype.dispatchToListeners = function(event, async) {
        var _this = this;
        var eventType = event.type;
        var processEventListeners = function(listeners) {
          return listeners.forEach(function(listener) {
            if (async) {
              _this.dispatchAsync(function() {
                return listener(event);
              });
            } else {
              listener(event);
            }
          });
        };
        processEventListeners(this.getListeners(eventType, async));
        var globalListeners = async ? this.globalAsyncListeners : this.globalSyncListeners;
        globalListeners.forEach(function(listener) {
          if (async) {
            _this.dispatchAsync(function() {
              return listener(eventType, event);
            });
          } else {
            listener(eventType, event);
          }
        });
      };
      EventService2.prototype.dispatchAsync = function(func) {
        this.asyncFunctionsQueue.push(func);
        if (!this.scheduled) {
          window.setTimeout(this.flushAsyncQueue.bind(this), 0);
          this.scheduled = true;
        }
      };
      EventService2.prototype.flushAsyncQueue = function() {
        this.scheduled = false;
        var queueCopy = this.asyncFunctionsQueue.slice();
        this.asyncFunctionsQueue = [];
        queueCopy.forEach(function(func) {
          return func();
        });
      };
      __decorate([
        __param(0, Qualifier("loggerFactory")),
        __param(1, Qualifier("gridOptionsWrapper")),
        __param(2, Qualifier("globalEventListener"))
      ], EventService2.prototype, "setBeans", null);
      EventService2 = __decorate([
        Bean("eventService")
      ], EventService2);
      return EventService2;
    }();
    var Constants = function() {
      function Constants2() {
      }
      Constants2.STEP_EVERYTHING = 0;
      Constants2.STEP_FILTER = 1;
      Constants2.STEP_SORT = 2;
      Constants2.STEP_MAP = 3;
      Constants2.STEP_AGGREGATE = 4;
      Constants2.STEP_PIVOT = 5;
      Constants2.ROW_BUFFER_SIZE = 10;
      Constants2.LAYOUT_INTERVAL = 500;
      Constants2.BATCH_WAIT_MILLIS = 50;
      Constants2.EXPORT_TYPE_DRAG_COPY = "dragCopy";
      Constants2.EXPORT_TYPE_CLIPBOARD = "clipboard";
      Constants2.EXPORT_TYPE_EXCEL = "excel";
      Constants2.EXPORT_TYPE_CSV = "csv";
      Constants2.ROW_MODEL_TYPE_INFINITE = "infinite";
      Constants2.ROW_MODEL_TYPE_VIEWPORT = "viewport";
      Constants2.ROW_MODEL_TYPE_CLIENT_SIDE = "clientSide";
      Constants2.ROW_MODEL_TYPE_SERVER_SIDE = "serverSide";
      Constants2.ALWAYS = "always";
      Constants2.ONLY_WHEN_GROUPING = "onlyWhenGrouping";
      Constants2.PINNED_TOP = "top";
      Constants2.PINNED_BOTTOM = "bottom";
      Constants2.DOM_LAYOUT_NORMAL = "normal";
      Constants2.DOM_LAYOUT_PRINT = "print";
      Constants2.DOM_LAYOUT_AUTO_HEIGHT = "autoHeight";
      Constants2.GROUP_AUTO_COLUMN_ID = "ag-Grid-AutoColumn";
      Constants2.SOURCE_PASTE = "paste";
      Constants2.PINNED_RIGHT = "right";
      Constants2.PINNED_LEFT = "left";
      Constants2.SORT_ASC = "asc";
      Constants2.SORT_DESC = "desc";
      return Constants2;
    }();
    (function(ModuleNames) {
      ModuleNames["CommunityCoreModule"] = "@ag-grid-community/core";
      ModuleNames["CommunityAllModules"] = "@ag-grid-community/all";
      ModuleNames["InfiniteRowModelModule"] = "@ag-grid-community/infinite-row-model";
      ModuleNames["ClientSideRowModelModule"] = "@ag-grid-community/client-side-row-model";
      ModuleNames["CsvExportModule"] = "@ag-grid-community/csv-export";
      ModuleNames["RowNodeCache"] = "@ag-grid-community/row-node-cache";
      ModuleNames["EnterpriseCoreModule"] = "@ag-grid-enterprise/core";
      ModuleNames["EnterpriseAllModules"] = "@ag-grid-enterprise/all";
      ModuleNames["RowGroupingModule"] = "@ag-grid-enterprise/row-grouping";
      ModuleNames["ColumnToolPanelModule"] = "@ag-grid-enterprise/column-tool-panel";
      ModuleNames["FiltersToolPanelModule"] = "@ag-grid-enterprise/filter-tool-panel";
      ModuleNames["MenuModule"] = "@ag-grid-enterprise/menu";
      ModuleNames["SetFilterModule"] = "@ag-grid-enterprise/set-filter";
      ModuleNames["MultiFilterModule"] = "@ag-grid-enterprise/multi-filter";
      ModuleNames["StatusBarModule"] = "@ag-grid-enterprise/status-bar";
      ModuleNames["SideBarModule"] = "@ag-grid-enterprise/side-bar";
      ModuleNames["RangeSelectionModule"] = "@ag-grid-enterprise/range-selection";
      ModuleNames["MasterDetailModule"] = "@ag-grid-enterprise/master-detail";
      ModuleNames["RichSelectModule"] = "@ag-grid-enterprise/rich-select";
      ModuleNames["GridChartsModule"] = "@ag-grid-enterprise/charts";
      ModuleNames["ViewportRowModelModule"] = "@ag-grid-enterprise/viewport-row-model";
      ModuleNames["ServerSideRowModelModule"] = "@ag-grid-enterprise/server-side-row-model";
      ModuleNames["ExcelExportModule"] = "@ag-grid-enterprise/excel-export";
      ModuleNames["ClipboardModule"] = "@ag-grid-enterprise/clipboard";
      ModuleNames["DateTimeCellEditorModule"] = "@ag-grid-enterprise/date-time-cell-editor";
      ModuleNames["AngularModule"] = "@ag-grid-community/angular";
      ModuleNames["ReactModule"] = "@ag-grid-community/react";
      ModuleNames["VueModule"] = "@ag-grid-community/vue";
      ModuleNames["PolymerModule"] = "@ag-grid-community/polymer";
    })(exports.ModuleNames || (exports.ModuleNames = {}));
    var ModuleRegistry = function() {
      function ModuleRegistry2() {
      }
      ModuleRegistry2.register = function(module2, moduleBased) {
        if (moduleBased === void 0) {
          moduleBased = true;
        }
        ModuleRegistry2.modulesMap[module2.moduleName] = module2;
        if (ModuleRegistry2.moduleBased === void 0) {
          ModuleRegistry2.moduleBased = moduleBased;
        } else {
          if (ModuleRegistry2.moduleBased !== moduleBased) {
            doOnce(function() {
              console.warn("ag-Grid: You are mixing modules (i.e. @ag-grid-community/core) and packages (ag-grid-community) - you can only use one or the other of these mechanisms.");
              console.warn("Please see https://www.ag-grid.com/javascript-grid-packages-modules/ for more information.");
            }, "ModulePackageCheck");
          }
        }
      };
      ModuleRegistry2.registerModules = function(modules, moduleBased) {
        if (moduleBased === void 0) {
          moduleBased = true;
        }
        if (!modules) {
          return;
        }
        modules.forEach(function(module2) {
          return ModuleRegistry2.register(module2, moduleBased);
        });
      };
      ModuleRegistry2.assertRegistered = function(moduleName, reason) {
        if (this.isRegistered(moduleName)) {
          return true;
        }
        var warningKey = reason + moduleName;
        var warningMessage = "ag-Grid: unable to use " + reason + " as module " + moduleName + " is not present. Please see: https://www.ag-grid.com/javascript-grid-modules/";
        doOnce(function() {
          console.warn(warningMessage);
        }, warningKey);
        return false;
      };
      ModuleRegistry2.isRegistered = function(moduleName) {
        return !!ModuleRegistry2.modulesMap[moduleName];
      };
      ModuleRegistry2.getRegisteredModules = function() {
        return values(ModuleRegistry2.modulesMap);
      };
      ModuleRegistry2.isPackageBased = function() {
        return !ModuleRegistry2.moduleBased;
      };
      ModuleRegistry2.modulesMap = {};
      return ModuleRegistry2;
    }();
    var __decorate$1 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Column = function() {
      function Column2(colDef, userProvidedColDef, colId, primary) {
        this.moving = false;
        this.menuVisible = false;
        this.filterActive = false;
        this.eventService = new EventService();
        this.rowGroupActive = false;
        this.pivotActive = false;
        this.aggregationActive = false;
        this.colDef = colDef;
        this.userProvidedColDef = userProvidedColDef;
        this.colId = colId;
        this.primary = primary;
        this.setState(colDef);
      }
      Column2.prototype.setState = function(colDef) {
        if (colDef.sort !== void 0) {
          if (colDef.sort === Constants.SORT_ASC || colDef.sort === Constants.SORT_DESC) {
            this.sort = colDef.sort;
          }
        } else {
          if (colDef.initialSort === Constants.SORT_ASC || colDef.initialSort === Constants.SORT_DESC) {
            this.sort = colDef.initialSort;
          }
        }
        var sortIndex = attrToNumber(colDef.sortIndex);
        var initialSortIndex = attrToNumber(colDef.initialSortIndex);
        if (sortIndex !== void 0) {
          if (sortIndex !== null) {
            this.sortIndex = sortIndex;
          }
        } else {
          if (initialSortIndex !== null) {
            this.sortIndex = initialSortIndex;
          }
        }
        var hide = attrToBoolean(colDef.hide);
        var initialHide = attrToBoolean(colDef.initialHide);
        if (hide !== void 0) {
          this.visible = !hide;
        } else {
          this.visible = !initialHide;
        }
        if (colDef.pinned !== void 0) {
          this.setPinned(colDef.pinned);
        } else {
          this.setPinned(colDef.initialPinned);
        }
        var flex = attrToNumber(colDef.flex);
        var initialFlex = attrToNumber(colDef.initialFlex);
        if (flex !== void 0) {
          this.flex = flex;
        } else if (initialFlex !== void 0) {
          this.flex = initialFlex;
        }
      };
      Column2.prototype.setColDef = function(colDef, userProvidedColDef) {
        this.colDef = colDef;
        this.userProvidedColDef = userProvidedColDef;
      };
      Column2.prototype.getUserProvidedColDef = function() {
        return this.userProvidedColDef;
      };
      Column2.prototype.setParent = function(parent) {
        this.parent = parent;
      };
      Column2.prototype.getParent = function() {
        return this.parent;
      };
      Column2.prototype.setOriginalParent = function(originalParent) {
        this.originalParent = originalParent;
      };
      Column2.prototype.getOriginalParent = function() {
        return this.originalParent;
      };
      Column2.prototype.initialise = function() {
        var minColWidth = this.gridOptionsWrapper.getMinColWidth();
        var maxColWidth = this.gridOptionsWrapper.getMaxColWidth();
        if (this.colDef.minWidth) {
          this.minWidth = this.colDef.minWidth;
        } else {
          this.minWidth = minColWidth;
        }
        if (this.colDef.maxWidth) {
          this.maxWidth = this.colDef.maxWidth;
        } else {
          this.maxWidth = maxColWidth;
        }
        this.resetActualWidth("gridInitializing");
        var suppressDotNotation = this.gridOptionsWrapper.isSuppressFieldDotNotation();
        this.fieldContainsDots = exists(this.colDef.field) && this.colDef.field.indexOf(".") >= 0 && !suppressDotNotation;
        this.tooltipFieldContainsDots = exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf(".") >= 0 && !suppressDotNotation;
        this.validate();
      };
      Column2.prototype.resetActualWidth = function(source) {
        if (source === void 0) {
          source = "api";
        }
        var initialWidth = this.columnUtils.calculateColInitialWidth(this.colDef);
        this.setActualWidth(initialWidth, source, true);
      };
      Column2.prototype.isEmptyGroup = function() {
        return false;
      };
      Column2.prototype.isRowGroupDisplayed = function(colId) {
        if (missing(this.colDef) || missing(this.colDef.showRowGroup)) {
          return false;
        }
        var showingAllGroups = this.colDef.showRowGroup === true;
        var showingThisGroup = this.colDef.showRowGroup === colId;
        return showingAllGroups || showingThisGroup;
      };
      Column2.prototype.getUniqueId = function() {
        return this.getId();
      };
      Column2.prototype.isPrimary = function() {
        return this.primary;
      };
      Column2.prototype.isFilterAllowed = function() {
        var filterDefined = !!this.colDef.filter || !!this.colDef.filterFramework;
        return this.primary && filterDefined;
      };
      Column2.prototype.isFieldContainsDots = function() {
        return this.fieldContainsDots;
      };
      Column2.prototype.isTooltipFieldContainsDots = function() {
        return this.tooltipFieldContainsDots;
      };
      Column2.prototype.validate = function() {
        var colDefAny = this.colDef;
        function warnOnce(msg, key, obj) {
          doOnce(function() {
            if (obj) {
              console.warn(msg, obj);
            } else {
              doOnce(function() {
                return console.warn(msg);
              }, key);
            }
          }, key);
        }
        if (!ModuleRegistry.isRegistered(exports.ModuleNames.RowGroupingModule)) {
          var rowGroupingItems = ["enableRowGroup", "rowGroup", "rowGroupIndex", "enablePivot", "enableValue", "pivot", "pivotIndex", "aggFunc"];
          rowGroupingItems.forEach(function(item) {
            if (exists(colDefAny[item])) {
              if (ModuleRegistry.isPackageBased()) {
                warnOnce("ag-Grid: " + item + " is only valid in ag-grid-enterprise, your column definition should not have " + item, "ColumnRowGroupingMissing" + item);
              } else {
                warnOnce("ag-Grid: " + item + " is only valid with ag-Grid Enterprise Module " + exports.ModuleNames.RowGroupingModule + " - your column definition should not have " + item, "ColumnRowGroupingMissing" + item);
              }
            }
          });
        }
        if (!ModuleRegistry.isRegistered(exports.ModuleNames.RichSelectModule)) {
          if (this.colDef.cellEditor === "agRichSelect" || this.colDef.cellEditor === "agRichSelectCellEditor") {
            if (ModuleRegistry.isPackageBased()) {
              warnOnce("ag-Grid: " + this.colDef.cellEditor + " can only be used with ag-grid-enterprise", "ColumnRichSelectMissing");
            } else {
              warnOnce("ag-Grid: " + this.colDef.cellEditor + " can only be used with ag-Grid Enterprise Module " + exports.ModuleNames.RichSelectModule, "ColumnRichSelectMissing");
            }
          }
        }
        if (!ModuleRegistry.isRegistered(exports.ModuleNames.DateTimeCellEditorModule)) {
          if (this.colDef.cellEditor === "agRichSelect" || this.colDef.cellEditor === "agDateTimeCellEditor") {
            if (ModuleRegistry.isPackageBased()) {
              warnOnce("ag-Grid: " + this.colDef.cellEditor + " can only be used with ag-grid-enterprise", "ColumnDateTimeMissing");
            } else {
              warnOnce("ag-Grid: " + this.colDef.cellEditor + " can only be used with ag-Grid Enterprise Module " + exports.ModuleNames.DateTimeCellEditorModule, "ColumnDateTimeMissing");
            }
          }
        }
        if (this.gridOptionsWrapper.isTreeData()) {
          var itemsNotAllowedWithTreeData = ["rowGroup", "rowGroupIndex", "pivot", "pivotIndex"];
          itemsNotAllowedWithTreeData.forEach(function(item) {
            if (exists(colDefAny[item])) {
              warnOnce("ag-Grid: " + item + " is not possible when doing tree data, your column definition should not have " + item, "TreeDataCannotRowGroup");
            }
          });
        }
        if (exists(this.colDef.width) && typeof this.colDef.width !== "number") {
          warnOnce("ag-Grid: colDef.width should be a number, not " + typeof this.colDef.width, "ColumnCheck_asdfawef");
        }
      };
      Column2.prototype.addEventListener = function(eventType, listener) {
        this.eventService.addEventListener(eventType, listener);
      };
      Column2.prototype.removeEventListener = function(eventType, listener) {
        this.eventService.removeEventListener(eventType, listener);
      };
      Column2.prototype.createIsColumnFuncParams = function(rowNode) {
        return {
          node: rowNode,
          data: rowNode.data,
          column: this,
          colDef: this.colDef,
          context: this.gridOptionsWrapper.getContext(),
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi()
        };
      };
      Column2.prototype.isSuppressNavigable = function(rowNode) {
        if (typeof this.colDef.suppressNavigable === "boolean") {
          return this.colDef.suppressNavigable;
        }
        if (typeof this.colDef.suppressNavigable === "function") {
          var params = this.createIsColumnFuncParams(rowNode);
          var userFunc = this.colDef.suppressNavigable;
          return userFunc(params);
        }
        return false;
      };
      Column2.prototype.isCellEditable = function(rowNode) {
        if (rowNode.group && !this.gridOptionsWrapper.isEnableGroupEdit()) {
          return false;
        }
        return this.isColumnFunc(rowNode, this.colDef.editable);
      };
      Column2.prototype.isRowDrag = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef.rowDrag);
      };
      Column2.prototype.isDndSource = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef.dndSource);
      };
      Column2.prototype.isCellCheckboxSelection = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);
      };
      Column2.prototype.isSuppressPaste = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);
      };
      Column2.prototype.isResizable = function() {
        return this.colDef.resizable === true;
      };
      Column2.prototype.isColumnFunc = function(rowNode, value) {
        if (typeof value === "boolean") {
          return value;
        }
        if (typeof value === "function") {
          var params = this.createIsColumnFuncParams(rowNode);
          var editableFunc = value;
          return editableFunc(params);
        }
        return false;
      };
      Column2.prototype.setMoving = function(moving, source) {
        if (source === void 0) {
          source = "api";
        }
        this.moving = moving;
        this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_MOVING_CHANGED, source));
      };
      Column2.prototype.createColumnEvent = function(type, source) {
        return {
          api: this.gridApi,
          columnApi: this.columnApi,
          type,
          column: this,
          columns: [this],
          source
        };
      };
      Column2.prototype.isMoving = function() {
        return this.moving;
      };
      Column2.prototype.getSort = function() {
        return this.sort;
      };
      Column2.prototype.setSort = function(sort, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.sort !== sort) {
          this.sort = sort;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_SORT_CHANGED, source));
        }
      };
      Column2.prototype.setMenuVisible = function(visible, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.menuVisible !== visible) {
          this.menuVisible = visible;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_MENU_VISIBLE_CHANGED, source));
        }
      };
      Column2.prototype.isMenuVisible = function() {
        return this.menuVisible;
      };
      Column2.prototype.isSortAscending = function() {
        return this.sort === Constants.SORT_ASC;
      };
      Column2.prototype.isSortDescending = function() {
        return this.sort === Constants.SORT_DESC;
      };
      Column2.prototype.isSortNone = function() {
        return missing(this.sort);
      };
      Column2.prototype.isSorting = function() {
        return exists(this.sort);
      };
      Column2.prototype.getSortIndex = function() {
        return this.sortIndex;
      };
      Column2.prototype.setSortIndex = function(sortOrder) {
        this.sortIndex = sortOrder;
      };
      Column2.prototype.setAggFunc = function(aggFunc) {
        this.aggFunc = aggFunc;
      };
      Column2.prototype.getAggFunc = function() {
        return this.aggFunc;
      };
      Column2.prototype.getLeft = function() {
        return this.left;
      };
      Column2.prototype.getOldLeft = function() {
        return this.oldLeft;
      };
      Column2.prototype.getRight = function() {
        return this.left + this.actualWidth;
      };
      Column2.prototype.setLeft = function(left, source) {
        if (source === void 0) {
          source = "api";
        }
        this.oldLeft = this.left;
        if (this.left !== left) {
          this.left = left;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_LEFT_CHANGED, source));
        }
      };
      Column2.prototype.isFilterActive = function() {
        return this.filterActive;
      };
      Column2.prototype.setFilterActive = function(active, source, additionalEventAttributes) {
        if (source === void 0) {
          source = "api";
        }
        if (this.filterActive !== active) {
          this.filterActive = active;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_FILTER_ACTIVE_CHANGED, source));
        }
        var filterChangedEvent = this.createColumnEvent(Column2.EVENT_FILTER_CHANGED, source);
        if (additionalEventAttributes) {
          mergeDeep(filterChangedEvent, additionalEventAttributes);
        }
        this.eventService.dispatchEvent(filterChangedEvent);
      };
      Column2.prototype.setPinned = function(pinned) {
        if (pinned === true || pinned === Constants.PINNED_LEFT) {
          this.pinned = Constants.PINNED_LEFT;
        } else if (pinned === Constants.PINNED_RIGHT) {
          this.pinned = Constants.PINNED_RIGHT;
        } else {
          this.pinned = null;
        }
      };
      Column2.prototype.setFirstRightPinned = function(firstRightPinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.firstRightPinned !== firstRightPinned) {
          this.firstRightPinned = firstRightPinned;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_FIRST_RIGHT_PINNED_CHANGED, source));
        }
      };
      Column2.prototype.setLastLeftPinned = function(lastLeftPinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.lastLeftPinned !== lastLeftPinned) {
          this.lastLeftPinned = lastLeftPinned;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_LAST_LEFT_PINNED_CHANGED, source));
        }
      };
      Column2.prototype.isFirstRightPinned = function() {
        return this.firstRightPinned;
      };
      Column2.prototype.isLastLeftPinned = function() {
        return this.lastLeftPinned;
      };
      Column2.prototype.isPinned = function() {
        return this.pinned === Constants.PINNED_LEFT || this.pinned === Constants.PINNED_RIGHT;
      };
      Column2.prototype.isPinnedLeft = function() {
        return this.pinned === Constants.PINNED_LEFT;
      };
      Column2.prototype.isPinnedRight = function() {
        return this.pinned === Constants.PINNED_RIGHT;
      };
      Column2.prototype.getPinned = function() {
        return this.pinned;
      };
      Column2.prototype.setVisible = function(visible, source) {
        if (source === void 0) {
          source = "api";
        }
        var newValue = visible === true;
        if (this.visible !== newValue) {
          this.visible = newValue;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_VISIBLE_CHANGED, source));
        }
      };
      Column2.prototype.isVisible = function() {
        return this.visible;
      };
      Column2.prototype.getColDef = function() {
        return this.colDef;
      };
      Column2.prototype.getColumnGroupShow = function() {
        return this.colDef.columnGroupShow;
      };
      Column2.prototype.getColId = function() {
        return this.colId;
      };
      Column2.prototype.getId = function() {
        return this.getColId();
      };
      Column2.prototype.getDefinition = function() {
        return this.colDef;
      };
      Column2.prototype.getActualWidth = function() {
        return this.actualWidth;
      };
      Column2.prototype.createBaseColDefParams = function(rowNode) {
        var params = {
          node: rowNode,
          data: rowNode.data,
          colDef: this.colDef,
          column: this,
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext()
        };
        return params;
      };
      Column2.prototype.getColSpan = function(rowNode) {
        if (missing(this.colDef.colSpan)) {
          return 1;
        }
        var params = this.createBaseColDefParams(rowNode);
        var colSpan = this.colDef.colSpan(params);
        return Math.max(colSpan, 1);
      };
      Column2.prototype.getRowSpan = function(rowNode) {
        if (missing(this.colDef.rowSpan)) {
          return 1;
        }
        var params = this.createBaseColDefParams(rowNode);
        var rowSpan = this.colDef.rowSpan(params);
        return Math.max(rowSpan, 1);
      };
      Column2.prototype.setActualWidth = function(actualWidth, source, silent) {
        if (source === void 0) {
          source = "api";
        }
        if (silent === void 0) {
          silent = false;
        }
        if (this.minWidth != null) {
          actualWidth = Math.max(actualWidth, this.minWidth);
        }
        if (this.maxWidth != null) {
          actualWidth = Math.min(actualWidth, this.maxWidth);
        }
        if (this.actualWidth !== actualWidth) {
          this.actualWidth = actualWidth;
          if (this.flex && source !== "flex" && source !== "gridInitializing") {
            this.flex = null;
          }
          if (!silent) {
            this.fireColumnWidthChangedEvent(source);
          }
        }
      };
      Column2.prototype.fireColumnWidthChangedEvent = function(source) {
        this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_WIDTH_CHANGED, source));
      };
      Column2.prototype.isGreaterThanMax = function(width) {
        if (this.maxWidth != null) {
          return width > this.maxWidth;
        }
        return false;
      };
      Column2.prototype.getMinWidth = function() {
        return this.minWidth;
      };
      Column2.prototype.getMaxWidth = function() {
        return this.maxWidth;
      };
      Column2.prototype.getFlex = function() {
        return this.flex || 0;
      };
      Column2.prototype.setFlex = function(flex) {
        if (this.flex !== flex) {
          this.flex = flex;
        }
      };
      Column2.prototype.setMinimum = function(source) {
        if (source === void 0) {
          source = "api";
        }
        this.setActualWidth(this.minWidth, source);
      };
      Column2.prototype.setRowGroupActive = function(rowGroup, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.rowGroupActive !== rowGroup) {
          this.rowGroupActive = rowGroup;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_ROW_GROUP_CHANGED, source));
        }
      };
      Column2.prototype.isRowGroupActive = function() {
        return this.rowGroupActive;
      };
      Column2.prototype.setPivotActive = function(pivot, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.pivotActive !== pivot) {
          this.pivotActive = pivot;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_PIVOT_CHANGED, source));
        }
      };
      Column2.prototype.isPivotActive = function() {
        return this.pivotActive;
      };
      Column2.prototype.isAnyFunctionActive = function() {
        return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();
      };
      Column2.prototype.isAnyFunctionAllowed = function() {
        return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();
      };
      Column2.prototype.setValueActive = function(value, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.aggregationActive !== value) {
          this.aggregationActive = value;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_VALUE_CHANGED, source));
        }
      };
      Column2.prototype.isValueActive = function() {
        return this.aggregationActive;
      };
      Column2.prototype.isAllowPivot = function() {
        return this.colDef.enablePivot === true;
      };
      Column2.prototype.isAllowValue = function() {
        return this.colDef.enableValue === true;
      };
      Column2.prototype.isAllowRowGroup = function() {
        return this.colDef.enableRowGroup === true;
      };
      Column2.prototype.getMenuTabs = function(defaultValues) {
        var menuTabs = this.getColDef().menuTabs;
        if (menuTabs == null) {
          menuTabs = defaultValues;
        }
        return menuTabs;
      };
      Column2.prototype.isLockPosition = function() {
        console.warn("ag-Grid: since v21, col.isLockPosition() should not be used, please use col.getColDef().lockPosition instead.");
        return this.colDef ? !!this.colDef.lockPosition : false;
      };
      Column2.prototype.isLockVisible = function() {
        console.warn("ag-Grid: since v21, col.isLockVisible() should not be used, please use col.getColDef().lockVisible instead.");
        return this.colDef ? !!this.colDef.lockVisible : false;
      };
      Column2.prototype.isLockPinned = function() {
        console.warn("ag-Grid: since v21, col.isLockPinned() should not be used, please use col.getColDef().lockPinned instead.");
        return this.colDef ? !!this.colDef.lockPinned : false;
      };
      Column2.EVENT_MOVING_CHANGED = "movingChanged";
      Column2.EVENT_LEFT_CHANGED = "leftChanged";
      Column2.EVENT_WIDTH_CHANGED = "widthChanged";
      Column2.EVENT_LAST_LEFT_PINNED_CHANGED = "lastLeftPinnedChanged";
      Column2.EVENT_FIRST_RIGHT_PINNED_CHANGED = "firstRightPinnedChanged";
      Column2.EVENT_VISIBLE_CHANGED = "visibleChanged";
      Column2.EVENT_FILTER_CHANGED = "filterChanged";
      Column2.EVENT_FILTER_ACTIVE_CHANGED = "filterActiveChanged";
      Column2.EVENT_SORT_CHANGED = "sortChanged";
      Column2.EVENT_MENU_VISIBLE_CHANGED = "menuVisibleChanged";
      Column2.EVENT_ROW_GROUP_CHANGED = "columnRowGroupChanged";
      Column2.EVENT_PIVOT_CHANGED = "columnPivotChanged";
      Column2.EVENT_VALUE_CHANGED = "columnValueChanged";
      __decorate$1([
        Autowired("gridOptionsWrapper")
      ], Column2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1([
        Autowired("columnUtils")
      ], Column2.prototype, "columnUtils", void 0);
      __decorate$1([
        Autowired("columnApi")
      ], Column2.prototype, "columnApi", void 0);
      __decorate$1([
        Autowired("gridApi")
      ], Column2.prototype, "gridApi", void 0);
      __decorate$1([
        Autowired("context")
      ], Column2.prototype, "context", void 0);
      __decorate$1([
        PostConstruct
      ], Column2.prototype, "initialise", null);
      return Column2;
    }();
    var __decorate$2 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ColumnGroup = function() {
      function ColumnGroup2(originalColumnGroup, groupId, instanceId, pinned) {
        this.displayedChildren = [];
        this.localEventService = new EventService();
        this.groupId = groupId;
        this.instanceId = instanceId;
        this.originalColumnGroup = originalColumnGroup;
        this.pinned = pinned;
      }
      ColumnGroup2.createUniqueId = function(groupId, instanceId) {
        return groupId + "_" + instanceId;
      };
      ColumnGroup2.prototype.reset = function() {
        this.parent = null;
        this.children = null;
        this.displayedChildren = null;
      };
      ColumnGroup2.prototype.getParent = function() {
        return this.parent;
      };
      ColumnGroup2.prototype.setParent = function(parent) {
        this.parent = parent;
      };
      ColumnGroup2.prototype.getUniqueId = function() {
        return ColumnGroup2.createUniqueId(this.groupId, this.instanceId);
      };
      ColumnGroup2.prototype.isEmptyGroup = function() {
        return this.displayedChildren.length === 0;
      };
      ColumnGroup2.prototype.isMoving = function() {
        var allLeafColumns = this.getOriginalColumnGroup().getLeafColumns();
        if (!allLeafColumns || allLeafColumns.length === 0) {
          return false;
        }
        return allLeafColumns.every(function(col) {
          return col.isMoving();
        });
      };
      ColumnGroup2.prototype.checkLeft = function() {
        this.displayedChildren.forEach(function(child) {
          if (child instanceof ColumnGroup2) {
            child.checkLeft();
          }
        });
        if (this.displayedChildren.length > 0) {
          if (this.gridOptionsWrapper.isEnableRtl()) {
            var lastChild = last(this.displayedChildren);
            var lastChildLeft = lastChild.getLeft();
            this.setLeft(lastChildLeft);
          } else {
            var firstChildLeft = this.displayedChildren[0].getLeft();
            this.setLeft(firstChildLeft);
          }
        } else {
          this.setLeft(null);
        }
      };
      ColumnGroup2.prototype.getLeft = function() {
        return this.left;
      };
      ColumnGroup2.prototype.getOldLeft = function() {
        return this.oldLeft;
      };
      ColumnGroup2.prototype.setLeft = function(left) {
        this.oldLeft = left;
        if (this.left !== left) {
          this.left = left;
          this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_LEFT_CHANGED));
        }
      };
      ColumnGroup2.prototype.getPinned = function() {
        return this.pinned;
      };
      ColumnGroup2.prototype.createAgEvent = function(type) {
        return { type };
      };
      ColumnGroup2.prototype.addEventListener = function(eventType, listener) {
        this.localEventService.addEventListener(eventType, listener);
      };
      ColumnGroup2.prototype.removeEventListener = function(eventType, listener) {
        this.localEventService.removeEventListener(eventType, listener);
      };
      ColumnGroup2.prototype.getGroupId = function() {
        return this.groupId;
      };
      ColumnGroup2.prototype.getInstanceId = function() {
        return this.instanceId;
      };
      ColumnGroup2.prototype.isChildInThisGroupDeepSearch = function(wantedChild) {
        var result = false;
        this.children.forEach(function(foundChild) {
          if (wantedChild === foundChild) {
            result = true;
          }
          if (foundChild instanceof ColumnGroup2) {
            if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {
              result = true;
            }
          }
        });
        return result;
      };
      ColumnGroup2.prototype.getActualWidth = function() {
        var groupActualWidth = 0;
        if (this.displayedChildren) {
          this.displayedChildren.forEach(function(child) {
            groupActualWidth += child.getActualWidth();
          });
        }
        return groupActualWidth;
      };
      ColumnGroup2.prototype.isResizable = function() {
        if (!this.displayedChildren) {
          return false;
        }
        var result = false;
        this.displayedChildren.forEach(function(child) {
          if (child.isResizable()) {
            result = true;
          }
        });
        return result;
      };
      ColumnGroup2.prototype.getMinWidth = function() {
        var result = 0;
        this.displayedChildren.forEach(function(groupChild) {
          result += groupChild.getMinWidth();
        });
        return result;
      };
      ColumnGroup2.prototype.addChild = function(child) {
        if (!this.children) {
          this.children = [];
        }
        this.children.push(child);
      };
      ColumnGroup2.prototype.getDisplayedChildren = function() {
        return this.displayedChildren;
      };
      ColumnGroup2.prototype.getLeafColumns = function() {
        var result = [];
        this.addLeafColumns(result);
        return result;
      };
      ColumnGroup2.prototype.getDisplayedLeafColumns = function() {
        var result = [];
        this.addDisplayedLeafColumns(result);
        return result;
      };
      ColumnGroup2.prototype.getDefinition = function() {
        return this.originalColumnGroup.getColGroupDef();
      };
      ColumnGroup2.prototype.getColGroupDef = function() {
        return this.originalColumnGroup.getColGroupDef();
      };
      ColumnGroup2.prototype.isPadding = function() {
        return this.originalColumnGroup.isPadding();
      };
      ColumnGroup2.prototype.isExpandable = function() {
        return this.originalColumnGroup.isExpandable();
      };
      ColumnGroup2.prototype.isExpanded = function() {
        return this.originalColumnGroup.isExpanded();
      };
      ColumnGroup2.prototype.setExpanded = function(expanded) {
        this.originalColumnGroup.setExpanded(expanded);
      };
      ColumnGroup2.prototype.addDisplayedLeafColumns = function(leafColumns) {
        this.displayedChildren.forEach(function(child) {
          if (child instanceof Column) {
            leafColumns.push(child);
          } else if (child instanceof ColumnGroup2) {
            child.addDisplayedLeafColumns(leafColumns);
          }
        });
      };
      ColumnGroup2.prototype.addLeafColumns = function(leafColumns) {
        this.children.forEach(function(child) {
          if (child instanceof Column) {
            leafColumns.push(child);
          } else if (child instanceof ColumnGroup2) {
            child.addLeafColumns(leafColumns);
          }
        });
      };
      ColumnGroup2.prototype.getChildren = function() {
        return this.children;
      };
      ColumnGroup2.prototype.getColumnGroupShow = function() {
        return this.originalColumnGroup.getColumnGroupShow();
      };
      ColumnGroup2.prototype.getOriginalColumnGroup = function() {
        return this.originalColumnGroup;
      };
      ColumnGroup2.prototype.getPaddingLevel = function() {
        var parent = this.getParent();
        if (!this.isPadding() || !parent || !parent.isPadding()) {
          return 0;
        }
        return 1 + parent.getPaddingLevel();
      };
      ColumnGroup2.prototype.calculateDisplayedColumns = function() {
        var _this = this;
        this.displayedChildren = [];
        var topLevelGroup = this;
        if (this.isPadding()) {
          while (topLevelGroup.getParent() && topLevelGroup.isPadding()) {
            topLevelGroup = topLevelGroup.getParent();
          }
        }
        var isExpandable = topLevelGroup.originalColumnGroup.isExpandable();
        if (!isExpandable) {
          this.displayedChildren = this.children;
        } else {
          this.children.forEach(function(abstractColumn) {
            var headerGroupShow = abstractColumn.getColumnGroupShow();
            switch (headerGroupShow) {
              case ColumnGroup2.HEADER_GROUP_SHOW_OPEN:
                if (topLevelGroup.originalColumnGroup.isExpanded()) {
                  _this.displayedChildren.push(abstractColumn);
                }
                break;
              case ColumnGroup2.HEADER_GROUP_SHOW_CLOSED:
                if (!topLevelGroup.originalColumnGroup.isExpanded()) {
                  _this.displayedChildren.push(abstractColumn);
                }
                break;
              default:
                if (!(abstractColumn instanceof ColumnGroup2 && abstractColumn.isPadding() && !abstractColumn.displayedChildren.length)) {
                  _this.displayedChildren.push(abstractColumn);
                }
                break;
            }
          });
        }
        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED));
      };
      ColumnGroup2.HEADER_GROUP_SHOW_OPEN = "open";
      ColumnGroup2.HEADER_GROUP_SHOW_CLOSED = "closed";
      ColumnGroup2.HEADER_GROUP_PADDING = "padding";
      ColumnGroup2.EVENT_LEFT_CHANGED = "leftChanged";
      ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED = "displayedChildrenChanged";
      __decorate$2([
        Autowired("gridOptionsWrapper")
      ], ColumnGroup2.prototype, "gridOptionsWrapper", void 0);
      return ColumnGroup2;
    }();
    var OriginalColumnGroup = function() {
      function OriginalColumnGroup2(colGroupDef, groupId, padding, level) {
        this.localEventService = new EventService();
        this.expandable = false;
        this.colGroupDef = colGroupDef;
        this.groupId = groupId;
        this.expanded = colGroupDef && !!colGroupDef.openByDefault;
        this.padding = padding;
        this.level = level;
      }
      OriginalColumnGroup2.prototype.setOriginalParent = function(originalParent) {
        this.originalParent = originalParent;
      };
      OriginalColumnGroup2.prototype.getOriginalParent = function() {
        return this.originalParent;
      };
      OriginalColumnGroup2.prototype.getLevel = function() {
        return this.level;
      };
      OriginalColumnGroup2.prototype.isVisible = function() {
        if (this.children) {
          return this.children.some(function(child) {
            return child.isVisible();
          });
        }
        return false;
      };
      OriginalColumnGroup2.prototype.isPadding = function() {
        return this.padding;
      };
      OriginalColumnGroup2.prototype.setExpanded = function(expanded) {
        this.expanded = expanded === void 0 ? false : expanded;
        var event = {
          type: OriginalColumnGroup2.EVENT_EXPANDED_CHANGED
        };
        this.localEventService.dispatchEvent(event);
      };
      OriginalColumnGroup2.prototype.isExpandable = function() {
        return this.expandable;
      };
      OriginalColumnGroup2.prototype.isExpanded = function() {
        return this.expanded;
      };
      OriginalColumnGroup2.prototype.getGroupId = function() {
        return this.groupId;
      };
      OriginalColumnGroup2.prototype.getId = function() {
        return this.getGroupId();
      };
      OriginalColumnGroup2.prototype.setChildren = function(children) {
        this.children = children;
      };
      OriginalColumnGroup2.prototype.getChildren = function() {
        return this.children;
      };
      OriginalColumnGroup2.prototype.getColGroupDef = function() {
        return this.colGroupDef;
      };
      OriginalColumnGroup2.prototype.getLeafColumns = function() {
        var result = [];
        this.addLeafColumns(result);
        return result;
      };
      OriginalColumnGroup2.prototype.addLeafColumns = function(leafColumns) {
        if (!this.children) {
          return;
        }
        this.children.forEach(function(child) {
          if (child instanceof Column) {
            leafColumns.push(child);
          } else if (child instanceof OriginalColumnGroup2) {
            child.addLeafColumns(leafColumns);
          }
        });
      };
      OriginalColumnGroup2.prototype.getColumnGroupShow = function() {
        return this.padding ? ColumnGroup.HEADER_GROUP_PADDING : this.colGroupDef.columnGroupShow;
      };
      OriginalColumnGroup2.prototype.setupExpandable = function() {
        var _this = this;
        this.setExpandable();
        this.getLeafColumns().forEach(function(col) {
          return col.addEventListener(Column.EVENT_VISIBLE_CHANGED, _this.onColumnVisibilityChanged.bind(_this));
        });
      };
      OriginalColumnGroup2.prototype.setExpandable = function() {
        if (this.isPadding()) {
          return;
        }
        var atLeastOneShowingWhenOpen = false;
        var atLeastOneShowingWhenClosed = false;
        var atLeastOneChangeable = false;
        var children = this.findChildren();
        for (var i = 0, j = children.length; i < j; i++) {
          var abstractColumn = children[i];
          if (!abstractColumn.isVisible()) {
            continue;
          }
          var headerGroupShow = abstractColumn.getColumnGroupShow();
          if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_OPEN) {
            atLeastOneShowingWhenOpen = true;
            atLeastOneChangeable = true;
          } else if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {
            atLeastOneShowingWhenClosed = true;
            atLeastOneChangeable = true;
          } else {
            atLeastOneShowingWhenOpen = true;
            atLeastOneShowingWhenClosed = true;
            if (headerGroupShow === ColumnGroup.HEADER_GROUP_PADDING) {
              var column = abstractColumn;
              atLeastOneChangeable = atLeastOneChangeable || column.children.some(function(child) {
                return child.getColumnGroupShow() !== void 0;
              });
            }
          }
        }
        var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;
        if (this.expandable !== expandable) {
          this.expandable = expandable;
          var event_1 = {
            type: OriginalColumnGroup2.EVENT_EXPANDABLE_CHANGED
          };
          this.localEventService.dispatchEvent(event_1);
        }
      };
      OriginalColumnGroup2.prototype.findChildren = function() {
        var children = this.children;
        var firstChild = children[0];
        if (firstChild && (!firstChild.isPadding || !firstChild.isPadding())) {
          return children;
        }
        while (children.length === 1 && children[0] instanceof OriginalColumnGroup2) {
          children = children[0].children;
        }
        return children;
      };
      OriginalColumnGroup2.prototype.onColumnVisibilityChanged = function() {
        this.setExpandable();
      };
      OriginalColumnGroup2.prototype.addEventListener = function(eventType, listener) {
        this.localEventService.addEventListener(eventType, listener);
      };
      OriginalColumnGroup2.prototype.removeEventListener = function(eventType, listener) {
        this.localEventService.removeEventListener(eventType, listener);
      };
      OriginalColumnGroup2.EVENT_EXPANDED_CHANGED = "expandedChanged";
      OriginalColumnGroup2.EVENT_EXPANDABLE_CHANGED = "expandableChanged";
      return OriginalColumnGroup2;
    }();
    var DefaultColumnTypes = {
      numericColumn: {
        headerClass: "ag-right-aligned-header",
        cellClass: "ag-right-aligned-cell"
      },
      rightAligned: {
        headerClass: "ag-right-aligned-header",
        cellClass: "ag-right-aligned-cell"
      }
    };
    var AG_GRID_STOP_PROPAGATION = "__ag_Grid_Stop_Propagation";
    var PASSIVE_EVENTS = ["touchstart", "touchend", "touchmove", "touchcancel"];
    var OUTSIDE_ANGULAR_EVENTS = ["mouseover", "mouseout", "mouseenter", "mouseleave"];
    var supports = {};
    function stopPropagationForAgGrid(event) {
      event[AG_GRID_STOP_PROPAGATION] = true;
    }
    function isStopPropagationForAgGrid(event) {
      return event[AG_GRID_STOP_PROPAGATION] === true;
    }
    var isEventSupported = function() {
      var tags = {
        select: "input",
        change: "input",
        submit: "form",
        reset: "form",
        error: "img",
        load: "img",
        abort: "img"
      };
      var isEventSupported2 = function(eventName) {
        if (typeof supports[eventName] === "boolean") {
          return supports[eventName];
        }
        var el = document.createElement(tags[eventName] || "div");
        eventName = "on" + eventName;
        var isSupported = eventName in el;
        if (!isSupported) {
          el.setAttribute(eventName, "return;");
          isSupported = typeof el[eventName] == "function";
        }
        el = null;
        return supports[eventName] = isSupported;
      };
      return isEventSupported2;
    }();
    function getCellCompForEvent(gridOptionsWrapper, event) {
      var sourceElement = getTarget(event);
      while (sourceElement) {
        var renderedCell = gridOptionsWrapper.getDomData(sourceElement, "cellComp");
        if (renderedCell) {
          return renderedCell;
        }
        sourceElement = sourceElement.parentElement;
      }
      return null;
    }
    function addChangeListener(element, listener) {
      element.addEventListener("changed", listener);
      element.addEventListener("paste", listener);
      element.addEventListener("input", listener);
      element.addEventListener("keydown", listener);
      element.addEventListener("keyup", listener);
    }
    function getTarget(event) {
      var eventNoType = event;
      return eventNoType.target || eventNoType.srcElement;
    }
    function isElementInEventPath(element, event) {
      if (!event || !element) {
        return false;
      }
      return getEventPath(event).indexOf(element) >= 0;
    }
    function createEventPath(event) {
      var res = [];
      var pointer = getTarget(event);
      while (pointer) {
        res.push(pointer);
        pointer = pointer.parentElement;
      }
      return res;
    }
    function addAgGridEventPath(event) {
      event.__agGridEventPath = getEventPath(event);
    }
    function getEventPath(event) {
      var eventNoType = event;
      if (eventNoType.deepPath) {
        return eventNoType.deepPath();
      }
      if (eventNoType.path) {
        return eventNoType.path;
      }
      if (eventNoType.composedPath) {
        return eventNoType.composedPath();
      }
      if (eventNoType.__agGridEventPath) {
        return eventNoType.__agGridEventPath;
      }
      return createEventPath(event);
    }
    function addSafePassiveEventListener(frameworkOverrides, eElement, event, listener) {
      var isPassive = includes(PASSIVE_EVENTS, event);
      var isOutsideAngular = includes(OUTSIDE_ANGULAR_EVENTS, event);
      var options = isPassive ? { passive: true } : void 0;
      if (isOutsideAngular) {
        if (frameworkOverrides && frameworkOverrides.addEventListenerOutsideAngular) {
          frameworkOverrides.addEventListenerOutsideAngular(eElement, event, listener, options);
        }
      } else {
        eElement.addEventListener(event, listener, options);
      }
    }
    var EventUtils = Object.freeze({
      __proto__: null,
      stopPropagationForAgGrid,
      isStopPropagationForAgGrid,
      isEventSupported,
      getCellCompForEvent,
      addChangeListener,
      getTarget,
      isElementInEventPath,
      createEventPath,
      addAgGridEventPath,
      getEventPath,
      addSafePassiveEventListener
    });
    var __decorate$3 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var BeanStub = function() {
      function BeanStub2() {
        var _this = this;
        this.destroyFunctions = [];
        this.destroyed = false;
        this.__v_skip = true;
        this.getContext = function() {
          return _this.context;
        };
        this.isAlive = function() {
          return !_this.destroyed;
        };
      }
      BeanStub2.prototype.getFrameworkOverrides = function() {
        return this.frameworkOverrides;
      };
      BeanStub2.prototype.destroy = function() {
        this.destroyFunctions.forEach(function(func) {
          return func();
        });
        this.destroyFunctions.length = 0;
        this.destroyed = true;
        this.dispatchEvent({ type: BeanStub2.EVENT_DESTROYED });
      };
      BeanStub2.prototype.addEventListener = function(eventType, listener) {
        if (!this.localEventService) {
          this.localEventService = new EventService();
        }
        this.localEventService.addEventListener(eventType, listener);
      };
      BeanStub2.prototype.removeEventListener = function(eventType, listener) {
        if (this.localEventService) {
          this.localEventService.removeEventListener(eventType, listener);
        }
      };
      BeanStub2.prototype.dispatchEventAsync = function(event) {
        var _this = this;
        window.setTimeout(function() {
          return _this.dispatchEvent(event);
        }, 0);
      };
      BeanStub2.prototype.dispatchEvent = function(event) {
        if (this.localEventService) {
          this.localEventService.dispatchEvent(event);
        }
      };
      BeanStub2.prototype.addManagedListener = function(object, event, listener) {
        var _this = this;
        if (this.destroyed) {
          return;
        }
        if (object instanceof HTMLElement) {
          addSafePassiveEventListener(this.getFrameworkOverrides(), object, event, listener);
        } else {
          object.addEventListener(event, listener);
        }
        var destroyFunc = function() {
          object.removeEventListener(event, listener);
          _this.destroyFunctions = _this.destroyFunctions.filter(function(fn) {
            return fn !== destroyFunc;
          });
          return null;
        };
        this.destroyFunctions.push(destroyFunc);
        return destroyFunc;
      };
      BeanStub2.prototype.addDestroyFunc = function(func) {
        if (this.isAlive()) {
          this.destroyFunctions.push(func);
        } else {
          func();
        }
      };
      BeanStub2.prototype.createManagedBean = function(bean, context) {
        var res = this.createBean(bean, context);
        this.addDestroyFunc(this.destroyBean.bind(this, bean, context));
        return res;
      };
      BeanStub2.prototype.createBean = function(bean, context, afterPreCreateCallback) {
        return (context || this.getContext()).createBean(bean, afterPreCreateCallback);
      };
      BeanStub2.prototype.destroyBean = function(bean, context) {
        return (context || this.getContext()).destroyBean(bean);
      };
      BeanStub2.prototype.destroyBeans = function(beans, context) {
        var _this = this;
        if (beans) {
          forEach(beans, function(bean) {
            return _this.destroyBean(bean, context);
          });
        }
        return [];
      };
      BeanStub2.EVENT_DESTROYED = "destroyed";
      __decorate$3([
        Autowired("frameworkOverrides")
      ], BeanStub2.prototype, "frameworkOverrides", void 0);
      __decorate$3([
        Autowired("context")
      ], BeanStub2.prototype, "context", void 0);
      __decorate$3([
        Autowired("eventService")
      ], BeanStub2.prototype, "eventService", void 0);
      __decorate$3([
        PreDestroy
      ], BeanStub2.prototype, "destroy", null);
      return BeanStub2;
    }();
    var __extends = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$4 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$1 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var ColumnFactory = function(_super) {
      __extends(ColumnFactory2, _super);
      function ColumnFactory2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ColumnFactory2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("ColumnFactory");
      };
      ColumnFactory2.prototype.createColumnTree = function(defs, primaryColumns, existingColumns) {
        var columnKeyCreator = new ColumnKeyCreator();
        if (existingColumns) {
          var existingKeys = existingColumns.map(function(col) {
            return col.getId();
          });
          columnKeyCreator.addExistingKeys(existingKeys);
        }
        var existingColsCopy = existingColumns ? existingColumns.slice() : null;
        var unbalancedTree = this.recursivelyCreateColumns(defs, 0, primaryColumns, existingColsCopy, columnKeyCreator, null);
        var treeDept = this.findMaxDept(unbalancedTree, 0);
        this.logger.log("Number of levels for grouped columns is " + treeDept);
        var columnTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);
        var deptFirstCallback = function(child, parent) {
          if (child instanceof OriginalColumnGroup) {
            child.setupExpandable();
          }
          child.setOriginalParent(parent);
        };
        this.columnUtils.depthFirstOriginalTreeSearch(null, columnTree, deptFirstCallback);
        return {
          columnTree,
          treeDept
        };
      };
      ColumnFactory2.prototype.createForAutoGroups = function(autoGroupCols, gridBalancedTree) {
        var _this = this;
        var autoColBalancedTree = [];
        autoGroupCols.forEach(function(col) {
          var fakeTreeItem = _this.createAutoGroupTreeItem(gridBalancedTree, col);
          autoColBalancedTree.push(fakeTreeItem);
        });
        return autoColBalancedTree;
      };
      ColumnFactory2.prototype.createAutoGroupTreeItem = function(balancedColumnTree, column) {
        var dept = this.findDepth(balancedColumnTree);
        var nextChild = column;
        for (var i = dept - 1; i >= 0; i--) {
          var autoGroup = new OriginalColumnGroup(null, "FAKE_PATH_" + column.getId() + "}_" + i, true, i);
          this.context.createBean(autoGroup);
          autoGroup.setChildren([nextChild]);
          nextChild.setOriginalParent(autoGroup);
          nextChild = autoGroup;
        }
        return nextChild;
      };
      ColumnFactory2.prototype.findDepth = function(balancedColumnTree) {
        var dept = 0;
        var pointer = balancedColumnTree;
        while (pointer && pointer[0] && pointer[0] instanceof OriginalColumnGroup) {
          dept++;
          pointer = pointer[0].getChildren();
        }
        return dept;
      };
      ColumnFactory2.prototype.balanceColumnTree = function(unbalancedTree, currentDept, columnDept, columnKeyCreator) {
        var result = [];
        for (var i = 0; i < unbalancedTree.length; i++) {
          var child = unbalancedTree[i];
          if (child instanceof OriginalColumnGroup) {
            var originalGroup = child;
            var newChildren = this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);
            originalGroup.setChildren(newChildren);
            result.push(originalGroup);
          } else {
            var firstPaddedGroup = void 0;
            var currentPaddedGroup = void 0;
            for (var j = columnDept - 1; j >= currentDept; j--) {
              var newColId = columnKeyCreator.getUniqueKey(null, null);
              var colGroupDefMerged = this.createMergedColGroupDef(null);
              var paddedGroup = new OriginalColumnGroup(colGroupDefMerged, newColId, true, currentDept);
              this.context.createBean(paddedGroup);
              if (currentPaddedGroup) {
                currentPaddedGroup.setChildren([paddedGroup]);
              }
              currentPaddedGroup = paddedGroup;
              if (!firstPaddedGroup) {
                firstPaddedGroup = currentPaddedGroup;
              }
            }
            if (firstPaddedGroup) {
              result.push(firstPaddedGroup);
              var hasGroups = unbalancedTree.some(function(child2) {
                return child2 instanceof OriginalColumnGroup;
              });
              if (hasGroups) {
                currentPaddedGroup.setChildren([child]);
                continue;
              } else {
                currentPaddedGroup.setChildren(unbalancedTree);
                break;
              }
            }
            result.push(child);
          }
        }
        return result;
      };
      ColumnFactory2.prototype.findMaxDept = function(treeChildren, dept) {
        var maxDeptThisLevel = dept;
        for (var i = 0; i < treeChildren.length; i++) {
          var abstractColumn = treeChildren[i];
          if (abstractColumn instanceof OriginalColumnGroup) {
            var originalGroup = abstractColumn;
            var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);
            if (maxDeptThisLevel < newDept) {
              maxDeptThisLevel = newDept;
            }
          }
        }
        return maxDeptThisLevel;
      };
      ColumnFactory2.prototype.recursivelyCreateColumns = function(defs, level, primaryColumns, existingColsCopy, columnKeyCreator, parent) {
        var _this = this;
        var result = [];
        if (!defs) {
          return result;
        }
        defs.forEach(function(def) {
          var newGroupOrColumn;
          if (_this.isColumnGroup(def)) {
            newGroupOrColumn = _this.createColumnGroup(primaryColumns, def, level, existingColsCopy, columnKeyCreator, parent);
          } else {
            newGroupOrColumn = _this.createColumn(primaryColumns, def, existingColsCopy, columnKeyCreator, parent);
          }
          result.push(newGroupOrColumn);
        });
        return result;
      };
      ColumnFactory2.prototype.createColumnGroup = function(primaryColumns, colGroupDef, level, existingColumns, columnKeyCreator, parent) {
        var colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);
        var groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId, null);
        var originalGroup = new OriginalColumnGroup(colGroupDefMerged, groupId, false, level);
        this.context.createBean(originalGroup);
        var children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, primaryColumns, existingColumns, columnKeyCreator, originalGroup);
        originalGroup.setChildren(children);
        return originalGroup;
      };
      ColumnFactory2.prototype.createMergedColGroupDef = function(colGroupDef) {
        var colGroupDefMerged = {};
        assign(colGroupDefMerged, this.gridOptionsWrapper.getDefaultColGroupDef());
        assign(colGroupDefMerged, colGroupDef);
        this.checkForDeprecatedItems(colGroupDefMerged);
        return colGroupDefMerged;
      };
      ColumnFactory2.prototype.createColumn = function(primaryColumns, colDef, existingColsCopy, columnKeyCreator, parent) {
        var colDefMerged = this.mergeColDefs(colDef);
        this.checkForDeprecatedItems(colDefMerged);
        var column = this.findExistingColumn(colDef, existingColsCopy);
        if (!column) {
          var colId = columnKeyCreator.getUniqueKey(colDefMerged.colId, colDefMerged.field);
          column = new Column(colDefMerged, colDef, colId, primaryColumns);
          this.context.createBean(column);
        } else {
          column.setColDef(colDefMerged, colDef);
          this.applyColumnState(column, colDefMerged);
        }
        return column;
      };
      ColumnFactory2.prototype.applyColumnState = function(column, colDef) {
        var flex = attrToNumber(colDef.flex);
        if (flex !== void 0) {
          column.setFlex(flex);
        }
        var noFlexThisCol = column.getFlex() <= 0;
        if (noFlexThisCol) {
          var width = attrToNumber(colDef.width);
          if (width != null) {
            column.setActualWidth(width);
          }
        }
        if (colDef.sort !== void 0) {
          if (colDef.sort == Constants.SORT_ASC || colDef.sort == Constants.SORT_DESC) {
            column.setSort(colDef.sort);
          } else {
            column.setSort(void 0);
          }
        }
        var sortIndex = attrToNumber(colDef.sortIndex);
        if (sortIndex !== void 0) {
          column.setSortIndex(sortIndex);
        }
        var hide = attrToBoolean(colDef.hide);
        if (hide !== void 0) {
          column.setVisible(!hide);
        }
        if (colDef.pinned !== void 0) {
          column.setPinned(colDef.pinned);
        }
      };
      ColumnFactory2.prototype.findExistingColumn = function(newColDef, existingColsCopy) {
        var res = find(existingColsCopy, function(existingCol) {
          var existingColDef = existingCol.getUserProvidedColDef();
          if (!existingColDef) {
            return false;
          }
          var newHasId = newColDef.colId != null;
          var newHasField = newColDef.field != null;
          if (newHasId) {
            return existingCol.getId() === newColDef.colId;
          }
          if (newHasField) {
            return existingColDef.field === newColDef.field;
          }
          if (existingColDef === newColDef) {
            return true;
          }
          return false;
        });
        if (res) {
          removeFromArray(existingColsCopy, res);
        }
        return res;
      };
      ColumnFactory2.prototype.mergeColDefs = function(colDef) {
        var colDefMerged = {};
        var defaultColDef = this.gridOptionsWrapper.getDefaultColDef();
        mergeDeep(colDefMerged, defaultColDef, true, true);
        if (colDef.type || defaultColDef && defaultColDef.type) {
          var columnType = colDef.type ? colDef.type : defaultColDef.type;
          this.assignColumnTypes(columnType, colDefMerged);
        }
        mergeDeep(colDefMerged, colDef, true, true);
        return colDefMerged;
      };
      ColumnFactory2.prototype.assignColumnTypes = function(type, colDefMerged) {
        var typeKeys;
        if (type instanceof Array) {
          var invalidArray = type.some(function(a) {
            return typeof a !== "string";
          });
          if (invalidArray) {
            console.warn("ag-grid: if colDef.type is supplied an array it should be of type 'string[]'");
          } else {
            typeKeys = type;
          }
        } else if (typeof type === "string") {
          typeKeys = type.split(",");
        } else {
          console.warn("ag-grid: colDef.type should be of type 'string' | 'string[]'");
          return;
        }
        var allColumnTypes = assign({}, DefaultColumnTypes);
        var userTypes = this.gridOptionsWrapper.getColumnTypes() || {};
        iterateObject(userTypes, function(key, value) {
          if (key in allColumnTypes) {
            console.warn("ag-Grid: the column type '" + key + "' is a default column type and cannot be overridden.");
          } else {
            allColumnTypes[key] = value;
          }
        });
        typeKeys.forEach(function(t) {
          var typeColDef = allColumnTypes[t.trim()];
          if (typeColDef) {
            mergeDeep(colDefMerged, typeColDef, true, true);
          } else {
            console.warn("ag-grid: colDef.type '" + t + "' does not correspond to defined gridOptions.columnTypes");
          }
        });
      };
      ColumnFactory2.prototype.checkForDeprecatedItems = function(colDef) {
        if (colDef) {
          var colDefNoType = colDef;
          if (colDefNoType.group !== void 0) {
            console.warn("ag-grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3");
          }
          if (colDefNoType.headerGroup !== void 0) {
            console.warn("ag-grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3");
          }
          if (colDefNoType.headerGroupShow !== void 0) {
            console.warn("ag-grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3");
          }
          if (colDefNoType.suppressRowGroup !== void 0) {
            console.warn("ag-grid: colDef.suppressRowGroup is deprecated, please use colDef.type instead");
          }
          if (colDefNoType.suppressAggregation !== void 0) {
            console.warn("ag-grid: colDef.suppressAggregation is deprecated, please use colDef.type instead");
          }
          if (colDefNoType.suppressRowGroup || colDefNoType.suppressAggregation) {
            console.warn("ag-grid: colDef.suppressAggregation and colDef.suppressRowGroup are deprecated, use allowRowGroup, allowPivot and allowValue instead");
          }
          if (colDefNoType.displayName) {
            console.warn("ag-grid: Found displayName " + colDefNoType.displayName + ", please use headerName instead, displayName is deprecated.");
            colDefNoType.headerName = colDefNoType.displayName;
          }
        }
      };
      ColumnFactory2.prototype.isColumnGroup = function(abstractColDef) {
        return abstractColDef.children !== void 0;
      };
      __decorate$4([
        Autowired("gridOptionsWrapper")
      ], ColumnFactory2.prototype, "gridOptionsWrapper", void 0);
      __decorate$4([
        Autowired("columnUtils")
      ], ColumnFactory2.prototype, "columnUtils", void 0);
      __decorate$4([
        __param$1(0, Qualifier("loggerFactory"))
      ], ColumnFactory2.prototype, "setBeans", null);
      ColumnFactory2 = __decorate$4([
        Bean("columnFactory")
      ], ColumnFactory2);
      return ColumnFactory2;
    }(BeanStub);
    var Events = function() {
      function Events2() {
      }
      Events2.EVENT_COLUMN_EVERYTHING_CHANGED = "columnEverythingChanged";
      Events2.EVENT_NEW_COLUMNS_LOADED = "newColumnsLoaded";
      Events2.EVENT_COLUMN_PIVOT_MODE_CHANGED = "columnPivotModeChanged";
      Events2.EVENT_COLUMN_ROW_GROUP_CHANGED = "columnRowGroupChanged";
      Events2.EVENT_EXPAND_COLLAPSE_ALL = "expandOrCollapseAll";
      Events2.EVENT_COLUMN_PIVOT_CHANGED = "columnPivotChanged";
      Events2.EVENT_GRID_COLUMNS_CHANGED = "gridColumnsChanged";
      Events2.EVENT_COLUMN_VALUE_CHANGED = "columnValueChanged";
      Events2.EVENT_COLUMN_MOVED = "columnMoved";
      Events2.EVENT_COLUMN_VISIBLE = "columnVisible";
      Events2.EVENT_COLUMN_PINNED = "columnPinned";
      Events2.EVENT_COLUMN_GROUP_OPENED = "columnGroupOpened";
      Events2.EVENT_COLUMN_RESIZED = "columnResized";
      Events2.EVENT_DISPLAYED_COLUMNS_CHANGED = "displayedColumnsChanged";
      Events2.EVENT_VIRTUAL_COLUMNS_CHANGED = "virtualColumnsChanged";
      Events2.EVENT_ROW_GROUP_OPENED = "rowGroupOpened";
      Events2.EVENT_ROW_DATA_CHANGED = "rowDataChanged";
      Events2.EVENT_ROW_DATA_UPDATED = "rowDataUpdated";
      Events2.EVENT_PINNED_ROW_DATA_CHANGED = "pinnedRowDataChanged";
      Events2.EVENT_RANGE_SELECTION_CHANGED = "rangeSelectionChanged";
      Events2.EVENT_CHART_CREATED = "chartCreated";
      Events2.EVENT_CHART_RANGE_SELECTION_CHANGED = "chartRangeSelectionChanged";
      Events2.EVENT_CHART_OPTIONS_CHANGED = "chartOptionsChanged";
      Events2.EVENT_CHART_DESTROYED = "chartDestroyed";
      Events2.EVENT_TOOL_PANEL_VISIBLE_CHANGED = "toolPanelVisibleChanged";
      Events2.EVENT_MODEL_UPDATED = "modelUpdated";
      Events2.EVENT_PASTE_START = "pasteStart";
      Events2.EVENT_PASTE_END = "pasteEnd";
      Events2.EVENT_FILL_START = "fillStart";
      Events2.EVENT_FILL_END = "fillEnd";
      Events2.EVENT_CELL_CLICKED = "cellClicked";
      Events2.EVENT_CELL_DOUBLE_CLICKED = "cellDoubleClicked";
      Events2.EVENT_CELL_MOUSE_DOWN = "cellMouseDown";
      Events2.EVENT_CELL_CONTEXT_MENU = "cellContextMenu";
      Events2.EVENT_CELL_VALUE_CHANGED = "cellValueChanged";
      Events2.EVENT_ROW_VALUE_CHANGED = "rowValueChanged";
      Events2.EVENT_CELL_FOCUSED = "cellFocused";
      Events2.EVENT_ROW_SELECTED = "rowSelected";
      Events2.EVENT_SELECTION_CHANGED = "selectionChanged";
      Events2.EVENT_CELL_KEY_DOWN = "cellKeyDown";
      Events2.EVENT_CELL_KEY_PRESS = "cellKeyPress";
      Events2.EVENT_CELL_MOUSE_OVER = "cellMouseOver";
      Events2.EVENT_CELL_MOUSE_OUT = "cellMouseOut";
      Events2.EVENT_FILTER_CHANGED = "filterChanged";
      Events2.EVENT_FILTER_MODIFIED = "filterModified";
      Events2.EVENT_FILTER_OPENED = "filterOpened";
      Events2.EVENT_SORT_CHANGED = "sortChanged";
      Events2.EVENT_VIRTUAL_ROW_REMOVED = "virtualRowRemoved";
      Events2.EVENT_ROW_CLICKED = "rowClicked";
      Events2.EVENT_ROW_DOUBLE_CLICKED = "rowDoubleClicked";
      Events2.EVENT_GRID_READY = "gridReady";
      Events2.EVENT_GRID_SIZE_CHANGED = "gridSizeChanged";
      Events2.EVENT_VIEWPORT_CHANGED = "viewportChanged";
      Events2.EVENT_SCROLLBAR_WIDTH_CHANGED = "scrollbarWidthChanged";
      Events2.EVENT_FIRST_DATA_RENDERED = "firstDataRendered";
      Events2.EVENT_DRAG_STARTED = "dragStarted";
      Events2.EVENT_DRAG_STOPPED = "dragStopped";
      Events2.EVENT_CHECKBOX_CHANGED = "checkboxChanged";
      Events2.EVENT_ROW_EDITING_STARTED = "rowEditingStarted";
      Events2.EVENT_ROW_EDITING_STOPPED = "rowEditingStopped";
      Events2.EVENT_CELL_EDITING_STARTED = "cellEditingStarted";
      Events2.EVENT_CELL_EDITING_STOPPED = "cellEditingStopped";
      Events2.EVENT_BODY_SCROLL = "bodyScroll";
      Events2.EVENT_ANIMATION_QUEUE_EMPTY = "animationQueueEmpty";
      Events2.EVENT_HEIGHT_SCALE_CHANGED = "heightScaleChanged";
      Events2.EVENT_PAGINATION_CHANGED = "paginationChanged";
      Events2.EVENT_COMPONENT_STATE_CHANGED = "componentStateChanged";
      Events2.EVENT_BODY_HEIGHT_CHANGED = "bodyHeightChanged";
      Events2.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = "displayedColumnsWidthChanged";
      Events2.EVENT_SCROLL_VISIBILITY_CHANGED = "scrollVisibilityChanged";
      Events2.EVENT_COLUMN_HOVER_CHANGED = "columnHoverChanged";
      Events2.EVENT_FLASH_CELLS = "flashCells";
      Events2.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED = "paginationPixelOffsetChanged";
      Events2.EVENT_ROW_DRAG_ENTER = "rowDragEnter";
      Events2.EVENT_ROW_DRAG_MOVE = "rowDragMove";
      Events2.EVENT_ROW_DRAG_LEAVE = "rowDragLeave";
      Events2.EVENT_ROW_DRAG_END = "rowDragEnd";
      Events2.EVENT_POPUP_TO_FRONT = "popupToFront";
      Events2.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = "columnRowGroupChangeRequest";
      Events2.EVENT_COLUMN_PIVOT_CHANGE_REQUEST = "columnPivotChangeRequest";
      Events2.EVENT_COLUMN_VALUE_CHANGE_REQUEST = "columnValueChangeRequest";
      Events2.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = "columnAggFuncChangeRequest";
      Events2.EVENT_KEYBOARD_FOCUS = "keyboardFocus";
      Events2.EVENT_MOUSE_FOCUS = "mouseFocus";
      return Events2;
    }();
    var GroupInstanceIdCreator = function() {
      function GroupInstanceIdCreator2() {
        this.existingIds = {};
      }
      GroupInstanceIdCreator2.prototype.getInstanceIdForKey = function(key) {
        var lastResult = this.existingIds[key];
        var result;
        if (typeof lastResult !== "number") {
          result = 0;
        } else {
          result = lastResult + 1;
        }
        this.existingIds[key] = result;
        return result;
      };
      return GroupInstanceIdCreator2;
    }();
    var reUnescapedHtml = /[&<>"']/g;
    var HTML_ESCAPES = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    function utf8_encode(s) {
      var stringFromCharCode = String.fromCharCode;
      function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length2 = string.length;
        var value;
        var extra;
        while (counter < length2) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length2) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function checkScalarValue(codePoint2) {
        if (codePoint2 >= 55296 && codePoint2 <= 57343) {
          throw Error("Lone surrogate U+" + codePoint2.toString(16).toUpperCase() + " is not a scalar value");
        }
      }
      function createByte(codePoint2, shift) {
        return stringFromCharCode(codePoint2 >> shift & 63 | 128);
      }
      function encodeCodePoint(codePoint2) {
        if ((codePoint2 & 4294967168) == 0) {
          return stringFromCharCode(codePoint2);
        }
        var symbol = "";
        if ((codePoint2 & 4294965248) == 0) {
          symbol = stringFromCharCode(codePoint2 >> 6 & 31 | 192);
        } else if ((codePoint2 & 4294901760) == 0) {
          checkScalarValue(codePoint2);
          symbol = stringFromCharCode(codePoint2 >> 12 & 15 | 224);
          symbol += createByte(codePoint2, 6);
        } else if ((codePoint2 & 4292870144) == 0) {
          symbol = stringFromCharCode(codePoint2 >> 18 & 7 | 240);
          symbol += createByte(codePoint2, 12);
          symbol += createByte(codePoint2, 6);
        }
        symbol += stringFromCharCode(codePoint2 & 63 | 128);
        return symbol;
      }
      var codePoints = ucs2decode(s);
      var length = codePoints.length;
      var index = -1;
      var codePoint;
      var byteString = "";
      while (++index < length) {
        codePoint = codePoints[index];
        byteString += encodeCodePoint(codePoint);
      }
      return byteString;
    }
    function camelCaseToHyphen(str) {
      if (str === null || str === void 0) {
        return null;
      }
      return str.replace(/([A-Z])/g, function(g) {
        return "-" + g[0].toLowerCase();
      });
    }
    function hyphenToCamelCase(str) {
      if (str === null || str === void 0) {
        return null;
      }
      return str.replace(/-([a-z])/g, function(g) {
        return g[1].toUpperCase();
      });
    }
    function capitalise(str) {
      return str[0].toUpperCase() + str.substr(1).toLowerCase();
    }
    function escapeString(toEscape) {
      return toEscape == null || !toEscape.replace ? toEscape : toEscape.replace(reUnescapedHtml, function(chr) {
        return HTML_ESCAPES[chr];
      });
    }
    function camelCaseToHumanText(camelCase) {
      if (!camelCase || camelCase == null) {
        return null;
      }
      var rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;
      var words = camelCase.replace(rex, "$1$4 $2$3$5").replace(".", " ").split(" ");
      return words.map(function(word) {
        return word.substring(0, 1).toUpperCase() + (word.length > 1 ? word.substring(1, word.length) : "");
      }).join(" ");
    }
    function startsWith(str, matchStart) {
      if (str === matchStart) {
        return true;
      }
      return str != null && str.slice(0, matchStart.length) === matchStart;
    }
    var StringUtils = Object.freeze({
      __proto__: null,
      utf8_encode,
      camelCaseToHyphen,
      hyphenToCamelCase,
      capitalise,
      escapeString,
      camelCaseToHumanText,
      startsWith
    });
    var __extends$1 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$5 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$2 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var ColumnController = function(_super) {
      __extends$1(ColumnController2, _super);
      function ColumnController2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.primaryHeaderRowCount = 0;
        _this.secondaryHeaderRowCount = 0;
        _this.secondaryColumnsPresent = false;
        _this.gridHeaderRowCount = 0;
        _this.displayedLeftColumns = [];
        _this.displayedRightColumns = [];
        _this.displayedCenterColumns = [];
        _this.allDisplayedColumns = [];
        _this.allDisplayedVirtualColumns = [];
        _this.allDisplayedCenterVirtualColumns = [];
        _this.rowGroupColumns = [];
        _this.valueColumns = [];
        _this.pivotColumns = [];
        _this.ready = false;
        _this.autoGroupsNeedBuilding = false;
        _this.forceRecreateAutoGroups = false;
        _this.pivotMode = false;
        _this.bodyWidth = 0;
        _this.leftWidth = 0;
        _this.rightWidth = 0;
        _this.bodyWidthDirty = true;
        _this.colDefVersion = 0;
        _this.flexColsCalculatedAtLestOnce = false;
        return _this;
      }
      ColumnController2.prototype.init = function() {
        this.suppressColumnVirtualisation = this.gridOptionsWrapper.isSuppressColumnVirtualisation();
        var pivotMode = this.gridOptionsWrapper.isPivotMode();
        if (this.isPivotSettingAllowed(pivotMode)) {
          this.pivotMode = pivotMode;
        }
        this.usingTreeData = this.gridOptionsWrapper.isTreeData();
        this.addManagedListener(this.gridOptionsWrapper, "autoGroupColumnDef", this.onAutoGroupColumnDefChanged.bind(this));
      };
      ColumnController2.prototype.onAutoGroupColumnDefChanged = function() {
        this.autoGroupsNeedBuilding = true;
        this.forceRecreateAutoGroups = true;
        this.updateGridColumns();
        this.updateDisplayedColumns("gridOptionsChanged");
      };
      ColumnController2.prototype.getColDefVersion = function() {
        return this.colDefVersion;
      };
      ColumnController2.prototype.setColumnDefs = function(columnDefs, source) {
        if (source === void 0) {
          source = "api";
        }
        var colsPreviouslyExisted = !!this.columnDefs;
        this.colDefVersion++;
        var raiseEventsFunc = this.compareColumnStatesAndRaiseEvents(source);
        this.columnDefs = columnDefs;
        this.valueCache.expire();
        this.autoGroupsNeedBuilding = true;
        var oldPrimaryColumns = this.primaryColumns;
        var balancedTreeResult = this.columnFactory.createColumnTree(columnDefs, true, oldPrimaryColumns);
        this.primaryColumnTree = balancedTreeResult.columnTree;
        this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;
        this.primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
        this.extractRowGroupColumns(source, oldPrimaryColumns);
        this.extractPivotColumns(source, oldPrimaryColumns);
        this.extractValueColumns(source, oldPrimaryColumns);
        this.ready = true;
        this.updateGridColumns();
        if (colsPreviouslyExisted && this.gridColsArePrimary && this.gridOptionsWrapper.isApplyColumnDefOrder()) {
          this.orderGridColumnsLikePrimary();
        }
        this.updateDisplayedColumns(source);
        this.checkDisplayedVirtualColumns();
        var eventEverythingChanged = {
          type: Events.EVENT_COLUMN_EVERYTHING_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi,
          source
        };
        this.eventService.dispatchEvent(eventEverythingChanged);
        var newColumnsLoadedEvent = {
          type: Events.EVENT_NEW_COLUMNS_LOADED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        raiseEventsFunc();
        this.eventService.dispatchEvent(newColumnsLoadedEvent);
      };
      ColumnController2.prototype.orderGridColumnsLikePrimary = function() {
        var _this = this;
        this.gridColumns.sort(function(colA, colB) {
          var primaryIndexA = _this.primaryColumns.indexOf(colA);
          var primaryIndexB = _this.primaryColumns.indexOf(colB);
          var indexAPresent = primaryIndexA >= 0;
          var indexBPresent = primaryIndexB >= 0;
          if (indexAPresent && indexBPresent) {
            return primaryIndexA - primaryIndexB;
          }
          if (indexAPresent) {
            return 1;
          }
          if (indexBPresent) {
            return -1;
          }
          var gridIndexA = _this.gridColumns.indexOf(colA);
          var gridIndexB = _this.gridColumns.indexOf(colB);
          return gridIndexA - gridIndexB;
        });
      };
      ColumnController2.prototype.isAutoRowHeightActive = function() {
        return this.autoRowHeightColumns && this.autoRowHeightColumns.length > 0;
      };
      ColumnController2.prototype.getAllAutoRowHeightCols = function() {
        return this.autoRowHeightColumns;
      };
      ColumnController2.prototype.setVirtualViewportLeftAndRight = function() {
        if (this.gridOptionsWrapper.isEnableRtl()) {
          this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;
          this.viewportRight = this.bodyWidth - this.scrollPosition;
        } else {
          this.viewportLeft = this.scrollPosition;
          this.viewportRight = this.scrollWidth + this.scrollPosition;
        }
      };
      ColumnController2.prototype.getDisplayedColumnsStartingAt = function(column) {
        var currentColumn = column;
        var columns = [];
        while (currentColumn != null) {
          columns.push(currentColumn);
          currentColumn = this.getDisplayedColAfter(currentColumn);
        }
        return columns;
      };
      ColumnController2.prototype.checkDisplayedVirtualColumns = function() {
        if (this.displayedCenterColumns == null) {
          return;
        }
        var hashBefore = this.allDisplayedVirtualColumns.map(function(column) {
          return column.getId();
        }).join("#");
        this.updateVirtualSets();
        var hashAfter = this.allDisplayedVirtualColumns.map(function(column) {
          return column.getId();
        }).join("#");
        if (hashBefore !== hashAfter) {
          var event_1 = {
            type: Events.EVENT_VIRTUAL_COLUMNS_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      ColumnController2.prototype.setVirtualViewportPosition = function(scrollWidth, scrollPosition) {
        if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {
          this.scrollWidth = scrollWidth;
          this.scrollPosition = scrollPosition;
          this.bodyWidthDirty = true;
          this.setVirtualViewportLeftAndRight();
          if (this.ready) {
            this.checkDisplayedVirtualColumns();
          }
        }
      };
      ColumnController2.prototype.isPivotMode = function() {
        return this.pivotMode;
      };
      ColumnController2.prototype.isPivotSettingAllowed = function(pivot) {
        if (pivot && this.gridOptionsWrapper.isTreeData()) {
          console.warn("ag-Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'");
          return false;
        }
        return true;
      };
      ColumnController2.prototype.setPivotMode = function(pivotMode, source) {
        if (source === void 0) {
          source = "api";
        }
        if (pivotMode === this.pivotMode || !this.isPivotSettingAllowed(this.pivotMode)) {
          return;
        }
        this.pivotMode = pivotMode;
        this.autoGroupsNeedBuilding = true;
        this.updateGridColumns();
        this.updateDisplayedColumns(source);
        var event = {
          type: Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnController2.prototype.getSecondaryPivotColumn = function(pivotKeys, valueColKey) {
        if (!this.secondaryColumnsPresent || !this.secondaryColumns) {
          return null;
        }
        var valueColumnToFind = this.getPrimaryColumn(valueColKey);
        var foundColumn = null;
        this.secondaryColumns.forEach(function(column) {
          var thisPivotKeys = column.getColDef().pivotKeys;
          var pivotValueColumn = column.getColDef().pivotValueColumn;
          var pivotKeyMatches = areEqual(thisPivotKeys, pivotKeys);
          var pivotValueMatches = pivotValueColumn === valueColumnToFind;
          if (pivotKeyMatches && pivotValueMatches) {
            foundColumn = column;
          }
        });
        return foundColumn;
      };
      ColumnController2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("ColumnController");
      };
      ColumnController2.prototype.setFirstRightAndLastLeftPinned = function(source) {
        var lastLeft;
        var firstRight;
        if (this.gridOptionsWrapper.isEnableRtl()) {
          lastLeft = this.displayedLeftColumns ? this.displayedLeftColumns[0] : null;
          firstRight = this.displayedRightColumns ? last(this.displayedRightColumns) : null;
        } else {
          lastLeft = this.displayedLeftColumns ? last(this.displayedLeftColumns) : null;
          firstRight = this.displayedRightColumns ? this.displayedRightColumns[0] : null;
        }
        this.gridColumns.forEach(function(column) {
          column.setLastLeftPinned(column === lastLeft, source);
          column.setFirstRightPinned(column === firstRight, source);
        });
      };
      ColumnController2.prototype.autoSizeColumns = function(keys2, skipHeader, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        this.animationFrameService.flushAllFrames();
        var columnsAutosized = [];
        var changesThisTimeAround = -1;
        if (skipHeader == null) {
          skipHeader = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
        }
        while (changesThisTimeAround !== 0) {
          changesThisTimeAround = 0;
          this.actionOnGridColumns(keys2, function(column) {
            if (columnsAutosized.indexOf(column) >= 0) {
              return false;
            }
            var preferredWidth = _this.autoWidthCalculator.getPreferredWidthForColumn(column, skipHeader);
            if (preferredWidth > 0) {
              var newWidth = _this.normaliseColumnWidth(column, preferredWidth);
              column.setActualWidth(newWidth, source);
              columnsAutosized.push(column);
              changesThisTimeAround++;
            }
            return true;
          }, source);
        }
        this.fireColumnResizedEvent(columnsAutosized, true, "autosizeColumns");
      };
      ColumnController2.prototype.fireColumnResizedEvent = function(columns, finished, source, flexColumns) {
        if (flexColumns === void 0) {
          flexColumns = null;
        }
        if (columns && columns.length) {
          var event_2 = {
            type: Events.EVENT_COLUMN_RESIZED,
            columns,
            column: columns.length === 1 ? columns[0] : null,
            flexColumns,
            finished,
            api: this.gridApi,
            columnApi: this.columnApi,
            source
          };
          this.eventService.dispatchEvent(event_2);
        }
      };
      ColumnController2.prototype.autoSizeColumn = function(key, skipHeader, source) {
        if (source === void 0) {
          source = "api";
        }
        if (key) {
          this.autoSizeColumns([key], skipHeader, source);
        }
      };
      ColumnController2.prototype.autoSizeAllColumns = function(skipHeader, source) {
        if (source === void 0) {
          source = "api";
        }
        var allDisplayedColumns = this.getAllDisplayedColumns();
        this.autoSizeColumns(allDisplayedColumns, skipHeader, source);
      };
      ColumnController2.prototype.getColumnsFromTree = function(rootColumns) {
        var result = [];
        var recursiveFindColumns = function(childColumns) {
          for (var i = 0; i < childColumns.length; i++) {
            var child = childColumns[i];
            if (child instanceof Column) {
              result.push(child);
            } else if (child instanceof OriginalColumnGroup) {
              recursiveFindColumns(child.getChildren());
            }
          }
        };
        recursiveFindColumns(rootColumns);
        return result;
      };
      ColumnController2.prototype.getAllDisplayedColumnGroups = function() {
        if (this.displayedLeftColumnTree && this.displayedRightColumnTree && this.displayedCentreColumnTree) {
          return this.displayedLeftColumnTree.concat(this.displayedCentreColumnTree).concat(this.displayedRightColumnTree);
        }
        return null;
      };
      ColumnController2.prototype.getPrimaryColumnTree = function() {
        return this.primaryColumnTree;
      };
      ColumnController2.prototype.getHeaderRowCount = function() {
        return this.gridHeaderRowCount;
      };
      ColumnController2.prototype.getLeftDisplayedColumnGroups = function() {
        return this.displayedLeftColumnTree;
      };
      ColumnController2.prototype.getRightDisplayedColumnGroups = function() {
        return this.displayedRightColumnTree;
      };
      ColumnController2.prototype.getCenterDisplayedColumnGroups = function() {
        return this.displayedCentreColumnTree;
      };
      ColumnController2.prototype.getDisplayedColumnGroups = function(type) {
        switch (type) {
          case Constants.PINNED_LEFT:
            return this.getLeftDisplayedColumnGroups();
          case Constants.PINNED_RIGHT:
            return this.getRightDisplayedColumnGroups();
          default:
            return this.getCenterDisplayedColumnGroups();
        }
      };
      ColumnController2.prototype.isColumnDisplayed = function(column) {
        return this.getAllDisplayedColumns().indexOf(column) >= 0;
      };
      ColumnController2.prototype.getAllDisplayedColumns = function() {
        return this.allDisplayedColumns;
      };
      ColumnController2.prototype.getAllDisplayedVirtualColumns = function() {
        return this.allDisplayedVirtualColumns;
      };
      ColumnController2.prototype.getDisplayedLeftColumnsForRow = function(rowNode) {
        if (!this.colSpanActive) {
          return this.displayedLeftColumns;
        }
        return this.getDisplayedColumnsForRow(rowNode, this.displayedLeftColumns);
      };
      ColumnController2.prototype.getDisplayedRightColumnsForRow = function(rowNode) {
        if (!this.colSpanActive) {
          return this.displayedRightColumns;
        }
        return this.getDisplayedColumnsForRow(rowNode, this.displayedRightColumns);
      };
      ColumnController2.prototype.getDisplayedColumnsForRow = function(rowNode, displayedColumns, filterCallback, emptySpaceBeforeColumn) {
        var result = [];
        var lastConsideredCol = null;
        var _loop_1 = function(i2) {
          var col = displayedColumns[i2];
          var maxAllowedColSpan = displayedColumns.length - i2;
          var colSpan = Math.min(col.getColSpan(rowNode), maxAllowedColSpan);
          var columnsToCheckFilter = [col];
          if (colSpan > 1) {
            var colsToRemove = colSpan - 1;
            for (var j = 1; j <= colsToRemove; j++) {
              columnsToCheckFilter.push(displayedColumns[i2 + j]);
            }
            i2 += colsToRemove;
          }
          var filterPasses;
          if (filterCallback) {
            filterPasses = false;
            columnsToCheckFilter.forEach(function(colForFilter) {
              if (filterCallback(colForFilter)) {
                filterPasses = true;
              }
            });
          } else {
            filterPasses = true;
          }
          if (filterPasses) {
            if (result.length === 0 && lastConsideredCol) {
              var gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;
              if (gapBeforeColumn) {
                result.push(lastConsideredCol);
              }
            }
            result.push(col);
          }
          lastConsideredCol = col;
          out_i_1 = i2;
        };
        var out_i_1;
        for (var i = 0; i < displayedColumns.length; i++) {
          _loop_1(i);
          i = out_i_1;
        }
        return result;
      };
      ColumnController2.prototype.getAllDisplayedCenterVirtualColumnsForRow = function(rowNode) {
        var _this = this;
        if (!this.colSpanActive) {
          return this.allDisplayedCenterVirtualColumns;
        }
        var emptySpaceBeforeColumn = function(col) {
          return col.getLeft() > _this.viewportLeft;
        };
        var filterCallback = this.suppressColumnVirtualisation ? null : this.isColumnInViewport.bind(this);
        return this.getDisplayedColumnsForRow(rowNode, this.displayedCenterColumns, filterCallback, emptySpaceBeforeColumn);
      };
      ColumnController2.prototype.getAriaColumnIndex = function(col) {
        return this.getAllGridColumns().indexOf(col) + 1;
      };
      ColumnController2.prototype.isColumnInViewport = function(col) {
        var columnLeft = col.getLeft();
        var columnRight = col.getLeft() + col.getActualWidth();
        var leftBounds = this.viewportLeft - 200;
        var rightBounds = this.viewportRight + 200;
        var columnToMuchLeft = columnLeft < leftBounds && columnRight < leftBounds;
        var columnToMuchRight = columnLeft > rightBounds && columnRight > rightBounds;
        return !columnToMuchLeft && !columnToMuchRight;
      };
      ColumnController2.prototype.getPinnedLeftContainerWidth = function() {
        return this.getWidthOfColsInList(this.displayedLeftColumns);
      };
      ColumnController2.prototype.getPinnedRightContainerWidth = function() {
        return this.getWidthOfColsInList(this.displayedRightColumns);
      };
      ColumnController2.prototype.updatePrimaryColumnList = function(keys2, masterList, actionIsAdd, columnCallback, eventType, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        if (!keys2 || missingOrEmpty(keys2)) {
          return;
        }
        var atLeastOne = false;
        keys2.forEach(function(key) {
          var columnToAdd = _this.getPrimaryColumn(key);
          if (!columnToAdd) {
            return;
          }
          if (actionIsAdd) {
            if (masterList.indexOf(columnToAdd) >= 0) {
              return;
            }
            masterList.push(columnToAdd);
          } else {
            if (masterList.indexOf(columnToAdd) < 0) {
              return;
            }
            removeFromArray(masterList, columnToAdd);
          }
          columnCallback(columnToAdd);
          atLeastOne = true;
        });
        if (!atLeastOne) {
          return;
        }
        if (this.autoGroupsNeedBuilding) {
          this.updateGridColumns();
        }
        this.updateDisplayedColumns(source);
        var event = {
          type: eventType,
          columns: masterList,
          column: masterList.length === 1 ? masterList[0] : null,
          api: this.gridApi,
          columnApi: this.columnApi,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnController2.prototype.setRowGroupColumns = function(colKeys, source) {
        if (source === void 0) {
          source = "api";
        }
        this.autoGroupsNeedBuilding = true;
        this.setPrimaryColumnList(colKeys, this.rowGroupColumns, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.setRowGroupActive.bind(this), source);
      };
      ColumnController2.prototype.setRowGroupActive = function(active, column, source) {
        if (active === column.isRowGroupActive()) {
          return;
        }
        column.setRowGroupActive(active, source);
        if (!active && !this.gridOptionsWrapper.isSuppressMakeColumnVisibleAfterUnGroup()) {
          column.setVisible(true, source);
        }
      };
      ColumnController2.prototype.addRowGroupColumn = function(key, source) {
        if (source === void 0) {
          source = "api";
        }
        if (key) {
          this.addRowGroupColumns([key], source);
        }
      };
      ColumnController2.prototype.addRowGroupColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.autoGroupsNeedBuilding = true;
        this.updatePrimaryColumnList(keys2, this.rowGroupColumns, true, this.setRowGroupActive.bind(this, true), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
      };
      ColumnController2.prototype.removeRowGroupColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.autoGroupsNeedBuilding = true;
        this.updatePrimaryColumnList(keys2, this.rowGroupColumns, false, this.setRowGroupActive.bind(this, false), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
      };
      ColumnController2.prototype.removeRowGroupColumn = function(key, source) {
        if (source === void 0) {
          source = "api";
        }
        if (key) {
          this.removeRowGroupColumns([key], source);
        }
      };
      ColumnController2.prototype.addPivotColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.updatePrimaryColumnList(keys2, this.pivotColumns, true, function(column) {
          return column.setPivotActive(true, source);
        }, Events.EVENT_COLUMN_PIVOT_CHANGED, source);
      };
      ColumnController2.prototype.setPivotColumns = function(colKeys, source) {
        if (source === void 0) {
          source = "api";
        }
        this.setPrimaryColumnList(colKeys, this.pivotColumns, Events.EVENT_COLUMN_PIVOT_CHANGED, function(added, column) {
          column.setPivotActive(added, source);
        }, source);
      };
      ColumnController2.prototype.addPivotColumn = function(key, source) {
        if (source === void 0) {
          source = "api";
        }
        this.addPivotColumns([key], source);
      };
      ColumnController2.prototype.removePivotColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.updatePrimaryColumnList(keys2, this.pivotColumns, false, function(column) {
          return column.setPivotActive(false, source);
        }, Events.EVENT_COLUMN_PIVOT_CHANGED, source);
      };
      ColumnController2.prototype.removePivotColumn = function(key, source) {
        if (source === void 0) {
          source = "api";
        }
        this.removePivotColumns([key], source);
      };
      ColumnController2.prototype.setPrimaryColumnList = function(colKeys, masterList, eventName, columnCallback, source) {
        var _this = this;
        masterList.length = 0;
        if (exists(colKeys)) {
          colKeys.forEach(function(key) {
            var column = _this.getPrimaryColumn(key);
            if (column) {
              masterList.push(column);
            }
          });
        }
        this.primaryColumns.forEach(function(column) {
          var added = masterList.indexOf(column) >= 0;
          columnCallback(added, column);
        });
        if (this.autoGroupsNeedBuilding) {
          this.updateGridColumns();
        }
        this.updateDisplayedColumns(source);
        var event = {
          type: eventName,
          columns: masterList,
          column: masterList.length === 1 ? masterList[0] : null,
          api: this.gridApi,
          columnApi: this.columnApi,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnController2.prototype.setValueColumns = function(colKeys, source) {
        if (source === void 0) {
          source = "api";
        }
        this.setPrimaryColumnList(colKeys, this.valueColumns, Events.EVENT_COLUMN_VALUE_CHANGED, this.setValueActive.bind(this), source);
      };
      ColumnController2.prototype.setValueActive = function(active, column, source) {
        if (active === column.isValueActive()) {
          return;
        }
        column.setValueActive(active, source);
        if (active && !column.getAggFunc()) {
          var initialAggFunc = this.aggFuncService.getDefaultAggFunc(column);
          column.setAggFunc(initialAggFunc);
        }
      };
      ColumnController2.prototype.addValueColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.updatePrimaryColumnList(keys2, this.valueColumns, true, this.setValueActive.bind(this, true), Events.EVENT_COLUMN_VALUE_CHANGED, source);
      };
      ColumnController2.prototype.addValueColumn = function(colKey, source) {
        if (source === void 0) {
          source = "api";
        }
        if (colKey) {
          this.addValueColumns([colKey], source);
        }
      };
      ColumnController2.prototype.removeValueColumn = function(colKey, source) {
        if (source === void 0) {
          source = "api";
        }
        this.removeValueColumns([colKey], source);
      };
      ColumnController2.prototype.removeValueColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.updatePrimaryColumnList(keys2, this.valueColumns, false, this.setValueActive.bind(this, false), Events.EVENT_COLUMN_VALUE_CHANGED, source);
      };
      ColumnController2.prototype.normaliseColumnWidth = function(column, newWidth) {
        if (newWidth < column.getMinWidth()) {
          newWidth = column.getMinWidth();
        }
        if (column.isGreaterThanMax(newWidth)) {
          newWidth = column.getMaxWidth();
        }
        return newWidth;
      };
      ColumnController2.prototype.getPrimaryOrGridColumn = function(key) {
        var column = this.getPrimaryColumn(key);
        return column || this.getGridColumn(key);
      };
      ColumnController2.prototype.setColumnWidths = function(columnWidths, shiftKey, finished, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        var sets = [];
        columnWidths.forEach(function(columnWidth) {
          var col = _this.getPrimaryOrGridColumn(columnWidth.key);
          if (!col) {
            return;
          }
          sets.push({
            width: columnWidth.newWidth,
            ratios: [1],
            columns: [col]
          });
          var defaultIsShift = _this.gridOptionsWrapper.getColResizeDefault() === "shift";
          if (defaultIsShift) {
            shiftKey = !shiftKey;
          }
          if (shiftKey) {
            var otherCol = _this.getDisplayedColAfter(col);
            if (!otherCol) {
              return;
            }
            var widthDiff = col.getActualWidth() - columnWidth.newWidth;
            var otherColWidth = otherCol.getActualWidth() + widthDiff;
            sets.push({
              width: otherColWidth,
              ratios: [1],
              columns: [otherCol]
            });
          }
        });
        if (sets.length === 0) {
          return;
        }
        this.resizeColumnSets(sets, finished, source);
      };
      ColumnController2.prototype.checkMinAndMaxWidthsForSet = function(columnResizeSet) {
        var columns = columnResizeSet.columns, width = columnResizeSet.width;
        var minWidthAccumulated = 0;
        var maxWidthAccumulated = 0;
        var maxWidthActive = true;
        columns.forEach(function(col) {
          minWidthAccumulated += col.getMinWidth();
          if (col.getMaxWidth() > 0) {
            maxWidthAccumulated += col.getMaxWidth();
          } else {
            maxWidthActive = false;
          }
        });
        var minWidthPasses = width >= minWidthAccumulated;
        var maxWidthPasses = !maxWidthActive || width <= maxWidthAccumulated;
        return minWidthPasses && maxWidthPasses;
      };
      ColumnController2.prototype.resizeColumnSets = function(resizeSets, finished, source) {
        var passMinMaxCheck = !resizeSets || resizeSets.every(this.checkMinAndMaxWidthsForSet.bind(this));
        if (!passMinMaxCheck) {
          if (finished) {
            var columns = resizeSets && resizeSets.length > 0 ? resizeSets[0].columns : null;
            this.fireColumnResizedEvent(columns, finished, source);
          }
          return;
        }
        var changedCols = [];
        var allResizedCols = [];
        resizeSets.forEach(function(set2) {
          var width = set2.width, columns2 = set2.columns, ratios = set2.ratios;
          var newWidths = {};
          var finishedCols = {};
          columns2.forEach(function(col) {
            return allResizedCols.push(col);
          });
          var finishedColsGrew = true;
          var loopCount = 0;
          var _loop_2 = function() {
            loopCount++;
            if (loopCount > 1e3) {
              console.error("ag-Grid: infinite loop in resizeColumnSets");
              return "break";
            }
            finishedColsGrew = false;
            var subsetCols = [];
            var subsetRatioTotal = 0;
            var pixelsToDistribute = width;
            columns2.forEach(function(col, index) {
              var thisColFinished = finishedCols[col.getId()];
              if (thisColFinished) {
                pixelsToDistribute -= newWidths[col.getId()];
              } else {
                subsetCols.push(col);
                var ratioThisCol = ratios[index];
                subsetRatioTotal += ratioThisCol;
              }
            });
            var ratioScale = 1 / subsetRatioTotal;
            subsetCols.forEach(function(col, index) {
              var lastCol = index === subsetCols.length - 1;
              var colNewWidth;
              if (lastCol) {
                colNewWidth = pixelsToDistribute;
              } else {
                colNewWidth = Math.round(ratios[index] * width * ratioScale);
                pixelsToDistribute -= colNewWidth;
              }
              if (colNewWidth < col.getMinWidth()) {
                colNewWidth = col.getMinWidth();
                finishedCols[col.getId()] = true;
                finishedColsGrew = true;
              } else if (col.getMaxWidth() > 0 && colNewWidth > col.getMaxWidth()) {
                colNewWidth = col.getMaxWidth();
                finishedCols[col.getId()] = true;
                finishedColsGrew = true;
              }
              newWidths[col.getId()] = colNewWidth;
            });
          };
          while (finishedColsGrew) {
            var state_1 = _loop_2();
            if (state_1 === "break")
              break;
          }
          columns2.forEach(function(col) {
            var newWidth = newWidths[col.getId()];
            if (col.getActualWidth() !== newWidth) {
              col.setActualWidth(newWidth, source);
              changedCols.push(col);
            }
          });
        });
        var atLeastOneColChanged = changedCols.length > 0;
        var flexedCols = this.refreshFlexedColumns({ resizingCols: allResizedCols, skipSetLeft: true });
        if (atLeastOneColChanged) {
          this.setLeftValues(source);
          this.updateBodyWidths();
          this.checkDisplayedVirtualColumns();
        }
        var colsForEvent = allResizedCols.concat(flexedCols);
        if (atLeastOneColChanged || finished) {
          this.fireColumnResizedEvent(colsForEvent, finished, source, flexedCols);
        }
      };
      ColumnController2.prototype.setColumnAggFunc = function(key, aggFunc, source) {
        if (source === void 0) {
          source = "api";
        }
        if (!key) {
          return;
        }
        var column = this.getPrimaryColumn(key);
        if (!column) {
          return;
        }
        column.setAggFunc(aggFunc);
        var event = {
          type: Events.EVENT_COLUMN_VALUE_CHANGED,
          columns: [column],
          column,
          api: this.gridApi,
          columnApi: this.columnApi,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnController2.prototype.moveRowGroupColumn = function(fromIndex, toIndex, source) {
        if (source === void 0) {
          source = "api";
        }
        var column = this.rowGroupColumns[fromIndex];
        this.rowGroupColumns.splice(fromIndex, 1);
        this.rowGroupColumns.splice(toIndex, 0, column);
        var event = {
          type: Events.EVENT_COLUMN_ROW_GROUP_CHANGED,
          columns: this.rowGroupColumns,
          column: this.rowGroupColumns.length === 1 ? this.rowGroupColumns[0] : null,
          api: this.gridApi,
          columnApi: this.columnApi,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnController2.prototype.moveColumns = function(columnsToMoveKeys, toIndex, source) {
        if (source === void 0) {
          source = "api";
        }
        this.columnAnimationService.start();
        if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {
          console.warn("ag-Grid: tried to insert columns in invalid location, toIndex = " + toIndex);
          console.warn("ag-Grid: remember that you should not count the moving columns when calculating the new index");
          return;
        }
        var columnsToMove = this.getGridColumns(columnsToMoveKeys);
        var failedRules = !this.doesMovePassRules(columnsToMove, toIndex);
        if (failedRules) {
          return;
        }
        moveInArray(this.gridColumns, columnsToMove, toIndex);
        this.updateDisplayedColumns(source);
        var event = {
          type: Events.EVENT_COLUMN_MOVED,
          columns: columnsToMove,
          column: columnsToMove.length === 1 ? columnsToMove[0] : null,
          toIndex,
          api: this.gridApi,
          columnApi: this.columnApi,
          source
        };
        this.eventService.dispatchEvent(event);
        this.columnAnimationService.finish();
      };
      ColumnController2.prototype.doesMovePassRules = function(columnsToMove, toIndex) {
        var proposedColumnOrder = this.gridColumns.slice();
        moveInArray(proposedColumnOrder, columnsToMove, toIndex);
        if (!this.doesMovePassMarryChildren(proposedColumnOrder)) {
          return false;
        }
        if (!this.doesMovePassLockedPositions(proposedColumnOrder)) {
          return false;
        }
        return true;
      };
      ColumnController2.prototype.sortColumnsLikeGridColumns = function(cols) {
        var _this = this;
        if (!cols || cols.length <= 1) {
          return;
        }
        var notAllColsInGridColumns = cols.filter(function(c) {
          return _this.gridColumns.indexOf(c) < 0;
        }).length > 0;
        if (notAllColsInGridColumns) {
          return;
        }
        cols.sort(function(a, b) {
          var indexA = _this.gridColumns.indexOf(a);
          var indexB = _this.gridColumns.indexOf(b);
          return indexA - indexB;
        });
      };
      ColumnController2.prototype.doesMovePassLockedPositions = function(proposedColumnOrder) {
        var foundNonLocked = false;
        var rulePassed = true;
        proposedColumnOrder.forEach(function(col) {
          if (col.getColDef().lockPosition) {
            if (foundNonLocked) {
              rulePassed = false;
            }
          } else {
            foundNonLocked = true;
          }
        });
        return rulePassed;
      };
      ColumnController2.prototype.doesMovePassMarryChildren = function(allColumnsCopy) {
        var rulePassed = true;
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(child) {
          if (!(child instanceof OriginalColumnGroup)) {
            return;
          }
          var columnGroup = child;
          var marryChildren = columnGroup.getColGroupDef() && columnGroup.getColGroupDef().marryChildren;
          if (!marryChildren) {
            return;
          }
          var newIndexes = [];
          columnGroup.getLeafColumns().forEach(function(col) {
            var newColIndex = allColumnsCopy.indexOf(col);
            newIndexes.push(newColIndex);
          });
          var maxIndex = Math.max.apply(Math, newIndexes);
          var minIndex = Math.min.apply(Math, newIndexes);
          var spread = maxIndex - minIndex;
          var maxSpread = columnGroup.getLeafColumns().length - 1;
          if (spread > maxSpread) {
            rulePassed = false;
          }
        });
        return rulePassed;
      };
      ColumnController2.prototype.moveColumn = function(key, toIndex, source) {
        if (source === void 0) {
          source = "api";
        }
        this.moveColumns([key], toIndex, source);
      };
      ColumnController2.prototype.moveColumnByIndex = function(fromIndex, toIndex, source) {
        if (source === void 0) {
          source = "api";
        }
        var column = this.gridColumns[fromIndex];
        this.moveColumn(column, toIndex, source);
      };
      ColumnController2.prototype.getColumnDefs = function() {
        var _this = this;
        var cols = this.primaryColumns.slice();
        if (this.gridColsArePrimary) {
          cols.sort(function(a, b) {
            return _this.gridColumns.indexOf(a) - _this.gridColumns.indexOf(b);
          });
        } else if (this.lastPrimaryOrder) {
          cols.sort(function(a, b) {
            return _this.lastPrimaryOrder.indexOf(a) - _this.lastPrimaryOrder.indexOf(b);
          });
        }
        return this.columnDefFactory.buildColumnDefs(cols, this.rowGroupColumns, this.pivotColumns);
      };
      ColumnController2.prototype.getBodyContainerWidth = function() {
        return this.bodyWidth;
      };
      ColumnController2.prototype.getContainerWidth = function(pinned) {
        switch (pinned) {
          case Constants.PINNED_LEFT:
            return this.leftWidth;
          case Constants.PINNED_RIGHT:
            return this.rightWidth;
          default:
            return this.bodyWidth;
        }
      };
      ColumnController2.prototype.updateBodyWidths = function() {
        var newBodyWidth = this.getWidthOfColsInList(this.displayedCenterColumns);
        var newLeftWidth = this.getWidthOfColsInList(this.displayedLeftColumns);
        var newRightWidth = this.getWidthOfColsInList(this.displayedRightColumns);
        this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;
        var atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;
        if (atLeastOneChanged) {
          this.bodyWidth = newBodyWidth;
          this.leftWidth = newLeftWidth;
          this.rightWidth = newRightWidth;
          var event_3 = {
            type: Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event_3);
        }
      };
      ColumnController2.prototype.getValueColumns = function() {
        return this.valueColumns ? this.valueColumns : [];
      };
      ColumnController2.prototype.getPivotColumns = function() {
        return this.pivotColumns ? this.pivotColumns : [];
      };
      ColumnController2.prototype.isPivotActive = function() {
        return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;
      };
      ColumnController2.prototype.getRowGroupColumns = function() {
        return this.rowGroupColumns ? this.rowGroupColumns : [];
      };
      ColumnController2.prototype.getDisplayedCenterColumns = function() {
        return this.displayedCenterColumns;
      };
      ColumnController2.prototype.getDisplayedLeftColumns = function() {
        return this.displayedLeftColumns;
      };
      ColumnController2.prototype.getDisplayedRightColumns = function() {
        return this.displayedRightColumns;
      };
      ColumnController2.prototype.getDisplayedColumns = function(type) {
        switch (type) {
          case Constants.PINNED_LEFT:
            return this.getDisplayedLeftColumns();
          case Constants.PINNED_RIGHT:
            return this.getDisplayedRightColumns();
          default:
            return this.getDisplayedCenterColumns();
        }
      };
      ColumnController2.prototype.getAllPrimaryColumns = function() {
        return this.primaryColumns ? this.primaryColumns.slice() : null;
      };
      ColumnController2.prototype.getSecondaryColumns = function() {
        return this.secondaryColumns ? this.secondaryColumns.slice() : null;
      };
      ColumnController2.prototype.getAllColumnsForQuickFilter = function() {
        return this.columnsForQuickFilter;
      };
      ColumnController2.prototype.getAllGridColumns = function() {
        return this.gridColumns;
      };
      ColumnController2.prototype.isEmpty = function() {
        return missingOrEmpty(this.gridColumns);
      };
      ColumnController2.prototype.isRowGroupEmpty = function() {
        return missingOrEmpty(this.rowGroupColumns);
      };
      ColumnController2.prototype.setColumnVisible = function(key, visible, source) {
        if (source === void 0) {
          source = "api";
        }
        this.setColumnsVisible([key], visible, source);
      };
      ColumnController2.prototype.setColumnsVisible = function(keys2, visible, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        this.columnAnimationService.start();
        this.actionOnGridColumns(keys2, function(column) {
          if (column.isVisible() !== visible) {
            column.setVisible(visible, source);
            return true;
          }
          return false;
        }, source, function() {
          var event = {
            type: Events.EVENT_COLUMN_VISIBLE,
            visible,
            column: null,
            columns: null,
            api: _this.gridApi,
            columnApi: _this.columnApi,
            source
          };
          return event;
        });
        this.columnAnimationService.finish();
      };
      ColumnController2.prototype.setColumnPinned = function(key, pinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (key) {
          this.setColumnsPinned([key], pinned, source);
        }
      };
      ColumnController2.prototype.setColumnsPinned = function(keys2, pinned, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        if (this.gridOptionsWrapper.getDomLayout() === "print") {
          console.warn("Changing the column pinning status is not allowed with domLayout='print'");
          return;
        }
        this.columnAnimationService.start();
        var actualPinned;
        if (pinned === true || pinned === Constants.PINNED_LEFT) {
          actualPinned = Constants.PINNED_LEFT;
        } else if (pinned === Constants.PINNED_RIGHT) {
          actualPinned = Constants.PINNED_RIGHT;
        } else {
          actualPinned = null;
        }
        this.actionOnGridColumns(keys2, function(col) {
          if (col.getPinned() !== actualPinned) {
            col.setPinned(actualPinned);
            return true;
          }
          return false;
        }, source, function() {
          var event = {
            type: Events.EVENT_COLUMN_PINNED,
            pinned: actualPinned,
            column: null,
            columns: null,
            api: _this.gridApi,
            columnApi: _this.columnApi,
            source
          };
          return event;
        });
        this.columnAnimationService.finish();
      };
      ColumnController2.prototype.actionOnGridColumns = function(keys2, action, source, createEvent) {
        var _this = this;
        if (missingOrEmpty(keys2)) {
          return;
        }
        var updatedColumns = [];
        keys2.forEach(function(key) {
          var column = _this.getGridColumn(key);
          if (!column) {
            return;
          }
          var resultOfAction = action(column);
          if (resultOfAction !== false) {
            updatedColumns.push(column);
          }
        });
        if (!updatedColumns.length) {
          return;
        }
        this.updateDisplayedColumns(source);
        if (exists(createEvent) && createEvent) {
          var event_4 = createEvent();
          event_4.columns = updatedColumns;
          event_4.column = updatedColumns.length === 1 ? updatedColumns[0] : null;
          this.eventService.dispatchEvent(event_4);
        }
      };
      ColumnController2.prototype.getDisplayedColBefore = function(col) {
        var allDisplayedColumns = this.getAllDisplayedColumns();
        var oldIndex = allDisplayedColumns.indexOf(col);
        if (oldIndex > 0) {
          return allDisplayedColumns[oldIndex - 1];
        }
        return null;
      };
      ColumnController2.prototype.getDisplayedColAfter = function(col) {
        var allDisplayedColumns = this.getAllDisplayedColumns();
        var oldIndex = allDisplayedColumns.indexOf(col);
        if (oldIndex < allDisplayedColumns.length - 1) {
          return allDisplayedColumns[oldIndex + 1];
        }
        return null;
      };
      ColumnController2.prototype.getDisplayedGroupAfter = function(columnGroup) {
        return this.getDisplayedGroupAtDirection(columnGroup, "After");
      };
      ColumnController2.prototype.getDisplayedGroupBefore = function(columnGroup) {
        return this.getDisplayedGroupAtDirection(columnGroup, "Before");
      };
      ColumnController2.prototype.getDisplayedGroupAtDirection = function(columnGroup, direction) {
        var requiredLevel = columnGroup.getOriginalColumnGroup().getLevel() + columnGroup.getPaddingLevel();
        var colGroupLeafColumns = columnGroup.getDisplayedLeafColumns();
        var col = direction === "After" ? last(colGroupLeafColumns) : colGroupLeafColumns[0];
        var getDisplayColMethod = "getDisplayedCol" + direction;
        while (true) {
          var column = this[getDisplayColMethod](col);
          if (!column) {
            return null;
          }
          var groupPointer = this.getColumnGroupAtLevel(column, requiredLevel);
          if (groupPointer !== columnGroup) {
            return groupPointer;
          }
        }
      };
      ColumnController2.prototype.getColumnGroupAtLevel = function(column, level) {
        var groupPointer = column.getParent();
        var originalGroupLevel;
        var groupPointerLevel;
        while (true) {
          var groupPointerOriginalColumnGroup = groupPointer.getOriginalColumnGroup();
          originalGroupLevel = groupPointerOriginalColumnGroup.getLevel();
          groupPointerLevel = groupPointer.getPaddingLevel();
          if (originalGroupLevel + groupPointerLevel <= level) {
            break;
          }
          groupPointer = groupPointer.getParent();
        }
        return groupPointer;
      };
      ColumnController2.prototype.isPinningLeft = function() {
        return this.displayedLeftColumns.length > 0;
      };
      ColumnController2.prototype.isPinningRight = function() {
        return this.displayedRightColumns.length > 0;
      };
      ColumnController2.prototype.getPrimaryAndSecondaryAndAutoColumns = function() {
        var result = this.primaryColumns ? this.primaryColumns.slice(0) : [];
        if (this.groupAutoColumns && exists(this.groupAutoColumns)) {
          this.groupAutoColumns.forEach(function(col) {
            return result.push(col);
          });
        }
        if (this.secondaryColumnsPresent && this.secondaryColumns) {
          this.secondaryColumns.forEach(function(column) {
            return result.push(column);
          });
        }
        return result;
      };
      ColumnController2.prototype.createStateItemFromColumn = function(column) {
        var rowGroupIndex = column.isRowGroupActive() ? this.rowGroupColumns.indexOf(column) : null;
        var pivotIndex = column.isPivotActive() ? this.pivotColumns.indexOf(column) : null;
        var aggFunc = column.isValueActive() ? column.getAggFunc() : null;
        var sort = column.getSort() != null ? column.getSort() : null;
        var sortIndex = column.getSortIndex() != null ? column.getSortIndex() : null;
        var flex = column.getFlex() != null && column.getFlex() > 0 ? column.getFlex() : null;
        var res = {
          colId: column.getColId(),
          width: column.getActualWidth(),
          hide: !column.isVisible(),
          pinned: column.getPinned(),
          sort,
          sortIndex,
          aggFunc,
          rowGroup: column.isRowGroupActive(),
          rowGroupIndex,
          pivot: column.isPivotActive(),
          pivotIndex,
          flex
        };
        return res;
      };
      ColumnController2.prototype.getColumnState = function() {
        if (missing(this.primaryColumns) || !this.isAlive()) {
          return [];
        }
        var primaryColumnState = this.primaryColumns.map(this.createStateItemFromColumn.bind(this));
        var groupAutoColumnState = this.groupAutoColumns ? this.groupAutoColumns.map(this.createStateItemFromColumn.bind(this)) : [];
        var columnStateList = groupAutoColumnState.concat(primaryColumnState);
        if (!this.pivotMode) {
          this.orderColumnStateList(columnStateList);
        }
        return columnStateList;
      };
      ColumnController2.prototype.orderColumnStateList = function(columnStateList) {
        var gridColumnIds = this.gridColumns.map(function(column) {
          return column.getColId();
        });
        columnStateList.sort(function(itemA, itemB) {
          var posA = gridColumnIds.indexOf(itemA.colId);
          var posB = gridColumnIds.indexOf(itemB.colId);
          return posA - posB;
        });
      };
      ColumnController2.prototype.resetColumnState = function(suppressEverythingEvent, source) {
        if (source === void 0) {
          source = "api";
        }
        var primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
        var columnStates = [];
        var letRowGroupIndex = 1e3;
        var letPivotIndex = 1e3;
        if (primaryColumns) {
          primaryColumns.forEach(function(column) {
            var colDef = column.getColDef();
            var sort = colDef.sort != null ? colDef.sort : null;
            var sortIndex = colDef.sortIndex;
            var hide = colDef.hide ? true : false;
            var pinned = colDef.pinned ? colDef.pinned : null;
            var width = colDef.width;
            var flex = colDef.flex != null ? colDef.flex : null;
            var rowGroupIndex = colDef.rowGroupIndex;
            var rowGroup = colDef.rowGroup;
            if (rowGroupIndex == null && (rowGroup == null || rowGroup == false)) {
              rowGroupIndex = null;
              rowGroup = null;
            }
            var pivotIndex = colDef.pivotIndex;
            var pivot = colDef.pivot;
            if (pivotIndex == null && (pivot == null || pivot == false)) {
              pivotIndex = null;
              pivot = null;
            }
            var aggFunc = colDef.aggFunc != null ? colDef.aggFunc : null;
            var stateItem = {
              colId: column.getColId(),
              sort,
              sortIndex,
              hide,
              pinned,
              width,
              flex,
              rowGroup,
              rowGroupIndex,
              pivot,
              pivotIndex,
              aggFunc
            };
            if (missing(rowGroupIndex) && rowGroup) {
              stateItem.rowGroupIndex = letRowGroupIndex++;
            }
            if (missing(pivotIndex) && pivot) {
              stateItem.pivotIndex = letPivotIndex++;
            }
            columnStates.push(stateItem);
          });
        }
        this.applyColumnState({ state: columnStates, applyOrder: true }, source);
      };
      ColumnController2.prototype.applyColumnState = function(params, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        if (missingOrEmpty(this.primaryColumns)) {
          return false;
        }
        if (params && params.state && !params.state.forEach) {
          console.warn("ag-Grid: applyColumnState() - the state attribute should be an array, however an array was not found. Please provide an array of items (one for each col you want to change) for state.");
          return;
        }
        this.columnAnimationService.start();
        var raiseEventsFunc = this.compareColumnStatesAndRaiseEvents(source);
        this.autoGroupsNeedBuilding = true;
        var columnsWithNoState = this.primaryColumns.slice();
        var success = true;
        var rowGroupIndexes = {};
        var pivotIndexes = {};
        var autoGroupColumnStates = [];
        var previousRowGroupCols = this.rowGroupColumns.slice();
        var previousPivotCols = this.pivotColumns.slice();
        if (params.state) {
          params.state.forEach(function(state) {
            var groupAutoColumnId = Constants.GROUP_AUTO_COLUMN_ID;
            var colId = state.colId;
            var isAutoGroupColumn = startsWith(colId, groupAutoColumnId);
            if (isAutoGroupColumn) {
              autoGroupColumnStates.push(state);
              return;
            }
            var column = _this.getPrimaryColumn(colId);
            if (!column) {
              success = false;
            } else {
              _this.syncColumnWithStateItem(column, state, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);
              removeFromArray(columnsWithNoState, column);
            }
          });
        }
        columnsWithNoState.forEach(function(col) {
          _this.syncColumnWithStateItem(col, null, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);
        });
        var comparator = function(indexes, oldList, colA, colB) {
          var indexA = indexes[colA.getId()];
          var indexB = indexes[colB.getId()];
          var aHasIndex = indexA != null;
          var bHasIndex = indexB != null;
          if (aHasIndex && bHasIndex) {
            return indexA - indexB;
          } else if (aHasIndex) {
            return -1;
          } else if (bHasIndex) {
            return 1;
          } else {
            var oldIndexA = oldList.indexOf(colA);
            var oldIndexB = oldList.indexOf(colB);
            var aHasOldIndex = oldIndexA >= 0;
            var bHasOldIndex = oldIndexB >= 0;
            if (aHasOldIndex && bHasOldIndex) {
              return oldIndexA - oldIndexB;
            } else if (aHasOldIndex) {
              return -1;
            } else if (bHasOldIndex) {
              return 1;
            } else {
              return 1;
            }
          }
        };
        this.rowGroupColumns.sort(comparator.bind(this, rowGroupIndexes, previousRowGroupCols));
        this.pivotColumns.sort(comparator.bind(this, pivotIndexes, previousPivotCols));
        this.updateGridColumns();
        autoGroupColumnStates.forEach(function(stateItem) {
          var autoCol = _this.getAutoColumn(stateItem.colId);
          _this.syncColumnWithStateItem(autoCol, stateItem, params.defaultState, null, null, true, source);
        });
        if (this.gridColsArePrimary && params.applyOrder && params.state) {
          var orderOfColIds_1 = params.state.map(function(stateItem) {
            return stateItem.colId;
          });
          this.gridColumns.sort(function(colA, colB) {
            var indexA = orderOfColIds_1.indexOf(colA.getId());
            var indexB = orderOfColIds_1.indexOf(colB.getId());
            return indexA - indexB;
          });
          this.putFixedColumnsFirst();
        }
        this.updateDisplayedColumns(source);
        var event = {
          type: Events.EVENT_COLUMN_EVERYTHING_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi,
          source
        };
        this.eventService.dispatchEvent(event);
        raiseEventsFunc();
        this.columnAnimationService.finish();
        return success;
      };
      ColumnController2.prototype.compareColumnStatesAndRaiseEvents = function(source) {
        var _this = this;
        var colsPreviouslyExisted = !!this.columnDefs;
        if (!colsPreviouslyExisted) {
          return function() {
          };
        }
        var startState = {
          rowGroupColumns: this.rowGroupColumns.slice(),
          pivotColumns: this.pivotColumns.slice(),
          valueColumns: this.valueColumns.slice()
        };
        var columnStateBefore = this.getColumnState();
        var columnStateBeforeMap = {};
        columnStateBefore.forEach(function(col) {
          columnStateBeforeMap[col.colId] = col;
        });
        return function() {
          if (_this.gridOptionsWrapper.isSuppressColumnStateEvents()) {
            return;
          }
          var raiseWhenListsDifferent = function(eventType, colsBefore, colsAfter, idMapper) {
            var beforeList = colsBefore.map(idMapper).sort();
            var afterList = colsAfter.map(idMapper).sort();
            var unchanged = areEqual(beforeList, afterList);
            if (unchanged) {
              return;
            }
            var event = {
              type: eventType,
              columns: colsAfter,
              column: colsAfter.length === 1 ? colsAfter[0] : null,
              api: _this.gridApi,
              columnApi: _this.columnApi,
              source
            };
            _this.eventService.dispatchEvent(event);
          };
          var getChangedColumns = function(changedPredicate) {
            var changedColumns = [];
            _this.gridColumns.forEach(function(column) {
              var colStateBefore = columnStateBeforeMap[column.getColId()];
              if (colStateBefore && changedPredicate(colStateBefore, column)) {
                changedColumns.push(column);
              }
            });
            return changedColumns;
          };
          var columnIdMapper = function(c) {
            return c.getColId();
          };
          raiseWhenListsDifferent(Events.EVENT_COLUMN_ROW_GROUP_CHANGED, startState.rowGroupColumns, _this.rowGroupColumns, columnIdMapper);
          raiseWhenListsDifferent(Events.EVENT_COLUMN_PIVOT_CHANGED, startState.pivotColumns, _this.pivotColumns, columnIdMapper);
          raiseWhenListsDifferent(Events.EVENT_COLUMN_VALUE_CHANGED, startState.valueColumns, _this.valueColumns, columnIdMapper);
          var resizeChangePredicate = function(cs, c) {
            return cs.width != c.getActualWidth();
          };
          _this.fireColumnResizedEvent(getChangedColumns(resizeChangePredicate), true, source);
          var pinnedChangePredicate = function(cs, c) {
            return cs.pinned != c.getPinned();
          };
          _this.raiseColumnPinnedEvent(getChangedColumns(pinnedChangePredicate), source);
          var visibilityChangePredicate = function(cs, c) {
            return cs.hide == c.isVisible();
          };
          _this.raiseColumnVisibleEvent(getChangedColumns(visibilityChangePredicate), source);
          var sortChangePredicate = function(cs, c) {
            return cs.sort != c.getSort() || cs.sortIndex != c.getSortIndex();
          };
          if (getChangedColumns(sortChangePredicate).length > 0) {
            _this.sortController.dispatchSortChangedEvents();
          }
          _this.raiseColumnMovedEvent(columnStateBefore, source);
        };
      };
      ColumnController2.prototype.raiseColumnPinnedEvent = function(changedColumns, source) {
        if (!changedColumns.length) {
          return;
        }
        var event = {
          type: Events.EVENT_COLUMN_PINNED,
          pinned: null,
          columns: changedColumns,
          column: null,
          api: this.gridApi,
          columnApi: this.columnApi,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnController2.prototype.raiseColumnVisibleEvent = function(changedColumns, source) {
        if (!changedColumns.length) {
          return;
        }
        var event = {
          type: Events.EVENT_COLUMN_VISIBLE,
          visible: void 0,
          columns: changedColumns,
          column: null,
          api: this.gridApi,
          columnApi: this.columnApi,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnController2.prototype.raiseColumnMovedEvent = function(colStateBefore, source) {
        var _this = this;
        var colStateAfter = this.getColumnState();
        var colStateAfterMapped = {};
        colStateAfter.forEach(function(s) {
          return colStateAfterMapped[s.colId] = s;
        });
        var colsIntersectIds = {};
        colStateBefore.forEach(function(s) {
          if (colStateAfterMapped[s.colId]) {
            colsIntersectIds[s.colId] = true;
          }
        });
        var beforeFiltered = filter(colStateBefore, function(c) {
          return colsIntersectIds[c.colId];
        });
        var afterFiltered = filter(colStateAfter, function(c) {
          return colsIntersectIds[c.colId];
        });
        var movedColumns = [];
        afterFiltered.forEach(function(csAfter, index) {
          var csBefore = beforeFiltered[index];
          if (csBefore.colId !== csAfter.colId) {
            movedColumns.push(_this.getGridColumn(csBefore.colId));
          }
        });
        if (!movedColumns.length) {
          return;
        }
        var event = {
          type: Events.EVENT_COLUMN_MOVED,
          columns: movedColumns,
          column: null,
          toIndex: void 0,
          api: this.gridApi,
          columnApi: this.columnApi,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnController2.prototype.syncColumnWithStateItem = function(column, stateItem, defaultState, rowGroupIndexes, pivotIndexes, autoCol, source) {
        if (!column) {
          return;
        }
        var getValue = function(key1, key2) {
          var stateAny = stateItem;
          var defaultAny = defaultState;
          if (stateAny && (stateAny[key1] !== void 0 || stateAny[key2] !== void 0)) {
            return { value1: stateAny[key1], value2: stateAny[key2] };
          } else if (defaultAny && (defaultAny[key1] !== void 0 || defaultAny[key2] !== void 0)) {
            return { value1: defaultAny[key1], value2: defaultAny[key2] };
          } else {
            return { value1: void 0, value2: void 0 };
          }
        };
        var hide = getValue("hide").value1;
        if (hide !== void 0) {
          column.setVisible(!hide, source);
        }
        var pinned = getValue("pinned").value1;
        if (pinned !== void 0) {
          column.setPinned(pinned);
        }
        var minColWidth = this.gridOptionsWrapper.getMinColWidth();
        var flex = getValue("flex").value1;
        if (flex !== void 0) {
          column.setFlex(flex);
        }
        var noFlexThisCol = column.getFlex() <= 0;
        if (noFlexThisCol) {
          var width = getValue("width").value1;
          if (width != null) {
            if (minColWidth && width >= minColWidth) {
              column.setActualWidth(width, source);
            }
          }
        }
        var sort = getValue("sort").value1;
        if (sort !== void 0) {
          if (sort === Constants.SORT_DESC || sort === Constants.SORT_ASC) {
            column.setSort(sort);
          } else {
            column.setSort(void 0);
          }
        }
        var sortIndex = getValue("sortIndex").value1;
        if (sortIndex !== void 0) {
          column.setSortIndex(sortIndex);
        }
        if (autoCol) {
          return;
        }
        var aggFunc = getValue("aggFunc").value1;
        if (aggFunc !== void 0) {
          if (typeof aggFunc === "string") {
            column.setAggFunc(aggFunc);
            if (!column.isValueActive()) {
              column.setValueActive(true, source);
              this.valueColumns.push(column);
            }
          } else {
            if (exists(aggFunc)) {
              console.warn("ag-Grid: stateItem.aggFunc must be a string. if using your own aggregation functions, register the functions first before using them in get/set state. This is because it is intended for the column state to be stored and retrieved as simple JSON.");
            }
            column.setAggFunc(null);
            if (column.isValueActive()) {
              column.setValueActive(false, source);
              removeFromArray(this.valueColumns, column);
            }
          }
        }
        var _a = getValue("rowGroup", "rowGroupIndex"), rowGroup = _a.value1, rowGroupIndex = _a.value2;
        if (rowGroup !== void 0 || rowGroupIndex !== void 0) {
          if (typeof rowGroupIndex === "number" || rowGroup) {
            if (!column.isRowGroupActive()) {
              column.setRowGroupActive(true, source);
              this.rowGroupColumns.push(column);
            }
            if (typeof rowGroupIndex === "number") {
              rowGroupIndexes[column.getId()] = rowGroupIndex;
            }
          } else {
            if (column.isRowGroupActive()) {
              column.setRowGroupActive(false, source);
              removeFromArray(this.rowGroupColumns, column);
            }
          }
        }
        var _b = getValue("pivot", "pivotIndex"), pivot = _b.value1, pivotIndex = _b.value2;
        if (pivot !== void 0 || pivotIndex !== void 0) {
          if (typeof pivotIndex === "number" || pivot) {
            if (!column.isPivotActive()) {
              column.setPivotActive(true, source);
              this.pivotColumns.push(column);
            }
            if (typeof pivotIndex === "number") {
              pivotIndexes[column.getId()] = pivotIndex;
            }
          } else {
            if (column.isPivotActive()) {
              column.setPivotActive(false, source);
              removeFromArray(this.pivotColumns, column);
            }
          }
        }
      };
      ColumnController2.prototype.getGridColumns = function(keys2) {
        return this.getColumns(keys2, this.getGridColumn.bind(this));
      };
      ColumnController2.prototype.getColumns = function(keys2, columnLookupCallback) {
        var foundColumns = [];
        if (keys2) {
          keys2.forEach(function(key) {
            var column = columnLookupCallback(key);
            if (column) {
              foundColumns.push(column);
            }
          });
        }
        return foundColumns;
      };
      ColumnController2.prototype.getColumnWithValidation = function(key) {
        if (key == null) {
          return null;
        }
        var column = this.getGridColumn(key);
        if (!column) {
          console.warn("ag-Grid: could not find column " + key);
        }
        return column;
      };
      ColumnController2.prototype.getPrimaryColumn = function(key) {
        return this.getColumn(key, this.primaryColumns);
      };
      ColumnController2.prototype.getGridColumn = function(key) {
        return this.getColumn(key, this.gridColumns);
      };
      ColumnController2.prototype.getColumn = function(key, columnList) {
        if (!key) {
          return null;
        }
        for (var i = 0; i < columnList.length; i++) {
          if (this.columnsMatch(columnList[i], key)) {
            return columnList[i];
          }
        }
        return this.getAutoColumn(key);
      };
      ColumnController2.prototype.getAutoColumn = function(key) {
        var _this = this;
        if (!this.groupAutoColumns || !exists(this.groupAutoColumns) || missing(this.groupAutoColumns)) {
          return null;
        }
        return find(this.groupAutoColumns, function(groupCol) {
          return _this.columnsMatch(groupCol, key);
        });
      };
      ColumnController2.prototype.columnsMatch = function(column, key) {
        var columnMatches = column === key;
        var colDefMatches = column.getColDef() === key;
        var idMatches = column.getColId() == key;
        return columnMatches || colDefMatches || idMatches;
      };
      ColumnController2.prototype.getDisplayNameForColumn = function(column, location, includeAggFunc) {
        if (includeAggFunc === void 0) {
          includeAggFunc = false;
        }
        if (!column) {
          return null;
        }
        var headerName = this.getHeaderName(column.getColDef(), column, null, null, location);
        if (includeAggFunc) {
          return this.wrapHeaderNameWithAggFunc(column, headerName);
        }
        return headerName;
      };
      ColumnController2.prototype.getDisplayNameForOriginalColumnGroup = function(columnGroup, originalColumnGroup, location) {
        var colGroupDef = originalColumnGroup ? originalColumnGroup.getColGroupDef() : null;
        if (colGroupDef) {
          return this.getHeaderName(colGroupDef, null, columnGroup, originalColumnGroup, location);
        }
        return null;
      };
      ColumnController2.prototype.getDisplayNameForColumnGroup = function(columnGroup, location) {
        return this.getDisplayNameForOriginalColumnGroup(columnGroup, columnGroup.getOriginalColumnGroup(), location);
      };
      ColumnController2.prototype.getHeaderName = function(colDef, column, columnGroup, originalColumnGroup, location) {
        var headerValueGetter = colDef.headerValueGetter;
        if (headerValueGetter) {
          var params = {
            colDef,
            column,
            columnGroup,
            originalColumnGroup,
            location,
            api: this.gridOptionsWrapper.getApi(),
            context: this.gridOptionsWrapper.getContext()
          };
          if (typeof headerValueGetter === "function") {
            return headerValueGetter(params);
          } else if (typeof headerValueGetter === "string") {
            return this.expressionService.evaluate(headerValueGetter, params);
          }
          console.warn("ag-grid: headerValueGetter must be a function or a string");
          return "";
        } else if (colDef.headerName != null) {
          return colDef.headerName;
        } else if (colDef.field) {
          return camelCaseToHumanText(colDef.field);
        }
        return "";
      };
      ColumnController2.prototype.wrapHeaderNameWithAggFunc = function(column, headerName) {
        if (this.gridOptionsWrapper.isSuppressAggFuncInHeader()) {
          return headerName;
        }
        var pivotValueColumn = column.getColDef().pivotValueColumn;
        var pivotActiveOnThisColumn = exists(pivotValueColumn);
        var aggFunc = null;
        var aggFuncFound;
        if (pivotActiveOnThisColumn) {
          aggFunc = pivotValueColumn ? pivotValueColumn.getAggFunc() : null;
          aggFuncFound = true;
        } else {
          var measureActive = column.isValueActive();
          var aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();
          if (measureActive && aggregationPresent) {
            aggFunc = column.getAggFunc();
            aggFuncFound = true;
          } else {
            aggFuncFound = false;
          }
        }
        if (aggFuncFound) {
          var aggFuncString = typeof aggFunc === "string" ? aggFunc : "func";
          var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
          var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
          return aggFuncStringTranslated + "(" + headerName + ")";
        }
        return headerName;
      };
      ColumnController2.prototype.getColumnGroup = function(colId, instanceId) {
        if (!colId) {
          return null;
        }
        if (colId instanceof ColumnGroup) {
          return colId;
        }
        var allColumnGroups = this.getAllDisplayedColumnGroups();
        var checkInstanceId = typeof instanceId === "number";
        var result = null;
        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function(child) {
          if (child instanceof ColumnGroup) {
            var columnGroup = child;
            var matched = void 0;
            if (checkInstanceId) {
              matched = colId === columnGroup.getGroupId() && instanceId === columnGroup.getInstanceId();
            } else {
              matched = colId === columnGroup.getGroupId();
            }
            if (matched) {
              result = columnGroup;
            }
          }
        });
        return result;
      };
      ColumnController2.prototype.isReady = function() {
        return this.ready;
      };
      ColumnController2.prototype.extractValueColumns = function(source, oldPrimaryColumns) {
        this.valueColumns = this.extractColumns(
          oldPrimaryColumns,
          this.valueColumns,
          function(col, flag) {
            return col.setValueActive(flag, source);
          },
          function() {
            return void 0;
          },
          function() {
            return void 0;
          },
          function(colDef) {
            var aggFunc = colDef.aggFunc;
            if (aggFunc === null || aggFunc === "") {
              return null;
            } else if (aggFunc === void 0) {
              return void 0;
            } else {
              return aggFunc != "";
            }
          },
          function(colDef) {
            return colDef.initialAggFunc != null && colDef.initialAggFunc != "";
          }
        );
        this.valueColumns.forEach(function(col) {
          var colDef = col.getColDef();
          if (colDef.aggFunc != null && colDef.aggFunc != "") {
            col.setAggFunc(colDef.aggFunc);
          } else {
            if (!col.getAggFunc()) {
              col.setAggFunc(colDef.initialAggFunc);
            }
          }
        });
      };
      ColumnController2.prototype.extractRowGroupColumns = function(source, oldPrimaryColumns) {
        this.rowGroupColumns = this.extractColumns(oldPrimaryColumns, this.rowGroupColumns, function(col, flag) {
          return col.setRowGroupActive(flag, source);
        }, function(colDef) {
          return colDef.rowGroupIndex;
        }, function(colDef) {
          return colDef.initialRowGroupIndex;
        }, function(colDef) {
          return colDef.rowGroup;
        }, function(colDef) {
          return colDef.initialRowGroup;
        });
      };
      ColumnController2.prototype.extractColumns = function(oldPrimaryColumns, previousCols, setFlagFunc, getIndexFunc, getInitialIndexFunc, getValueFunc, getInitialValueFunc) {
        if (oldPrimaryColumns === void 0) {
          oldPrimaryColumns = [];
        }
        if (previousCols === void 0) {
          previousCols = [];
        }
        var colsWithIndex = [];
        var colsWithValue = [];
        this.primaryColumns.forEach(function(col) {
          var colIsNew = oldPrimaryColumns.indexOf(col) < 0;
          var colDef = col.getColDef();
          var value = attrToBoolean(getValueFunc(colDef));
          var initialValue = attrToBoolean(getInitialValueFunc(colDef));
          var index = attrToNumber(getIndexFunc(colDef));
          var initialIndex = attrToNumber(getInitialIndexFunc(colDef));
          var include;
          if (colIsNew) {
            var valuePresent = value !== void 0 || index !== void 0;
            if (valuePresent) {
              if (value !== void 0) {
                include = value;
              } else {
                include = index >= 0;
              }
            } else {
              include = initialValue == true || initialIndex >= 0;
            }
          } else {
            if (value !== void 0) {
              include = value;
            } else if (index !== void 0) {
              if (index === null) {
                include = false;
              } else {
                include = index >= 0;
              }
            } else {
              include = previousCols.indexOf(col) >= 0;
            }
          }
          if (include) {
            var useIndex = colIsNew ? index != null || initialIndex != null : index != null;
            if (useIndex) {
              colsWithIndex.push(col);
            } else {
              colsWithValue.push(col);
            }
          }
        });
        var getIndexForCol = function(col) {
          var index = getIndexFunc(col.getColDef());
          var defaultIndex = getInitialIndexFunc(col.getColDef());
          return index != null ? index : defaultIndex;
        };
        colsWithIndex.sort(function(colA, colB) {
          var indexA = getIndexForCol(colA);
          var indexB = getIndexForCol(colB);
          if (indexA === indexB) {
            return 0;
          } else if (indexA < indexB) {
            return -1;
          } else {
            return 1;
          }
        });
        var res = [].concat(colsWithIndex);
        previousCols.forEach(function(col) {
          if (colsWithValue.indexOf(col) >= 0) {
            res.push(col);
          }
        });
        colsWithValue.forEach(function(col) {
          if (res.indexOf(col) < 0) {
            res.push(col);
          }
        });
        previousCols.forEach(function(col) {
          if (res.indexOf(col) < 0) {
            setFlagFunc(col, false);
          }
        });
        res.forEach(function(col) {
          if (previousCols.indexOf(col) < 0) {
            setFlagFunc(col, true);
          }
        });
        return res;
      };
      ColumnController2.prototype.extractPivotColumns = function(source, oldPrimaryColumns) {
        this.pivotColumns = this.extractColumns(oldPrimaryColumns, this.pivotColumns, function(col, flag) {
          return col.setPivotActive(flag, source);
        }, function(colDef) {
          return colDef.pivotIndex;
        }, function(colDef) {
          return colDef.initialPivotIndex;
        }, function(colDef) {
          return colDef.pivot;
        }, function(colDef) {
          return colDef.initialPivot;
        });
      };
      ColumnController2.prototype.resetColumnGroupState = function(source) {
        if (source === void 0) {
          source = "api";
        }
        var stateItems = [];
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.primaryColumnTree, function(child) {
          if (child instanceof OriginalColumnGroup) {
            var groupState = {
              groupId: child.getGroupId(),
              open: child.getColGroupDef().openByDefault
            };
            stateItems.push(groupState);
          }
        });
        this.setColumnGroupState(stateItems, source);
      };
      ColumnController2.prototype.getColumnGroupState = function() {
        var columnGroupState = [];
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(node) {
          if (node instanceof OriginalColumnGroup) {
            var originalColumnGroup = node;
            columnGroupState.push({
              groupId: originalColumnGroup.getGroupId(),
              open: originalColumnGroup.isExpanded()
            });
          }
        });
        return columnGroupState;
      };
      ColumnController2.prototype.setColumnGroupState = function(stateItems, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        this.columnAnimationService.start();
        var impactedGroups = [];
        stateItems.forEach(function(stateItem) {
          var groupKey = stateItem.groupId;
          var newValue = stateItem.open;
          var originalColumnGroup = _this.getOriginalColumnGroup(groupKey);
          if (!originalColumnGroup) {
            return;
          }
          if (originalColumnGroup.isExpanded() === newValue) {
            return;
          }
          _this.logger.log("columnGroupOpened(" + originalColumnGroup.getGroupId() + "," + newValue + ")");
          originalColumnGroup.setExpanded(newValue);
          impactedGroups.push(originalColumnGroup);
        });
        this.updateGroupsAndDisplayedColumns(source);
        this.setFirstRightAndLastLeftPinned(source);
        impactedGroups.forEach(function(originalColumnGroup) {
          var event = {
            type: Events.EVENT_COLUMN_GROUP_OPENED,
            columnGroup: originalColumnGroup,
            api: _this.gridApi,
            columnApi: _this.columnApi
          };
          _this.eventService.dispatchEvent(event);
        });
        this.columnAnimationService.finish();
      };
      ColumnController2.prototype.setColumnGroupOpened = function(key, newValue, source) {
        if (source === void 0) {
          source = "api";
        }
        var keyAsString;
        if (key instanceof OriginalColumnGroup) {
          keyAsString = key.getId();
        } else {
          keyAsString = key;
        }
        this.setColumnGroupState([{ groupId: keyAsString, open: newValue }], source);
      };
      ColumnController2.prototype.getOriginalColumnGroup = function(key) {
        if (key instanceof OriginalColumnGroup) {
          return key;
        }
        if (typeof key !== "string") {
          console.error("ag-Grid: group key must be a string");
        }
        var res = null;
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(node) {
          if (node instanceof OriginalColumnGroup) {
            var originalColumnGroup = node;
            if (originalColumnGroup.getId() === key) {
              res = originalColumnGroup;
            }
          }
        });
        return res;
      };
      ColumnController2.prototype.calculateColumnsForDisplay = function() {
        var _this = this;
        var columnsForDisplay;
        if (this.pivotMode && !this.secondaryColumnsPresent) {
          columnsForDisplay = this.gridColumns.filter(function(column) {
            var isAutoGroupCol = _this.groupAutoColumns && includes(_this.groupAutoColumns, column);
            var isValueCol = _this.valueColumns && includes(_this.valueColumns, column);
            return isAutoGroupCol || isValueCol;
          });
        } else {
          columnsForDisplay = this.gridColumns.filter(function(column) {
            var isAutoGroupCol = _this.groupAutoColumns && includes(_this.groupAutoColumns, column);
            return isAutoGroupCol || column.isVisible();
          });
        }
        return columnsForDisplay;
      };
      ColumnController2.prototype.checkColSpanActiveInCols = function(columns) {
        var result = false;
        columns.forEach(function(col) {
          if (exists(col.getColDef().colSpan)) {
            result = true;
          }
        });
        return result;
      };
      ColumnController2.prototype.calculateColumnsForGroupDisplay = function() {
        var _this = this;
        this.groupDisplayColumns = [];
        var checkFunc = function(col) {
          var colDef = col.getColDef();
          if (colDef && exists(colDef.showRowGroup)) {
            _this.groupDisplayColumns.push(col);
          }
        };
        this.gridColumns.forEach(checkFunc);
        if (this.groupAutoColumns) {
          this.groupAutoColumns.forEach(checkFunc);
        }
      };
      ColumnController2.prototype.getGroupDisplayColumns = function() {
        return this.groupDisplayColumns;
      };
      ColumnController2.prototype.updateDisplayedColumns = function(source) {
        var columnsForDisplay = this.calculateColumnsForDisplay();
        this.buildDisplayedTrees(columnsForDisplay);
        this.calculateColumnsForGroupDisplay();
        this.updateGroupsAndDisplayedColumns(source);
        this.setFirstRightAndLastLeftPinned(source);
      };
      ColumnController2.prototype.isSecondaryColumnsPresent = function() {
        return this.secondaryColumnsPresent;
      };
      ColumnController2.prototype.setSecondaryColumns = function(colDefs, source) {
        if (source === void 0) {
          source = "api";
        }
        var newColsPresent = colDefs && colDefs.length > 0;
        if (!newColsPresent && !this.secondaryColumnsPresent) {
          return;
        }
        if (newColsPresent) {
          this.processSecondaryColumnDefinitions(colDefs);
          var balancedTreeResult = this.columnFactory.createColumnTree(colDefs, false);
          this.secondaryBalancedTree = balancedTreeResult.columnTree;
          this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;
          this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);
          this.secondaryColumnsPresent = true;
        } else {
          this.secondaryBalancedTree = null;
          this.secondaryHeaderRowCount = -1;
          this.secondaryColumns = null;
          this.secondaryColumnsPresent = false;
        }
        this.updateGridColumns();
        this.updateDisplayedColumns(source);
      };
      ColumnController2.prototype.processSecondaryColumnDefinitions = function(colDefs) {
        var columnCallback = this.gridOptionsWrapper.getProcessSecondaryColDefFunc();
        var groupCallback = this.gridOptionsWrapper.getProcessSecondaryColGroupDefFunc();
        if (!columnCallback && !groupCallback) {
          return void 0;
        }
        var searchForColDefs = function(colDefs2) {
          colDefs2.forEach(function(abstractColDef) {
            var isGroup = exists(abstractColDef.children);
            if (isGroup) {
              var colGroupDef = abstractColDef;
              if (groupCallback) {
                groupCallback(colGroupDef);
              }
              searchForColDefs(colGroupDef.children);
            } else {
              var colDef = abstractColDef;
              if (columnCallback) {
                columnCallback(colDef);
              }
            }
          });
        };
        if (colDefs) {
          searchForColDefs(colDefs);
        }
      };
      ColumnController2.prototype.updateGridColumns = function() {
        if (this.gridColsArePrimary) {
          this.lastPrimaryOrder = this.gridColumns;
        }
        if (this.secondaryColumns && this.secondaryBalancedTree) {
          this.gridBalancedTree = this.secondaryBalancedTree.slice();
          this.gridHeaderRowCount = this.secondaryHeaderRowCount;
          this.gridColumns = this.secondaryColumns.slice();
          this.gridColsArePrimary = false;
        } else {
          this.gridBalancedTree = this.primaryColumnTree.slice();
          this.gridHeaderRowCount = this.primaryHeaderRowCount;
          this.gridColumns = this.primaryColumns.slice();
          this.gridColsArePrimary = true;
          this.orderGridColsLikeLastPrimary();
        }
        this.addAutoGroupToGridColumns();
        this.autoRowHeightColumns = this.gridColumns.filter(function(col) {
          return col.getColDef().autoHeight;
        });
        this.putFixedColumnsFirst();
        this.setupQuickFilterColumns();
        this.clearDisplayedColumns();
        this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);
        var event = {
          type: Events.EVENT_GRID_COLUMNS_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnController2.prototype.orderGridColsLikeLastPrimary = function() {
        var _this = this;
        if (missing(this.lastPrimaryOrder)) {
          return;
        }
        var noColsFound = true;
        this.gridColumns.forEach(function(col) {
          if (_this.lastPrimaryOrder.indexOf(col) >= 0) {
            noColsFound = false;
          }
        });
        if (noColsFound) {
          return;
        }
        var oldColsOrdered = this.lastPrimaryOrder.filter(function(col) {
          return _this.gridColumns.indexOf(col) >= 0;
        });
        var newColsOrdered = this.gridColumns.filter(function(col) {
          return oldColsOrdered.indexOf(col) < 0;
        });
        var newGridColumns = oldColsOrdered.slice();
        newColsOrdered.forEach(function(newCol) {
          var parent = newCol.getOriginalParent();
          if (!parent) {
            newGridColumns.push(newCol);
            return;
          }
          var siblings = [];
          while (!siblings.length && parent) {
            var leafCols = parent.getLeafColumns();
            leafCols.forEach(function(leafCol) {
              var presentInNewGriColumns = newGridColumns.indexOf(leafCol) >= 0;
              var noYetInSiblings = siblings.indexOf(leafCol) < 0;
              if (presentInNewGriColumns && noYetInSiblings) {
                siblings.push(leafCol);
              }
            });
            parent = parent.getOriginalParent();
          }
          if (!siblings.length) {
            newGridColumns.push(newCol);
            return;
          }
          var indexes = siblings.map(function(col) {
            return newGridColumns.indexOf(col);
          });
          var lastIndex = Math.max.apply(Math, indexes);
          insertIntoArray(newGridColumns, newCol, lastIndex + 1);
        });
        this.gridColumns = newGridColumns;
      };
      ColumnController2.prototype.isPrimaryColumnGroupsPresent = function() {
        return this.primaryHeaderRowCount > 1;
      };
      ColumnController2.prototype.setupQuickFilterColumns = function() {
        if (this.groupAutoColumns) {
          this.columnsForQuickFilter = this.primaryColumns.concat(this.groupAutoColumns);
        } else {
          this.columnsForQuickFilter = this.primaryColumns;
        }
      };
      ColumnController2.prototype.putFixedColumnsFirst = function() {
        var locked = this.gridColumns.filter(function(c) {
          return c.getColDef().lockPosition;
        });
        var unlocked = this.gridColumns.filter(function(c) {
          return !c.getColDef().lockPosition;
        });
        this.gridColumns = locked.concat(unlocked);
      };
      ColumnController2.prototype.addAutoGroupToGridColumns = function() {
        this.createGroupAutoColumnsIfNeeded();
        if (missing(this.groupAutoColumns)) {
          return;
        }
        this.gridColumns = this.groupAutoColumns ? this.groupAutoColumns.concat(this.gridColumns) : this.gridColumns;
        var autoColBalancedTree = this.columnFactory.createForAutoGroups(this.groupAutoColumns, this.gridBalancedTree);
        this.gridBalancedTree = autoColBalancedTree.concat(this.gridBalancedTree);
      };
      ColumnController2.prototype.clearDisplayedColumns = function() {
        this.displayedLeftColumnTree = [];
        this.displayedRightColumnTree = [];
        this.displayedCentreColumnTree = [];
        this.displayedLeftHeaderRows = {};
        this.displayedRightHeaderRows = {};
        this.displayedCentreHeaderRows = {};
        this.displayedLeftColumns = [];
        this.displayedRightColumns = [];
        this.displayedCenterColumns = [];
        this.allDisplayedColumns = [];
        this.allDisplayedVirtualColumns = [];
      };
      ColumnController2.prototype.updateGroupsAndDisplayedColumns = function(source) {
        this.updateOpenClosedVisibilityInColumnGroups();
        this.updateDisplayedColumnsFromTrees(source);
        this.refreshFlexedColumns();
        this.updateVirtualSets();
        this.updateBodyWidths();
        var event = {
          type: Events.EVENT_DISPLAYED_COLUMNS_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnController2.prototype.updateDisplayedColumnsFromTrees = function(source) {
        this.addToDisplayedColumns(this.displayedLeftColumnTree, this.displayedLeftColumns);
        this.addToDisplayedColumns(this.displayedCentreColumnTree, this.displayedCenterColumns);
        this.addToDisplayedColumns(this.displayedRightColumnTree, this.displayedRightColumns);
        this.setupAllDisplayedColumns();
        this.setLeftValues(source);
      };
      ColumnController2.prototype.setupAllDisplayedColumns = function() {
        if (this.gridOptionsWrapper.isEnableRtl()) {
          this.allDisplayedColumns = this.displayedRightColumns.concat(this.displayedCenterColumns).concat(this.displayedLeftColumns);
        } else {
          this.allDisplayedColumns = this.displayedLeftColumns.concat(this.displayedCenterColumns).concat(this.displayedRightColumns);
        }
      };
      ColumnController2.prototype.setLeftValues = function(source) {
        this.setLeftValuesOfColumns(source);
        this.setLeftValuesOfGroups();
      };
      ColumnController2.prototype.setLeftValuesOfColumns = function(source) {
        var _this = this;
        var allColumns = this.primaryColumns.slice(0);
        var doingRtl = this.gridOptionsWrapper.isEnableRtl();
        [
          this.displayedLeftColumns,
          this.displayedRightColumns,
          this.displayedCenterColumns
        ].forEach(function(columns) {
          if (doingRtl) {
            var left_1 = _this.getWidthOfColsInList(columns);
            columns.forEach(function(column) {
              left_1 -= column.getActualWidth();
              column.setLeft(left_1, source);
            });
          } else {
            var left_2 = 0;
            columns.forEach(function(column) {
              column.setLeft(left_2, source);
              left_2 += column.getActualWidth();
            });
          }
          removeAllFromArray(allColumns, columns);
        });
        allColumns.forEach(function(column) {
          column.setLeft(null, source);
        });
      };
      ColumnController2.prototype.setLeftValuesOfGroups = function() {
        [
          this.displayedLeftColumnTree,
          this.displayedRightColumnTree,
          this.displayedCentreColumnTree
        ].forEach(function(columns) {
          columns.forEach(function(column) {
            if (column instanceof ColumnGroup) {
              var columnGroup = column;
              columnGroup.checkLeft();
            }
          });
        });
      };
      ColumnController2.prototype.addToDisplayedColumns = function(displayedColumnTree, displayedColumns) {
        displayedColumns.length = 0;
        this.columnUtils.depthFirstDisplayedColumnTreeSearch(displayedColumnTree, function(child) {
          if (child instanceof Column) {
            displayedColumns.push(child);
          }
        });
      };
      ColumnController2.prototype.updateDisplayedCenterVirtualColumns = function() {
        if (this.suppressColumnVirtualisation) {
          this.allDisplayedCenterVirtualColumns = this.displayedCenterColumns;
        } else {
          this.allDisplayedCenterVirtualColumns = this.filterOutColumnsWithinViewport();
        }
        this.allDisplayedVirtualColumns = this.allDisplayedCenterVirtualColumns.concat(this.displayedLeftColumns).concat(this.displayedRightColumns);
        var result = {};
        this.allDisplayedVirtualColumns.forEach(function(col) {
          result[col.getId()] = true;
        });
        return result;
      };
      ColumnController2.prototype.getVirtualHeaderGroupRow = function(type, dept) {
        var result;
        switch (type) {
          case Constants.PINNED_LEFT:
            result = this.displayedLeftHeaderRows[dept];
            break;
          case Constants.PINNED_RIGHT:
            result = this.displayedRightHeaderRows[dept];
            break;
          default:
            result = this.displayedCentreHeaderRows[dept];
            break;
        }
        if (missing(result)) {
          result = [];
        }
        return result;
      };
      ColumnController2.prototype.updateDisplayedVirtualGroups = function(virtualColIds) {
        this.displayedLeftHeaderRows = {};
        this.displayedRightHeaderRows = {};
        this.displayedCentreHeaderRows = {};
        var testGroup = function(children, result, dept) {
          var returnValue = false;
          for (var i = 0; i < children.length; i++) {
            var child = children[i];
            var addThisItem = void 0;
            if (child instanceof Column) {
              addThisItem = virtualColIds[child.getId()] === true;
            } else {
              var columnGroup = child;
              addThisItem = testGroup(columnGroup.getDisplayedChildren(), result, dept + 1);
            }
            if (addThisItem) {
              returnValue = true;
              if (!result[dept]) {
                result[dept] = [];
              }
              result[dept].push(child);
            }
          }
          return returnValue;
        };
        testGroup(this.displayedLeftColumnTree, this.displayedLeftHeaderRows, 0);
        testGroup(this.displayedRightColumnTree, this.displayedRightHeaderRows, 0);
        testGroup(this.displayedCentreColumnTree, this.displayedCentreHeaderRows, 0);
      };
      ColumnController2.prototype.updateVirtualSets = function() {
        var virtualColIds = this.updateDisplayedCenterVirtualColumns();
        this.updateDisplayedVirtualGroups(virtualColIds);
      };
      ColumnController2.prototype.filterOutColumnsWithinViewport = function() {
        return this.displayedCenterColumns.filter(this.isColumnInViewport.bind(this));
      };
      ColumnController2.prototype.refreshFlexedColumns = function(params) {
        var _this = this;
        if (params === void 0) {
          params = {};
        }
        var source = params.source ? params.source : "flex";
        if (params.viewportWidth != null) {
          this.flexViewportWidth = params.viewportWidth;
        }
        if (!this.flexViewportWidth) {
          return;
        }
        var flexAfterDisplayIndex = -1;
        if (params.resizingCols) {
          params.resizingCols.forEach(function(col2) {
            var indexOfCol = _this.displayedCenterColumns.indexOf(col2);
            if (flexAfterDisplayIndex < indexOfCol) {
              flexAfterDisplayIndex = indexOfCol;
            }
          });
        }
        var isColFlex = function(col2) {
          var afterResizingCols = _this.displayedCenterColumns.indexOf(col2) > flexAfterDisplayIndex;
          return col2.getFlex() && afterResizingCols;
        };
        var knownWidthColumns = this.displayedCenterColumns.filter(function(col2) {
          return !isColFlex(col2);
        });
        var flexingColumns = this.displayedCenterColumns.filter(function(col2) {
          return isColFlex(col2);
        });
        var changedColumns = [];
        if (!flexingColumns.length) {
          return [];
        }
        var flexingColumnSizes = [];
        var spaceForFlexingColumns;
        outer:
          while (true) {
            var totalFlex = flexingColumns.reduce(function(count, col2) {
              return count + col2.getFlex();
            }, 0);
            spaceForFlexingColumns = this.flexViewportWidth - this.getWidthOfColsInList(knownWidthColumns);
            for (var i = 0; i < flexingColumns.length; i++) {
              var col = flexingColumns[i];
              var widthByFlexRule = spaceForFlexingColumns * col.getFlex() / totalFlex;
              var constrainedWidth = void 0;
              if (widthByFlexRule < col.getMinWidth()) {
                constrainedWidth = col.getMinWidth();
              } else if (col.getMaxWidth() != null && widthByFlexRule > col.getMaxWidth()) {
                constrainedWidth = col.getMaxWidth();
              }
              if (constrainedWidth) {
                col.setActualWidth(constrainedWidth, source);
                removeFromArray(flexingColumns, col);
                changedColumns.push(col);
                knownWidthColumns.push(col);
                continue outer;
              }
              flexingColumnSizes[i] = Math.round(widthByFlexRule);
            }
            break;
          }
        var remainingSpace = spaceForFlexingColumns;
        flexingColumns.forEach(function(col2, i2) {
          col2.setActualWidth(Math.min(flexingColumnSizes[i2], remainingSpace), source);
          changedColumns.push(col2);
          remainingSpace -= flexingColumnSizes[i2];
        });
        if (!params.skipSetLeft) {
          this.setLeftValues(source);
        }
        if (params.updateBodyWidths) {
          this.updateBodyWidths();
        }
        if (params.fireResizedEvent) {
          this.fireColumnResizedEvent(changedColumns, true, source, flexingColumns);
        }
        if (!this.flexColsCalculatedAtLestOnce) {
          if (this.gridOptionsWrapper.isRowModelDefault()) {
            this.rowModel.resetRowHeights();
          }
          this.flexColsCalculatedAtLestOnce = true;
        }
        return flexingColumns;
      };
      ColumnController2.prototype.sizeColumnsToFit = function(gridWidth, source, silent) {
        if (source === void 0) {
          source = "sizeColumnsToFit";
        }
        var allDisplayedColumns = this.getAllDisplayedColumns();
        if (gridWidth <= 0 || !allDisplayedColumns.length) {
          return;
        }
        var colsToSpread = [];
        var colsToNotSpread = [];
        allDisplayedColumns.forEach(function(column2) {
          if (column2.getColDef().suppressSizeToFit === true) {
            colsToNotSpread.push(column2);
          } else {
            colsToSpread.push(column2);
          }
        });
        var colsToFireEventFor = colsToSpread.slice(0);
        var finishedResizing = false;
        var moveToNotSpread = function(column2) {
          removeFromArray(colsToSpread, column2);
          colsToNotSpread.push(column2);
        };
        colsToSpread.forEach(function(column2) {
          return column2.resetActualWidth(source);
        });
        while (!finishedResizing) {
          finishedResizing = true;
          var availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);
          if (availablePixels <= 0) {
            colsToSpread.forEach(function(column2) {
              column2.setMinimum(source);
            });
          } else {
            var scale = availablePixels / this.getWidthOfColsInList(colsToSpread);
            var pixelsForLastCol = availablePixels;
            for (var i = colsToSpread.length - 1; i >= 0; i--) {
              var column = colsToSpread[i];
              var minWidth = column.getMinWidth();
              var maxWidth = column.getMaxWidth();
              var newWidth = Math.round(column.getActualWidth() * scale);
              if (newWidth < minWidth) {
                newWidth = column.getMinWidth();
                moveToNotSpread(column);
                finishedResizing = false;
              } else if (column.isGreaterThanMax(newWidth)) {
                newWidth = maxWidth;
                moveToNotSpread(column);
                finishedResizing = false;
              } else if (i === 0) {
                newWidth = pixelsForLastCol;
              }
              column.setActualWidth(newWidth, source, true);
              pixelsForLastCol -= newWidth;
            }
          }
        }
        colsToFireEventFor.forEach(function(col) {
          col.fireColumnWidthChangedEvent(source);
        });
        this.setLeftValues(source);
        this.updateBodyWidths();
        if (silent) {
          return;
        }
        this.fireColumnResizedEvent(colsToFireEventFor, true, source);
      };
      ColumnController2.prototype.buildDisplayedTrees = function(visibleColumns) {
        var leftVisibleColumns = [];
        var rightVisibleColumns = [];
        var centerVisibleColumns = [];
        visibleColumns.forEach(function(column) {
          switch (column.getPinned()) {
            case "left":
              leftVisibleColumns.push(column);
              break;
            case "right":
              rightVisibleColumns.push(column);
              break;
            default:
              centerVisibleColumns.push(column);
              break;
          }
        });
        var groupInstanceIdCreator = new GroupInstanceIdCreator();
        this.displayedLeftColumnTree = this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, Constants.PINNED_LEFT, this.displayedLeftColumnTree);
        this.displayedRightColumnTree = this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, Constants.PINNED_RIGHT, this.displayedRightColumnTree);
        this.displayedCentreColumnTree = this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, null, this.displayedCentreColumnTree);
      };
      ColumnController2.prototype.updateOpenClosedVisibilityInColumnGroups = function() {
        var allColumnGroups = this.getAllDisplayedColumnGroups();
        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function(child) {
          if (child instanceof ColumnGroup) {
            var columnGroup = child;
            columnGroup.calculateDisplayedColumns();
          }
        });
      };
      ColumnController2.prototype.getGroupAutoColumns = function() {
        return this.groupAutoColumns;
      };
      ColumnController2.prototype.createGroupAutoColumnsIfNeeded = function() {
        if (!this.autoGroupsNeedBuilding) {
          return;
        }
        this.autoGroupsNeedBuilding = false;
        var groupFullWidthRow = this.gridOptionsWrapper.isGroupUseEntireRow(this.pivotMode);
        var suppressAutoColumn = this.pivotMode ? this.gridOptionsWrapper.isPivotSuppressAutoColumn() : this.gridOptionsWrapper.isGroupSuppressAutoColumn();
        var groupingActive = this.rowGroupColumns.length > 0 || this.usingTreeData;
        var needAutoColumns = groupingActive && !suppressAutoColumn && !groupFullWidthRow;
        if (needAutoColumns) {
          var newAutoGroupCols = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);
          var autoColsDifferent = !this.autoColsEqual(newAutoGroupCols, this.groupAutoColumns);
          if (autoColsDifferent || this.forceRecreateAutoGroups) {
            this.groupAutoColumns = newAutoGroupCols;
          }
        } else {
          this.groupAutoColumns = null;
        }
      };
      ColumnController2.prototype.autoColsEqual = function(colsA, colsB) {
        return areEqual(colsA, colsB, function(a, b) {
          return a.getColId() === b.getColId();
        });
      };
      ColumnController2.prototype.getWidthOfColsInList = function(columnList) {
        return columnList.reduce(function(width, col) {
          return width + col.getActualWidth();
        }, 0);
      };
      ColumnController2.prototype.getGridBalancedTree = function() {
        return this.gridBalancedTree;
      };
      ColumnController2.prototype.hasFloatingFilters = function() {
        var defaultColDef = this.gridOptionsWrapper.getDefaultColDef();
        return defaultColDef != null && defaultColDef.floatingFilter === true || this.columnDefs != null && this.columnDefs.some(function(c) {
          return c.floatingFilter === true;
        });
      };
      ColumnController2.prototype.getFirstDisplayedColumn = function() {
        var isRtl = this.gridOptionsWrapper.isEnableRtl();
        var queryOrder = [
          "getDisplayedLeftColumns",
          "getDisplayedCenterColumns",
          "getDisplayedRightColumns"
        ];
        if (isRtl) {
          queryOrder.reverse();
        }
        for (var i = 0; i < queryOrder.length; i++) {
          var container = this[queryOrder[i]]();
          if (container.length) {
            return isRtl ? last(container) : container[0];
          }
        }
        return null;
      };
      __decorate$5([
        Autowired("gridOptionsWrapper")
      ], ColumnController2.prototype, "gridOptionsWrapper", void 0);
      __decorate$5([
        Autowired("expressionService")
      ], ColumnController2.prototype, "expressionService", void 0);
      __decorate$5([
        Autowired("columnFactory")
      ], ColumnController2.prototype, "columnFactory", void 0);
      __decorate$5([
        Autowired("displayedGroupCreator")
      ], ColumnController2.prototype, "displayedGroupCreator", void 0);
      __decorate$5([
        Autowired("autoWidthCalculator")
      ], ColumnController2.prototype, "autoWidthCalculator", void 0);
      __decorate$5([
        Autowired("columnUtils")
      ], ColumnController2.prototype, "columnUtils", void 0);
      __decorate$5([
        Autowired("columnAnimationService")
      ], ColumnController2.prototype, "columnAnimationService", void 0);
      __decorate$5([
        Autowired("autoGroupColService")
      ], ColumnController2.prototype, "autoGroupColService", void 0);
      __decorate$5([
        Optional("aggFuncService")
      ], ColumnController2.prototype, "aggFuncService", void 0);
      __decorate$5([
        Optional("valueCache")
      ], ColumnController2.prototype, "valueCache", void 0);
      __decorate$5([
        Optional("animationFrameService")
      ], ColumnController2.prototype, "animationFrameService", void 0);
      __decorate$5([
        Autowired("rowModel")
      ], ColumnController2.prototype, "rowModel", void 0);
      __decorate$5([
        Autowired("columnApi")
      ], ColumnController2.prototype, "columnApi", void 0);
      __decorate$5([
        Autowired("gridApi")
      ], ColumnController2.prototype, "gridApi", void 0);
      __decorate$5([
        Autowired("sortController")
      ], ColumnController2.prototype, "sortController", void 0);
      __decorate$5([
        Autowired("columnDefFactory")
      ], ColumnController2.prototype, "columnDefFactory", void 0);
      __decorate$5([
        PostConstruct
      ], ColumnController2.prototype, "init", null);
      __decorate$5([
        __param$2(0, Qualifier("loggerFactory"))
      ], ColumnController2.prototype, "setBeans", null);
      ColumnController2 = __decorate$5([
        Bean("columnController")
      ], ColumnController2);
      return ColumnController2;
    }(BeanStub);
    function padStart(value, totalStringSize) {
      var asString = "" + value;
      while (asString.length < totalStringSize) {
        asString = "0" + asString;
      }
      return asString;
    }
    function createArrayOfNumbers(first, last2) {
      var result = [];
      for (var i = first; i <= last2; i++) {
        result.push(i);
      }
      return result;
    }
    function isNumeric(value) {
      return value !== "" && !isNaN(parseFloat(value)) && isFinite(value);
    }
    function getMaxSafeInteger() {
      return Number.MAX_SAFE_INTEGER || 9007199254740991;
    }
    function cleanNumber(value) {
      if (typeof value === "string") {
        value = parseInt(value, 10);
      }
      if (typeof value === "number") {
        return Math.floor(value);
      } else {
        return null;
      }
    }
    function decToHex(number, bytes) {
      var hex = "";
      for (var i = 0; i < bytes; i++) {
        hex += String.fromCharCode(number & 255);
        number >>>= 8;
      }
      return hex;
    }
    function formatNumberTwoDecimalPlacesAndCommas(value) {
      if (typeof value !== "number") {
        return "";
      }
      return formatNumberCommas(Math.round(value * 100) / 100);
    }
    function formatNumberCommas(value) {
      if (typeof value !== "number") {
        return "";
      }
      return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
    }
    function sum(values2) {
      return values2 == null ? null : values2.reduce(function(total, value) {
        return total + value;
      }, 0);
    }
    var NumberUtils = Object.freeze({
      __proto__: null,
      padStart,
      createArrayOfNumbers,
      isNumeric,
      getMaxSafeInteger,
      cleanNumber,
      decToHex,
      formatNumberTwoDecimalPlacesAndCommas,
      formatNumberCommas,
      sum
    });
    var __extends$2 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$6 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ColumnUtils = function(_super) {
      __extends$2(ColumnUtils2, _super);
      function ColumnUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ColumnUtils2.prototype.calculateColInitialWidth = function(colDef) {
        var optionsWrapper = this.gridOptionsWrapper;
        var minColWidth = colDef.minWidth != null ? colDef.minWidth : optionsWrapper.getMinColWidth();
        var maxColWidth = colDef.maxWidth != null ? colDef.maxWidth : optionsWrapper.getMaxColWidth() || getMaxSafeInteger();
        var width;
        var colDefWidth = attrToNumber(colDef.width);
        var colDefInitialWidth = attrToNumber(colDef.initialWidth);
        if (colDefWidth != null) {
          width = colDefWidth;
        } else if (colDefInitialWidth != null) {
          width = colDefInitialWidth;
        } else {
          width = optionsWrapper.getColWidth();
        }
        return Math.max(Math.min(width, maxColWidth), minColWidth);
      };
      ColumnUtils2.prototype.getOriginalPathForColumn = function(column, originalBalancedTree) {
        var result = [];
        var found = false;
        var recursePath = function(balancedColumnTree, dept) {
          for (var i = 0; i < balancedColumnTree.length; i++) {
            if (found) {
              return;
            }
            var node = balancedColumnTree[i];
            if (node instanceof OriginalColumnGroup) {
              var nextNode = node;
              recursePath(nextNode.getChildren(), dept + 1);
              result[dept] = node;
            } else if (node === column) {
              found = true;
            }
          }
        };
        recursePath(originalBalancedTree, 0);
        return found ? result : null;
      };
      ColumnUtils2.prototype.depthFirstOriginalTreeSearch = function(parent, tree, callback) {
        var _this = this;
        if (!tree) {
          return;
        }
        tree.forEach(function(child) {
          if (child instanceof OriginalColumnGroup) {
            _this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);
          }
          callback(child, parent);
        });
      };
      ColumnUtils2.prototype.depthFirstAllColumnTreeSearch = function(tree, callback) {
        var _this = this;
        if (!tree) {
          return;
        }
        tree.forEach(function(child) {
          if (child instanceof ColumnGroup) {
            _this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);
          }
          callback(child);
        });
      };
      ColumnUtils2.prototype.depthFirstDisplayedColumnTreeSearch = function(tree, callback) {
        var _this = this;
        if (!tree) {
          return;
        }
        tree.forEach(function(child) {
          if (child instanceof ColumnGroup) {
            _this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);
          }
          callback(child);
        });
      };
      __decorate$6([
        Autowired("gridOptionsWrapper")
      ], ColumnUtils2.prototype, "gridOptionsWrapper", void 0);
      ColumnUtils2 = __decorate$6([
        Bean("columnUtils")
      ], ColumnUtils2);
      return ColumnUtils2;
    }(BeanStub);
    var __extends$3 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$7 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DisplayedGroupCreator = function(_super) {
      __extends$3(DisplayedGroupCreator2, _super);
      function DisplayedGroupCreator2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      DisplayedGroupCreator2.prototype.createDisplayedGroups = function(sortedVisibleColumns, balancedColumnTree, groupInstanceIdCreator, pinned, oldDisplayedGroups) {
        var _this = this;
        var result = [];
        var previousRealPath;
        var previousOriginalPath;
        var oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups);
        sortedVisibleColumns.forEach(function(currentColumn) {
          var currentOriginalPath = _this.getOriginalPathForColumn(balancedColumnTree, currentColumn);
          var currentRealPath = [];
          var firstColumn = !previousOriginalPath;
          for (var i = 0; i < currentOriginalPath.length; i++) {
            if (firstColumn || currentOriginalPath[i] !== previousOriginalPath[i]) {
              var newGroup = _this.createColumnGroup(currentOriginalPath[i], groupInstanceIdCreator, oldColumnsMapped, pinned);
              currentRealPath[i] = newGroup;
              if (i == 0) {
                result.push(newGroup);
              } else {
                currentRealPath[i - 1].addChild(newGroup);
              }
            } else {
              currentRealPath[i] = previousRealPath[i];
            }
          }
          var noColumnGroups = currentRealPath.length === 0;
          if (noColumnGroups) {
            result.push(currentColumn);
          } else {
            var leafGroup = last(currentRealPath);
            leafGroup.addChild(currentColumn);
          }
          previousRealPath = currentRealPath;
          previousOriginalPath = currentOriginalPath;
        });
        this.setupParentsIntoColumns(result, null);
        return result;
      };
      DisplayedGroupCreator2.prototype.createColumnGroup = function(originalGroup, groupInstanceIdCreator, oldColumnsMapped, pinned) {
        var groupId = originalGroup.getGroupId();
        var instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);
        var uniqueId = ColumnGroup.createUniqueId(groupId, instanceId);
        var columnGroup = oldColumnsMapped[uniqueId];
        if (columnGroup && columnGroup.getOriginalColumnGroup() !== originalGroup) {
          columnGroup = null;
        }
        if (exists(columnGroup)) {
          columnGroup.reset();
        } else {
          columnGroup = new ColumnGroup(originalGroup, groupId, instanceId, pinned);
          this.context.createBean(columnGroup);
        }
        return columnGroup;
      };
      DisplayedGroupCreator2.prototype.mapOldGroupsById = function(displayedGroups) {
        var result = {};
        var recursive = function(columnsOrGroups) {
          columnsOrGroups.forEach(function(columnOrGroup) {
            if (columnOrGroup instanceof ColumnGroup) {
              var columnGroup = columnOrGroup;
              result[columnOrGroup.getUniqueId()] = columnGroup;
              recursive(columnGroup.getChildren());
            }
          });
        };
        if (displayedGroups) {
          recursive(displayedGroups);
        }
        return result;
      };
      DisplayedGroupCreator2.prototype.setupParentsIntoColumns = function(columnsOrGroups, parent) {
        var _this = this;
        columnsOrGroups.forEach(function(columnsOrGroup) {
          columnsOrGroup.setParent(parent);
          if (columnsOrGroup instanceof ColumnGroup) {
            var columnGroup = columnsOrGroup;
            _this.setupParentsIntoColumns(columnGroup.getChildren(), columnGroup);
          }
        });
      };
      DisplayedGroupCreator2.prototype.getOriginalPathForColumn = function(balancedColumnTree, column) {
        var result = [];
        var found = false;
        var recursePath = function(balancedColumnTree2, dept) {
          for (var i = 0; i < balancedColumnTree2.length; i++) {
            if (found) {
              return;
            }
            var node = balancedColumnTree2[i];
            if (node instanceof OriginalColumnGroup) {
              var nextNode = node;
              recursePath(nextNode.getChildren(), dept + 1);
              result[dept] = node;
            } else if (node === column) {
              found = true;
            }
          }
        };
        recursePath(balancedColumnTree, 0);
        if (found) {
          return result;
        }
        console.warn("could not get path");
        return null;
      };
      __decorate$7([
        Autowired("columnUtils")
      ], DisplayedGroupCreator2.prototype, "columnUtils", void 0);
      DisplayedGroupCreator2 = __decorate$7([
        Bean("displayedGroupCreator")
      ], DisplayedGroupCreator2);
      return DisplayedGroupCreator2;
    }(BeanStub);
    var __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var PropertyKeys = function() {
      function PropertyKeys2() {
      }
      PropertyKeys2.STRING_PROPERTIES = [
        "sortingOrder",
        "rowClass",
        "rowSelection",
        "overlayLoadingTemplate",
        "overlayNoRowsTemplate",
        "quickFilterText",
        "rowModelType",
        "editType",
        "domLayout",
        "clipboardDeliminator",
        "rowGroupPanelShow",
        "multiSortKey",
        "pivotColumnGroupTotals",
        "pivotRowTotals",
        "pivotPanelShow",
        "fillHandleDirection"
      ];
      PropertyKeys2.OBJECT_PROPERTIES = [
        "components",
        "frameworkComponents",
        "rowStyle",
        "context",
        "autoGroupColumnDef",
        "localeText",
        "icons",
        "datasource",
        "serverSideDatasource",
        "viewportDatasource",
        "groupRowRendererParams",
        "aggFuncs",
        "fullWidthCellRendererParams",
        "defaultColGroupDef",
        "defaultColDef",
        "defaultExportParams",
        "columnTypes",
        "rowClassRules",
        "detailGridOptions",
        "detailCellRendererParams",
        "loadingCellRendererParams",
        "loadingOverlayComponentParams",
        "noRowsOverlayComponentParams",
        "popupParent",
        "colResizeDefault",
        "reduxStore",
        "statusBar",
        "sideBar",
        "chartThemeOverrides",
        "customChartThemes"
      ];
      PropertyKeys2.ARRAY_PROPERTIES = [
        "alignedGrids",
        "rowData",
        "columnDefs",
        "excelStyles",
        "pinnedTopRowData",
        "pinnedBottomRowData",
        "chartThemes"
      ];
      PropertyKeys2.NUMBER_PROPERTIES = [
        "rowHeight",
        "detailRowHeight",
        "rowBuffer",
        "colWidth",
        "headerHeight",
        "groupHeaderHeight",
        "floatingFiltersHeight",
        "pivotHeaderHeight",
        "pivotGroupHeaderHeight",
        "groupDefaultExpanded",
        "minColWidth",
        "maxColWidth",
        "viewportRowModelPageSize",
        "viewportRowModelBufferSize",
        "autoSizePadding",
        "maxBlocksInCache",
        "maxConcurrentDatasourceRequests",
        "tooltipShowDelay",
        "cacheOverflowSize",
        "paginationPageSize",
        "cacheBlockSize",
        "infiniteInitialRowCount",
        "scrollbarWidth",
        "batchUpdateWaitMillis",
        "asyncTransactionWaitMillis",
        "blockLoadDebounceMillis",
        "keepDetailRowsCount",
        "undoRedoCellEditingLimit",
        "cellFlashDelay",
        "cellFadeDelay"
      ];
      PropertyKeys2.BOOLEAN_PROPERTIES = [
        "suppressMakeColumnVisibleAfterUnGroup",
        "suppressRowClickSelection",
        "suppressCellSelection",
        "suppressHorizontalScroll",
        "alwaysShowVerticalScroll",
        "debug",
        "enableBrowserTooltips",
        "enableCellExpressions",
        "angularCompileRows",
        "angularCompileFilters",
        "groupSuppressAutoColumn",
        "groupSelectsChildren",
        "groupIncludeFooter",
        "groupIncludeTotalFooter",
        "groupUseEntireRow",
        "groupSuppressBlankHeader",
        "suppressMenuHide",
        "suppressRowDeselection",
        "unSortIcon",
        "suppressMultiSort",
        "singleClickEdit",
        "suppressLoadingOverlay",
        "suppressNoRowsOverlay",
        "suppressAutoSize",
        "skipHeaderOnAutoSize",
        "suppressParentsInRowNodes",
        "suppressColumnMoveAnimation",
        "suppressMovableColumns",
        "suppressFieldDotNotation",
        "enableRangeSelection",
        "enableRangeHandle",
        "enableFillHandle",
        "suppressClearOnFillReduction",
        "deltaSort",
        "suppressTouch",
        "suppressAsyncEvents",
        "allowContextMenuWithControlKey",
        "suppressContextMenu",
        "rememberGroupStateWhenNewData",
        "enableCellChangeFlash",
        "suppressDragLeaveHidesColumns",
        "suppressMiddleClickScrolls",
        "suppressPreventDefaultOnMouseWheel",
        "suppressCopyRowsToClipboard",
        "copyHeadersToClipboard",
        "pivotMode",
        "suppressAggFuncInHeader",
        "suppressColumnVirtualisation",
        "suppressAggAtRootLevel",
        "suppressFocusAfterRefresh",
        "functionsPassive",
        "functionsReadOnly",
        "animateRows",
        "groupSelectsFiltered",
        "groupRemoveSingleChildren",
        "groupRemoveLowestSingleChildren",
        "enableRtl",
        "suppressClickEdit",
        "rowDragManaged",
        "suppressRowDrag",
        "suppressMoveWhenRowDragging",
        "enableMultiRowDragging",
        "enableGroupEdit",
        "embedFullWidthRows",
        "deprecatedEmbedFullWidthRows",
        "suppressPaginationPanel",
        "floatingFilter",
        "groupHideOpenParents",
        "groupMultiAutoColumn",
        "pagination",
        "stopEditingWhenGridLosesFocus",
        "paginationAutoPageSize",
        "suppressScrollOnNewData",
        "purgeClosedRowNodes",
        "cacheQuickFilter",
        "deltaRowDataMode",
        "ensureDomOrder",
        "accentedSort",
        "suppressChangeDetection",
        "valueCache",
        "valueCacheNeverExpires",
        "aggregateOnlyChangedColumns",
        "suppressAnimationFrame",
        "suppressExcelExport",
        "suppressCsvExport",
        "treeData",
        "masterDetail",
        "suppressMultiRangeSelection",
        "enterMovesDownAfterEdit",
        "enterMovesDown",
        "suppressPropertyNamesCheck",
        "rowMultiSelectWithClick",
        "suppressEnterpriseResetOnNewColumns",
        "enableOldSetFilterModel",
        "suppressRowHoverHighlight",
        "suppressRowTransform",
        "suppressClipboardPaste",
        "suppressLastEmptyLineOnPaste",
        "serverSideSortingAlwaysResets",
        "reactNext",
        "suppressSetColumnStateEvents",
        "suppressColumnStateEvents",
        "enableCharts",
        "deltaColumnMode",
        "suppressMaintainUnsortedOrder",
        "enableCellTextSelection",
        "suppressBrowserResizeObserver",
        "suppressMaxRenderedRowRestriction",
        "excludeChildrenWhenTreeDataFiltering",
        "tooltipMouseTrack",
        "keepDetailRows",
        "paginateChildRows",
        "preventDefaultOnContextMenu",
        "undoRedoCellEditing",
        "allowDragFromColumnsToolPanel",
        "immutableData",
        "immutableColumns",
        "pivotSuppressAutoColumn",
        "suppressExpandablePivotGroups",
        "applyColumnDefOrder",
        "debounceVerticalScrollbar",
        "detailRowAutoHeight"
      ];
      PropertyKeys2.FUNCTION_PROPERTIES = [
        "localeTextFunc",
        "groupRowInnerRenderer",
        "groupRowInnerRendererFramework",
        "dateComponent",
        "dateComponentFramework",
        "groupRowRenderer",
        "groupRowRendererFramework",
        "isExternalFilterPresent",
        "getRowHeight",
        "doesExternalFilterPass",
        "getRowClass",
        "getRowStyle",
        "getRowClassRules",
        "traverseNode",
        "getContextMenuItems",
        "getMainMenuItems",
        "processRowPostCreate",
        "processCellForClipboard",
        "groupRowAggNodes",
        "getRowNodeId",
        "isFullWidthCell",
        "fullWidthCellRenderer",
        "fullWidthCellRendererFramework",
        "processSecondaryColDef",
        "processSecondaryColGroupDef",
        "getBusinessKeyForNode",
        "sendToClipboard",
        "navigateToNextHeader",
        "tabToNextHeader",
        "navigateToNextCell",
        "tabToNextCell",
        "getDetailRowData",
        "processCellFromClipboard",
        "getDocument",
        "postProcessPopup",
        "getChildCount",
        "getDataPath",
        "loadingCellRenderer",
        "loadingCellRendererFramework",
        "loadingOverlayComponent",
        "loadingOverlayComponentFramework",
        "noRowsOverlayComponent",
        "noRowsOverlayComponentFramework",
        "detailCellRenderer",
        "detailCellRendererFramework",
        "defaultGroupSortComparator",
        "isRowMaster",
        "isRowSelectable",
        "postSort",
        "processHeaderForClipboard",
        "paginationNumberFormatter",
        "processDataFromClipboard",
        "getServerSideGroupKey",
        "isServerSideGroup",
        "suppressKeyboardEvent",
        "createChartContainer",
        "processChartOptions",
        "getChartToolbarItems",
        "fillOperation"
      ];
      PropertyKeys2.ALL_PROPERTIES = __spreadArrays(PropertyKeys2.ARRAY_PROPERTIES, PropertyKeys2.OBJECT_PROPERTIES, PropertyKeys2.STRING_PROPERTIES, PropertyKeys2.NUMBER_PROPERTIES, PropertyKeys2.FUNCTION_PROPERTIES, PropertyKeys2.BOOLEAN_PROPERTIES);
      PropertyKeys2.FRAMEWORK_PROPERTIES = [
        "__ob__",
        "__v_skip",
        "__metadata__",
        "mappedColumnProperties",
        "hasChildColumns",
        "toColDef",
        "createColDefFromGridColumn"
      ];
      return PropertyKeys2;
    }();
    var __spreadArrays$1 = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var ComponentUtil = function() {
      function ComponentUtil2() {
      }
      ComponentUtil2.getEventCallbacks = function() {
        if (!ComponentUtil2.EVENT_CALLBACKS) {
          ComponentUtil2.EVENT_CALLBACKS = ComponentUtil2.EVENTS.map(function(event) {
            return ComponentUtil2.getCallbackForEvent(event);
          });
        }
        return ComponentUtil2.EVENT_CALLBACKS;
      };
      ComponentUtil2.copyAttributesToGridOptions = function(gridOptions, component, skipEventDeprecationCheck) {
        if (typeof gridOptions !== "object") {
          gridOptions = {};
        }
        var pGridOptions = gridOptions;
        var keyExists = function(key) {
          return typeof component[key] !== "undefined";
        };
        __spreadArrays$1(ComponentUtil2.ARRAY_PROPERTIES, ComponentUtil2.STRING_PROPERTIES, ComponentUtil2.OBJECT_PROPERTIES, ComponentUtil2.FUNCTION_PROPERTIES, ComponentUtil2.getEventCallbacks()).filter(keyExists).forEach(function(key) {
          return pGridOptions[key] = component[key];
        });
        ComponentUtil2.BOOLEAN_PROPERTIES.filter(keyExists).forEach(function(key) {
          return pGridOptions[key] = ComponentUtil2.toBoolean(component[key]);
        });
        ComponentUtil2.NUMBER_PROPERTIES.filter(keyExists).forEach(function(key) {
          return pGridOptions[key] = ComponentUtil2.toNumber(component[key]);
        });
        return gridOptions;
      };
      ComponentUtil2.getCallbackForEvent = function(eventName) {
        if (!eventName || eventName.length < 2) {
          return eventName;
        } else {
          return "on" + eventName[0].toUpperCase() + eventName.substr(1);
        }
      };
      ComponentUtil2.processOnChange = function(changes, gridOptions, api, columnApi) {
        if (!changes) {
          return;
        }
        var pGridOptions = gridOptions;
        var keyExists = function(key) {
          return changes[key];
        };
        __spreadArrays$1(ComponentUtil2.ARRAY_PROPERTIES, ComponentUtil2.OBJECT_PROPERTIES, ComponentUtil2.STRING_PROPERTIES, ComponentUtil2.getEventCallbacks()).filter(keyExists).forEach(function(key) {
          return pGridOptions[key] = changes[key].currentValue;
        });
        ComponentUtil2.BOOLEAN_PROPERTIES.filter(keyExists).forEach(function(key) {
          return pGridOptions[key] = ComponentUtil2.toBoolean(changes[key].currentValue);
        });
        ComponentUtil2.NUMBER_PROPERTIES.filter(keyExists).forEach(function(key) {
          return pGridOptions[key] = ComponentUtil2.toNumber(changes[key].currentValue);
        });
        if (changes.enableCellTextSelection) {
          api.setEnableCellTextSelection(ComponentUtil2.toBoolean(changes.enableCellTextSelection.currentValue));
        }
        if (changes.quickFilterText) {
          api.setQuickFilter(changes.quickFilterText.currentValue);
        }
        if (changes.rowData) {
          api.setRowData(changes.rowData.currentValue);
        }
        if (changes.pinnedTopRowData) {
          api.setPinnedTopRowData(changes.pinnedTopRowData.currentValue);
        }
        if (changes.pinnedBottomRowData) {
          api.setPinnedBottomRowData(changes.pinnedBottomRowData.currentValue);
        }
        if (changes.autoGroupColumnDef) {
          api.setAutoGroupColumnDef(changes.autoGroupColumnDef.currentValue, "gridOptionsChanged");
        }
        if (changes.columnDefs) {
          api.setColumnDefs(changes.columnDefs.currentValue, "gridOptionsChanged");
        }
        if (changes.datasource) {
          api.setDatasource(changes.datasource.currentValue);
        }
        if (changes.headerHeight) {
          api.setHeaderHeight(ComponentUtil2.toNumber(changes.headerHeight.currentValue));
        }
        if (changes.paginationPageSize) {
          api.paginationSetPageSize(ComponentUtil2.toNumber(changes.paginationPageSize.currentValue));
        }
        if (changes.pivotMode) {
          columnApi.setPivotMode(ComponentUtil2.toBoolean(changes.pivotMode.currentValue));
        }
        if (changes.groupRemoveSingleChildren) {
          api.setGroupRemoveSingleChildren(ComponentUtil2.toBoolean(changes.groupRemoveSingleChildren.currentValue));
        }
        if (changes.suppressRowDrag) {
          api.setSuppressRowDrag(ComponentUtil2.toBoolean(changes.suppressRowDrag.currentValue));
        }
        if (changes.suppressMoveWhenRowDragging) {
          api.setSuppressMoveWhenRowDragging(ComponentUtil2.toBoolean(changes.suppressMoveWhenRowDragging.currentValue));
        }
        if (changes.suppressRowClickSelection) {
          api.setSuppressRowClickSelection(ComponentUtil2.toBoolean(changes.suppressRowClickSelection.currentValue));
        }
        if (changes.suppressClipboardPaste) {
          api.setSuppressClipboardPaste(ComponentUtil2.toBoolean(changes.suppressClipboardPaste.currentValue));
        }
        if (changes.sideBar) {
          api.setSideBar(changes.sideBar.currentValue);
        }
        var event = {
          type: Events.EVENT_COMPONENT_STATE_CHANGED,
          api: gridOptions.api,
          columnApi: gridOptions.columnApi
        };
        iterateObject(changes, function(key, value) {
          event[key] = value;
        });
        api.dispatchEvent(event);
      };
      ComponentUtil2.toBoolean = function(value) {
        if (typeof value === "boolean") {
          return value;
        } else if (typeof value === "string") {
          return value.toUpperCase() === "TRUE" || value == "";
        } else {
          return false;
        }
      };
      ComponentUtil2.toNumber = function(value) {
        if (typeof value === "number") {
          return value;
        } else if (typeof value === "string") {
          return Number(value);
        } else {
          return void 0;
        }
      };
      ComponentUtil2.EVENTS = [];
      ComponentUtil2.STRING_PROPERTIES = PropertyKeys.STRING_PROPERTIES;
      ComponentUtil2.OBJECT_PROPERTIES = PropertyKeys.OBJECT_PROPERTIES;
      ComponentUtil2.ARRAY_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES;
      ComponentUtil2.NUMBER_PROPERTIES = PropertyKeys.NUMBER_PROPERTIES;
      ComponentUtil2.BOOLEAN_PROPERTIES = PropertyKeys.BOOLEAN_PROPERTIES;
      ComponentUtil2.FUNCTION_PROPERTIES = PropertyKeys.FUNCTION_PROPERTIES;
      ComponentUtil2.ALL_PROPERTIES = PropertyKeys.ALL_PROPERTIES;
      return ComponentUtil2;
    }();
    ComponentUtil.EVENTS = values(Events);
    var __spreadArrays$2 = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var ColDefUtil = function() {
      function ColDefUtil2() {
      }
      ColDefUtil2.STRING_PROPERTIES = [
        "headerName",
        "columnGroupShow",
        "headerClass",
        "toolPanelClass",
        "headerValueGetter",
        "pivotKeys",
        "groupId",
        "colId",
        "sort",
        "initialSort",
        "field",
        "type",
        "tooltipComponent",
        "tooltipField",
        "headerTooltip",
        "cellClass",
        "showRowGroup",
        "template",
        "templateUrl",
        "filter",
        "initialAggFunc",
        "aggFunc",
        "cellRenderer",
        "cellEditor",
        "pinned",
        "initialPinned",
        "chartDataType"
      ];
      ColDefUtil2.OBJECT_PROPERTIES = [
        "headerGroupComponent",
        "headerGroupComponentFramework",
        "headerGroupComponentParams",
        "cellStyle",
        "cellRendererParams",
        "cellEditorFramework",
        "cellEditorParams",
        "pinnedRowCellRendererFramework",
        "pinnedRowCellRendererParams",
        "filterFramework",
        "filterParams",
        "pivotValueColumn",
        "headerComponent",
        "headerComponentFramework",
        "headerComponentParams",
        "floatingFilterComponent",
        "floatingFilterComponentParams",
        "floatingFilterComponentFramework",
        "tooltipComponent",
        "tooltipComponentParams",
        "tooltipComponentFramework",
        "refData",
        "columnsMenuParams"
      ];
      ColDefUtil2.ARRAY_PROPERTIES = [
        "children",
        "sortingOrder",
        "allowedAggFuncs",
        "menuTabs",
        "pivotTotalColumnIds",
        "cellClassRules",
        "icons"
      ];
      ColDefUtil2.NUMBER_PROPERTIES = [
        "sortedAt",
        "sortIndex",
        "initialSortIndex",
        "flex",
        "initialFlex",
        "width",
        "initialWidth",
        "minWidth",
        "maxWidth",
        "rowGroupIndex",
        "initialRowGroupIndex",
        "pivotIndex",
        "initialPivotIndex"
      ];
      ColDefUtil2.BOOLEAN_PROPERTIES = [
        "suppressCellFlash",
        "suppressColumnsToolPanel",
        "suppressFiltersToolPanel",
        "openByDefault",
        "marryChildren",
        "hide",
        "initialHide",
        "rowGroup",
        "initialRowGroup",
        "pivot",
        "initialPivot",
        "checkboxSelection",
        "headerCheckboxSelection",
        "headerCheckboxSelectionFilteredOnly",
        "suppressMenu",
        "suppressMovable",
        "lockPosition",
        "lockVisible",
        "lockPinned",
        "unSortIcon",
        "suppressSizeToFit",
        "suppressAutoSize",
        "enableRowGroup",
        "enablePivot",
        "enableValue",
        "editable",
        "suppressPaste",
        "suppressNavigable",
        "enableCellChangeFlash",
        "rowDrag",
        "dndSource",
        "autoHeight",
        "wrapText",
        "sortable",
        "resizable",
        "singleClickEdit",
        "floatingFilter"
      ];
      ColDefUtil2.FUNCTION_PROPERTIES = [
        "dndSourceOnRowDrag",
        "valueGetter",
        "valueSetter",
        "filterValueGetter",
        "keyCreator",
        "cellRenderer",
        "cellRendererFramework",
        "pinnedRowCellRenderer",
        "valueFormatter",
        "pinnedRowValueFormatter",
        "valueParser",
        "comparator",
        "equals",
        "pivotComparator",
        "suppressKeyboardEvent",
        "suppressHeaderKeyboardEvent",
        "colSpan",
        "rowSpan",
        "getQuickFilterText",
        "newValueHandler",
        "onCellValueChanged",
        "onCellClicked",
        "onCellDoubleClicked",
        "onCellContextMenu",
        "rowDragText",
        "tooltipValueGetter",
        "tooltipComponent",
        "tooltipComponentFramework",
        "cellRendererSelector",
        "cellEditorSelector"
      ];
      ColDefUtil2.ALL_PROPERTIES = __spreadArrays$2(ColDefUtil2.ARRAY_PROPERTIES, ColDefUtil2.OBJECT_PROPERTIES, ColDefUtil2.STRING_PROPERTIES, ColDefUtil2.NUMBER_PROPERTIES, ColDefUtil2.FUNCTION_PROPERTIES, ColDefUtil2.BOOLEAN_PROPERTIES);
      ColDefUtil2.FRAMEWORK_PROPERTIES = [
        "__ob__",
        "__v_skip",
        "__metadata__",
        "mappedColumnProperties",
        "hasChildColumns",
        "toColDef",
        "createColDefFromGridColumn"
      ];
      return ColDefUtil2;
    }();
    var Color = function() {
      function Color2(r, g, b, a) {
        if (a === void 0) {
          a = 1;
        }
        this.r = Math.min(1, Math.max(0, r || 0));
        this.g = Math.min(1, Math.max(0, g || 0));
        this.b = Math.min(1, Math.max(0, b || 0));
        this.a = Math.min(1, Math.max(0, a || 0));
      }
      Color2.fromString = function(str) {
        if (str.indexOf("#") >= 0) {
          return Color2.fromHexString(str);
        }
        var hex = Color2.nameToHex[str];
        if (hex) {
          return Color2.fromHexString(hex);
        }
        if (str.indexOf("rgb") >= 0) {
          return Color2.fromRgbaString(str);
        }
        throw new Error("Invalid color string: '" + str + "'");
      };
      Color2.fromHexString = function(str) {
        var values2 = str.match(Color2.hexRe);
        if (values2) {
          var r = parseInt(values2[1], 16);
          var g = parseInt(values2[2], 16);
          var b = parseInt(values2[3], 16);
          var a = values2[4] !== void 0 ? parseInt(values2[4], 16) : 255;
          return new Color2(r / 255, g / 255, b / 255, a / 255);
        }
        values2 = str.match(Color2.shortHexRe);
        if (values2) {
          var r = parseInt(values2[1], 16);
          var g = parseInt(values2[2], 16);
          var b = parseInt(values2[3], 16);
          var a = values2[4] !== void 0 ? parseInt(values2[4], 16) : 15;
          r += r * 16;
          g += g * 16;
          b += b * 16;
          a += a * 16;
          return new Color2(r / 255, g / 255, b / 255, a / 255);
        }
        throw new Error("Malformed hexadecimal color string: '" + str + "'");
      };
      Color2.fromRgbaString = function(str) {
        var values2 = str.match(Color2.rgbRe);
        if (values2) {
          return new Color2(+values2[1] / 255, +values2[2] / 255, +values2[3] / 255);
        }
        values2 = str.match(Color2.rgbaRe);
        if (values2) {
          return new Color2(+values2[1] / 255, +values2[2] / 255, +values2[3] / 255, +values2[4]);
        }
        throw new Error("Malformed rgb/rgba color string: '" + str + "'");
      };
      Color2.fromArray = function(arr) {
        if (arr.length === 4) {
          return new Color2(arr[0], arr[1], arr[2], arr[3]);
        }
        if (arr.length === 3) {
          return new Color2(arr[0], arr[1], arr[2]);
        }
        throw new Error("The given array should contain 3 or 4 color components (numbers).");
      };
      Color2.fromHSB = function(h, s, b, alpha) {
        if (alpha === void 0) {
          alpha = 1;
        }
        var rgb = Color2.HSBtoRGB(h, s, b);
        return new Color2(rgb[0], rgb[1], rgb[2], alpha);
      };
      Color2.padHex = function(str) {
        return str.length === 1 ? "0" + str : str;
      };
      Color2.prototype.toHexString = function() {
        var hex = "#" + Color2.padHex(Math.round(this.r * 255).toString(16)) + Color2.padHex(Math.round(this.g * 255).toString(16)) + Color2.padHex(Math.round(this.b * 255).toString(16));
        if (this.a < 1) {
          hex += Color2.padHex(Math.round(this.a * 255).toString(16));
        }
        return hex;
      };
      Color2.prototype.toRgbaString = function(fractionDigits) {
        if (fractionDigits === void 0) {
          fractionDigits = 3;
        }
        var components = [
          Math.round(this.r * 255),
          Math.round(this.g * 255),
          Math.round(this.b * 255)
        ];
        var k = Math.pow(10, fractionDigits);
        if (this.a !== 1) {
          components.push(Math.round(this.a * k) / k);
          return "rgba(" + components.join(", ") + ")";
        }
        return "rgb(" + components.join(", ") + ")";
      };
      Color2.prototype.toString = function() {
        if (this.a === 1) {
          return this.toHexString();
        }
        return this.toRgbaString();
      };
      Color2.prototype.toHSB = function() {
        return Color2.RGBtoHSB(this.r, this.g, this.b);
      };
      Color2.RGBtoHSB = function(r, g, b) {
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var S = max !== 0 ? (max - min) / max : 0;
        var H = NaN;
        if (min !== max) {
          var delta = max - min;
          var rc = (max - r) / delta;
          var gc = (max - g) / delta;
          var bc = (max - b) / delta;
          if (r === max) {
            H = bc - gc;
          } else if (g === max) {
            H = 2 + rc - bc;
          } else {
            H = 4 + gc - rc;
          }
          H /= 6;
          if (H < 0) {
            H = H + 1;
          }
        }
        return [H * 360, S, max];
      };
      Color2.HSBtoRGB = function(H, S, B) {
        if (isNaN(H)) {
          H = 0;
        }
        H = (H % 360 + 360) % 360 / 360;
        var r = 0;
        var g = 0;
        var b = 0;
        if (S === 0) {
          r = g = b = B;
        } else {
          var h = (H - Math.floor(H)) * 6;
          var f = h - Math.floor(h);
          var p = B * (1 - S);
          var q = B * (1 - S * f);
          var t = B * (1 - S * (1 - f));
          switch (h >> 0) {
            case 0:
              r = B;
              g = t;
              b = p;
              break;
            case 1:
              r = q;
              g = B;
              b = p;
              break;
            case 2:
              r = p;
              g = B;
              b = t;
              break;
            case 3:
              r = p;
              g = q;
              b = B;
              break;
            case 4:
              r = t;
              g = p;
              b = B;
              break;
            case 5:
              r = B;
              g = p;
              b = q;
              break;
          }
        }
        return [r, g, b];
      };
      Color2.prototype.derive = function(hueShift, saturationFactor, brightnessFactor, opacityFactor) {
        var hsb = Color2.RGBtoHSB(this.r, this.g, this.b);
        var b = hsb[2];
        if (b == 0 && brightnessFactor > 1) {
          b = 0.05;
        }
        var h = ((hsb[0] + hueShift) % 360 + 360) % 360;
        var s = Math.max(Math.min(hsb[1] * saturationFactor, 1), 0);
        b = Math.max(Math.min(b * brightnessFactor, 1), 0);
        var a = Math.max(Math.min(this.a * opacityFactor, 1), 0);
        var rgba = Color2.HSBtoRGB(h, s, b);
        rgba.push(a);
        return Color2.fromArray(rgba);
      };
      Color2.prototype.brighter = function() {
        return this.derive(0, 1, 1 / 0.7, 1);
      };
      Color2.prototype.darker = function() {
        return this.derive(0, 1, 0.7, 1);
      };
      Color2.hexRe = /\s*#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?\s*$/;
      Color2.shortHexRe = /\s*#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])?\s*$/;
      Color2.rgbRe = /\s*rgb\((\d+),\s*(\d+),\s*(\d+)\)\s*/;
      Color2.rgbaRe = /\s*rgba\((\d+),\s*(\d+),\s*(\d+),\s*([.\d]+)\)\s*/;
      Color2.nameToHex = Object.freeze({
        aliceblue: "#F0F8FF",
        antiquewhite: "#FAEBD7",
        aqua: "#00FFFF",
        aquamarine: "#7FFFD4",
        azure: "#F0FFFF",
        beige: "#F5F5DC",
        bisque: "#FFE4C4",
        black: "#000000",
        blanchedalmond: "#FFEBCD",
        blue: "#0000FF",
        blueviolet: "#8A2BE2",
        brown: "#A52A2A",
        burlywood: "#DEB887",
        cadetblue: "#5F9EA0",
        chartreuse: "#7FFF00",
        chocolate: "#D2691E",
        coral: "#FF7F50",
        cornflowerblue: "#6495ED",
        cornsilk: "#FFF8DC",
        crimson: "#DC143C",
        cyan: "#00FFFF",
        darkblue: "#00008B",
        darkcyan: "#008B8B",
        darkgoldenrod: "#B8860B",
        darkgray: "#A9A9A9",
        darkgreen: "#006400",
        darkgrey: "#A9A9A9",
        darkkhaki: "#BDB76B",
        darkmagenta: "#8B008B",
        darkolivegreen: "#556B2F",
        darkorange: "#FF8C00",
        darkorchid: "#9932CC",
        darkred: "#8B0000",
        darksalmon: "#E9967A",
        darkseagreen: "#8FBC8F",
        darkslateblue: "#483D8B",
        darkslategray: "#2F4F4F",
        darkslategrey: "#2F4F4F",
        darkturquoise: "#00CED1",
        darkviolet: "#9400D3",
        deeppink: "#FF1493",
        deepskyblue: "#00BFFF",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1E90FF",
        firebrick: "#B22222",
        floralwhite: "#FFFAF0",
        forestgreen: "#228B22",
        fuchsia: "#FF00FF",
        gainsboro: "#DCDCDC",
        ghostwhite: "#F8F8FF",
        gold: "#FFD700",
        goldenrod: "#DAA520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#ADFF2F",
        grey: "#808080",
        honeydew: "#F0FFF0",
        hotpink: "#FF69B4",
        indianred: "#CD5C5C",
        indigo: "#4B0082",
        ivory: "#FFFFF0",
        khaki: "#F0E68C",
        lavender: "#E6E6FA",
        lavenderblush: "#FFF0F5",
        lawngreen: "#7CFC00",
        lemonchiffon: "#FFFACD",
        lightblue: "#ADD8E6",
        lightcoral: "#F08080",
        lightcyan: "#E0FFFF",
        lightgoldenrodyellow: "#FAFAD2",
        lightgray: "#D3D3D3",
        lightgreen: "#90EE90",
        lightgrey: "#D3D3D3",
        lightpink: "#FFB6C1",
        lightsalmon: "#FFA07A",
        lightseagreen: "#20B2AA",
        lightskyblue: "#87CEFA",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#B0C4DE",
        lightyellow: "#FFFFE0",
        lime: "#00FF00",
        limegreen: "#32CD32",
        linen: "#FAF0E6",
        magenta: "#FF00FF",
        maroon: "#800000",
        mediumaquamarine: "#66CDAA",
        mediumblue: "#0000CD",
        mediumorchid: "#BA55D3",
        mediumpurple: "#9370DB",
        mediumseagreen: "#3CB371",
        mediumslateblue: "#7B68EE",
        mediumspringgreen: "#00FA9A",
        mediumturquoise: "#48D1CC",
        mediumvioletred: "#C71585",
        midnightblue: "#191970",
        mintcream: "#F5FFFA",
        mistyrose: "#FFE4E1",
        moccasin: "#FFE4B5",
        navajowhite: "#FFDEAD",
        navy: "#000080",
        oldlace: "#FDF5E6",
        olive: "#808000",
        olivedrab: "#6B8E23",
        orange: "#FFA500",
        orangered: "#FF4500",
        orchid: "#DA70D6",
        palegoldenrod: "#EEE8AA",
        palegreen: "#98FB98",
        paleturquoise: "#AFEEEE",
        palevioletred: "#DB7093",
        papayawhip: "#FFEFD5",
        peachpuff: "#FFDAB9",
        peru: "#CD853F",
        pink: "#FFC0CB",
        plum: "#DDA0DD",
        powderblue: "#B0E0E6",
        purple: "#800080",
        rebeccapurple: "#663399",
        red: "#FF0000",
        rosybrown: "#BC8F8F",
        royalblue: "#4169E1",
        saddlebrown: "#8B4513",
        salmon: "#FA8072",
        sandybrown: "#F4A460",
        seagreen: "#2E8B57",
        seashell: "#FFF5EE",
        sienna: "#A0522D",
        silver: "#C0C0C0",
        skyblue: "#87CEEB",
        slateblue: "#6A5ACD",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#FFFAFA",
        springgreen: "#00FF7F",
        steelblue: "#4682B4",
        tan: "#D2B48C",
        teal: "#008080",
        thistle: "#D8BFD8",
        tomato: "#FF6347",
        turquoise: "#40E0D0",
        violet: "#EE82EE",
        wheat: "#F5DEB3",
        white: "#FFFFFF",
        whitesmoke: "#F5F5F5",
        yellow: "#FFFF00",
        yellowgreen: "#9ACD32"
      });
      return Color2;
    }();
    function stringToArray(strData, delimiter) {
      if (delimiter === void 0) {
        delimiter = ",";
      }
      var data = [];
      var isNewline = function(char) {
        return char === "\r" || char === "\n";
      };
      var insideQuotedField = false;
      var _loop_1 = function(row2, column2, position2) {
        var previousChar = strData[position2 - 1];
        var currentChar = strData[position2];
        var nextChar = strData[position2 + 1];
        var ensureDataExists = function() {
          if (!data[row2]) {
            data[row2] = [];
          }
          if (!data[row2][column2]) {
            data[row2][column2] = "";
          }
        };
        ensureDataExists();
        if (currentChar === '"') {
          if (insideQuotedField) {
            if (nextChar === '"') {
              data[row2][column2] += '"';
              position2++;
            } else {
              insideQuotedField = false;
            }
            return out_row_1 = row2, out_column_1 = column2, out_position_1 = position2, "continue";
          } else if (previousChar === void 0 || previousChar === delimiter || isNewline(previousChar)) {
            insideQuotedField = true;
            return out_row_1 = row2, out_column_1 = column2, out_position_1 = position2, "continue";
          }
        }
        if (!insideQuotedField) {
          if (currentChar === delimiter) {
            column2++;
            ensureDataExists();
            return out_row_1 = row2, out_column_1 = column2, out_position_1 = position2, "continue";
          } else if (isNewline(currentChar)) {
            column2 = 0;
            row2++;
            ensureDataExists();
            if (currentChar === "\r" && nextChar === "\n") {
              position2++;
            }
            return out_row_1 = row2, out_column_1 = column2, out_position_1 = position2, "continue";
          }
        }
        data[row2][column2] += currentChar;
        out_row_1 = row2;
        out_column_1 = column2;
        out_position_1 = position2;
      };
      var out_row_1, out_column_1, out_position_1;
      for (var row = 0, column = 0, position = 0; position < strData.length; position++) {
        _loop_1(row, column, position);
        row = out_row_1;
        column = out_column_1;
        position = out_position_1;
      }
      return data;
    }
    var CsvUtils = Object.freeze({
      __proto__: null,
      stringToArray
    });
    var isSafari;
    var isIE;
    var isEdge;
    var isChrome;
    var isFirefox;
    var isIOS;
    function isBrowserIE() {
      if (isIE === void 0) {
        isIE = !!document.documentMode;
      }
      return isIE;
    }
    function isBrowserEdge() {
      if (isEdge === void 0) {
        isEdge = !isBrowserIE() && !!window.StyleMedia;
      }
      return isEdge;
    }
    function isBrowserSafari() {
      if (isSafari === void 0) {
        var anyWindow = window;
        var hasNotification = function(p) {
          return p && p.toString() === "[object SafariRemoteNotification]";
        };
        isSafari = Object.prototype.toString.call(anyWindow.HTMLElement).indexOf("Constructor") > 0 || hasNotification(anyWindow.safari && anyWindow.safari.pushNotification);
      }
      return isSafari;
    }
    function isBrowserChrome() {
      if (isChrome === void 0) {
        var win = window;
        isChrome = !!win.chrome && (!!win.chrome.webstore || !!win.chrome.runtime) || /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
      }
      return isChrome;
    }
    function isBrowserFirefox() {
      if (isFirefox === void 0) {
        var win = window;
        isFirefox = typeof win.InstallTrigger !== "undefined";
      }
      return isFirefox;
    }
    function isIOSUserAgent() {
      if (isIOS === void 0) {
        isIOS = (/iPad|iPhone|iPod/.test(navigator.platform) || navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1) && !window.MSStream;
      }
      return isIOS;
    }
    function getTabIndex(el) {
      if (!el) {
        return null;
      }
      var numberTabIndex = el.tabIndex;
      var tabIndex = el.getAttribute("tabIndex");
      if (isBrowserIE() && numberTabIndex === 0 && tabIndex === null) {
        var map2 = {
          a: true,
          body: true,
          button: true,
          frame: true,
          iframe: true,
          img: true,
          input: true,
          isindex: true,
          object: true,
          select: true,
          textarea: true
        };
        return map2[el.nodeName.toLowerCase()] === true ? "0" : null;
      }
      if (numberTabIndex === -1 && (tabIndex === null || tabIndex === "" && !isBrowserFirefox())) {
        return null;
      }
      return numberTabIndex.toString();
    }
    function getMaxDivHeight() {
      if (!document.body) {
        return -1;
      }
      var res = 1e6;
      var testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6e6 : 1e9;
      var div = document.createElement("div");
      document.body.appendChild(div);
      while (true) {
        var test_1 = res * 2;
        div.style.height = test_1 + "px";
        if (test_1 > testUpTo || div.clientHeight !== test_1) {
          break;
        } else {
          res = test_1;
        }
      }
      document.body.removeChild(div);
      return res;
    }
    function getScrollbarWidth() {
      var body = document.body;
      var div = document.createElement("div");
      div.style.width = div.style.height = "100px";
      div.style.opacity = "0";
      div.style.overflow = "scroll";
      div.style.msOverflowStyle = "scrollbar";
      div.style.position = "absolute";
      body.appendChild(div);
      var width = div.offsetWidth - div.clientWidth;
      if (width === 0 && div.clientWidth === 0) {
        return null;
      }
      if (div.parentNode) {
        div.parentNode.removeChild(div);
      }
      return width;
    }
    function hasOverflowScrolling() {
      var prefixes = ["webkit", "moz", "o", "ms"];
      var div = document.createElement("div");
      var body = document.getElementsByTagName("body")[0];
      var found = false;
      var p;
      body.appendChild(div);
      div.setAttribute("style", prefixes.map(function(prefix) {
        return "-" + prefix + "-overflow-scrolling: touch";
      }).concat("overflow-scrolling: touch").join(";"));
      var computedStyle = window.getComputedStyle(div);
      if (computedStyle.overflowScrolling === "touch") {
        found = true;
      }
      if (!found) {
        for (var _i = 0, prefixes_1 = prefixes; _i < prefixes_1.length; _i++) {
          p = prefixes_1[_i];
          if (computedStyle[p + "OverflowScrolling"] === "touch") {
            found = true;
            break;
          }
        }
      }
      if (div.parentNode) {
        div.parentNode.removeChild(div);
      }
      return found;
    }
    function getBodyWidth() {
      if (document.body) {
        return document.body.clientWidth;
      }
      if (window.innerHeight) {
        return window.innerWidth;
      }
      if (document.documentElement && document.documentElement.clientWidth) {
        return document.documentElement.clientWidth;
      }
      return -1;
    }
    function getBodyHeight() {
      if (document.body) {
        return document.body.clientHeight;
      }
      if (window.innerHeight) {
        return window.innerHeight;
      }
      if (document.documentElement && document.documentElement.clientHeight) {
        return document.documentElement.clientHeight;
      }
      return -1;
    }
    var BrowserUtils = Object.freeze({
      __proto__: null,
      isBrowserIE,
      isBrowserEdge,
      isBrowserSafari,
      isBrowserChrome,
      isBrowserFirefox,
      isIOSUserAgent,
      getTabIndex,
      getMaxDivHeight,
      getScrollbarWidth,
      hasOverflowScrolling,
      getBodyWidth,
      getBodyHeight
    });
    var rtlNegativeScroll;
    function addCssClass(element, className) {
      if (!element || !className || className.length === 0) {
        return;
      }
      if (className.indexOf(" ") >= 0) {
        className.split(" ").forEach(function(value) {
          return addCssClass(element, value);
        });
        return;
      }
      if (element.classList) {
        element.classList.add(className);
      } else if (element.className && element.className.length > 0) {
        var cssClasses = element.className.split(" ");
        if (cssClasses.indexOf(className) < 0) {
          cssClasses.push(className);
          element.setAttribute("class", cssClasses.join(" "));
        }
      } else {
        element.setAttribute("class", className);
      }
      return element;
    }
    function removeCssClass(element, className) {
      if (!element || !className || className.length === 0) {
        return;
      }
      if (className.indexOf(" ") >= 0) {
        className.split(" ").forEach(function(value) {
          return removeCssClass(element, value);
        });
        return;
      }
      if (element.classList) {
        element.classList.remove(className);
      } else if (element.className && element.className.length > 0) {
        var newClassName = element.className.split(" ").filter(function(c) {
          return c !== className;
        }).join(" ");
        element.setAttribute("class", newClassName);
      }
    }
    function addOrRemoveCssClass(element, className, addOrRemove) {
      if (addOrRemove) {
        addCssClass(element, className);
      } else {
        removeCssClass(element, className);
      }
    }
    function radioCssClass(element, elementClass, otherElementClass) {
      var parent = element.parentElement;
      var sibling = parent.firstChild;
      while (sibling) {
        if (elementClass) {
          addOrRemoveCssClass(sibling, elementClass, sibling === element);
        }
        if (otherElementClass) {
          addOrRemoveCssClass(sibling, otherElementClass, sibling !== element);
        }
        sibling = sibling.nextSibling;
      }
    }
    function containsClass(element, className) {
      if (element.classList) {
        return element.classList.contains(className);
      }
      if (element.className) {
        var onlyClass = element.className === className;
        var contains = element.className.indexOf(" " + className + " ") >= 0;
        var startsWithClass = element.className.indexOf(className + " ") === 0;
        var endsWithClass = element.className.lastIndexOf(" " + className) === element.className.length - className.length - 1;
        return onlyClass || contains || startsWithClass || endsWithClass;
      }
      return false;
    }
    function setDisplayed(element, displayed) {
      addOrRemoveCssClass(element, "ag-hidden", !displayed);
    }
    function setVisible(element, visible) {
      addOrRemoveCssClass(element, "ag-invisible", !visible);
    }
    function setDisabled(element, disabled) {
      var attributeName = "disabled";
      var addOrRemoveDisabledAttribute = disabled ? function(e) {
        return e.setAttribute(attributeName, "");
      } : function(e) {
        return e.removeAttribute(attributeName);
      };
      addOrRemoveDisabledAttribute(element);
      nodeListForEach(element.querySelectorAll("input"), function(input) {
        return addOrRemoveDisabledAttribute(input);
      });
    }
    function isElementChildOfClass(element, cls, maxNest) {
      var counter = 0;
      while (element) {
        if (containsClass(element, cls)) {
          return true;
        }
        element = element.parentElement;
        if (maxNest && ++counter > maxNest) {
          break;
        }
      }
      return false;
    }
    function getElementSize(el) {
      var _a = window.getComputedStyle(el), height = _a.height, width = _a.width, paddingTop = _a.paddingTop, paddingRight = _a.paddingRight, paddingBottom = _a.paddingBottom, paddingLeft = _a.paddingLeft, marginTop = _a.marginTop, marginRight = _a.marginRight, marginBottom = _a.marginBottom, marginLeft = _a.marginLeft, boxSizing = _a.boxSizing;
      return {
        height: parseFloat(height),
        width: parseFloat(width),
        paddingTop: parseFloat(paddingTop),
        paddingRight: parseFloat(paddingRight),
        paddingBottom: parseFloat(paddingBottom),
        paddingLeft: parseFloat(paddingLeft),
        marginTop: parseFloat(marginTop),
        marginRight: parseFloat(marginRight),
        marginBottom: parseFloat(marginBottom),
        marginLeft: parseFloat(marginLeft),
        boxSizing
      };
    }
    function getInnerHeight(el) {
      var size = getElementSize(el);
      if (size.boxSizing === "border-box") {
        return size.height - size.paddingTop - size.paddingBottom;
      }
      return size.height;
    }
    function getInnerWidth(el) {
      var size = getElementSize(el);
      if (size.boxSizing === "border-box") {
        return size.width - size.paddingLeft - size.paddingRight;
      }
      return size.width;
    }
    function getAbsoluteHeight(el) {
      var size = getElementSize(el);
      var marginRight = size.marginBottom + size.marginTop;
      return Math.ceil(el.offsetHeight + marginRight);
    }
    function getAbsoluteWidth(el) {
      var size = getElementSize(el);
      var marginWidth = size.marginLeft + size.marginRight;
      return Math.ceil(el.offsetWidth + marginWidth);
    }
    function isRtlNegativeScroll() {
      if (typeof rtlNegativeScroll === "boolean") {
        return rtlNegativeScroll;
      }
      var template = document.createElement("div");
      template.style.direction = "rtl";
      template.style.width = "1px";
      template.style.height = "1px";
      template.style.position = "fixed";
      template.style.top = "0px";
      template.style.overflow = "hidden";
      template.dir = "rtl";
      template.innerHTML = '<div style="width: 2px">\n            <span style="display: inline-block; width: 1px"></span>\n            <span style="display: inline-block; width: 1px"></span>\n        </div>';
      document.body.appendChild(template);
      template.scrollLeft = 1;
      rtlNegativeScroll = template.scrollLeft === 0;
      document.body.removeChild(template);
      return rtlNegativeScroll;
    }
    function getScrollLeft(element, rtl) {
      var scrollLeft = element.scrollLeft;
      if (rtl) {
        scrollLeft = Math.abs(scrollLeft);
        if (isBrowserChrome() && !isRtlNegativeScroll()) {
          scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
        }
      }
      return scrollLeft;
    }
    function setScrollLeft(element, value, rtl) {
      if (rtl) {
        if (isRtlNegativeScroll()) {
          value *= -1;
        } else if (isBrowserSafari() || isBrowserChrome()) {
          value = element.scrollWidth - element.clientWidth - value;
        }
      }
      element.scrollLeft = value;
    }
    function clearElement(el) {
      while (el && el.firstChild) {
        el.removeChild(el.firstChild);
      }
    }
    function removeElement(parent, cssSelector) {
      removeFromParent(parent.querySelector(cssSelector));
    }
    function removeFromParent(node) {
      if (node && node.parentNode) {
        node.parentNode.removeChild(node);
      }
    }
    function isVisible(element) {
      return element.offsetParent !== null;
    }
    function loadTemplate(template) {
      var tempDiv = document.createElement("div");
      tempDiv.innerHTML = (template || "").trim();
      return tempDiv.firstChild;
    }
    function appendHtml(eContainer, htmlTemplate) {
      if (eContainer.lastChild) {
        eContainer.insertAdjacentHTML("afterbegin", htmlTemplate);
      } else {
        eContainer.innerHTML = htmlTemplate;
      }
    }
    function getElementAttribute(element, attributeName) {
      if (element.attributes && element.attributes[attributeName]) {
        var attribute = element.attributes[attributeName];
        return attribute.value;
      }
      return null;
    }
    function offsetHeight(element) {
      return element && element.clientHeight ? element.clientHeight : 0;
    }
    function offsetWidth(element) {
      return element && element.clientWidth ? element.clientWidth : 0;
    }
    function ensureDomOrder(eContainer, eChild, eChildBefore) {
      if (eChildBefore && eChildBefore.nextSibling === eChild) {
        return;
      }
      if (eChildBefore) {
        if (eChildBefore.nextSibling) {
          eContainer.insertBefore(eChild, eChildBefore.nextSibling);
        } else {
          eContainer.appendChild(eChild);
        }
      } else {
        if (eContainer.firstChild && eContainer.firstChild !== eChild) {
          eContainer.insertAdjacentElement("afterbegin", eChild);
        }
      }
    }
    function setDomChildOrder(eContainer, orderedChildren) {
      for (var i = 0; i < orderedChildren.length; i++) {
        var correctCellAtIndex = orderedChildren[i];
        var actualCellAtIndex = eContainer.children[i];
        if (actualCellAtIndex !== correctCellAtIndex) {
          eContainer.insertBefore(correctCellAtIndex, actualCellAtIndex);
        }
      }
    }
    function insertTemplateWithDomOrder(eContainer, htmlTemplate, eChildBefore) {
      var res;
      if (eChildBefore) {
        eChildBefore.insertAdjacentHTML("afterend", htmlTemplate);
        res = eChildBefore.nextSibling;
      } else {
        if (eContainer.firstChild) {
          eContainer.insertAdjacentHTML("afterbegin", htmlTemplate);
        } else {
          eContainer.innerHTML = htmlTemplate;
        }
        res = eContainer.firstChild;
      }
      return res;
    }
    function prependDC(parent, documentFragment) {
      if (exists(parent.firstChild)) {
        parent.insertBefore(documentFragment, parent.firstChild);
      } else {
        parent.appendChild(documentFragment);
      }
    }
    function addStylesToElement(eElement, styles) {
      if (!styles) {
        return;
      }
      Object.keys(styles).forEach(function(key) {
        var keyCamelCase = hyphenToCamelCase(key);
        if (keyCamelCase) {
          eElement.style[keyCamelCase] = styles[key];
        }
      });
    }
    function isHorizontalScrollShowing(element) {
      return element.clientWidth < element.scrollWidth;
    }
    function isVerticalScrollShowing(element) {
      return element.clientHeight < element.scrollHeight;
    }
    function setElementWidth(element, width) {
      if (width === "flex") {
        element.style.width = null;
        element.style.minWidth = null;
        element.style.maxWidth = null;
        element.style.flex = "1 1 auto";
      } else {
        setFixedWidth(element, width);
      }
    }
    function setFixedWidth(element, width) {
      width = formatSize(width);
      element.style.width = width.toString();
      element.style.maxWidth = width.toString();
      element.style.minWidth = width.toString();
    }
    function setElementHeight(element, height) {
      if (height === "flex") {
        element.style.height = null;
        element.style.minHeight = null;
        element.style.maxHeight = null;
        element.style.flex = "1 1 auto";
      } else {
        setFixedHeight(element, height);
      }
    }
    function setFixedHeight(element, height) {
      height = formatSize(height);
      element.style.height = height.toString();
      element.style.maxHeight = height.toString();
      element.style.minHeight = height.toString();
    }
    function formatSize(size) {
      if (typeof size === "number") {
        return size + "px";
      }
      return size;
    }
    function isNode(o) {
      return typeof Node === "function" ? o instanceof Node : o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string";
    }
    function isElement(o) {
      return typeof HTMLElement === "function" ? o instanceof HTMLElement : o && isNonNullObject(o) && o.nodeType === 1 && typeof o.nodeName === "string";
    }
    function isNodeOrElement(o) {
      return isNode(o) || isElement(o);
    }
    function copyNodeList(nodeList) {
      if (nodeList == null) {
        return [];
      }
      var result = [];
      nodeListForEach(nodeList, function(node) {
        return result.push(node);
      });
      return result;
    }
    function iterateNamedNodeMap(map2, callback) {
      if (!map2) {
        return;
      }
      for (var i = 0; i < map2.length; i++) {
        var attr = map2[i];
        callback(attr.name, attr.value);
      }
    }
    function setCheckboxState(eCheckbox, state) {
      if (typeof state === "boolean") {
        eCheckbox.checked = state;
        eCheckbox.indeterminate = false;
      } else {
        eCheckbox.indeterminate = true;
      }
    }
    function addOrRemoveAttribute(element, name, value) {
      if (value == null) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value.toString());
      }
    }
    function nodeListForEach(nodeList, action) {
      if (nodeList == null) {
        return;
      }
      for (var i = 0; i < nodeList.length; i++) {
        action(nodeList[i]);
      }
    }
    var DomUtils = Object.freeze({
      __proto__: null,
      addCssClass,
      removeCssClass,
      addOrRemoveCssClass,
      radioCssClass,
      containsClass,
      setDisplayed,
      setVisible,
      setDisabled,
      isElementChildOfClass,
      getElementSize,
      getInnerHeight,
      getInnerWidth,
      getAbsoluteHeight,
      getAbsoluteWidth,
      isRtlNegativeScroll,
      getScrollLeft,
      setScrollLeft,
      clearElement,
      removeElement,
      removeFromParent,
      isVisible,
      loadTemplate,
      appendHtml,
      getElementAttribute,
      offsetHeight,
      offsetWidth,
      ensureDomOrder,
      setDomChildOrder,
      insertTemplateWithDomOrder,
      prependDC,
      addStylesToElement,
      isHorizontalScrollShowing,
      isVerticalScrollShowing,
      setElementWidth,
      setFixedWidth,
      setElementHeight,
      setFixedHeight,
      formatSize,
      isNode,
      isElement,
      isNodeOrElement,
      copyNodeList,
      iterateNamedNodeMap,
      setCheckboxState,
      addOrRemoveAttribute,
      nodeListForEach
    });
    function getNameOfClass(theClass) {
      var funcNameRegex = /function (.{1,})\(/;
      var funcAsString = theClass.toString();
      var results = funcNameRegex.exec(funcAsString);
      return results && results.length > 1 ? results[1] : "";
    }
    function findLineByLeastSquares(values2) {
      var len = values2.length;
      var maxDecimals = 0;
      if (len <= 1) {
        return values2;
      }
      for (var i = 0; i < values2.length; i++) {
        var value = values2[i];
        if (Math.floor(value) === value) {
          continue;
        }
        maxDecimals = Math.max(maxDecimals, value.toString().split(".")[1].length);
      }
      var sum_x = 0;
      var sum_y = 0;
      var sum_xy = 0;
      var sum_xx = 0;
      var y = 0;
      for (var x = 0; x < len; x++) {
        y = values2[x];
        sum_x += x;
        sum_y += y;
        sum_xx += x * x;
        sum_xy += x * y;
      }
      var m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);
      var b = sum_y / len - m * sum_x / len;
      var result = [];
      for (var x = 0; x <= len; x++) {
        result.push(parseFloat((x * m + b).toFixed(maxDecimals)));
      }
      return result;
    }
    function cssStyleObjectToMarkup(stylesToUse) {
      if (!stylesToUse) {
        return "";
      }
      var resParts = [];
      iterateObject(stylesToUse, function(styleKey, styleValue) {
        var styleKeyDashed = camelCaseToHyphen(styleKey);
        resParts.push(styleKeyDashed + ": " + styleValue + ";");
      });
      return resParts.join(" ");
    }
    function message(msg) {
      var eMessage = document.createElement("div");
      var eBox = document.querySelector("#__ag__message");
      eMessage.innerHTML = msg;
      if (!eBox) {
        var template = '<div id="__ag__message" style="display: inline-block; position: absolute; top: 0px; left: 0px; color: white; background-color: black; z-index: 20; padding: 2px; border: 1px solid darkred; height: 200px; overflow-y: auto;"></div>';
        eBox = loadTemplate(template);
        if (document.body) {
          document.body.appendChild(eBox);
        }
      }
      eBox.insertBefore(eMessage, eBox.children[0]);
    }
    function bindCellRendererToHtmlElement(cellRendererPromise, eTarget) {
      cellRendererPromise.then(function(cellRenderer) {
        var gui = cellRenderer.getGui();
        if (gui != null) {
          if (typeof gui === "object") {
            eTarget.appendChild(gui);
          } else {
            eTarget.innerHTML = gui;
          }
        }
      });
    }
    var GeneralUtils = Object.freeze({
      __proto__: null,
      getNameOfClass,
      findLineByLeastSquares,
      cssStyleObjectToMarkup,
      message,
      bindCellRendererToHtmlElement
    });
    function setAriaAttribute(element, attribute, value) {
      element.setAttribute(ariaAttributeName(attribute), value.toString());
    }
    function removeAriaAttribute(element, attribute) {
      element.removeAttribute(ariaAttributeName(attribute));
    }
    function ariaAttributeName(attribute) {
      return "aria-" + attribute;
    }
    function getAriaSortState(column) {
      var sort;
      if (column.isSortAscending()) {
        sort = "ascending";
      } else if (column.isSortDescending()) {
        sort = "descending";
      } else {
        sort = "none";
      }
      return sort;
    }
    function getAriaLevel(element) {
      return parseInt(element.getAttribute("aria-level"), 10);
    }
    function getAriaPosInSet(element) {
      return parseInt(element.getAttribute("aria-posinset"), 10);
    }
    function setAriaLabel(element, label) {
      setAriaAttribute(element, "label", label);
    }
    function setAriaLabelledBy(element, labelledBy) {
      setAriaAttribute(element, "labelledby", labelledBy);
    }
    function setAriaDescribedBy(element, describedby) {
      setAriaAttribute(element, "describedby", describedby);
    }
    function setAriaLevel(element, level) {
      setAriaAttribute(element, "level", level);
    }
    function setAriaDisabled(element, disabled) {
      setAriaAttribute(element, "disabled", disabled);
    }
    function setAriaExpanded(element, expanded) {
      setAriaAttribute(element, "expanded", expanded);
    }
    function removeAriaExpanded(element) {
      removeAriaAttribute(element, "expanded");
    }
    function setAriaSetSize(element, setsize) {
      setAriaAttribute(element, "setsize", setsize);
    }
    function setAriaPosInSet(element, position) {
      setAriaAttribute(element, "posinset", position);
    }
    function setAriaMultiSelectable(element, multiSelectable) {
      setAriaAttribute(element, "multiselectable", multiSelectable);
    }
    function setAriaRowCount(element, rowCount) {
      setAriaAttribute(element, "rowcount", rowCount);
    }
    function setAriaRowIndex(element, rowIndex) {
      setAriaAttribute(element, "rowindex", rowIndex);
    }
    function setAriaColCount(element, colCount) {
      setAriaAttribute(element, "colcount", colCount);
    }
    function setAriaColIndex(element, colIndex) {
      setAriaAttribute(element, "colindex", colIndex);
    }
    function setAriaColSpan(element, colSpan) {
      setAriaAttribute(element, "colspan", colSpan);
    }
    function setAriaSort(element, sort) {
      setAriaAttribute(element, "sort", sort);
    }
    function removeAriaSort(element) {
      removeAriaAttribute(element, "sort");
    }
    function setAriaSelected(element, selected) {
      var attributeName = "selected";
      if (selected) {
        setAriaAttribute(element, attributeName, selected);
      } else {
        removeAriaAttribute(element, attributeName);
      }
    }
    function setAriaChecked(element, checked) {
      setAriaAttribute(element, "checked", checked === void 0 ? "mixed" : checked);
    }
    var AriaUtils = Object.freeze({
      __proto__: null,
      getAriaSortState,
      getAriaLevel,
      getAriaPosInSet,
      setAriaLabel,
      setAriaLabelledBy,
      setAriaDescribedBy,
      setAriaLevel,
      setAriaDisabled,
      setAriaExpanded,
      removeAriaExpanded,
      setAriaSetSize,
      setAriaPosInSet,
      setAriaMultiSelectable,
      setAriaRowCount,
      setAriaRowIndex,
      setAriaColCount,
      setAriaColIndex,
      setAriaColSpan,
      setAriaSort,
      removeAriaSort,
      setAriaSelected,
      setAriaChecked
    });
    function serialiseDate(date, includeTime, separator) {
      if (includeTime === void 0) {
        includeTime = true;
      }
      if (separator === void 0) {
        separator = "-";
      }
      if (!date) {
        return null;
      }
      var serialised = [date.getFullYear(), date.getMonth() + 1, date.getDate()].map(function(part) {
        return padStart(part, 2);
      }).join(separator);
      if (includeTime) {
        serialised += " " + [date.getHours(), date.getMinutes(), date.getSeconds()].map(function(part) {
          return padStart(part, 2);
        }).join(":");
      }
      return serialised;
    }
    function parseDateTimeFromString(value) {
      if (!value) {
        return null;
      }
      var _a = value.split(" "), dateStr = _a[0], timeStr = _a[1];
      if (!dateStr) {
        return null;
      }
      var fields = dateStr.split("-").map(function(f) {
        return parseInt(f, 10);
      });
      if (fields.filter(function(f) {
        return !isNaN(f);
      }).length !== 3) {
        return null;
      }
      var year = fields[0], month = fields[1], day = fields[2];
      var date = new Date(year, month - 1, day);
      if (date.getFullYear() !== year || date.getMonth() !== month - 1 || date.getDate() !== day) {
        return null;
      }
      if (!timeStr || timeStr === "00:00:00") {
        return date;
      }
      var _b = timeStr.split(":").map(function(part) {
        return parseInt(part, 10);
      }), hours = _b[0], minutes = _b[1], seconds = _b[2];
      if (hours >= 0 && hours < 24) {
        date.setHours(hours);
      }
      if (minutes >= 0 && minutes < 60) {
        date.setMinutes(minutes);
      }
      if (seconds >= 0 && seconds < 60) {
        date.setSeconds(seconds);
      }
      return date;
    }
    var DateUtils = Object.freeze({
      __proto__: null,
      serialiseDate,
      parseDateTimeFromString
    });
    function fuzzyCheckStrings(inputValues, validValues, allSuggestions) {
      var fuzzyMatches = {};
      var invalidInputs = inputValues.filter(function(inputValue) {
        return !validValues.some(function(validValue) {
          return validValue === inputValue;
        });
      });
      if (invalidInputs.length > 0) {
        invalidInputs.forEach(function(invalidInput) {
          return fuzzyMatches[invalidInput] = fuzzySuggestions(invalidInput, allSuggestions);
        });
      }
      return fuzzyMatches;
    }
    function fuzzySuggestions(inputValue, allSuggestions, hideIrrelevant, weighted) {
      var search = weighted ? string_weighted_distances : string_distances;
      var thisSuggestions = allSuggestions.map(function(text) {
        return {
          value: text,
          relevance: search(inputValue.toLowerCase(), text.toLocaleLowerCase())
        };
      });
      thisSuggestions.sort(function(a, b) {
        return b.relevance - a.relevance;
      });
      if (hideIrrelevant) {
        thisSuggestions = thisSuggestions.filter(function(suggestion) {
          return suggestion.relevance !== 0;
        });
      }
      return thisSuggestions.map(function(suggestion) {
        return suggestion.value;
      });
    }
    function get_bigrams(from) {
      var s = from.toLowerCase();
      var v = new Array(s.length - 1);
      var i;
      var j;
      var ref;
      for (i = j = 0, ref = v.length; j <= ref; i = j += 1) {
        v[i] = s.slice(i, i + 2);
      }
      return v;
    }
    function string_distances(str1, str2) {
      if (str1.length === 0 && str2.length === 0) {
        return 0;
      }
      var pairs1 = get_bigrams(str1);
      var pairs2 = get_bigrams(str2);
      var union = pairs1.length + pairs2.length;
      var hit_count = 0;
      var j;
      var len;
      for (j = 0, len = pairs1.length; j < len; j++) {
        var x = pairs1[j];
        var k = void 0;
        var len1 = void 0;
        for (k = 0, len1 = pairs2.length; k < len1; k++) {
          var y = pairs2[k];
          if (x === y) {
            hit_count++;
          }
        }
      }
      return hit_count > 0 ? 2 * hit_count / union : 0;
    }
    function string_weighted_distances(str1, str2) {
      var a = str1.replace(/\s/g, "");
      var b = str2.replace(/\s/g, "");
      var weight = 0;
      var lastIndex = 0;
      for (var i = 0; i < a.length; i++) {
        var idx = b.indexOf(a[i]);
        if (idx === -1) {
          continue;
        }
        lastIndex = idx;
        weight += (b.length - lastIndex) * 100 / b.length;
        weight *= weight;
      }
      return weight;
    }
    var FuzzyMatchUtils = Object.freeze({
      __proto__: null,
      fuzzyCheckStrings,
      fuzzySuggestions,
      get_bigrams,
      string_distances,
      string_weighted_distances
    });
    var iconNameClassMap = {
      columnGroupOpened: "expanded",
      columnGroupClosed: "contracted",
      columnSelectClosed: "tree-closed",
      columnSelectOpen: "tree-open",
      columnSelectIndeterminate: "tree-indeterminate",
      columnMovePin: "pin",
      columnMoveHide: "eye-slash",
      columnMoveMove: "arrows",
      columnMoveLeft: "left",
      columnMoveRight: "right",
      columnMoveGroup: "group",
      columnMoveValue: "aggregation",
      columnMovePivot: "pivot",
      dropNotAllowed: "not-allowed",
      groupContracted: "tree-closed",
      groupExpanded: "tree-open",
      chart: "chart",
      close: "cross",
      cancel: "cancel",
      check: "tick",
      first: "first",
      previous: "previous",
      next: "next",
      last: "last",
      linked: "linked",
      unlinked: "unlinked",
      colorPicker: "color-picker",
      groupLoading: "loading",
      menu: "menu",
      filter: "filter",
      columns: "columns",
      maximize: "maximize",
      minimize: "minimize",
      menuPin: "pin",
      menuValue: "aggregation",
      menuAddRowGroup: "group",
      menuRemoveRowGroup: "group",
      clipboardCopy: "copy",
      clipboardPaste: "paste",
      pivotPanel: "pivot",
      rowGroupPanel: "group",
      valuePanel: "aggregation",
      columnDrag: "grip",
      rowDrag: "grip",
      save: "save",
      smallDown: "small-down",
      smallLeft: "small-left",
      smallRight: "small-right",
      smallUp: "small-up",
      sortAscending: "asc",
      sortDescending: "desc",
      sortUnSort: "none"
    };
    function createIcon(iconName, gridOptionsWrapper, column) {
      var iconContents = createIconNoSpan(iconName, gridOptionsWrapper, column);
      if (iconContents.className.indexOf("ag-icon") > -1) {
        return iconContents;
      }
      var eResult = document.createElement("span");
      eResult.appendChild(iconContents);
      return eResult;
    }
    function createIconNoSpan(iconName, gridOptionsWrapper, column, forceCreate) {
      var userProvidedIcon = null;
      var icons = column && column.getColDef().icons;
      if (icons) {
        userProvidedIcon = icons[iconName];
      }
      if (gridOptionsWrapper && !userProvidedIcon) {
        var optionsIcons = gridOptionsWrapper.getIcons();
        if (optionsIcons) {
          userProvidedIcon = optionsIcons[iconName];
        }
      }
      if (userProvidedIcon) {
        var rendererResult = void 0;
        if (typeof userProvidedIcon === "function") {
          rendererResult = userProvidedIcon();
        } else if (typeof userProvidedIcon === "string") {
          rendererResult = userProvidedIcon;
        } else {
          throw new Error("icon from grid options needs to be a string or a function");
        }
        if (typeof rendererResult === "string") {
          return loadTemplate(rendererResult);
        }
        if (isNodeOrElement(rendererResult)) {
          return rendererResult;
        }
        console.warn("ag-Grid: iconRenderer should return back a string or a dom object");
      } else {
        var span = document.createElement("span");
        var cssClass = iconNameClassMap[iconName];
        if (!cssClass) {
          if (!forceCreate) {
            console.warn("ag-Grid: Did not find icon " + iconName);
            cssClass = "";
          } else {
            cssClass = iconName;
          }
        }
        span.setAttribute("class", "ag-icon ag-icon-" + cssClass);
        span.setAttribute("unselectable", "on");
        span.setAttribute("role", "presentation");
        return span;
      }
    }
    var IconUtils = Object.freeze({
      __proto__: null,
      iconNameClassMap,
      createIcon,
      createIconNoSpan
    });
    var NUMPAD_DEL_NUMLOCK_ON_KEY = "Del";
    var NUMPAD_DEL_NUMLOCK_ON_CHARCODE = 46;
    function isKeyPressed(event, keyToCheck) {
      return (event.which || event.keyCode) === keyToCheck;
    }
    function isEventFromPrintableCharacter(event) {
      if (event.altKey || event.ctrlKey || event.metaKey) {
        return false;
      }
      var printableCharacter = event.key.length === 1;
      var numpadDelWithNumlockOnForEdgeOrIe = isNumpadDelWithNumlockOnForEdgeOrIe(event);
      return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;
    }
    function isUserSuppressingKeyboardEvent(gridOptionsWrapper, keyboardEvent, rowNode, column, editing) {
      var gridOptionsFunc = gridOptionsWrapper.getSuppressKeyboardEventFunc();
      var colDefFunc = column.getColDef().suppressKeyboardEvent;
      if (!gridOptionsFunc && !colDefFunc) {
        return false;
      }
      var params = {
        event: keyboardEvent,
        editing,
        column,
        api: gridOptionsWrapper.getApi(),
        node: rowNode,
        data: rowNode.data,
        colDef: column.getColDef(),
        context: gridOptionsWrapper.getContext(),
        columnApi: gridOptionsWrapper.getColumnApi()
      };
      if (colDefFunc) {
        var colDefFuncResult = colDefFunc(params);
        if (colDefFuncResult) {
          return true;
        }
      }
      if (gridOptionsFunc) {
        return gridOptionsFunc(params);
      }
      return false;
    }
    function isUserSuppressingHeaderKeyboardEvent(gridOptionsWrapper, keyboardEvent, headerRowIndex, column) {
      var colDef = column.getDefinition();
      var colDefFunc = colDef.suppressHeaderKeyboardEvent;
      if (!exists(colDefFunc)) {
        return false;
      }
      var params = {
        api: gridOptionsWrapper.getApi(),
        columnApi: gridOptionsWrapper.getColumnApi(),
        context: gridOptionsWrapper.getContext(),
        colDef,
        column,
        headerRowIndex,
        event: keyboardEvent
      };
      return !!colDefFunc(params);
    }
    function isNumpadDelWithNumlockOnForEdgeOrIe(event) {
      return (isBrowserEdge() || isBrowserIE()) && event.key === NUMPAD_DEL_NUMLOCK_ON_KEY && event.charCode === NUMPAD_DEL_NUMLOCK_ON_CHARCODE;
    }
    var KeyboardUtils = Object.freeze({
      __proto__: null,
      isKeyPressed,
      isEventFromPrintableCharacter,
      isUserSuppressingKeyboardEvent,
      isUserSuppressingHeaderKeyboardEvent
    });
    function keys(map2) {
      var keys2 = [];
      map2.forEach(function(_2, key) {
        return keys2.push(key);
      });
      return keys2;
    }
    var MapUtils = Object.freeze({
      __proto__: null,
      keys
    });
    function normalizeWheel(event) {
      var PIXEL_STEP = 10;
      var LINE_HEIGHT = 40;
      var PAGE_HEIGHT = 800;
      var sX = 0;
      var sY = 0;
      var pX = 0;
      var pY = 0;
      if ("detail" in event) {
        sY = event.detail;
      }
      if ("wheelDelta" in event) {
        sY = -event.wheelDelta / 120;
      }
      if ("wheelDeltaY" in event) {
        sY = -event.wheelDeltaY / 120;
      }
      if ("wheelDeltaX" in event) {
        sX = -event.wheelDeltaX / 120;
      }
      if ("axis" in event && event.axis === event.HORIZONTAL_AXIS) {
        sX = sY;
        sY = 0;
      }
      pX = sX * PIXEL_STEP;
      pY = sY * PIXEL_STEP;
      if ("deltaY" in event) {
        pY = event.deltaY;
      }
      if ("deltaX" in event) {
        pX = event.deltaX;
      }
      if ((pX || pY) && event.deltaMode) {
        if (event.deltaMode == 1) {
          pX *= LINE_HEIGHT;
          pY *= LINE_HEIGHT;
        } else {
          pX *= PAGE_HEIGHT;
          pY *= PAGE_HEIGHT;
        }
      }
      if (pX && !sX) {
        sX = pX < 1 ? -1 : 1;
      }
      if (pY && !sY) {
        sY = pY < 1 ? -1 : 1;
      }
      return {
        spinX: sX,
        spinY: sY,
        pixelX: pX,
        pixelY: pY
      };
    }
    function isLeftClick(mouseEvent) {
      if ("buttons" in mouseEvent) {
        return mouseEvent.buttons == 1;
      }
      var button = mouseEvent.which || mouseEvent.button;
      return button == 1;
    }
    function areEventsNear(e1, e2, pixelCount) {
      if (pixelCount === 0) {
        return false;
      }
      var diffX = Math.abs(e1.clientX - e2.clientX);
      var diffY = Math.abs(e1.clientY - e2.clientY);
      return Math.max(diffX, diffY) <= pixelCount;
    }
    var MouseUtils = Object.freeze({
      __proto__: null,
      normalizeWheel,
      isLeftClick,
      areEventsNear
    });
    function sortRowNodesByOrder(rowNodes, rowNodeOrder) {
      if (!rowNodes) {
        return;
      }
      var comparator = function(nodeA, nodeB) {
        var positionA = rowNodeOrder[nodeA.id];
        var positionB = rowNodeOrder[nodeB.id];
        var aHasIndex = positionA !== void 0;
        var bHasIndex = positionB !== void 0;
        var bothNodesAreUserNodes = aHasIndex && bHasIndex;
        var bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;
        if (bothNodesAreUserNodes) {
          return positionA - positionB;
        }
        if (bothNodesAreFillerNodes) {
          return nodeA.__objectId - nodeB.__objectId;
        }
        if (aHasIndex) {
          return 1;
        }
        return -1;
      };
      var rowNodeA;
      var rowNodeB;
      var atLeastOneOutOfOrder = false;
      for (var i = 0; i < rowNodes.length - 1; i++) {
        rowNodeA = rowNodes[i];
        rowNodeB = rowNodes[i + 1];
        if (comparator(rowNodeA, rowNodeB) > 0) {
          atLeastOneOutOfOrder = true;
          break;
        }
      }
      if (atLeastOneOutOfOrder) {
        rowNodes.sort(comparator);
      }
    }
    function traverseNodesWithKey(nodes, callback) {
      var keyParts = [];
      recursiveSearchNodes(nodes);
      function recursiveSearchNodes(currentNodes) {
        currentNodes.forEach(function(node) {
          if (node.group || node.hasChildren()) {
            keyParts.push(node.key);
            var key = keyParts.join("|");
            callback(node, key);
            recursiveSearchNodes(node.childrenAfterGroup);
            keyParts.pop();
          }
        });
      }
    }
    var RowNodeUtils = Object.freeze({
      __proto__: null,
      sortRowNodesByOrder,
      traverseNodesWithKey
    });
    function convertToSet(list) {
      var set2 = /* @__PURE__ */ new Set();
      list.forEach(function(x) {
        return set2.add(x);
      });
      return set2;
    }
    var SetUtils = Object.freeze({
      __proto__: null,
      convertToSet
    });
    var __assign = function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var utils = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, GeneralUtils), AriaUtils), ArrayUtils), BrowserUtils), CsvUtils), DateUtils), DomUtils), EventUtils), FunctionUtils), FuzzyMatchUtils), GenericUtils), IconUtils), KeyboardUtils), MapUtils), MouseUtils), NumberUtils), ObjectUtils), RowNodeUtils), SetUtils), StringUtils);
    var _ = utils;
    var NumberSequence = function() {
      function NumberSequence2(initValue, step) {
        if (initValue === void 0) {
          initValue = 0;
        }
        if (step === void 0) {
          step = 1;
        }
        this.nextValue = initValue;
        this.step = step;
      }
      NumberSequence2.prototype.next = function() {
        var valToReturn = this.nextValue;
        this.nextValue += this.step;
        return valToReturn;
      };
      NumberSequence2.prototype.peek = function() {
        return this.nextValue;
      };
      NumberSequence2.prototype.skip = function(count) {
        this.nextValue += count;
      };
      return NumberSequence2;
    }();
    (function(PromiseStatus) {
      PromiseStatus[PromiseStatus["IN_PROGRESS"] = 0] = "IN_PROGRESS";
      PromiseStatus[PromiseStatus["RESOLVED"] = 1] = "RESOLVED";
    })(exports.PromiseStatus || (exports.PromiseStatus = {}));
    var Promise2 = function() {
      function Promise3(callback) {
        var _this = this;
        this.status = exports.PromiseStatus.IN_PROGRESS;
        this.resolution = null;
        this.waiters = [];
        callback(function(value) {
          return _this.onDone(value);
        }, function(params) {
          return _this.onReject(params);
        });
      }
      Promise3.all = function(promises) {
        return new Promise3(function(resolve) {
          var remainingToResolve = promises.length;
          var combinedValues = new Array(remainingToResolve);
          forEach(promises, function(promise, index) {
            promise.then(function(value) {
              combinedValues[index] = value;
              remainingToResolve--;
              if (remainingToResolve === 0) {
                resolve(combinedValues);
              }
            });
          });
        });
      };
      Promise3.resolve = function(value) {
        if (value === void 0) {
          value = null;
        }
        return new Promise3(function(resolve) {
          return resolve(value);
        });
      };
      Promise3.prototype.then = function(func) {
        var _this = this;
        return new Promise3(function(resolve) {
          if (_this.status === exports.PromiseStatus.RESOLVED) {
            resolve(func(_this.resolution));
          } else {
            _this.waiters.push(function(value) {
              return resolve(func(value));
            });
          }
        });
      };
      Promise3.prototype.resolveNow = function(ifNotResolvedValue, ifResolved) {
        return this.status === exports.PromiseStatus.RESOLVED ? ifResolved(this.resolution) : ifNotResolvedValue;
      };
      Promise3.prototype.onDone = function(value) {
        this.status = exports.PromiseStatus.RESOLVED;
        this.resolution = value;
        forEach(this.waiters, function(waiter) {
          return waiter(value);
        });
      };
      Promise3.prototype.onReject = function(params) {
        console.warn("TBI");
      };
      return Promise3;
    }();
    var Timer = function() {
      function Timer2() {
        this.timestamp = new Date().getTime();
      }
      Timer2.prototype.print = function(msg) {
        var duration = new Date().getTime() - this.timestamp;
        console.info(msg + " = " + duration);
        this.timestamp = new Date().getTime();
      };
      return Timer2;
    }();
    var __extends$4 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$8 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var compIdSequence = new NumberSequence();
    var Component = function(_super) {
      __extends$4(Component2, _super);
      function Component2(template) {
        var _this = _super.call(this) || this;
        _this.annotatedGuiListeners = [];
        _this.displayed = true;
        _this.visible = true;
        _this.compId = compIdSequence.next();
        _this.cssClassStates = {};
        if (template) {
          _this.setTemplate(template);
        }
        return _this;
      }
      Component2.prototype.getCompId = function() {
        return this.compId;
      };
      Component2.prototype.createChildComponentsFromTags = function(parentNode, paramsMap) {
        var _this = this;
        var childNodeList = copyNodeList(parentNode.childNodes);
        forEach(childNodeList, function(childNode) {
          if (!(childNode instanceof HTMLElement)) {
            return;
          }
          var childComp = _this.createComponentFromElement(childNode, function(childComp2) {
            _this.copyAttributesFromNode(childNode, childComp2.getGui());
          }, paramsMap);
          if (childComp) {
            if (childComp.addItems && childNode.children.length) {
              _this.createChildComponentsFromTags(childNode, paramsMap);
              var items = Array.prototype.slice.call(childNode.children);
              childComp.addItems(items);
            }
            _this.swapComponentForNode(childComp, parentNode, childNode);
          } else if (childNode.childNodes) {
            _this.createChildComponentsFromTags(childNode, paramsMap);
          }
        });
      };
      Component2.prototype.createComponentFromElement = function(element, afterPreCreateCallback, paramsMap) {
        var key = element.nodeName;
        var componentParams = paramsMap ? paramsMap[element.getAttribute("ref")] : void 0;
        var ComponentClass = this.agStackComponentsRegistry.getComponentClass(key);
        if (ComponentClass) {
          var newComponent = new ComponentClass(componentParams);
          this.createBean(newComponent, null, afterPreCreateCallback);
          return newComponent;
        }
        return null;
      };
      Component2.prototype.copyAttributesFromNode = function(source, dest) {
        iterateNamedNodeMap(source.attributes, function(name, value) {
          return dest.setAttribute(name, value);
        });
      };
      Component2.prototype.swapComponentForNode = function(newComponent, parentNode, childNode) {
        var eComponent = newComponent.getGui();
        parentNode.replaceChild(eComponent, childNode);
        parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);
        this.addDestroyFunc(this.destroyBean.bind(this, newComponent));
        this.swapInComponentForQuerySelectors(newComponent, childNode);
      };
      Component2.prototype.swapInComponentForQuerySelectors = function(newComponent, childNode) {
        var thisNoType = this;
        this.iterateOverQuerySelectors(function(querySelector) {
          if (thisNoType[querySelector.attributeName] === childNode) {
            thisNoType[querySelector.attributeName] = newComponent;
          }
        });
      };
      Component2.prototype.iterateOverQuerySelectors = function(action) {
        var thisPrototype = Object.getPrototypeOf(this);
        while (thisPrototype != null) {
          var metaData = thisPrototype.__agComponentMetaData;
          var currentProtoName = getFunctionName(thisPrototype.constructor);
          if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
            forEach(metaData[currentProtoName].querySelectors, function(querySelector) {
              return action(querySelector);
            });
          }
          thisPrototype = Object.getPrototypeOf(thisPrototype);
        }
      };
      Component2.prototype.setTemplate = function(template, paramsMap) {
        var eGui = loadTemplate(template);
        this.setTemplateFromElement(eGui, paramsMap);
      };
      Component2.prototype.setTemplateFromElement = function(element, paramsMap) {
        this.eGui = element;
        this.eGui.__agComponent = this;
        this.addAnnotatedGuiEventListeners();
        this.wireQuerySelectors();
        if (!!this.getContext()) {
          this.createChildComponentsFromTags(this.getGui(), paramsMap);
        }
      };
      Component2.prototype.createChildComponentsPreConstruct = function() {
        if (!!this.getGui()) {
          this.createChildComponentsFromTags(this.getGui());
        }
      };
      Component2.prototype.wireQuerySelectors = function() {
        var _this = this;
        if (!this.eGui) {
          return;
        }
        var thisNoType = this;
        this.iterateOverQuerySelectors(function(querySelector) {
          var resultOfQuery = _this.eGui.querySelector(querySelector.querySelector);
          if (resultOfQuery) {
            thisNoType[querySelector.attributeName] = resultOfQuery.__agComponent || resultOfQuery;
          }
        });
      };
      Component2.prototype.addAnnotatedGuiEventListeners = function() {
        var _this = this;
        this.removeAnnotatedGuiEventListeners();
        if (!this.eGui) {
          return;
        }
        var listenerMethods = this.getAgComponentMetaData("guiListenerMethods");
        if (!listenerMethods) {
          return;
        }
        if (!this.annotatedGuiListeners) {
          this.annotatedGuiListeners = [];
        }
        listenerMethods.forEach(function(meta) {
          var element = _this.getRefElement(meta.ref);
          if (!element) {
            return;
          }
          var listener = _this[meta.methodName].bind(_this);
          element.addEventListener(meta.eventName, listener);
          _this.annotatedGuiListeners.push({ eventName: meta.eventName, listener, element });
        });
      };
      Component2.prototype.addAnnotatedGridEventListeners = function() {
        var _this = this;
        var listenerMetas = this.getAgComponentMetaData("gridListenerMethods");
        if (!listenerMetas) {
          return;
        }
        listenerMetas.forEach(function(meta) {
          var listener = _this[meta.methodName].bind(_this);
          _this.addManagedListener(_this.eventService, meta.eventName, listener);
        });
      };
      Component2.prototype.getAgComponentMetaData = function(key) {
        var res = [];
        var thisProto = Object.getPrototypeOf(this);
        while (thisProto != null) {
          var metaData = thisProto.__agComponentMetaData;
          var currentProtoName = getFunctionName(thisProto.constructor);
          if (metaData && metaData[currentProtoName] && metaData[currentProtoName][key]) {
            res = res.concat(metaData[currentProtoName][key]);
          }
          thisProto = Object.getPrototypeOf(thisProto);
        }
        return res;
      };
      Component2.prototype.removeAnnotatedGuiEventListeners = function() {
        if (!this.annotatedGuiListeners) {
          return;
        }
        forEach(this.annotatedGuiListeners, function(e) {
          e.element.removeEventListener(e.eventName, e.listener);
        });
        this.annotatedGuiListeners = [];
      };
      Component2.prototype.getGui = function() {
        return this.eGui;
      };
      Component2.prototype.getFocusableElement = function() {
        return this.eGui;
      };
      Component2.prototype.setParentComponent = function(component) {
        this.parentComponent = component;
      };
      Component2.prototype.getParentComponent = function() {
        return this.parentComponent;
      };
      Component2.prototype.setGui = function(eGui) {
        this.eGui = eGui;
      };
      Component2.prototype.queryForHtmlElement = function(cssSelector) {
        return this.eGui.querySelector(cssSelector);
      };
      Component2.prototype.queryForHtmlInputElement = function(cssSelector) {
        return this.eGui.querySelector(cssSelector);
      };
      Component2.prototype.appendChild = function(newChild, container) {
        if (!container) {
          container = this.eGui;
        }
        if (newChild == null) {
          return;
        }
        if (isNodeOrElement(newChild)) {
          container.appendChild(newChild);
        } else {
          var childComponent = newChild;
          container.appendChild(childComponent.getGui());
          this.addDestroyFunc(this.destroyBean.bind(this, childComponent));
        }
      };
      Component2.prototype.isDisplayed = function() {
        return this.displayed;
      };
      Component2.prototype.setVisible = function(visible) {
        if (visible !== this.visible) {
          this.visible = visible;
          setVisible(this.eGui, visible);
        }
      };
      Component2.prototype.setDisplayed = function(displayed) {
        if (displayed !== this.displayed) {
          this.displayed = displayed;
          setDisplayed(this.eGui, displayed);
          var event_1 = {
            type: Component2.EVENT_DISPLAYED_CHANGED,
            visible: this.displayed
          };
          this.dispatchEvent(event_1);
        }
      };
      Component2.prototype.destroy = function() {
        this.removeAnnotatedGuiEventListeners();
        _super.prototype.destroy.call(this);
      };
      Component2.prototype.addGuiEventListener = function(event, listener) {
        var _this = this;
        this.eGui.addEventListener(event, listener);
        this.addDestroyFunc(function() {
          return _this.eGui.removeEventListener(event, listener);
        });
      };
      Component2.prototype.addCssClass = function(className) {
        var updateNeeded = this.cssClassStates[className] !== true;
        if (updateNeeded) {
          addCssClass(this.eGui, className);
          this.cssClassStates[className] = true;
        }
      };
      Component2.prototype.removeCssClass = function(className) {
        var updateNeeded = this.cssClassStates[className] !== false;
        if (updateNeeded) {
          removeCssClass(this.eGui, className);
          this.cssClassStates[className] = false;
        }
      };
      Component2.prototype.addOrRemoveCssClass = function(className, addOrRemove) {
        var updateNeeded = this.cssClassStates[className] !== addOrRemove;
        if (updateNeeded) {
          addOrRemoveCssClass(this.eGui, className, addOrRemove);
          this.cssClassStates[className] = addOrRemove;
        }
      };
      Component2.prototype.getAttribute = function(key) {
        var eGui = this.eGui;
        return eGui ? eGui.getAttribute(key) : null;
      };
      Component2.prototype.getRefElement = function(refName) {
        return this.queryForHtmlElement('[ref="' + refName + '"]');
      };
      Component2.EVENT_DISPLAYED_CHANGED = "displayedChanged";
      __decorate$8([
        Autowired("agStackComponentsRegistry")
      ], Component2.prototype, "agStackComponentsRegistry", void 0);
      __decorate$8([
        PreConstruct
      ], Component2.prototype, "createChildComponentsPreConstruct", null);
      __decorate$8([
        PostConstruct
      ], Component2.prototype, "addAnnotatedGridEventListeners", null);
      return Component2;
    }(BeanStub);
    var __extends$5 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var PopupComponent = function(_super) {
      __extends$5(PopupComponent2, _super);
      function PopupComponent2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PopupComponent2.prototype.isPopup = function() {
        return true;
      };
      PopupComponent2.prototype.setParentComponent = function(container) {
        addCssClass(container.getGui(), "ag-has-popup");
        _super.prototype.setParentComponent.call(this, container);
      };
      PopupComponent2.prototype.destroy = function() {
        var parentComp = this.parentComponent;
        var hasParent = parentComp && parentComp.isAlive();
        if (hasParent) {
          removeCssClass(parentComp.getGui(), "ag-has-popup");
        }
        _super.prototype.destroy.call(this);
      };
      return PopupComponent2;
    }(Component);
    function QuerySelector(selector) {
      return querySelectorFunc.bind(this, selector);
    }
    function RefSelector(ref) {
      return querySelectorFunc.bind(this, "[ref=" + ref + "]");
    }
    function querySelectorFunc(selector, classPrototype, methodOrAttributeName, index) {
      if (selector === null) {
        console.error("ag-Grid: QuerySelector selector should not be null");
        return;
      }
      if (typeof index === "number") {
        console.error("ag-Grid: QuerySelector should be on an attribute");
        return;
      }
      addToObjectProps(classPrototype, "querySelectors", {
        attributeName: methodOrAttributeName,
        querySelector: selector
      });
    }
    function GridListener(eventName) {
      return gridListenerFunc.bind(this, eventName);
    }
    function gridListenerFunc(eventName, target, methodName) {
      if (eventName == null) {
        console.error("ag-Grid: GridListener eventName is missing");
        return;
      }
      addToObjectProps(target, "gridListenerMethods", {
        methodName,
        eventName
      });
    }
    function GuiListener(ref, eventName) {
      return guiListenerFunc.bind(this, ref, eventName);
    }
    function guiListenerFunc(ref, eventName, target, methodName) {
      if (eventName == null) {
        console.error("ag-Grid: GuiListener eventName is missing");
        return;
      }
      addToObjectProps(target, "guiListenerMethods", {
        methodName,
        eventName,
        ref
      });
    }
    function addToObjectProps(target, key, value) {
      var props = getOrCreateProps$1(target, getFunctionName(target.constructor));
      if (!props[key]) {
        props[key] = [];
      }
      props[key].push(value);
    }
    function getOrCreateProps$1(target, instanceName) {
      if (!target.__agComponentMetaData) {
        target.__agComponentMetaData = {};
      }
      if (!target.__agComponentMetaData[instanceName]) {
        target.__agComponentMetaData[instanceName] = {};
      }
      return target.__agComponentMetaData[instanceName];
    }
    var KeyCode = function() {
      function KeyCode2() {
      }
      KeyCode2.BACKSPACE = 8;
      KeyCode2.TAB = 9;
      KeyCode2.ENTER = 13;
      KeyCode2.SHIFT = 16;
      KeyCode2.ESCAPE = 27;
      KeyCode2.SPACE = 32;
      KeyCode2.LEFT = 37;
      KeyCode2.UP = 38;
      KeyCode2.RIGHT = 39;
      KeyCode2.DOWN = 40;
      KeyCode2.DELETE = 46;
      KeyCode2.A = 65;
      KeyCode2.C = 67;
      KeyCode2.V = 86;
      KeyCode2.D = 68;
      KeyCode2.Z = 90;
      KeyCode2.Y = 89;
      KeyCode2.F2 = 113;
      KeyCode2.PAGE_UP = 33;
      KeyCode2.PAGE_DOWN = 34;
      KeyCode2.PAGE_HOME = 36;
      KeyCode2.PAGE_END = 35;
      return KeyCode2;
    }();
    var __extends$6 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$9 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TextCellEditor = function(_super) {
      __extends$6(TextCellEditor2, _super);
      function TextCellEditor2() {
        return _super.call(this, TextCellEditor2.TEMPLATE) || this;
      }
      TextCellEditor2.prototype.init = function(params) {
        this.params = params;
        var eInput = this.eInput;
        var startValue;
        if (params.cellStartedEdit) {
          this.focusAfterAttached = true;
          if (params.keyPress === KeyCode.BACKSPACE || params.keyPress === KeyCode.DELETE) {
            startValue = "";
          } else if (params.charPress) {
            startValue = params.charPress;
          } else {
            startValue = this.getStartValue(params);
            if (params.keyPress !== KeyCode.F2) {
              this.highlightAllOnFocus = true;
            }
          }
        } else {
          this.focusAfterAttached = false;
          startValue = this.getStartValue(params);
        }
        if (exists(startValue)) {
          eInput.setValue(startValue, true);
        }
        this.addManagedListener(eInput.getGui(), "keydown", function(event) {
          var keyCode = event.keyCode;
          if (keyCode === KeyCode.PAGE_UP || keyCode === KeyCode.PAGE_DOWN) {
            event.preventDefault();
          }
        });
      };
      TextCellEditor2.prototype.afterGuiAttached = function() {
        var eInput = this.eInput;
        eInput.setInputAriaLabel("Input Editor");
        if (!this.focusAfterAttached) {
          return;
        }
        if (!isBrowserSafari()) {
          eInput.getFocusableElement().focus();
        }
        var inputEl = eInput.getInputElement();
        if (this.highlightAllOnFocus) {
          inputEl.select();
        } else {
          var value = eInput.getValue();
          var len = exists(value) && value.length || 0;
          if (len) {
            inputEl.setSelectionRange(len, len);
          }
        }
      };
      TextCellEditor2.prototype.focusIn = function() {
        var eInput = this.eInput;
        var focusEl = eInput.getFocusableElement();
        var inputEl = eInput.getInputElement();
        focusEl.focus();
        inputEl.select();
      };
      TextCellEditor2.prototype.focusOut = function() {
        var inputEl = this.eInput.getInputElement();
        if (isBrowserIE()) {
          inputEl.setSelectionRange(0, 0);
        }
      };
      TextCellEditor2.prototype.getValue = function() {
        var eInput = this.eInput;
        return this.params.parseValue(eInput.getValue());
      };
      TextCellEditor2.prototype.getStartValue = function(params) {
        var formatValue = params.useFormatter || params.column.getColDef().refData;
        return formatValue ? params.formatValue(params.value) : params.value;
      };
      TextCellEditor2.prototype.isPopup = function() {
        return false;
      };
      TextCellEditor2.TEMPLATE = '<div class="ag-cell-edit-wrapper"><ag-input-text-field class="ag-cell-editor" ref="eInput"></ag-input-text-field></div>';
      __decorate$9([
        RefSelector("eInput")
      ], TextCellEditor2.prototype, "eInput", void 0);
      return TextCellEditor2;
    }(PopupComponent);
    var DateCompWrapper = function() {
      function DateCompWrapper2(context, userComponentFactory, dateComponentParams, eParent) {
        var _this = this;
        this.alive = true;
        this.context = context;
        userComponentFactory.newDateComponent(dateComponentParams).then(function(dateComp) {
          if (!_this.alive) {
            context.destroyBean(dateComp);
            return;
          }
          _this.dateComp = dateComp;
          eParent.appendChild(dateComp.getGui());
          if (dateComp.afterGuiAttached) {
            dateComp.afterGuiAttached();
          }
          if (_this.tempValue) {
            dateComp.setDate(_this.tempValue);
          }
        });
      }
      DateCompWrapper2.prototype.destroy = function() {
        this.alive = false;
        this.dateComp = this.context.destroyBean(this.dateComp);
      };
      DateCompWrapper2.prototype.getDate = function() {
        return this.dateComp ? this.dateComp.getDate() : this.tempValue;
      };
      DateCompWrapper2.prototype.setDate = function(value) {
        if (this.dateComp) {
          this.dateComp.setDate(value);
        } else {
          this.tempValue = value;
        }
      };
      DateCompWrapper2.prototype.setInputPlaceholder = function(placeholder) {
        if (this.dateComp && this.dateComp.setInputPlaceholder) {
          this.dateComp.setInputPlaceholder(placeholder);
        }
      };
      DateCompWrapper2.prototype.setInputAriaLabel = function(label) {
        if (this.dateComp && this.dateComp.setInputAriaLabel) {
          this.dateComp.setInputAriaLabel(label);
        }
      };
      return DateCompWrapper2;
    }();
    var OptionsFactory = function() {
      function OptionsFactory2() {
        this.customFilterOptions = {};
      }
      OptionsFactory2.prototype.init = function(params, defaultOptions) {
        this.filterOptions = params.filterOptions || defaultOptions;
        this.mapCustomOptions();
        this.selectDefaultItem(params);
      };
      OptionsFactory2.prototype.getFilterOptions = function() {
        return this.filterOptions;
      };
      OptionsFactory2.prototype.mapCustomOptions = function() {
        var _this = this;
        if (!this.filterOptions) {
          return;
        }
        this.filterOptions.forEach(function(filterOption) {
          if (typeof filterOption === "string") {
            return;
          }
          var requiredProperties = ["displayKey", "displayName", "test"];
          if (every(requiredProperties, function(key) {
            if (!filterOption[key]) {
              console.warn("ag-Grid: ignoring FilterOptionDef as it doesn't contain a '" + key + "'");
              return false;
            }
            return true;
          })) {
            _this.customFilterOptions[filterOption.displayKey] = filterOption;
          }
        });
      };
      OptionsFactory2.prototype.selectDefaultItem = function(params) {
        if (params.defaultOption) {
          this.defaultOption = params.defaultOption;
        } else if (this.filterOptions.length >= 1) {
          var firstFilterOption = this.filterOptions[0];
          if (typeof firstFilterOption === "string") {
            this.defaultOption = firstFilterOption;
          } else if (firstFilterOption.displayKey) {
            this.defaultOption = firstFilterOption.displayKey;
          } else {
            console.warn("ag-Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'");
          }
        } else {
          console.warn("ag-Grid: no filter options for filter");
        }
      };
      OptionsFactory2.prototype.getDefaultOption = function() {
        return this.defaultOption;
      };
      OptionsFactory2.prototype.getCustomOption = function(name) {
        return this.customFilterOptions[name];
      };
      return OptionsFactory2;
    }();
    var DEFAULT_FILTER_LOCALE_TEXT = {
      applyFilter: "Apply",
      clearFilter: "Clear",
      resetFilter: "Reset",
      cancelFilter: "Cancel",
      textFilter: "Text Filter",
      numberFilter: "Number Filter",
      dateFilter: "Date Filter",
      setFilter: "Set Filter",
      filterOoo: "Filter...",
      empty: "Choose One",
      equals: "Equals",
      notEqual: "Not equal",
      lessThan: "Less than",
      greaterThan: "Greater than",
      inRange: "In range",
      inRangeStart: "From",
      inRangeEnd: "To",
      lessThanOrEqual: "Less than or equals",
      greaterThanOrEqual: "Greater than or equals",
      contains: "Contains",
      notContains: "Not contains",
      startsWith: "Starts with",
      endsWith: "Ends with",
      andCondition: "AND",
      orCondition: "OR",
      dateFormatOoo: "yyyy-mm-dd"
    };
    var __extends$7 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$a = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ManagedFocusComponent = function(_super) {
      __extends$7(ManagedFocusComponent2, _super);
      function ManagedFocusComponent2(template, isFocusableContainer) {
        if (isFocusableContainer === void 0) {
          isFocusableContainer = false;
        }
        var _this = _super.call(this, template) || this;
        _this.isFocusableContainer = isFocusableContainer;
        _this.skipTabGuardFocus = false;
        return _this;
      }
      ManagedFocusComponent2.prototype.postConstruct = function() {
        var _this = this;
        var focusableElement = this.getFocusableElement();
        if (!focusableElement) {
          return;
        }
        addCssClass(focusableElement, ManagedFocusComponent2.FOCUS_MANAGED_CLASS);
        if (this.isFocusableContainer) {
          this.topTabGuard = this.createTabGuard("top");
          this.bottomTabGuard = this.createTabGuard("bottom");
          this.addTabGuards();
          this.activateTabGuards();
          this.forEachTabGuard(function(guard) {
            return _this.addManagedListener(guard, "focus", _this.onFocus.bind(_this));
          });
        }
        this.addKeyDownListeners(focusableElement);
        this.addManagedListener(focusableElement, "focusin", this.onFocusIn.bind(this));
        this.addManagedListener(focusableElement, "focusout", this.onFocusOut.bind(this));
      };
      ManagedFocusComponent2.prototype.focusInnerElement = function(fromBottom) {
        if (fromBottom === void 0) {
          fromBottom = false;
        }
        var focusable = this.focusController.findFocusableElements(this.getFocusableElement());
        if (this.isFocusableContainer && this.tabGuardsAreActive()) {
          focusable.splice(0, 1);
          focusable.splice(focusable.length - 1, 1);
        }
        if (!focusable.length) {
          return;
        }
        focusable[fromBottom ? focusable.length - 1 : 0].focus();
      };
      ManagedFocusComponent2.prototype.onTabKeyDown = function(e) {
        var _this = this;
        if (e.defaultPrevented) {
          return;
        }
        var tabGuardsAreActive = this.tabGuardsAreActive();
        if (this.isFocusableContainer && tabGuardsAreActive) {
          this.deactivateTabGuards();
        }
        var nextRoot = this.focusController.findNextFocusableElement(this.getFocusableElement(), false, e.shiftKey);
        if (this.isFocusableContainer && tabGuardsAreActive) {
          setTimeout(function() {
            return _this.activateTabGuards();
          }, 0);
        }
        if (!nextRoot) {
          return;
        }
        nextRoot.focus();
        e.preventDefault();
      };
      ManagedFocusComponent2.prototype.onFocusIn = function(e) {
        if (this.isFocusableContainer) {
          this.deactivateTabGuards();
        }
      };
      ManagedFocusComponent2.prototype.onFocusOut = function(e) {
        if (this.isFocusableContainer && !this.getFocusableElement().contains(e.relatedTarget)) {
          this.activateTabGuards();
        }
      };
      ManagedFocusComponent2.prototype.forceFocusOutOfContainer = function(up) {
        if (up === void 0) {
          up = false;
        }
        if (!this.isFocusableContainer) {
          return;
        }
        this.activateTabGuards();
        this.skipTabGuardFocus = true;
        var tabGuardToFocus = up ? this.topTabGuard : this.bottomTabGuard;
        if (tabGuardToFocus) {
          tabGuardToFocus.focus();
        }
      };
      ManagedFocusComponent2.prototype.appendChild = function(newChild, container) {
        if (this.isFocusableContainer) {
          if (!isNodeOrElement(newChild)) {
            newChild = newChild.getGui();
          }
          var bottomTabGuard = this.bottomTabGuard;
          if (bottomTabGuard) {
            bottomTabGuard.insertAdjacentElement("beforebegin", newChild);
          } else {
            _super.prototype.appendChild.call(this, newChild, container);
          }
        } else {
          _super.prototype.appendChild.call(this, newChild, container);
        }
      };
      ManagedFocusComponent2.prototype.createTabGuard = function(side) {
        var tabGuard = document.createElement("div");
        tabGuard.classList.add("ag-tab-guard");
        tabGuard.classList.add("ag-tab-guard-" + side);
        tabGuard.setAttribute("role", "presentation");
        return tabGuard;
      };
      ManagedFocusComponent2.prototype.addTabGuards = function() {
        var focusableEl = this.getFocusableElement();
        focusableEl.insertAdjacentElement("afterbegin", this.topTabGuard);
        focusableEl.insertAdjacentElement("beforeend", this.bottomTabGuard);
      };
      ManagedFocusComponent2.prototype.forEachTabGuard = function(callback) {
        if (this.topTabGuard) {
          callback(this.topTabGuard);
        }
        if (this.bottomTabGuard) {
          callback(this.bottomTabGuard);
        }
      };
      ManagedFocusComponent2.prototype.addKeyDownListeners = function(eGui) {
        var _this = this;
        this.addManagedListener(eGui, "keydown", function(e) {
          if (e.defaultPrevented) {
            return;
          }
          if (e.keyCode === KeyCode.TAB) {
            _this.onTabKeyDown(e);
          } else if (_this.handleKeyDown) {
            _this.handleKeyDown(e);
          }
        });
      };
      ManagedFocusComponent2.prototype.onFocus = function(e) {
        if (this.skipTabGuardFocus) {
          this.skipTabGuardFocus = false;
          return;
        }
        this.focusInnerElement(e.target === this.bottomTabGuard);
      };
      ManagedFocusComponent2.prototype.activateTabGuards = function() {
        this.forEachTabGuard(function(guard) {
          return guard.setAttribute("tabIndex", "0");
        });
      };
      ManagedFocusComponent2.prototype.deactivateTabGuards = function() {
        this.forEachTabGuard(function(guard) {
          return guard.removeAttribute("tabIndex");
        });
      };
      ManagedFocusComponent2.prototype.tabGuardsAreActive = function() {
        return !!this.topTabGuard && this.topTabGuard.hasAttribute("tabIndex");
      };
      ManagedFocusComponent2.prototype.clearGui = function() {
        var tabGuardsAreActive = this.tabGuardsAreActive();
        clearElement(this.getFocusableElement());
        if (this.isFocusableContainer) {
          this.addTabGuards();
          if (tabGuardsAreActive) {
            this.activateTabGuards();
          }
        }
      };
      ManagedFocusComponent2.FOCUS_MANAGED_CLASS = "ag-focus-managed";
      __decorate$a([
        Autowired("focusController")
      ], ManagedFocusComponent2.prototype, "focusController", void 0);
      __decorate$a([
        PostConstruct
      ], ManagedFocusComponent2.prototype, "postConstruct", null);
      return ManagedFocusComponent2;
    }(Component);
    var __extends$8 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$b = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ProvidedFilter = function(_super) {
      __extends$8(ProvidedFilter2, _super);
      function ProvidedFilter2(filterNameKey) {
        var _this = _super.call(this) || this;
        _this.filterNameKey = filterNameKey;
        _this.applyActive = false;
        _this.hidePopup = null;
        _this.appliedModel = null;
        return _this;
      }
      ProvidedFilter2.prototype.getFilterTitle = function() {
        return this.translate(this.filterNameKey);
      };
      ProvidedFilter2.prototype.onFilterChanged = function() {
        console.warn("ag-Grid: you should not call onFilterChanged() directly on the filter, please call\n        gridApi.onFilterChanged() instead. onFilterChanged is not part of the exposed filter interface (it was\n        a method that existed on an old version of the filters that was not intended for public use.");
        this.providedFilterParams.filterChangedCallback();
      };
      ProvidedFilter2.prototype.isFilterActive = function() {
        return !!this.appliedModel;
      };
      ProvidedFilter2.prototype.postConstruct = function() {
        this.resetTemplate();
        _super.prototype.postConstruct.call(this);
      };
      ProvidedFilter2.prototype.resetTemplate = function(paramsMap) {
        var templateString = '\n            <div class="ag-filter-wrapper">\n                <div class="ag-filter-body-wrapper ag-' + this.getCssIdentifier() + '-body-wrapper">\n                    ' + this.createBodyTemplate() + "\n                </div>\n            </div>";
        this.setTemplate(templateString, paramsMap);
      };
      ProvidedFilter2.prototype.init = function(params) {
        var _this = this;
        this.setParams(params);
        this.resetUiToDefaults(true).then(function() {
          _this.updateUiVisibility();
          _this.setupOnBtApplyDebounce();
        });
      };
      ProvidedFilter2.prototype.setParams = function(params) {
        ProvidedFilter2.checkForDeprecatedParams(params);
        this.providedFilterParams = params;
        if (params.newRowsAction === "keep") {
          this.newRowsActionKeep = true;
        } else if (params.newRowsAction === "clear") {
          this.newRowsActionKeep = false;
        } else {
          var modelsForKeep = [Constants.ROW_MODEL_TYPE_SERVER_SIDE, Constants.ROW_MODEL_TYPE_INFINITE];
          this.newRowsActionKeep = modelsForKeep.indexOf(this.rowModel.getType()) >= 0;
        }
        this.applyActive = ProvidedFilter2.isUseApplyButton(params);
        this.createButtonPanel();
      };
      ProvidedFilter2.prototype.createButtonPanel = function() {
        var _this = this;
        var buttons = this.providedFilterParams.buttons;
        if (!buttons || buttons.length < 1) {
          return;
        }
        var eButtonsPanel = document.createElement("div");
        addCssClass(eButtonsPanel, "ag-filter-apply-panel");
        var addButton = function(type) {
          var text;
          var clickListener;
          switch (type) {
            case "apply":
              text = _this.translate("applyFilter");
              clickListener = function(e) {
                return _this.onBtApply(false, false, e);
              };
              break;
            case "clear":
              text = _this.translate("clearFilter");
              clickListener = function() {
                return _this.onBtClear();
              };
              break;
            case "reset":
              text = _this.translate("resetFilter");
              clickListener = function() {
                return _this.onBtReset();
              };
              break;
            case "cancel":
              text = _this.translate("cancelFilter");
              clickListener = function(e) {
                _this.onBtCancel(e);
              };
              break;
            default:
              console.warn("Unknown button type specified");
              return;
          }
          var button = loadTemplate('<button\n                    type="button"\n                    ref="' + type + 'FilterButton"\n                    class="ag-standard-button ag-filter-apply-panel-button">' + text + "</button>");
          eButtonsPanel.appendChild(button);
          _this.addManagedListener(button, "click", clickListener);
        };
        convertToSet(buttons).forEach(function(type) {
          return addButton(type);
        });
        this.getGui().appendChild(eButtonsPanel);
      };
      ProvidedFilter2.checkForDeprecatedParams = function(params) {
        var buttons = params.buttons || [];
        if (buttons.length > 0) {
          return;
        }
        var applyButton = params.applyButton, resetButton = params.resetButton, clearButton = params.clearButton;
        if (clearButton) {
          console.warn("ag-Grid: as of ag-Grid v23.2, filterParams.clearButton is deprecated. Please use filterParams.buttons instead");
          buttons.push("clear");
        }
        if (resetButton) {
          console.warn("ag-Grid: as of ag-Grid v23.2, filterParams.resetButton is deprecated. Please use filterParams.buttons instead");
          buttons.push("reset");
        }
        if (applyButton) {
          console.warn("ag-Grid: as of ag-Grid v23.2, filterParams.applyButton is deprecated. Please use filterParams.buttons instead");
          buttons.push("apply");
        }
        if (params.apply) {
          console.warn("ag-Grid: as of ag-Grid v21, filterParams.apply is deprecated. Please use filterParams.buttons instead");
          buttons.push("apply");
        }
        params.buttons = buttons;
      };
      ProvidedFilter2.prototype.getDefaultDebounceMs = function() {
        return 0;
      };
      ProvidedFilter2.prototype.setupOnBtApplyDebounce = function() {
        var debounceMs = ProvidedFilter2.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());
        this.onBtApplyDebounce = debounce(this.onBtApply.bind(this), debounceMs);
      };
      ProvidedFilter2.prototype.getModel = function() {
        return this.appliedModel;
      };
      ProvidedFilter2.prototype.setModel = function(model) {
        var _this = this;
        var promise = model ? this.setModelIntoUi(model) : this.resetUiToDefaults();
        return promise.then(function() {
          _this.updateUiVisibility();
          _this.applyModel();
        });
      };
      ProvidedFilter2.prototype.onBtCancel = function(e) {
        var _this = this;
        this.setModelIntoUi(this.getModel()).then(function() {
          _this.onUiChanged(false, "prevent");
          if (_this.providedFilterParams.closeOnApply) {
            _this.close(e);
          }
        });
      };
      ProvidedFilter2.prototype.onBtClear = function() {
        var _this = this;
        this.resetUiToDefaults().then(function() {
          return _this.onUiChanged();
        });
      };
      ProvidedFilter2.prototype.onBtReset = function() {
        this.onBtClear();
        this.onBtApply();
      };
      ProvidedFilter2.prototype.applyModel = function() {
        var newModel = this.getModelFromUi();
        if (!this.isModelValid(newModel)) {
          return false;
        }
        var previousModel = this.appliedModel;
        this.appliedModel = newModel;
        return !this.areModelsEqual(previousModel, newModel);
      };
      ProvidedFilter2.prototype.isModelValid = function(model) {
        return true;
      };
      ProvidedFilter2.prototype.onBtApply = function(afterFloatingFilter, afterDataChange, e) {
        if (afterFloatingFilter === void 0) {
          afterFloatingFilter = false;
        }
        if (afterDataChange === void 0) {
          afterDataChange = false;
        }
        if (this.applyModel()) {
          this.providedFilterParams.filterChangedCallback({ afterFloatingFilter, afterDataChange });
        }
        var closeOnApply = this.providedFilterParams.closeOnApply;
        if (closeOnApply && this.applyActive && !afterFloatingFilter && !afterDataChange) {
          this.close(e);
        }
      };
      ProvidedFilter2.prototype.onNewRowsLoaded = function() {
        var _this = this;
        if (!this.newRowsActionKeep) {
          this.resetUiToDefaults().then(function() {
            return _this.appliedModel = null;
          });
        }
      };
      ProvidedFilter2.prototype.close = function(e) {
        if (!this.hidePopup) {
          return;
        }
        var keyboardEvent = e;
        var key = keyboardEvent && keyboardEvent.key;
        var params;
        if (key === "Enter" || key === "Space") {
          params = { keyboardEvent };
        }
        this.hidePopup(params);
        this.hidePopup = null;
      };
      ProvidedFilter2.prototype.isNewRowsActionKeep = function() {
        return this.newRowsActionKeep;
      };
      ProvidedFilter2.prototype.onUiChanged = function(fromFloatingFilter, apply) {
        if (fromFloatingFilter === void 0) {
          fromFloatingFilter = false;
        }
        this.updateUiVisibility();
        this.providedFilterParams.filterModifiedCallback();
        if (this.applyActive) {
          var isValid = this.isModelValid(this.getModelFromUi());
          setDisabled(this.getRefElement("applyFilterButton"), !isValid);
        }
        if (fromFloatingFilter && !apply || apply === "immediately") {
          this.onBtApply(fromFloatingFilter);
        } else if (!this.applyActive && !apply || apply === "debounce") {
          this.onBtApplyDebounce();
        }
      };
      ProvidedFilter2.prototype.afterGuiAttached = function(params) {
        if (params == null) {
          return;
        }
        this.hidePopup = params.hidePopup;
      };
      ProvidedFilter2.getDebounceMs = function(params, debounceDefault) {
        if (ProvidedFilter2.isUseApplyButton(params)) {
          if (params.debounceMs != null) {
            console.warn("ag-Grid: debounceMs is ignored when apply button is present");
          }
          return 0;
        }
        return params.debounceMs != null ? params.debounceMs : debounceDefault;
      };
      ProvidedFilter2.isUseApplyButton = function(params) {
        ProvidedFilter2.checkForDeprecatedParams(params);
        return params.buttons && params.buttons.indexOf("apply") >= 0;
      };
      ProvidedFilter2.prototype.destroy = function() {
        this.hidePopup = null;
        _super.prototype.destroy.call(this);
      };
      ProvidedFilter2.prototype.translate = function(key) {
        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
        return translate(key, DEFAULT_FILTER_LOCALE_TEXT[key]);
      };
      __decorate$b([
        Autowired("gridOptionsWrapper")
      ], ProvidedFilter2.prototype, "gridOptionsWrapper", void 0);
      __decorate$b([
        Autowired("rowModel")
      ], ProvidedFilter2.prototype, "rowModel", void 0);
      __decorate$b([
        PostConstruct
      ], ProvidedFilter2.prototype, "postConstruct", null);
      return ProvidedFilter2;
    }(ManagedFocusComponent);
    var __extends$9 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$c = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ConditionPosition;
    (function(ConditionPosition2) {
      ConditionPosition2[ConditionPosition2["One"] = 0] = "One";
      ConditionPosition2[ConditionPosition2["Two"] = 1] = "Two";
    })(ConditionPosition || (ConditionPosition = {}));
    var SimpleFilter = function(_super) {
      __extends$9(SimpleFilter2, _super);
      function SimpleFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SimpleFilter2.prototype.showValueFrom = function(type) {
        return !this.doesFilterHaveHiddenInput(type) && type !== SimpleFilter2.EMPTY;
      };
      SimpleFilter2.prototype.showValueTo = function(type) {
        return type === SimpleFilter2.IN_RANGE;
      };
      SimpleFilter2.prototype.onFloatingFilterChanged = function(type, value) {
        this.setTypeFromFloatingFilter(type);
        this.setValueFromFloatingFilter(value);
        this.onUiChanged(true);
      };
      SimpleFilter2.prototype.setTypeFromFloatingFilter = function(type) {
        this.eType1.setValue(type);
        this.eType2.setValue(this.optionsFactory.getDefaultOption());
        (this.isDefaultOperator("AND") ? this.eJoinOperatorAnd : this.eJoinOperatorOr).setValue(true);
      };
      SimpleFilter2.prototype.getModelFromUi = function() {
        if (!this.isConditionUiComplete(ConditionPosition.One)) {
          return null;
        }
        if (this.isAllowTwoConditions() && this.isConditionUiComplete(ConditionPosition.Two)) {
          return {
            filterType: this.getFilterType(),
            operator: this.getJoinOperator(),
            condition1: this.createCondition(ConditionPosition.One),
            condition2: this.createCondition(ConditionPosition.Two)
          };
        }
        return this.createCondition(ConditionPosition.One);
      };
      SimpleFilter2.prototype.getCondition1Type = function() {
        return this.eType1.getValue();
      };
      SimpleFilter2.prototype.getCondition2Type = function() {
        return this.eType2.getValue();
      };
      SimpleFilter2.prototype.getJoinOperator = function() {
        return this.eJoinOperatorOr.getValue() === true ? "OR" : "AND";
      };
      SimpleFilter2.prototype.areModelsEqual = function(a, b) {
        if (!a && !b) {
          return true;
        }
        if (!a && b || a && !b) {
          return false;
        }
        var aIsSimple = !a.operator;
        var bIsSimple = !b.operator;
        var oneSimpleOneCombined = !aIsSimple && bIsSimple || aIsSimple && !bIsSimple;
        if (oneSimpleOneCombined) {
          return false;
        }
        var res;
        if (aIsSimple) {
          var aSimple = a;
          var bSimple = b;
          res = this.areSimpleModelsEqual(aSimple, bSimple);
        } else {
          var aCombined = a;
          var bCombined = b;
          res = aCombined.operator === bCombined.operator && this.areSimpleModelsEqual(aCombined.condition1, bCombined.condition1) && this.areSimpleModelsEqual(aCombined.condition2, bCombined.condition2);
        }
        return res;
      };
      SimpleFilter2.prototype.setModelIntoUi = function(model) {
        var isCombined = model.operator;
        if (isCombined) {
          var combinedModel = model;
          var orChecked = combinedModel.operator === "OR";
          this.eJoinOperatorAnd.setValue(!orChecked);
          this.eJoinOperatorOr.setValue(orChecked);
          this.eType1.setValue(combinedModel.condition1.type);
          this.eType2.setValue(combinedModel.condition2.type);
          this.setConditionIntoUi(combinedModel.condition1, ConditionPosition.One);
          this.setConditionIntoUi(combinedModel.condition2, ConditionPosition.Two);
        } else {
          var simpleModel = model;
          this.eJoinOperatorAnd.setValue(this.isDefaultOperator("AND"));
          this.eJoinOperatorOr.setValue(this.isDefaultOperator("OR"));
          this.eType1.setValue(simpleModel.type);
          this.eType2.setValue(this.optionsFactory.getDefaultOption());
          this.setConditionIntoUi(simpleModel, ConditionPosition.One);
          this.setConditionIntoUi(null, ConditionPosition.Two);
        }
        return Promise2.resolve();
      };
      SimpleFilter2.prototype.doesFilterPass = function(params) {
        var _this = this;
        var model = this.getModel();
        if (model == null) {
          return true;
        }
        var operator = model.operator;
        var models = [];
        if (operator) {
          var combinedModel = model;
          models.push(combinedModel.condition1, combinedModel.condition2);
        } else {
          models.push(model);
        }
        var combineFunction = operator && operator === "OR" ? some : every;
        return combineFunction(models, function(m) {
          return _this.individualConditionPasses(params, m);
        });
      };
      SimpleFilter2.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.optionsFactory = new OptionsFactory();
        this.optionsFactory.init(params, this.getDefaultFilterOptions());
        this.allowTwoConditions = !params.suppressAndOrCondition;
        this.alwaysShowBothConditions = !!params.alwaysShowBothConditions;
        this.defaultJoinOperator = this.getDefaultJoinOperator(params.defaultJoinOperator);
        this.putOptionsIntoDropdown();
        this.addChangedListeners();
      };
      SimpleFilter2.prototype.getDefaultJoinOperator = function(defaultJoinOperator) {
        return includes(["AND", "OR"], defaultJoinOperator) ? defaultJoinOperator : "AND";
      };
      SimpleFilter2.prototype.putOptionsIntoDropdown = function() {
        var _this = this;
        var filterOptions = this.optionsFactory.getFilterOptions();
        forEach(filterOptions, function(option) {
          var value;
          var text;
          if (typeof option === "string") {
            value = option;
            text = _this.translate(value);
          } else {
            value = option.displayKey;
            var customOption = _this.optionsFactory.getCustomOption(value);
            text = customOption ? customOption.displayName : _this.translate(value);
          }
          var createOption = function() {
            return { value, text };
          };
          _this.eType1.addOption(createOption());
          _this.eType2.addOption(createOption());
        });
        var readOnly = filterOptions.length <= 1;
        this.eType1.setDisabled(readOnly);
        this.eType2.setDisabled(readOnly);
      };
      SimpleFilter2.prototype.isAllowTwoConditions = function() {
        return this.allowTwoConditions;
      };
      SimpleFilter2.prototype.createBodyTemplate = function() {
        return '\n            <ag-select class="ag-filter-select" ref="eOptions1"></ag-select>\n            ' + this.createValueTemplate(ConditionPosition.One) + '\n            <div class="ag-filter-condition" ref="eJoinOperatorPanel">\n               <ag-radio-button ref="eJoinOperatorAnd" class="ag-filter-condition-operator ag-filter-condition-operator-and"></ag-radio-button>\n               <ag-radio-button ref="eJoinOperatorOr" class="ag-filter-condition-operator ag-filter-condition-operator-or"></ag-radio-button>\n            </div>\n            <ag-select class="ag-filter-select" ref="eOptions2"></ag-select>\n            ' + this.createValueTemplate(ConditionPosition.Two);
      };
      SimpleFilter2.prototype.getCssIdentifier = function() {
        return "simple-filter";
      };
      SimpleFilter2.prototype.updateUiVisibility = function() {
        var isCondition2Enabled = this.isCondition2Enabled();
        if (this.alwaysShowBothConditions) {
          this.eJoinOperatorAnd.setDisabled(!isCondition2Enabled);
          this.eJoinOperatorOr.setDisabled(!isCondition2Enabled);
          this.eType2.setDisabled(!isCondition2Enabled);
          setDisabled(this.eCondition2Body, !isCondition2Enabled);
        } else {
          setDisplayed(this.eJoinOperatorPanel, isCondition2Enabled);
          setDisplayed(this.eType2.getGui(), isCondition2Enabled);
          setDisplayed(this.eCondition2Body, isCondition2Enabled);
        }
      };
      SimpleFilter2.prototype.isCondition2Enabled = function() {
        return this.allowTwoConditions && this.isConditionUiComplete(ConditionPosition.One);
      };
      SimpleFilter2.prototype.resetUiToDefaults = function(silent) {
        var uniqueGroupId = "ag-simple-filter-and-or-" + this.getCompId();
        var defaultOption = this.optionsFactory.getDefaultOption();
        this.eType1.setValue(defaultOption, silent).setAriaLabel("Filtering operator");
        this.eType2.setValue(defaultOption, silent).setAriaLabel("Filtering operator");
        this.eJoinOperatorAnd.setValue(this.isDefaultOperator("AND"), silent).setName(uniqueGroupId).setLabel(this.translate("andCondition"));
        this.eJoinOperatorOr.setValue(this.isDefaultOperator("OR"), silent).setName(uniqueGroupId).setLabel(this.translate("orCondition"));
        return Promise2.resolve();
      };
      SimpleFilter2.prototype.isDefaultOperator = function(operator) {
        return operator === this.defaultJoinOperator;
      };
      SimpleFilter2.prototype.addChangedListeners = function() {
        var _this = this;
        var listener = function() {
          return _this.onUiChanged();
        };
        this.eType1.onValueChange(listener);
        this.eType2.onValueChange(listener);
        this.eJoinOperatorOr.onValueChange(listener);
        this.eJoinOperatorAnd.onValueChange(listener);
      };
      SimpleFilter2.prototype.doesFilterHaveHiddenInput = function(filterType) {
        var customFilterOption = this.optionsFactory.getCustomOption(filterType);
        return customFilterOption && customFilterOption.hideFilterInput;
      };
      SimpleFilter2.EMPTY = "empty";
      SimpleFilter2.EQUALS = "equals";
      SimpleFilter2.NOT_EQUAL = "notEqual";
      SimpleFilter2.LESS_THAN = "lessThan";
      SimpleFilter2.LESS_THAN_OR_EQUAL = "lessThanOrEqual";
      SimpleFilter2.GREATER_THAN = "greaterThan";
      SimpleFilter2.GREATER_THAN_OR_EQUAL = "greaterThanOrEqual";
      SimpleFilter2.IN_RANGE = "inRange";
      SimpleFilter2.CONTAINS = "contains";
      SimpleFilter2.NOT_CONTAINS = "notContains";
      SimpleFilter2.STARTS_WITH = "startsWith";
      SimpleFilter2.ENDS_WITH = "endsWith";
      __decorate$c([
        RefSelector("eOptions1")
      ], SimpleFilter2.prototype, "eType1", void 0);
      __decorate$c([
        RefSelector("eOptions2")
      ], SimpleFilter2.prototype, "eType2", void 0);
      __decorate$c([
        RefSelector("eJoinOperatorPanel")
      ], SimpleFilter2.prototype, "eJoinOperatorPanel", void 0);
      __decorate$c([
        RefSelector("eJoinOperatorAnd")
      ], SimpleFilter2.prototype, "eJoinOperatorAnd", void 0);
      __decorate$c([
        RefSelector("eJoinOperatorOr")
      ], SimpleFilter2.prototype, "eJoinOperatorOr", void 0);
      __decorate$c([
        RefSelector("eCondition1Body")
      ], SimpleFilter2.prototype, "eCondition1Body", void 0);
      __decorate$c([
        RefSelector("eCondition2Body")
      ], SimpleFilter2.prototype, "eCondition2Body", void 0);
      return SimpleFilter2;
    }(ProvidedFilter);
    var __extends$a = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var ScalarFilter = function(_super) {
      __extends$a(ScalarFilter2, _super);
      function ScalarFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ScalarFilter2.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.scalarFilterParams = params;
        this.checkDeprecatedParams();
      };
      ScalarFilter2.prototype.checkDeprecatedParams = function() {
        if (this.scalarFilterParams.nullComparator) {
          console.warn("ag-Grid: Since v21.0, the property filterParams.nullComparator is deprecated. Please use filterParams.includeBlanksInEquals, filterParams.includeBlanksInLessThan and filterParams.includeBlanksInGreaterThan instead.");
          this.scalarFilterParams.includeBlanksInEquals = this.scalarFilterParams.nullComparator.equals;
          this.scalarFilterParams.includeBlanksInLessThan = this.scalarFilterParams.nullComparator.lessThan;
          this.scalarFilterParams.includeBlanksInGreaterThan = this.scalarFilterParams.nullComparator.greaterThan;
        }
      };
      ScalarFilter2.prototype.individualConditionPasses = function(params, filterModel) {
        var cellValue = this.scalarFilterParams.valueGetter(params.node);
        var range = this.mapRangeFromModel(filterModel);
        var filterValue = range.from;
        var filterValueTo = range.to;
        var filterType = filterModel.type;
        var customFilterOption = this.optionsFactory.getCustomOption(filterType);
        if (customFilterOption) {
          if (filterValue != null || customFilterOption.hideFilterInput) {
            return customFilterOption.test(filterValue, cellValue);
          }
        }
        if (cellValue == null) {
          switch (filterType) {
            case ScalarFilter2.EQUALS:
            case ScalarFilter2.NOT_EQUAL:
              if (this.scalarFilterParams.includeBlanksInEquals) {
                return true;
              }
              break;
            case ScalarFilter2.GREATER_THAN:
            case ScalarFilter2.GREATER_THAN_OR_EQUAL:
              if (this.scalarFilterParams.includeBlanksInGreaterThan) {
                return true;
              }
              break;
            case ScalarFilter2.LESS_THAN:
            case ScalarFilter2.LESS_THAN_OR_EQUAL:
              if (this.scalarFilterParams.includeBlanksInLessThan) {
                return true;
              }
              break;
            case ScalarFilter2.IN_RANGE:
              if (this.scalarFilterParams.includeBlanksInRange) {
                return true;
              }
              break;
          }
          return false;
        }
        var comparator = this.comparator();
        var compareResult = comparator(filterValue, cellValue);
        switch (filterType) {
          case ScalarFilter2.EQUALS:
            return compareResult === 0;
          case ScalarFilter2.NOT_EQUAL:
            return compareResult !== 0;
          case ScalarFilter2.GREATER_THAN:
            return compareResult > 0;
          case ScalarFilter2.GREATER_THAN_OR_EQUAL:
            return compareResult >= 0;
          case ScalarFilter2.LESS_THAN:
            return compareResult < 0;
          case ScalarFilter2.LESS_THAN_OR_EQUAL:
            return compareResult <= 0;
          case ScalarFilter2.IN_RANGE: {
            var compareToResult = comparator(filterValueTo, cellValue);
            return this.scalarFilterParams.inRangeInclusive ? compareResult >= 0 && compareToResult <= 0 : compareResult > 0 && compareToResult < 0;
          }
          default:
            throw new Error("Unexpected type of filter: " + filterType);
        }
      };
      return ScalarFilter2;
    }(SimpleFilter);
    var __extends$b = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$d = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DateFilter = function(_super) {
      __extends$b(DateFilter2, _super);
      function DateFilter2() {
        return _super.call(this, "dateFilter") || this;
      }
      DateFilter2.prototype.mapRangeFromModel = function(filterModel) {
        return {
          from: parseDateTimeFromString(filterModel.dateFrom),
          to: parseDateTimeFromString(filterModel.dateTo)
        };
      };
      DateFilter2.prototype.setValueFromFloatingFilter = function(value) {
        this.dateCondition1FromComp.setDate(value == null ? null : parseDateTimeFromString(value));
        this.dateCondition1ToComp.setDate(null);
        this.dateCondition2FromComp.setDate(null);
        this.dateCondition2ToComp.setDate(null);
      };
      DateFilter2.prototype.setConditionIntoUi = function(model, position) {
        var _a = model ? [parseDateTimeFromString(model.dateFrom), parseDateTimeFromString(model.dateTo)] : [null, null], dateFrom = _a[0], dateTo = _a[1];
        var _b = this.getFromToComponents(position), compFrom = _b[0], compTo = _b[1];
        compFrom.setDate(dateFrom);
        compTo.setDate(dateTo);
      };
      DateFilter2.prototype.resetUiToDefaults = function(silent) {
        var _this = this;
        return _super.prototype.resetUiToDefaults.call(this, silent).then(function() {
          _this.dateCondition1FromComp.setDate(null);
          _this.dateCondition1ToComp.setDate(null);
          _this.dateCondition2FromComp.setDate(null);
          _this.dateCondition2ToComp.setDate(null);
        });
      };
      DateFilter2.prototype.comparator = function() {
        return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);
      };
      DateFilter2.prototype.defaultComparator = function(filterDate, cellValue) {
        var cellAsDate = cellValue;
        if (cellValue == null || cellAsDate < filterDate) {
          return -1;
        }
        if (cellAsDate > filterDate) {
          return 1;
        }
        return 0;
      };
      DateFilter2.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.dateFilterParams = params;
        this.createDateComponents();
      };
      DateFilter2.prototype.createDateComponents = function() {
        var _this = this;
        var dateComponentParams = {
          onDateChanged: function() {
            return _this.onUiChanged();
          },
          filterParams: this.dateFilterParams
        };
        this.dateCondition1FromComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eCondition1PanelFrom);
        this.dateCondition1ToComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eCondition1PanelTo);
        this.dateCondition2FromComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eCondition2PanelFrom);
        this.dateCondition2ToComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eCondition2PanelTo);
        this.addDestroyFunc(function() {
          _this.dateCondition1FromComp.destroy();
          _this.dateCondition1ToComp.destroy();
          _this.dateCondition2FromComp.destroy();
          _this.dateCondition2ToComp.destroy();
        });
      };
      DateFilter2.prototype.getDefaultFilterOptions = function() {
        return DateFilter2.DEFAULT_FILTER_OPTIONS;
      };
      DateFilter2.prototype.createValueTemplate = function(position) {
        var pos = position === ConditionPosition.One ? "1" : "2";
        return '\n            <div class="ag-filter-body" ref="eCondition' + pos + 'Body">\n                <div class="ag-filter-from ag-filter-date-from" ref="eCondition' + pos + 'PanelFrom"></div>\n                <div class="ag-filter-to ag-filter-date-to" ref="eCondition' + pos + 'PanelTo"></div>\n            </div>';
      };
      DateFilter2.prototype.isConditionUiComplete = function(position) {
        var positionOne = position === ConditionPosition.One;
        var option = positionOne ? this.getCondition1Type() : this.getCondition2Type();
        if (option === SimpleFilter.EMPTY) {
          return false;
        }
        if (this.doesFilterHaveHiddenInput(option)) {
          return true;
        }
        var _a = this.getFromToComponents(position), compFrom = _a[0], compTo = _a[1];
        var minValidYear = this.dateFilterParams.minValidYear == null ? 1e3 : this.dateFilterParams.minValidYear;
        var isValidDate = function(value) {
          return value != null && value.getUTCFullYear() > minValidYear;
        };
        return isValidDate(compFrom.getDate()) && (!this.showValueTo(option) || isValidDate(compTo.getDate()));
      };
      DateFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
        return aSimple.dateFrom === bSimple.dateFrom && aSimple.dateTo === bSimple.dateTo && aSimple.type === bSimple.type;
      };
      DateFilter2.prototype.getFilterType = function() {
        return "date";
      };
      DateFilter2.prototype.createCondition = function(position) {
        var positionOne = position === ConditionPosition.One;
        var type = positionOne ? this.getCondition1Type() : this.getCondition2Type();
        var _a = this.getFromToComponents(position), compFrom = _a[0], compTo = _a[1];
        return {
          dateFrom: serialiseDate(compFrom.getDate()),
          dateTo: serialiseDate(compTo.getDate()),
          type,
          filterType: this.getFilterType()
        };
      };
      DateFilter2.prototype.resetPlaceholder = function() {
        var placeholder = this.translate("dateFormatOoo");
        var ariaLabel = "Filter value";
        this.dateCondition1FromComp.setInputPlaceholder(placeholder);
        this.dateCondition1FromComp.setInputAriaLabel(ariaLabel);
        this.dateCondition1ToComp.setInputPlaceholder(placeholder);
        this.dateCondition1ToComp.setInputAriaLabel(ariaLabel);
        this.dateCondition2FromComp.setInputPlaceholder(placeholder);
        this.dateCondition2FromComp.setInputAriaLabel(ariaLabel);
        this.dateCondition2ToComp.setInputPlaceholder(placeholder);
        this.dateCondition2ToComp.setInputAriaLabel(ariaLabel);
      };
      DateFilter2.prototype.updateUiVisibility = function() {
        _super.prototype.updateUiVisibility.call(this);
        this.resetPlaceholder();
        var condition1Type = this.getCondition1Type();
        setDisplayed(this.eCondition1PanelFrom, this.showValueFrom(condition1Type));
        setDisplayed(this.eCondition1PanelTo, this.showValueTo(condition1Type));
        var condition2Type = this.getCondition2Type();
        setDisplayed(this.eCondition2PanelFrom, this.showValueFrom(condition2Type));
        setDisplayed(this.eCondition2PanelTo, this.showValueTo(condition2Type));
      };
      DateFilter2.prototype.getFromToComponents = function(position) {
        return position === ConditionPosition.One ? [this.dateCondition1FromComp, this.dateCondition1ToComp] : [this.dateCondition2FromComp, this.dateCondition2ToComp];
      };
      DateFilter2.DEFAULT_FILTER_OPTIONS = [
        ScalarFilter.EQUALS,
        ScalarFilter.GREATER_THAN,
        ScalarFilter.LESS_THAN,
        ScalarFilter.NOT_EQUAL,
        ScalarFilter.IN_RANGE
      ];
      __decorate$d([
        RefSelector("eCondition1PanelFrom")
      ], DateFilter2.prototype, "eCondition1PanelFrom", void 0);
      __decorate$d([
        RefSelector("eCondition1PanelTo")
      ], DateFilter2.prototype, "eCondition1PanelTo", void 0);
      __decorate$d([
        RefSelector("eCondition2PanelFrom")
      ], DateFilter2.prototype, "eCondition2PanelFrom", void 0);
      __decorate$d([
        RefSelector("eCondition2PanelTo")
      ], DateFilter2.prototype, "eCondition2PanelTo", void 0);
      __decorate$d([
        Autowired("userComponentFactory")
      ], DateFilter2.prototype, "userComponentFactory", void 0);
      return DateFilter2;
    }(ScalarFilter);
    var TouchListener = function() {
      function TouchListener2(eElement, preventMouseClick) {
        var _this = this;
        if (preventMouseClick === void 0) {
          preventMouseClick = false;
        }
        this.destroyFuncs = [];
        this.touching = false;
        this.eventService = new EventService();
        this.eElement = eElement;
        this.preventMouseClick = preventMouseClick;
        var startListener = this.onTouchStart.bind(this);
        var moveListener = this.onTouchMove.bind(this);
        var endListener = this.onTouchEnd.bind(this);
        this.eElement.addEventListener("touchstart", startListener, { passive: true });
        this.eElement.addEventListener("touchmove", moveListener, { passive: true });
        this.eElement.addEventListener("touchend", endListener, { passive: false });
        this.destroyFuncs.push(function() {
          _this.eElement.removeEventListener("touchstart", startListener, { passive: true });
          _this.eElement.removeEventListener("touchmove", moveListener, { passive: true });
          _this.eElement.removeEventListener("touchend", endListener, { passive: false });
        });
      }
      TouchListener2.prototype.getActiveTouch = function(touchList) {
        for (var i = 0; i < touchList.length; i++) {
          var matches = touchList[i].identifier === this.touchStart.identifier;
          if (matches) {
            return touchList[i];
          }
        }
        return null;
      };
      TouchListener2.prototype.addEventListener = function(eventType, listener) {
        this.eventService.addEventListener(eventType, listener);
      };
      TouchListener2.prototype.removeEventListener = function(eventType, listener) {
        this.eventService.removeEventListener(eventType, listener);
      };
      TouchListener2.prototype.onTouchStart = function(touchEvent) {
        var _this = this;
        if (this.touching) {
          return;
        }
        this.touchStart = touchEvent.touches[0];
        this.touching = true;
        this.moved = false;
        var touchStartCopy = this.touchStart;
        window.setTimeout(function() {
          var touchesMatch = _this.touchStart === touchStartCopy;
          if (_this.touching && touchesMatch && !_this.moved) {
            _this.moved = true;
            var event_1 = {
              type: TouchListener2.EVENT_LONG_TAP,
              touchStart: _this.touchStart,
              touchEvent
            };
            _this.eventService.dispatchEvent(event_1);
          }
        }, 500);
      };
      TouchListener2.prototype.onTouchMove = function(touchEvent) {
        if (!this.touching) {
          return;
        }
        var touch = this.getActiveTouch(touchEvent.touches);
        if (!touch) {
          return;
        }
        var eventIsFarAway = !areEventsNear(touch, this.touchStart, 4);
        if (eventIsFarAway) {
          this.moved = true;
        }
      };
      TouchListener2.prototype.onTouchEnd = function(touchEvent) {
        if (!this.touching) {
          return;
        }
        if (!this.moved) {
          var event_2 = {
            type: TouchListener2.EVENT_TAP,
            touchStart: this.touchStart
          };
          this.eventService.dispatchEvent(event_2);
          this.checkForDoubleTap();
        }
        if (this.preventMouseClick) {
          touchEvent.preventDefault();
        }
        this.touching = false;
      };
      TouchListener2.prototype.checkForDoubleTap = function() {
        var now = new Date().getTime();
        if (this.lastTapTime && this.lastTapTime > 0) {
          var interval = now - this.lastTapTime;
          if (interval > TouchListener2.DOUBLE_TAP_MILLIS) {
            var event_3 = {
              type: TouchListener2.EVENT_DOUBLE_TAP,
              touchStart: this.touchStart
            };
            this.eventService.dispatchEvent(event_3);
            this.lastTapTime = null;
          } else {
            this.lastTapTime = now;
          }
        } else {
          this.lastTapTime = now;
        }
      };
      TouchListener2.prototype.destroy = function() {
        this.destroyFuncs.forEach(function(func) {
          return func();
        });
      };
      TouchListener2.EVENT_TAP = "tap";
      TouchListener2.EVENT_DOUBLE_TAP = "doubleTap";
      TouchListener2.EVENT_LONG_TAP = "longTap";
      TouchListener2.DOUBLE_TAP_MILLIS = 500;
      return TouchListener2;
    }();
    var __extends$c = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$e = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderComp = function(_super) {
      __extends$c(HeaderComp2, _super);
      function HeaderComp2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lastMovingChanged = 0;
        return _this;
      }
      HeaderComp2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      HeaderComp2.prototype.refresh = function(params) {
        this.params = params;
        if (this.workOutTemplate() != this.currentTemplate) {
          return false;
        }
        if (this.workOutShowMenu() != this.currentShowMenu) {
          return false;
        }
        if (this.workOutSort() != this.currentSort) {
          return false;
        }
        this.setDisplayName(params);
        return true;
      };
      HeaderComp2.prototype.workOutTemplate = function() {
        var template = firstExistingValue(this.params.template, HeaderComp2.TEMPLATE);
        template = template && template.trim ? template.trim() : template;
        return template;
      };
      HeaderComp2.prototype.init = function(params) {
        this.params = params;
        this.currentTemplate = this.workOutTemplate();
        this.setTemplate(this.currentTemplate);
        this.setupTap();
        this.setupIcons(params.column);
        this.setMenu();
        this.setupSort();
        this.setupFilterIcon();
        this.setDisplayName(params);
      };
      HeaderComp2.prototype.setDisplayName = function(params) {
        if (this.currentDisplayName != params.displayName) {
          this.currentDisplayName = params.displayName;
          var displayNameSanitised = escapeString(this.currentDisplayName);
          if (this.eText) {
            this.eText.innerHTML = displayNameSanitised;
          }
        }
      };
      HeaderComp2.prototype.setupIcons = function(column) {
        this.addInIcon("sortAscending", this.eSortAsc, column);
        this.addInIcon("sortDescending", this.eSortDesc, column);
        this.addInIcon("sortUnSort", this.eSortNone, column);
        this.addInIcon("menu", this.eMenu, column);
        this.addInIcon("filter", this.eFilter, column);
      };
      HeaderComp2.prototype.addInIcon = function(iconName, eParent, column) {
        if (eParent == null) {
          return;
        }
        var eIcon = createIconNoSpan(iconName, this.gridOptionsWrapper, column);
        eParent.appendChild(eIcon);
      };
      HeaderComp2.prototype.setupTap = function() {
        var _this = this;
        var options = this.gridOptionsWrapper;
        if (options.isSuppressTouch()) {
          return;
        }
        var touchListener = new TouchListener(this.getGui(), true);
        var suppressMenuHide = options.isSuppressMenuHide();
        var tapMenuButton = suppressMenuHide && exists(this.eMenu);
        var menuTouchListener = tapMenuButton ? new TouchListener(this.eMenu, true) : touchListener;
        if (this.params.enableMenu) {
          var eventType = tapMenuButton ? "EVENT_TAP" : "EVENT_LONG_TAP";
          var showMenuFn = function(event) {
            options.getApi().showColumnMenuAfterMouseClick(_this.params.column, event.touchStart);
          };
          this.addManagedListener(menuTouchListener, TouchListener[eventType], showMenuFn);
        }
        if (this.params.enableSorting) {
          var tapListener = function(event) {
            var target = event.touchStart.target;
            if (suppressMenuHide && _this.eMenu.contains(target)) {
              return;
            }
            _this.sortController.progressSort(_this.params.column, false, "uiColumnSorted");
          };
          this.addManagedListener(touchListener, TouchListener.EVENT_TAP, tapListener);
        }
        this.addDestroyFunc(function() {
          return touchListener.destroy();
        });
        if (tapMenuButton) {
          this.addDestroyFunc(function() {
            return menuTouchListener.destroy();
          });
        }
      };
      HeaderComp2.prototype.workOutShowMenu = function() {
        var menuHides = !this.gridOptionsWrapper.isSuppressMenuHide();
        var onIpadAndMenuHides = isIOSUserAgent() && menuHides;
        var showMenu = this.params.enableMenu && !onIpadAndMenuHides;
        return showMenu;
      };
      HeaderComp2.prototype.setMenu = function() {
        var _this = this;
        if (!this.eMenu) {
          return;
        }
        this.currentShowMenu = this.workOutShowMenu();
        if (!this.currentShowMenu) {
          removeFromParent(this.eMenu);
          return;
        }
        var suppressMenuHide = this.gridOptionsWrapper.isSuppressMenuHide();
        this.addManagedListener(this.eMenu, "click", function() {
          return _this.showMenu(_this.eMenu);
        });
        addOrRemoveCssClass(this.eMenu, "ag-header-menu-always-show", suppressMenuHide);
      };
      HeaderComp2.prototype.showMenu = function(eventSource) {
        if (!eventSource) {
          eventSource = this.eMenu;
        }
        this.menuFactory.showMenuAfterButtonClick(this.params.column, eventSource);
      };
      HeaderComp2.prototype.removeSortIcons = function() {
        removeFromParent(this.eSortAsc);
        removeFromParent(this.eSortDesc);
        removeFromParent(this.eSortNone);
        removeFromParent(this.eSortOrder);
      };
      HeaderComp2.prototype.workOutSort = function() {
        return this.params.enableSorting;
      };
      HeaderComp2.prototype.setupSort = function() {
        var _this = this;
        this.currentSort = this.params.enableSorting;
        if (!this.currentSort) {
          this.removeSortIcons();
          return;
        }
        var sortUsingCtrl = this.gridOptionsWrapper.isMultiSortKeyCtrl();
        this.addManagedListener(this.params.column, Column.EVENT_MOVING_CHANGED, function() {
          _this.lastMovingChanged = new Date().getTime();
        });
        if (this.eLabel) {
          this.addManagedListener(this.eLabel, "click", function(event) {
            var moving = _this.params.column.isMoving();
            var nowTime = new Date().getTime();
            var movedRecently = nowTime - _this.lastMovingChanged < 50;
            var columnMoving = moving || movedRecently;
            if (!columnMoving) {
              var multiSort = sortUsingCtrl ? event.ctrlKey || event.metaKey : event.shiftKey;
              _this.params.progressSort(multiSort);
            }
          });
        }
        this.addManagedListener(this.params.column, Column.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.onSortChanged();
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.setMultiSortOrder.bind(this));
        this.setMultiSortOrder();
      };
      HeaderComp2.prototype.onSortChanged = function() {
        addOrRemoveCssClass(this.getGui(), "ag-header-cell-sorted-asc", this.params.column.isSortAscending());
        addOrRemoveCssClass(this.getGui(), "ag-header-cell-sorted-desc", this.params.column.isSortDescending());
        addOrRemoveCssClass(this.getGui(), "ag-header-cell-sorted-none", this.params.column.isSortNone());
        if (this.eSortAsc) {
          addOrRemoveCssClass(this.eSortAsc, "ag-hidden", !this.params.column.isSortAscending());
        }
        if (this.eSortDesc) {
          addOrRemoveCssClass(this.eSortDesc, "ag-hidden", !this.params.column.isSortDescending());
        }
        if (this.eSortNone) {
          var alwaysHideNoSort = !this.params.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();
          addOrRemoveCssClass(this.eSortNone, "ag-hidden", alwaysHideNoSort || !this.params.column.isSortNone());
        }
      };
      HeaderComp2.prototype.setMultiSortOrder = function() {
        if (!this.eSortOrder) {
          return;
        }
        var col = this.params.column;
        var allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();
        var indexThisCol = allColumnsWithSorting.indexOf(col);
        var moreThanOneColSorting = allColumnsWithSorting.length > 1;
        var showIndex = col.isSorting() && moreThanOneColSorting;
        setDisplayed(this.eSortOrder, showIndex);
        if (indexThisCol >= 0) {
          this.eSortOrder.innerHTML = (indexThisCol + 1).toString();
        } else {
          clearElement(this.eSortOrder);
        }
      };
      HeaderComp2.prototype.setupFilterIcon = function() {
        if (!this.eFilter) {
          return;
        }
        this.addManagedListener(this.params.column, Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.onFilterChanged();
      };
      HeaderComp2.prototype.onFilterChanged = function() {
        var filterPresent = this.params.column.isFilterActive();
        addOrRemoveCssClass(this.eFilter, "ag-hidden", !filterPresent);
      };
      HeaderComp2.TEMPLATE = '<div class="ag-cell-label-container">\n            <span ref="eMenu" class="ag-header-icon ag-header-cell-menu-button" aria-hidden="true"></span>\n            <div ref="eLabel" class="ag-header-cell-label" role="presentation" unselectable="on">\n                <span ref="eText" class="ag-header-cell-text" unselectable="on"></span>\n                <span ref="eFilter" class="ag-header-icon ag-header-label-icon ag-filter-icon" aria-hidden="true"></span>\n                <span ref="eSortOrder" class="ag-header-icon ag-header-label-icon ag-sort-order" aria-hidden="true"></span>\n                <span ref="eSortAsc" class="ag-header-icon ag-header-label-icon ag-sort-ascending-icon" aria-hidden="true"></span>\n                <span ref="eSortDesc" class="ag-header-icon ag-header-label-icon ag-sort-descending-icon" aria-hidden="true"></span>\n                <span ref="eSortNone" class="ag-header-icon ag-header-label-icon ag-sort-none-icon" aria-hidden="true"></span>\n            </div>\n        </div>';
      __decorate$e([
        Autowired("gridOptionsWrapper")
      ], HeaderComp2.prototype, "gridOptionsWrapper", void 0);
      __decorate$e([
        Autowired("sortController")
      ], HeaderComp2.prototype, "sortController", void 0);
      __decorate$e([
        Autowired("menuFactory")
      ], HeaderComp2.prototype, "menuFactory", void 0);
      __decorate$e([
        RefSelector("eFilter")
      ], HeaderComp2.prototype, "eFilter", void 0);
      __decorate$e([
        RefSelector("eSortAsc")
      ], HeaderComp2.prototype, "eSortAsc", void 0);
      __decorate$e([
        RefSelector("eSortDesc")
      ], HeaderComp2.prototype, "eSortDesc", void 0);
      __decorate$e([
        RefSelector("eSortNone")
      ], HeaderComp2.prototype, "eSortNone", void 0);
      __decorate$e([
        RefSelector("eSortOrder")
      ], HeaderComp2.prototype, "eSortOrder", void 0);
      __decorate$e([
        RefSelector("eMenu")
      ], HeaderComp2.prototype, "eMenu", void 0);
      __decorate$e([
        RefSelector("eLabel")
      ], HeaderComp2.prototype, "eLabel", void 0);
      __decorate$e([
        RefSelector("eText")
      ], HeaderComp2.prototype, "eText", void 0);
      return HeaderComp2;
    }(Component);
    var __extends$d = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$f = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderGroupComp = function(_super) {
      __extends$d(HeaderGroupComp2, _super);
      function HeaderGroupComp2() {
        return _super.call(this, HeaderGroupComp2.TEMPLATE) || this;
      }
      HeaderGroupComp2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      HeaderGroupComp2.prototype.init = function(params) {
        this.params = params;
        this.setupLabel();
        this.addGroupExpandIcon();
        this.setupExpandIcons();
      };
      HeaderGroupComp2.prototype.setupExpandIcons = function() {
        var _this = this;
        this.addInIcon("columnGroupOpened", "agOpened");
        this.addInIcon("columnGroupClosed", "agClosed");
        var expandAction = function(event) {
          if (isStopPropagationForAgGrid(event)) {
            return;
          }
          var newExpandedValue = !_this.params.columnGroup.isExpanded();
          _this.columnController.setColumnGroupOpened(_this.params.columnGroup.getOriginalColumnGroup(), newExpandedValue, "uiColumnExpanded");
        };
        this.addTouchAndClickListeners(this.eCloseIcon, expandAction);
        this.addTouchAndClickListeners(this.eOpenIcon, expandAction);
        var stopPropagationAction = function(event) {
          stopPropagationForAgGrid(event);
        };
        this.addManagedListener(this.eCloseIcon, "dblclick", stopPropagationAction);
        this.addManagedListener(this.eOpenIcon, "dblclick", stopPropagationAction);
        this.addManagedListener(this.getGui(), "dblclick", expandAction);
        this.updateIconVisibility();
        var originalColumnGroup = this.params.columnGroup.getOriginalColumnGroup();
        this.addManagedListener(originalColumnGroup, OriginalColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));
        this.addManagedListener(originalColumnGroup, OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));
      };
      HeaderGroupComp2.prototype.addTouchAndClickListeners = function(eElement, action) {
        var touchListener = new TouchListener(eElement);
        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, action);
        this.addDestroyFunc(function() {
          return touchListener.destroy();
        });
        this.addManagedListener(eElement, "click", action);
      };
      HeaderGroupComp2.prototype.updateIconVisibility = function() {
        var columnGroup = this.params.columnGroup;
        if (columnGroup.isExpandable()) {
          var expanded = this.params.columnGroup.isExpanded();
          setDisplayed(this.eOpenIcon, expanded);
          setDisplayed(this.eCloseIcon, !expanded);
        } else {
          setDisplayed(this.eOpenIcon, false);
          setDisplayed(this.eCloseIcon, false);
        }
      };
      HeaderGroupComp2.prototype.addInIcon = function(iconName, refName) {
        var eIcon = createIconNoSpan(iconName, this.gridOptionsWrapper, null);
        this.getRefElement(refName).appendChild(eIcon);
      };
      HeaderGroupComp2.prototype.addGroupExpandIcon = function() {
        if (!this.params.columnGroup.isExpandable()) {
          setDisplayed(this.eOpenIcon, false);
          setDisplayed(this.eCloseIcon, false);
          return;
        }
      };
      HeaderGroupComp2.prototype.setupLabel = function() {
        var displayName = this.params.displayName;
        if (exists(displayName)) {
          var displayNameSanitised = escapeString(displayName);
          this.getRefElement("agLabel").innerHTML = displayNameSanitised;
        }
      };
      HeaderGroupComp2.TEMPLATE = '<div class="ag-header-group-cell-label" ref="agContainer" role="presentation">\n            <span ref="agLabel" class="ag-header-group-text" role="presentation"></span>\n            <span ref="agOpened" class="ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded"></span>\n            <span ref="agClosed" class="ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed"></span>\n        </div>';
      __decorate$f([
        Autowired("columnController")
      ], HeaderGroupComp2.prototype, "columnController", void 0);
      __decorate$f([
        Autowired("gridOptionsWrapper")
      ], HeaderGroupComp2.prototype, "gridOptionsWrapper", void 0);
      __decorate$f([
        RefSelector("agOpened")
      ], HeaderGroupComp2.prototype, "eOpenIcon", void 0);
      __decorate$f([
        RefSelector("agClosed")
      ], HeaderGroupComp2.prototype, "eCloseIcon", void 0);
      return HeaderGroupComp2;
    }(Component);
    var __decorate$g = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RowNode = function() {
      function RowNode2() {
        this.childrenMapped = {};
        this.selectable = true;
        this.__objectId = RowNode2.OBJECT_ID_SEQUENCE++;
        this.alreadyRendered = false;
        this.highlighted = null;
        this.selected = false;
      }
      RowNode2.prototype.setData = function(data) {
        var oldData = this.data;
        this.data = data;
        this.valueCache.onDataChanged();
        this.updateDataOnDetailNode();
        this.checkRowSelectable();
        var event = this.createDataChangedEvent(data, oldData, false);
        this.dispatchLocalEvent(event);
      };
      RowNode2.prototype.updateDataOnDetailNode = function() {
        if (this.detailNode) {
          this.detailNode.data = this.data;
        }
      };
      RowNode2.prototype.createDataChangedEvent = function(newData, oldData, update) {
        return {
          type: RowNode2.EVENT_DATA_CHANGED,
          node: this,
          oldData,
          newData,
          update
        };
      };
      RowNode2.prototype.createLocalRowEvent = function(type) {
        return {
          type,
          node: this
        };
      };
      RowNode2.prototype.updateData = function(data) {
        var oldData = this.data;
        this.data = data;
        this.updateDataOnDetailNode();
        this.checkRowSelectable();
        this.updateDataOnDetailNode();
        var event = this.createDataChangedEvent(data, oldData, true);
        this.dispatchLocalEvent(event);
      };
      RowNode2.prototype.getRowIndexString = function() {
        if (this.rowPinned === Constants.PINNED_TOP) {
          return "t-" + this.rowIndex;
        } else if (this.rowPinned === Constants.PINNED_BOTTOM) {
          return "b-" + this.rowIndex;
        }
        return this.rowIndex.toString();
      };
      RowNode2.prototype.createDaemonNode = function() {
        var oldNode = new RowNode2();
        this.context.createBean(oldNode);
        oldNode.id = this.id;
        oldNode.data = this.data;
        oldNode.daemon = true;
        oldNode.selected = this.selected;
        oldNode.level = this.level;
        return oldNode;
      };
      RowNode2.prototype.setDataAndId = function(data, id) {
        var oldNode = exists(this.id) ? this.createDaemonNode() : null;
        var oldData = this.data;
        this.data = data;
        this.updateDataOnDetailNode();
        this.setId(id);
        this.selectionController.syncInRowNode(this, oldNode);
        this.checkRowSelectable();
        var event = this.createDataChangedEvent(data, oldData, false);
        this.dispatchLocalEvent(event);
      };
      RowNode2.prototype.checkRowSelectable = function() {
        var isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
        var shouldInvokeIsRowSelectable = isRowSelectableFunc && exists(this);
        this.setRowSelectable(shouldInvokeIsRowSelectable ? isRowSelectableFunc(this) : true);
      };
      RowNode2.prototype.setRowSelectable = function(newVal) {
        if (this.selectable !== newVal) {
          this.selectable = newVal;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_SELECTABLE_CHANGED));
          }
        }
      };
      RowNode2.prototype.setId = function(id) {
        var getRowNodeId = this.gridOptionsWrapper.getRowNodeIdFunc();
        if (getRowNodeId) {
          if (this.data) {
            this.id = getRowNodeId(this.data);
            if (this.id && this.id.startsWith && this.id.startsWith(RowNode2.ID_PREFIX_ROW_GROUP)) {
              console.error("ag-Grid: Row ID's cannot start with " + RowNode2.ID_PREFIX_ROW_GROUP + ", this is a reserved prefix for ag-Grid's row grouping feature.");
            }
          } else {
            this.id = void 0;
          }
        } else {
          this.id = id;
        }
      };
      RowNode2.prototype.isPixelInRange = function(pixel) {
        return pixel >= this.rowTop && pixel < this.rowTop + this.rowHeight;
      };
      RowNode2.prototype.clearRowTop = function() {
        this.oldRowTop = this.rowTop;
        this.setRowTop(null);
      };
      RowNode2.prototype.setFirstChild = function(firstChild) {
        if (this.firstChild === firstChild) {
          return;
        }
        this.firstChild = firstChild;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_FIRST_CHILD_CHANGED));
        }
      };
      RowNode2.prototype.setLastChild = function(lastChild) {
        if (this.lastChild === lastChild) {
          return;
        }
        this.lastChild = lastChild;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_LAST_CHILD_CHANGED));
        }
      };
      RowNode2.prototype.setChildIndex = function(childIndex) {
        if (this.childIndex === childIndex) {
          return;
        }
        this.childIndex = childIndex;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_CHILD_INDEX_CHANGED));
        }
      };
      RowNode2.prototype.setRowTop = function(rowTop) {
        if (this.rowTop === rowTop) {
          return;
        }
        this.rowTop = rowTop;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_TOP_CHANGED));
        }
      };
      RowNode2.prototype.setDragging = function(dragging) {
        if (this.dragging === dragging) {
          return;
        }
        this.dragging = dragging;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_DRAGGING_CHANGED));
        }
      };
      RowNode2.prototype.setHighlighted = function(highlighted) {
        if (highlighted === this.highlighted) {
          return;
        }
        this.highlighted = highlighted;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HIGHLIGHT_CHANGED));
        }
      };
      RowNode2.prototype.setAllChildrenCount = function(allChildrenCount) {
        if (this.allChildrenCount === allChildrenCount) {
          return;
        }
        this.allChildrenCount = allChildrenCount;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_ALL_CHILDREN_COUNT_CHANGED));
        }
      };
      RowNode2.prototype.setMaster = function(master) {
        if (this.master === master) {
          return;
        }
        if (this.master && !master) {
          this.expanded = false;
        }
        this.master = master;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_MASTER_CHANGED));
        }
      };
      RowNode2.prototype.setRowHeight = function(rowHeight, estimated) {
        if (estimated === void 0) {
          estimated = false;
        }
        this.rowHeight = rowHeight;
        this.rowHeightEstimated = estimated;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HEIGHT_CHANGED));
        }
      };
      RowNode2.prototype.setRowIndex = function(rowIndex) {
        this.rowIndex = rowIndex;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_ROW_INDEX_CHANGED));
        }
      };
      RowNode2.prototype.setUiLevel = function(uiLevel) {
        if (this.uiLevel === uiLevel) {
          return;
        }
        this.uiLevel = uiLevel;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_UI_LEVEL_CHANGED));
        }
      };
      RowNode2.prototype.setExpanded = function(expanded) {
        if (this.expanded === expanded) {
          return;
        }
        this.expanded = expanded;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_EXPANDED_CHANGED));
        }
        var event = assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_GROUP_OPENED), {
          expanded
        });
        this.mainEventService.dispatchEvent(event);
        if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
          this.gridApi.redrawRows({ rowNodes: [this] });
        }
      };
      RowNode2.prototype.createGlobalRowEvent = function(type) {
        return {
          type,
          node: this,
          data: this.data,
          rowIndex: this.rowIndex,
          rowPinned: this.rowPinned,
          context: this.gridOptionsWrapper.getContext(),
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi()
        };
      };
      RowNode2.prototype.dispatchLocalEvent = function(event) {
        if (this.eventService) {
          this.eventService.dispatchEvent(event);
        }
      };
      RowNode2.prototype.setDataValue = function(colKey, newValue) {
        var column = this.columnController.getPrimaryColumn(colKey);
        var oldValue = this.valueService.getValue(column, this);
        this.valueService.setValue(this, column, newValue);
        this.dispatchCellChangedEvent(column, newValue, oldValue);
      };
      RowNode2.prototype.setGroupValue = function(colKey, newValue) {
        var column = this.columnController.getGridColumn(colKey);
        if (missing(this.groupData)) {
          this.groupData = {};
        }
        var columnId = column.getColId();
        var oldValue = this.groupData[columnId];
        if (oldValue === newValue) {
          return;
        }
        this.groupData[columnId] = newValue;
        this.dispatchCellChangedEvent(column, newValue, oldValue);
      };
      RowNode2.prototype.setAggData = function(newAggData) {
        var _this = this;
        var colIds = getAllKeysInObjects([this.aggData, newAggData]);
        var oldAggData = this.aggData;
        this.aggData = newAggData;
        if (this.eventService) {
          colIds.forEach(function(colId) {
            var column = _this.columnController.getGridColumn(colId);
            var value = _this.aggData ? _this.aggData[colId] : void 0;
            var oldValue = oldAggData ? oldAggData[colId] : void 0;
            _this.dispatchCellChangedEvent(column, value, oldValue);
          });
        }
      };
      RowNode2.prototype.updateHasChildren = function() {
        var newValue = this.group && !this.footer || this.childrenAfterGroup && this.childrenAfterGroup.length > 0;
        if (newValue !== this.__hasChildren) {
          this.__hasChildren = newValue;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HAS_CHILDREN_CHANGED));
          }
        }
      };
      RowNode2.prototype.hasChildren = function() {
        if (this.__hasChildren == null) {
          this.updateHasChildren();
        }
        return this.__hasChildren;
      };
      RowNode2.prototype.isEmptyRowGroupNode = function() {
        return this.group && missingOrEmpty(this.childrenAfterGroup);
      };
      RowNode2.prototype.dispatchCellChangedEvent = function(column, newValue, oldValue) {
        var cellChangedEvent = {
          type: RowNode2.EVENT_CELL_CHANGED,
          node: this,
          column,
          newValue,
          oldValue
        };
        this.dispatchLocalEvent(cellChangedEvent);
      };
      RowNode2.prototype.resetQuickFilterAggregateText = function() {
        this.quickFilterAggregateText = null;
      };
      RowNode2.prototype.isExpandable = function() {
        return this.hasChildren() || this.master ? true : false;
      };
      RowNode2.prototype.isSelected = function() {
        if (this.footer) {
          return this.sibling.isSelected();
        }
        return this.selected;
      };
      RowNode2.prototype.depthFirstSearch = function(callback) {
        if (this.childrenAfterGroup) {
          this.childrenAfterGroup.forEach(function(child) {
            return child.depthFirstSearch(callback);
          });
        }
        callback(this);
      };
      RowNode2.prototype.calculateSelectedFromChildren = function() {
        var atLeastOneSelected = false;
        var atLeastOneDeSelected = false;
        var atLeastOneMixed = false;
        var newSelectedValue;
        if (this.childrenAfterGroup) {
          for (var i = 0; i < this.childrenAfterGroup.length; i++) {
            var child = this.childrenAfterGroup[i];
            if (!child.selectable) {
              continue;
            }
            var childState = child.isSelected();
            switch (childState) {
              case true:
                atLeastOneSelected = true;
                break;
              case false:
                atLeastOneDeSelected = true;
                break;
              default:
                atLeastOneMixed = true;
                break;
            }
          }
        }
        if (atLeastOneMixed) {
          newSelectedValue = void 0;
        } else if (atLeastOneSelected && !atLeastOneDeSelected) {
          newSelectedValue = true;
        } else if (!atLeastOneSelected && atLeastOneDeSelected) {
          newSelectedValue = false;
        } else {
          newSelectedValue = void 0;
        }
        this.selectThisNode(newSelectedValue);
      };
      RowNode2.prototype.setSelectedInitialValue = function(selected) {
        this.selected = selected;
      };
      RowNode2.prototype.setSelected = function(newValue, clearSelection, suppressFinishActions) {
        if (clearSelection === void 0) {
          clearSelection = false;
        }
        if (suppressFinishActions === void 0) {
          suppressFinishActions = false;
        }
        this.setSelectedParams({
          newValue,
          clearSelection,
          suppressFinishActions,
          rangeSelect: false
        });
      };
      RowNode2.prototype.isRowPinned = function() {
        return this.rowPinned === Constants.PINNED_TOP || this.rowPinned === Constants.PINNED_BOTTOM;
      };
      RowNode2.prototype.setSelectedParams = function(params) {
        var groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
        var newValue = params.newValue === true;
        var clearSelection = params.clearSelection === true;
        var suppressFinishActions = params.suppressFinishActions === true;
        var rangeSelect = params.rangeSelect === true;
        var groupSelectsFiltered = groupSelectsChildren && params.groupSelectsFiltered === true;
        if (this.id === void 0) {
          console.warn("ag-Grid: cannot select node until id for node is known");
          return 0;
        }
        if (this.rowPinned) {
          console.warn("ag-Grid: cannot select pinned rows");
          return 0;
        }
        if (this.footer) {
          return this.sibling.setSelectedParams(params);
        }
        if (rangeSelect && this.selectionController.getLastSelectedNode()) {
          var newRowClicked = this.selectionController.getLastSelectedNode() !== this;
          var allowMultiSelect = this.gridOptionsWrapper.isRowSelectionMulti();
          if (newRowClicked && allowMultiSelect) {
            return this.doRowRangeSelection();
          }
        }
        var updatedCount = 0;
        var skipThisNode = groupSelectsFiltered && this.group;
        if (!skipThisNode) {
          var thisNodeWasSelected = this.selectThisNode(newValue);
          if (thisNodeWasSelected) {
            updatedCount++;
          }
        }
        if (groupSelectsChildren && this.group) {
          updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);
        }
        if (!suppressFinishActions) {
          var clearOtherNodes = newValue && (clearSelection || !this.gridOptionsWrapper.isRowSelectionMulti());
          if (clearOtherNodes) {
            updatedCount += this.selectionController.clearOtherNodes(this);
          }
          if (updatedCount > 0) {
            this.selectionController.updateGroupsFromChildrenSelections();
            var event_1 = {
              type: Events.EVENT_SELECTION_CHANGED,
              api: this.gridApi,
              columnApi: this.columnApi
            };
            this.mainEventService.dispatchEvent(event_1);
          }
          if (newValue) {
            this.selectionController.setLastSelectedNode(this);
          }
        }
        return updatedCount;
      };
      RowNode2.prototype.doRowRangeSelection = function() {
        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
        var lastSelectedNode = this.selectionController.getLastSelectedNode();
        var nodesToSelect = this.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);
        var updatedCount = 0;
        nodesToSelect.forEach(function(rowNode) {
          if (rowNode.group && groupsSelectChildren) {
            return;
          }
          var nodeWasSelected = rowNode.selectThisNode(true);
          if (nodeWasSelected) {
            updatedCount++;
          }
        });
        this.selectionController.updateGroupsFromChildrenSelections();
        var event = {
          type: Events.EVENT_SELECTION_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.mainEventService.dispatchEvent(event);
        return updatedCount;
      };
      RowNode2.prototype.isParentOfNode = function(potentialParent) {
        var parentNode = this.parent;
        while (parentNode) {
          if (parentNode === potentialParent) {
            return true;
          }
          parentNode = parentNode.parent;
        }
        return false;
      };
      RowNode2.prototype.selectThisNode = function(newValue) {
        var selectionNotAllowed = !this.selectable && newValue;
        var selectionNotChanged = this.selected === newValue;
        if (selectionNotAllowed || selectionNotChanged) {
          return false;
        }
        this.selected = newValue;
        if (this.eventService) {
          this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_ROW_SELECTED));
        }
        var event = this.createGlobalRowEvent(Events.EVENT_ROW_SELECTED);
        this.mainEventService.dispatchEvent(event);
        return true;
      };
      RowNode2.prototype.selectChildNodes = function(newValue, groupSelectsFiltered) {
        var children = groupSelectsFiltered ? this.childrenAfterFilter : this.childrenAfterGroup;
        if (missing(children)) {
          return;
        }
        var updatedCount = 0;
        for (var i = 0; i < children.length; i++) {
          updatedCount += children[i].setSelectedParams({
            newValue,
            clearSelection: false,
            suppressFinishActions: true,
            groupSelectsFiltered
          });
        }
        return updatedCount;
      };
      RowNode2.prototype.addEventListener = function(eventType, listener) {
        if (!this.eventService) {
          this.eventService = new EventService();
        }
        this.eventService.addEventListener(eventType, listener);
      };
      RowNode2.prototype.removeEventListener = function(eventType, listener) {
        this.eventService.removeEventListener(eventType, listener);
      };
      RowNode2.prototype.onMouseEnter = function() {
        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_MOUSE_ENTER));
      };
      RowNode2.prototype.onMouseLeave = function() {
        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_MOUSE_LEAVE));
      };
      RowNode2.prototype.getFirstChildOfFirstChild = function(rowGroupColumn) {
        var currentRowNode = this;
        var isCandidate = true;
        var foundFirstChildPath = false;
        var nodeToSwapIn;
        while (isCandidate && !foundFirstChildPath) {
          var parentRowNode = currentRowNode.parent;
          var firstChild = exists(parentRowNode) && currentRowNode.firstChild;
          if (firstChild) {
            if (parentRowNode.rowGroupColumn === rowGroupColumn) {
              foundFirstChildPath = true;
              nodeToSwapIn = parentRowNode;
            }
          } else {
            isCandidate = false;
          }
          currentRowNode = parentRowNode;
        }
        return foundFirstChildPath ? nodeToSwapIn : null;
      };
      RowNode2.prototype.isFullWidthCell = function() {
        var isFullWidthCellFunc = this.gridOptionsWrapper.getIsFullWidthCellFunc();
        return isFullWidthCellFunc ? isFullWidthCellFunc(this) : false;
      };
      RowNode2.ID_PREFIX_ROW_GROUP = "row-group-";
      RowNode2.ID_PREFIX_TOP_PINNED = "t-";
      RowNode2.ID_PREFIX_BOTTOM_PINNED = "b-";
      RowNode2.OBJECT_ID_SEQUENCE = 0;
      RowNode2.EVENT_ROW_SELECTED = "rowSelected";
      RowNode2.EVENT_DATA_CHANGED = "dataChanged";
      RowNode2.EVENT_CELL_CHANGED = "cellChanged";
      RowNode2.EVENT_ALL_CHILDREN_COUNT_CHANGED = "allChildrenCountChanged";
      RowNode2.EVENT_MASTER_CHANGED = "masterChanged";
      RowNode2.EVENT_MOUSE_ENTER = "mouseEnter";
      RowNode2.EVENT_MOUSE_LEAVE = "mouseLeave";
      RowNode2.EVENT_HEIGHT_CHANGED = "heightChanged";
      RowNode2.EVENT_TOP_CHANGED = "topChanged";
      RowNode2.EVENT_FIRST_CHILD_CHANGED = "firstChildChanged";
      RowNode2.EVENT_LAST_CHILD_CHANGED = "lastChildChanged";
      RowNode2.EVENT_CHILD_INDEX_CHANGED = "childIndexChanged";
      RowNode2.EVENT_ROW_INDEX_CHANGED = "rowIndexChanged";
      RowNode2.EVENT_EXPANDED_CHANGED = "expandedChanged";
      RowNode2.EVENT_HAS_CHILDREN_CHANGED = "hasChildrenChanged";
      RowNode2.EVENT_SELECTABLE_CHANGED = "selectableChanged";
      RowNode2.EVENT_UI_LEVEL_CHANGED = "uiLevelChanged";
      RowNode2.EVENT_HIGHLIGHT_CHANGED = "rowHighlightChanged";
      RowNode2.EVENT_DRAGGING_CHANGED = "draggingChanged";
      __decorate$g([
        Autowired("eventService")
      ], RowNode2.prototype, "mainEventService", void 0);
      __decorate$g([
        Autowired("gridOptionsWrapper")
      ], RowNode2.prototype, "gridOptionsWrapper", void 0);
      __decorate$g([
        Autowired("selectionController")
      ], RowNode2.prototype, "selectionController", void 0);
      __decorate$g([
        Autowired("columnController")
      ], RowNode2.prototype, "columnController", void 0);
      __decorate$g([
        Autowired("valueService")
      ], RowNode2.prototype, "valueService", void 0);
      __decorate$g([
        Autowired("rowModel")
      ], RowNode2.prototype, "rowModel", void 0);
      __decorate$g([
        Autowired("context")
      ], RowNode2.prototype, "context", void 0);
      __decorate$g([
        Autowired("valueCache")
      ], RowNode2.prototype, "valueCache", void 0);
      __decorate$g([
        Autowired("columnApi")
      ], RowNode2.prototype, "columnApi", void 0);
      __decorate$g([
        Autowired("gridApi")
      ], RowNode2.prototype, "gridApi", void 0);
      return RowNode2;
    }();
    var __extends$e = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$h = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var CheckboxSelectionComponent = function(_super) {
      __extends$e(CheckboxSelectionComponent2, _super);
      function CheckboxSelectionComponent2() {
        return _super.call(this, '\n            <div class="ag-selection-checkbox">\n                <ag-checkbox role="presentation" ref="eCheckbox"></ag-checkbox>\n            </div>') || this;
      }
      CheckboxSelectionComponent2.prototype.postConstruct = function() {
        this.eCheckbox.setPassive(true);
      };
      CheckboxSelectionComponent2.prototype.onDataChanged = function() {
        this.onSelectionChanged();
      };
      CheckboxSelectionComponent2.prototype.onSelectableChanged = function() {
        this.showOrHideSelect();
      };
      CheckboxSelectionComponent2.prototype.onSelectionChanged = function() {
        var state = this.rowNode.isSelected();
        var stateName = state === void 0 ? "indeterminate" : state === true ? "checked" : "unchecked";
        this.eCheckbox.setValue(state, true);
        this.eCheckbox.setInputAriaLabel("Press Space to toggle row selection (" + stateName + ")");
      };
      CheckboxSelectionComponent2.prototype.onCheckedClicked = function() {
        var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
        var updatedCount = this.rowNode.setSelectedParams({ newValue: false, groupSelectsFiltered });
        return updatedCount;
      };
      CheckboxSelectionComponent2.prototype.onUncheckedClicked = function(event) {
        var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
        var updatedCount = this.rowNode.setSelectedParams({ newValue: true, rangeSelect: event.shiftKey, groupSelectsFiltered });
        return updatedCount;
      };
      CheckboxSelectionComponent2.prototype.init = function(params) {
        var _this = this;
        this.rowNode = params.rowNode;
        this.column = params.column;
        this.onSelectionChanged();
        this.addGuiEventListener("click", function(event) {
          return stopPropagationForAgGrid(event);
        });
        this.addGuiEventListener("dblclick", function(event) {
          return stopPropagationForAgGrid(event);
        });
        this.addManagedListener(this.eCheckbox.getInputElement(), "click", function(params2) {
          if (params2.previousValue === void 0) {
            var result = _this.onUncheckedClicked(params2.event || {});
            if (result === 0) {
              _this.onCheckedClicked();
            }
          } else if (params2.selected) {
            _this.onUncheckedClicked(params2.event || {});
          } else {
            _this.onCheckedClicked();
          }
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));
        this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
        var checkboxVisibleIsDynamic = this.isRowSelectableFunc || this.checkboxCallbackExists();
        if (checkboxVisibleIsDynamic) {
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelect.bind(this));
          this.showOrHideSelect();
        }
        this.eCheckbox.getInputElement().setAttribute("tabindex", "-1");
      };
      CheckboxSelectionComponent2.prototype.showOrHideSelect = function() {
        var selectable = this.rowNode.selectable;
        if (selectable && this.checkboxCallbackExists()) {
          selectable = this.column.isCellCheckboxSelection(this.rowNode);
        }
        this.setDisplayed(selectable);
      };
      CheckboxSelectionComponent2.prototype.checkboxCallbackExists = function() {
        var colDef = this.column ? this.column.getColDef() : null;
        return colDef && typeof colDef.checkboxSelection === "function";
      };
      __decorate$h([
        Autowired("gridOptionsWrapper")
      ], CheckboxSelectionComponent2.prototype, "gridOptionsWrapper", void 0);
      __decorate$h([
        RefSelector("eCheckbox")
      ], CheckboxSelectionComponent2.prototype, "eCheckbox", void 0);
      __decorate$h([
        PostConstruct
      ], CheckboxSelectionComponent2.prototype, "postConstruct", null);
      return CheckboxSelectionComponent2;
    }(Component);
    var DateComponent = {
      propertyName: "dateComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var HeaderComponent = {
      propertyName: "headerComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var HeaderGroupComponent = {
      propertyName: "headerGroupComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var CellRendererComponent = {
      propertyName: "cellRenderer",
      isCellRenderer: function() {
        return true;
      }
    };
    var PinnedRowCellRendererComponent = {
      propertyName: "pinnedRowCellRenderer",
      isCellRenderer: function() {
        return true;
      }
    };
    var CellEditorComponent = {
      propertyName: "cellEditor",
      isCellRenderer: function() {
        return false;
      }
    };
    var InnerRendererComponent = {
      propertyName: "innerRenderer",
      isCellRenderer: function() {
        return true;
      }
    };
    var LoadingOverlayComponent = {
      propertyName: "loadingOverlayComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var NoRowsOverlayComponent = {
      propertyName: "noRowsOverlayComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var TooltipComponent = {
      propertyName: "tooltipComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var FilterComponent = {
      propertyName: "filter",
      isCellRenderer: function() {
        return false;
      }
    };
    var FloatingFilterComponent = {
      propertyName: "floatingFilterComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var ToolPanelComponent = {
      propertyName: "toolPanel",
      isCellRenderer: function() {
        return false;
      }
    };
    var StatusPanelComponent = {
      propertyName: "statusPanel",
      isCellRenderer: function() {
        return false;
      }
    };
    var __extends$f = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$i = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ComponentSource;
    (function(ComponentSource2) {
      ComponentSource2[ComponentSource2["DEFAULT"] = 0] = "DEFAULT";
      ComponentSource2[ComponentSource2["REGISTERED_BY_NAME"] = 1] = "REGISTERED_BY_NAME";
      ComponentSource2[ComponentSource2["HARDCODED"] = 2] = "HARDCODED";
    })(ComponentSource || (ComponentSource = {}));
    var UserComponentFactory = function(_super) {
      __extends$f(UserComponentFactory2, _super);
      function UserComponentFactory2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      UserComponentFactory2.prototype.newDateComponent = function(params) {
        return this.createAndInitUserComponent(this.gridOptions, params, DateComponent, "agDateInput");
      };
      UserComponentFactory2.prototype.newHeaderComponent = function(params) {
        return this.createAndInitUserComponent(params.column.getColDef(), params, HeaderComponent, "agColumnHeader");
      };
      UserComponentFactory2.prototype.newHeaderGroupComponent = function(params) {
        return this.createAndInitUserComponent(params.columnGroup.getColGroupDef(), params, HeaderGroupComponent, "agColumnGroupHeader");
      };
      UserComponentFactory2.prototype.newFullWidthGroupRowInnerCellRenderer = function(params) {
        return this.createAndInitUserComponent(this.gridOptions.groupRowRendererParams, params, InnerRendererComponent, null, true);
      };
      UserComponentFactory2.prototype.newFullWidthCellRenderer = function(params, cellRendererType, cellRendererName) {
        return this.createAndInitUserComponent(null, params, { propertyName: cellRendererType, isCellRenderer: function() {
          return true;
        } }, cellRendererName);
      };
      UserComponentFactory2.prototype.newCellRenderer = function(target, params, isPinned) {
        if (isPinned === void 0) {
          isPinned = false;
        }
        return this.createAndInitUserComponent(target, params, isPinned ? PinnedRowCellRendererComponent : CellRendererComponent, null, true);
      };
      UserComponentFactory2.prototype.newCellEditor = function(colDef, params) {
        return this.createAndInitUserComponent(colDef, params, CellEditorComponent, "agCellEditor");
      };
      UserComponentFactory2.prototype.newInnerCellRenderer = function(target, params) {
        return this.createAndInitUserComponent(target, params, InnerRendererComponent, null);
      };
      UserComponentFactory2.prototype.newLoadingOverlayComponent = function(params) {
        return this.createAndInitUserComponent(this.gridOptions, params, LoadingOverlayComponent, "agLoadingOverlay");
      };
      UserComponentFactory2.prototype.newNoRowsOverlayComponent = function(params) {
        return this.createAndInitUserComponent(this.gridOptions, params, NoRowsOverlayComponent, "agNoRowsOverlay");
      };
      UserComponentFactory2.prototype.newTooltipComponent = function(params) {
        return this.createAndInitUserComponent(params.colDef, params, TooltipComponent, "agTooltipComponent");
      };
      UserComponentFactory2.prototype.newFilterComponent = function(def, params, defaultFilter) {
        return this.createAndInitUserComponent(def, params, FilterComponent, defaultFilter, false);
      };
      UserComponentFactory2.prototype.newSetFilterCellRenderer = function(target, params) {
        return this.createAndInitUserComponent(target, params, CellRendererComponent, null, true);
      };
      UserComponentFactory2.prototype.newFloatingFilterComponent = function(def, params, defaultFloatingFilter) {
        return this.createAndInitUserComponent(def, params, FloatingFilterComponent, defaultFloatingFilter, true);
      };
      UserComponentFactory2.prototype.newToolPanelComponent = function(toolPanelDef, params) {
        return this.createAndInitUserComponent(toolPanelDef, params, ToolPanelComponent);
      };
      UserComponentFactory2.prototype.newStatusPanelComponent = function(def, params) {
        return this.createAndInitUserComponent(def, params, StatusPanelComponent);
      };
      UserComponentFactory2.prototype.createAndInitUserComponent = function(definitionObject, paramsFromGrid, componentType, defaultComponentName, optional) {
        if (optional === void 0) {
          optional = false;
        }
        if (!definitionObject) {
          definitionObject = this.gridOptions;
        }
        var componentAndParams = this.createComponentInstance(definitionObject, componentType, paramsFromGrid, defaultComponentName, optional);
        if (!componentAndParams) {
          return null;
        }
        var componentInstance = componentAndParams.componentInstance;
        var params = this.createFinalParams(definitionObject, componentType.propertyName, paramsFromGrid, componentAndParams.paramsFromSelector);
        this.addReactHacks(params);
        var deferredInit = this.initComponent(componentInstance, params);
        if (deferredInit == null) {
          return Promise2.resolve(componentInstance);
        } else {
          return deferredInit.then(function() {
            return componentInstance;
          });
        }
      };
      UserComponentFactory2.prototype.addReactHacks = function(params) {
        var agGridReact = this.context.getBean("agGridReact");
        if (agGridReact) {
          params.agGridReact = cloneObject(agGridReact);
        }
        var frameworkComponentWrapper = this.context.getBean("frameworkComponentWrapper");
        if (frameworkComponentWrapper) {
          params.frameworkComponentWrapper = frameworkComponentWrapper;
        }
      };
      UserComponentFactory2.prototype.createUserComponentFromConcreteClass = function(clazz, agGridParams) {
        var internalComponent = new clazz();
        this.initComponent(internalComponent, agGridParams);
        return internalComponent;
      };
      UserComponentFactory2.prototype.lookupComponentClassDef = function(definitionObject, propertyName, params, defaultComponentName) {
        if (params === void 0) {
          params = null;
        }
        var hardcodedNameComponent = null;
        var HardcodedJsComponent = null;
        var hardcodedJsFunction = null;
        var HardcodedFwComponent = null;
        var componentSelectorFunc;
        if (definitionObject != null) {
          var componentPropertyValue = definitionObject[propertyName];
          var usingDefaultComponent = componentPropertyValue === true;
          if (componentPropertyValue != null && !usingDefaultComponent) {
            if (typeof componentPropertyValue === "string") {
              hardcodedNameComponent = componentPropertyValue;
            } else if (typeof componentPropertyValue === "boolean")
              ;
            else if (this.agComponentUtils.doesImplementIComponent(componentPropertyValue)) {
              HardcodedJsComponent = componentPropertyValue;
            } else {
              hardcodedJsFunction = componentPropertyValue;
            }
          }
          HardcodedFwComponent = definitionObject[propertyName + "Framework"];
          componentSelectorFunc = definitionObject[propertyName + "Selector"];
        }
        if (HardcodedJsComponent && HardcodedFwComponent || hardcodedNameComponent && HardcodedFwComponent || hardcodedJsFunction && HardcodedFwComponent) {
          throw Error("ag-grid: you are trying to specify: " + propertyName + " twice as a component.");
        }
        if (HardcodedFwComponent && !this.frameworkComponentWrapper) {
          throw Error("ag-grid: you are specifying a framework component but you are not using a framework version of ag-grid for : " + propertyName);
        }
        if (componentSelectorFunc && (hardcodedNameComponent || HardcodedJsComponent || hardcodedJsFunction || HardcodedFwComponent)) {
          throw Error("ag-grid: you can't specify both, the selector and the component of ag-grid for : " + propertyName);
        }
        if (HardcodedFwComponent) {
          return {
            componentFromFramework: true,
            component: HardcodedFwComponent,
            source: ComponentSource.HARDCODED,
            paramsFromSelector: null
          };
        }
        if (HardcodedJsComponent) {
          return {
            componentFromFramework: false,
            component: HardcodedJsComponent,
            source: ComponentSource.HARDCODED,
            paramsFromSelector: null
          };
        }
        if (hardcodedJsFunction) {
          return this.agComponentUtils.adaptFunction(propertyName, hardcodedJsFunction, false, ComponentSource.HARDCODED);
        }
        var selectorResult = componentSelectorFunc ? componentSelectorFunc(params) : null;
        var componentNameToUse;
        if (selectorResult && selectorResult.component) {
          componentNameToUse = selectorResult.component;
        } else if (hardcodedNameComponent) {
          componentNameToUse = hardcodedNameComponent;
        } else {
          componentNameToUse = defaultComponentName;
        }
        if (!componentNameToUse) {
          return null;
        }
        var registeredCompClassDef = this.lookupFromRegisteredComponents(propertyName, componentNameToUse);
        if (!registeredCompClassDef) {
          return null;
        }
        return {
          componentFromFramework: registeredCompClassDef.componentFromFramework,
          component: registeredCompClassDef.component,
          source: registeredCompClassDef.source,
          paramsFromSelector: selectorResult ? selectorResult.params : null
        };
      };
      UserComponentFactory2.prototype.lookupFromRegisteredComponents = function(propertyName, componentNameOpt) {
        var componentName = componentNameOpt != null ? componentNameOpt : propertyName;
        var registeredComponent = this.userComponentRegistry.retrieve(componentName);
        if (registeredComponent == null) {
          return null;
        }
        if (registeredComponent.componentFromFramework) {
          return {
            component: registeredComponent.component,
            componentFromFramework: true,
            source: ComponentSource.REGISTERED_BY_NAME,
            paramsFromSelector: null
          };
        }
        if (this.agComponentUtils.doesImplementIComponent(registeredComponent.component)) {
          return {
            component: registeredComponent.component,
            componentFromFramework: false,
            source: registeredComponent.source == RegisteredComponentSource.REGISTERED ? ComponentSource.REGISTERED_BY_NAME : ComponentSource.DEFAULT,
            paramsFromSelector: null
          };
        }
        return this.agComponentUtils.adaptFunction(propertyName, registeredComponent.component, registeredComponent.componentFromFramework, registeredComponent.source == RegisteredComponentSource.REGISTERED ? ComponentSource.REGISTERED_BY_NAME : ComponentSource.DEFAULT);
      };
      UserComponentFactory2.prototype.createFinalParams = function(definitionObject, propertyName, paramsFromGrid, paramsFromSelector) {
        if (paramsFromSelector === void 0) {
          paramsFromSelector = null;
        }
        var params = {};
        mergeDeep(params, paramsFromGrid);
        var userParams = definitionObject ? definitionObject[propertyName + "Params"] : null;
        if (userParams != null) {
          if (typeof userParams === "function") {
            var userParamsFromFunc = userParams(paramsFromGrid);
            mergeDeep(params, userParamsFromFunc);
          } else if (typeof userParams === "object") {
            mergeDeep(params, userParams);
          }
        }
        mergeDeep(params, paramsFromSelector);
        return params;
      };
      UserComponentFactory2.prototype.createComponentInstance = function(holder, componentType, paramsForSelector, defaultComponentName, optional) {
        var propertyName = componentType.propertyName;
        var componentToUse = this.lookupComponentClassDef(holder, propertyName, paramsForSelector, defaultComponentName);
        var missing2 = !componentToUse || !componentToUse.component;
        if (missing2) {
          var overrideName = holder ? holder[propertyName] : defaultComponentName;
          var nameToReport = overrideName ? overrideName : defaultComponentName;
          if (!optional) {
            console.error("Could not find component " + nameToReport + ", did you forget to configure this component?");
          }
          return null;
        }
        var componentInstance;
        if (componentToUse.componentFromFramework) {
          var FrameworkComponentRaw = componentToUse.component;
          var thisComponentConfig = this.componentMetadataProvider.retrieve(propertyName);
          componentInstance = this.frameworkComponentWrapper.wrap(FrameworkComponentRaw, thisComponentConfig.mandatoryMethodList, thisComponentConfig.optionalMethodList, componentType, defaultComponentName);
        } else {
          componentInstance = new componentToUse.component();
        }
        return { componentInstance, paramsFromSelector: componentToUse.paramsFromSelector };
      };
      UserComponentFactory2.prototype.initComponent = function(component, params) {
        this.context.createBean(component);
        if (component.init == null) {
          return;
        }
        return component.init(params);
      };
      __decorate$i([
        Autowired("gridOptions")
      ], UserComponentFactory2.prototype, "gridOptions", void 0);
      __decorate$i([
        Autowired("agComponentUtils")
      ], UserComponentFactory2.prototype, "agComponentUtils", void 0);
      __decorate$i([
        Autowired("componentMetadataProvider")
      ], UserComponentFactory2.prototype, "componentMetadataProvider", void 0);
      __decorate$i([
        Autowired("userComponentRegistry")
      ], UserComponentFactory2.prototype, "userComponentRegistry", void 0);
      __decorate$i([
        Optional("frameworkComponentWrapper")
      ], UserComponentFactory2.prototype, "frameworkComponentWrapper", void 0);
      UserComponentFactory2 = __decorate$i([
        Bean("userComponentFactory")
      ], UserComponentFactory2);
      return UserComponentFactory2;
    }(BeanStub);
    var __extends$g = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$j = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GroupCellRenderer = function(_super) {
      __extends$g(GroupCellRenderer2, _super);
      function GroupCellRenderer2() {
        return _super.call(this, GroupCellRenderer2.TEMPLATE) || this;
      }
      GroupCellRenderer2.prototype.init = function(params) {
        this.params = params;
        if (this.gridOptionsWrapper.isGroupIncludeTotalFooter()) {
          this.assignBlankValueToGroupFooterCell(params);
        }
        var embeddedRowMismatch = this.isEmbeddedRowMismatch();
        var nullValue = params.value == null;
        var skipCell = false;
        if (this.gridOptionsWrapper.isGroupIncludeFooter() && this.gridOptionsWrapper.isGroupHideOpenParents()) {
          var node = params.node;
          if (node.footer) {
            var showRowGroup = params.colDef && params.colDef.showRowGroup;
            var rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();
            skipCell = showRowGroup !== rowGroupColumnId;
          }
        }
        this.cellIsBlank = embeddedRowMismatch || nullValue || skipCell;
        if (this.cellIsBlank) {
          return;
        }
        this.setupDragOpenParents();
        this.addExpandAndContract();
        this.addCheckboxIfNeeded();
        this.addValueElement();
        this.setupIndent();
      };
      GroupCellRenderer2.prototype.assignBlankValueToGroupFooterCell = function(params) {
        if (!params.value && params.node.level == -1) {
          params.value = "";
        }
      };
      GroupCellRenderer2.prototype.isEmbeddedRowMismatch = function() {
        if (!this.params.fullWidth || !this.gridOptionsWrapper.isEmbedFullWidthRows()) {
          return false;
        }
        var pinnedLeftCell = this.params.pinned === Constants.PINNED_LEFT;
        var pinnedRightCell = this.params.pinned === Constants.PINNED_RIGHT;
        var bodyCell = !pinnedLeftCell && !pinnedRightCell;
        if (this.gridOptionsWrapper.isEnableRtl()) {
          if (this.columnController.isPinningLeft()) {
            return !pinnedRightCell;
          }
          return !bodyCell;
        }
        if (this.columnController.isPinningLeft()) {
          return !pinnedLeftCell;
        }
        return !bodyCell;
      };
      GroupCellRenderer2.prototype.setIndent = function() {
        if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
          return;
        }
        var params = this.params;
        var rowNode = params.node;
        var fullWithRow = !!params.colDef;
        var manyDimensionThisColumn = !fullWithRow || params.colDef.showRowGroup === true;
        var paddingCount = manyDimensionThisColumn ? rowNode.uiLevel : 0;
        var userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;
        if (userProvidedPaddingPixelsTheDeprecatedWay) {
          this.setPaddingDeprecatedWay(paddingCount, params.padding);
          return;
        }
        if (this.indentClass) {
          this.removeCssClass(this.indentClass);
        }
        this.indentClass = "ag-row-group-indent-" + paddingCount;
        this.addCssClass(this.indentClass);
      };
      GroupCellRenderer2.prototype.setPaddingDeprecatedWay = function(paddingCount, padding) {
        doOnce(function() {
          return console.warn("ag-Grid: since v14.2, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the ag-Grid documentation page for Themes, in particular the property $row-group-indent-size.");
        }, "groupCellRenderer->doDeprecatedWay");
        var paddingPx = paddingCount * padding;
        var eGui = this.getGui();
        var paddingSide = this.gridOptionsWrapper.isEnableRtl() ? "paddingRight" : "paddingLeft";
        eGui.style[paddingSide] = paddingPx + "px";
      };
      GroupCellRenderer2.prototype.setupIndent = function() {
        var node = this.params.node;
        var suppressPadding = this.params.suppressPadding;
        if (!suppressPadding) {
          this.addManagedListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));
          this.setIndent();
        }
      };
      GroupCellRenderer2.prototype.addValueElement = function() {
        var params = this.params;
        var rowNode = this.displayedGroup;
        if (rowNode.footer) {
          this.createFooterCell();
        } else if (rowNode.hasChildren() || get(params.colDef, "cellRendererParams.innerRenderer", null) || get(params.colDef, "cellRendererParams.innerRendererFramework", null)) {
          this.createGroupCell();
          this.addChildCount();
        } else {
          this.createLeafCell();
        }
      };
      GroupCellRenderer2.prototype.createFooterCell = function() {
        var footerValueGetter = this.params.footerValueGetter;
        var footerValue;
        if (footerValueGetter) {
          var paramsClone = cloneObject(this.params);
          paramsClone.value = this.params.value;
          if (typeof footerValueGetter === "function") {
            footerValue = footerValueGetter(paramsClone);
          } else if (typeof footerValueGetter === "string") {
            footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);
          } else {
            console.warn("ag-Grid: footerValueGetter should be either a function or a string (expression)");
          }
        } else {
          footerValue = "Total " + this.params.value;
        }
        this.eValue.innerHTML = footerValue;
      };
      GroupCellRenderer2.prototype.createGroupCell = function() {
        var _this = this;
        var params = this.params;
        var rowGroupColumn = this.displayedGroup.rowGroupColumn;
        var columnToUse = rowGroupColumn ? rowGroupColumn : params.column;
        var groupName = this.params.value;
        var valueFormatted = columnToUse ? this.valueFormatterService.formatValue(columnToUse, params.node, params.scope, groupName) : null;
        params.valueFormatted = valueFormatted;
        var rendererPromise;
        rendererPromise = params.fullWidth ? this.useFullWidth(params) : this.useInnerRenderer(this.params.colDef.cellRendererParams, columnToUse.getColDef(), params);
        if (rendererPromise) {
          rendererPromise.then(function(value) {
            _this.innerCellRenderer = value;
          });
        }
      };
      GroupCellRenderer2.prototype.useInnerRenderer = function(groupCellRendererParams, groupedColumnDef, params) {
        var _this = this;
        var cellRendererPromise = null;
        var groupInnerRendererClass = this.userComponentFactory.lookupComponentClassDef(groupCellRendererParams, "innerRenderer");
        if (groupInnerRendererClass && groupInnerRendererClass.component != null && groupInnerRendererClass.source != ComponentSource.DEFAULT) {
          cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupCellRendererParams, params);
        } else {
          var groupColumnRendererClass = this.userComponentFactory.lookupComponentClassDef(groupedColumnDef, "cellRenderer");
          if (groupColumnRendererClass && groupColumnRendererClass.source != ComponentSource.DEFAULT) {
            cellRendererPromise = this.userComponentFactory.newCellRenderer(groupedColumnDef, params);
          } else if (groupColumnRendererClass && groupColumnRendererClass.source == ComponentSource.DEFAULT && get(groupedColumnDef, "cellRendererParams.innerRenderer", null)) {
            cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupedColumnDef.cellRendererParams, params);
          } else {
            cellRendererPromise = this.userComponentFactory.newCellRenderer({}, params);
          }
        }
        if (cellRendererPromise != null) {
          cellRendererPromise.then(function(rendererToUse) {
            if (rendererToUse == null) {
              _this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
              return;
            }
            bindCellRendererToHtmlElement(cellRendererPromise, _this.eValue);
          });
        } else {
          this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
        }
        return cellRendererPromise;
      };
      GroupCellRenderer2.prototype.useFullWidth = function(params) {
        var cellRendererPromise = this.userComponentFactory.newFullWidthGroupRowInnerCellRenderer(params);
        if (cellRendererPromise != null) {
          bindCellRendererToHtmlElement(cellRendererPromise, this.eValue);
        } else {
          this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
        }
        return cellRendererPromise;
      };
      GroupCellRenderer2.prototype.addChildCount = function() {
        if (this.params.suppressCount) {
          return;
        }
        this.addManagedListener(this.displayedGroup, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));
        this.updateChildCount();
      };
      GroupCellRenderer2.prototype.updateChildCount = function() {
        var allChildrenCount = this.displayedGroup.allChildrenCount;
        var showCount = allChildrenCount != null && allChildrenCount >= 0;
        var countString = showCount ? "(" + allChildrenCount + ")" : "";
        this.eChildCount.innerHTML = countString;
      };
      GroupCellRenderer2.prototype.createLeafCell = function() {
        if (exists(this.params.value)) {
          this.eValue.innerText = this.params.valueFormatted ? this.params.valueFormatted : this.params.value;
        }
      };
      GroupCellRenderer2.prototype.isUserWantsSelected = function() {
        var paramsCheckbox = this.params.checkbox;
        if (typeof paramsCheckbox === "function") {
          return paramsCheckbox(this.params);
        }
        return paramsCheckbox === true;
      };
      GroupCellRenderer2.prototype.addCheckboxIfNeeded = function() {
        var _this = this;
        var rowNode = this.displayedGroup;
        var checkboxNeeded = this.isUserWantsSelected() && !rowNode.footer && !rowNode.rowPinned && !rowNode.detail;
        if (checkboxNeeded) {
          var cbSelectionComponent_1 = new CheckboxSelectionComponent();
          this.getContext().createBean(cbSelectionComponent_1);
          cbSelectionComponent_1.init({ rowNode, column: this.params.column });
          this.eCheckbox.appendChild(cbSelectionComponent_1.getGui());
          this.addDestroyFunc(function() {
            return _this.getContext().destroyBean(cbSelectionComponent_1);
          });
        }
        addOrRemoveCssClass(this.eCheckbox, "ag-invisible", !checkboxNeeded);
      };
      GroupCellRenderer2.prototype.addExpandAndContract = function() {
        var params = this.params;
        var eGroupCell = params.eGridCell;
        var eExpandedIcon = createIconNoSpan("groupExpanded", this.gridOptionsWrapper, null);
        var eContractedIcon = createIconNoSpan("groupContracted", this.gridOptionsWrapper, null);
        setAriaExpanded(eGroupCell, !!params.node.expanded);
        this.eExpanded.appendChild(eExpandedIcon);
        this.eContracted.appendChild(eContractedIcon);
        this.addManagedListener(this.eExpanded, "click", this.onExpandClicked.bind(this));
        this.addManagedListener(this.eContracted, "click", this.onExpandClicked.bind(this));
        this.addManagedListener(eGroupCell, "keydown", this.onKeyDown.bind(this));
        this.addManagedListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));
        this.showExpandAndContractIcons();
        var expandableChangedListener = this.onRowNodeIsExpandableChanged.bind(this);
        this.addManagedListener(this.displayedGroup, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, expandableChangedListener);
        this.addManagedListener(this.displayedGroup, RowNode.EVENT_MASTER_CHANGED, expandableChangedListener);
        this.addManagedListener(this.displayedGroup, RowNode.EVENT_HAS_CHILDREN_CHANGED, expandableChangedListener);
        if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable() && !params.suppressDoubleClickExpand) {
          this.addManagedListener(eGroupCell, "dblclick", this.onCellDblClicked.bind(this));
        }
      };
      GroupCellRenderer2.prototype.onRowNodeIsExpandableChanged = function() {
        this.showExpandAndContractIcons();
        this.setIndent();
      };
      GroupCellRenderer2.prototype.onKeyDown = function(event) {
        var enterKeyPressed = isKeyPressed(event, KeyCode.ENTER);
        if (!enterKeyPressed || this.params.suppressEnterExpand) {
          return;
        }
        var cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);
        if (cellEditable) {
          return;
        }
        this.onExpandOrContract();
      };
      GroupCellRenderer2.prototype.setupDragOpenParents = function() {
        var column = this.params.column;
        var rowNode = this.params.node;
        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
          this.draggedFromHideOpenParents = false;
        } else if (!rowNode.hasChildren()) {
          this.draggedFromHideOpenParents = true;
        } else {
          var rowGroupColumn = rowNode.rowGroupColumn;
          if (rowGroupColumn) {
            this.draggedFromHideOpenParents = !column.isRowGroupDisplayed(rowGroupColumn.getId());
          } else {
            this.draggedFromHideOpenParents = false;
          }
        }
        if (this.draggedFromHideOpenParents) {
          var pointer = rowNode.parent;
          while (true) {
            if (missing(pointer)) {
              break;
            }
            if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {
              this.displayedGroup = pointer;
              break;
            }
            pointer = pointer.parent;
          }
        }
        if (missing(this.displayedGroup)) {
          this.displayedGroup = rowNode;
        }
      };
      GroupCellRenderer2.prototype.onExpandClicked = function(mouseEvent) {
        if (isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        stopPropagationForAgGrid(mouseEvent);
        this.onExpandOrContract();
      };
      GroupCellRenderer2.prototype.onCellDblClicked = function(mouseEvent) {
        if (isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        var targetIsExpandIcon = isElementInEventPath(this.eExpanded, mouseEvent) || isElementInEventPath(this.eContracted, mouseEvent);
        if (!targetIsExpandIcon) {
          this.onExpandOrContract();
        }
      };
      GroupCellRenderer2.prototype.onExpandOrContract = function() {
        var rowNode = this.displayedGroup;
        var params = this.params;
        var nextExpandState = !rowNode.expanded;
        rowNode.setExpanded(nextExpandState);
        setAriaExpanded(params.eGridCell, nextExpandState);
      };
      GroupCellRenderer2.prototype.isExpandable = function() {
        var rowNode = this.params.node;
        var reducedLeafNode = this.columnController.isPivotMode() && rowNode.leafGroup;
        return this.draggedFromHideOpenParents || rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;
      };
      GroupCellRenderer2.prototype.showExpandAndContractIcons = function() {
        var _a = this, eContracted = _a.eContracted, eExpanded = _a.eExpanded, params = _a.params, displayedGroup = _a.displayedGroup, columnController = _a.columnController;
        var eGridCell = params.eGridCell, node = params.node;
        if (this.isExpandable()) {
          var expanded = this.draggedFromHideOpenParents ? true : node.expanded;
          setDisplayed(eContracted, !expanded);
          setDisplayed(eExpanded, expanded);
        } else {
          removeAriaExpanded(eGridCell);
          setDisplayed(eExpanded, false);
          setDisplayed(eContracted, false);
        }
        var pivotModeAndLeafGroup = columnController.isPivotMode() && displayedGroup.leafGroup;
        var notExpandable = !displayedGroup.isExpandable();
        var addLeafIndentClass = displayedGroup.footer || notExpandable || pivotModeAndLeafGroup;
        this.addOrRemoveCssClass("ag-row-group", !addLeafIndentClass);
        this.addOrRemoveCssClass("ag-row-group-leaf-indent", addLeafIndentClass);
      };
      GroupCellRenderer2.prototype.destroy = function() {
        this.getContext().destroyBean(this.innerCellRenderer);
        _super.prototype.destroy.call(this);
      };
      GroupCellRenderer2.prototype.refresh = function() {
        return false;
      };
      GroupCellRenderer2.TEMPLATE = '<span class="ag-cell-wrapper">\n            <span class="ag-group-expanded" ref="eExpanded"></span>\n            <span class="ag-group-contracted" ref="eContracted"></span>\n            <span class="ag-group-checkbox ag-invisible" ref="eCheckbox"></span>\n            <span class="ag-group-value" ref="eValue"></span>\n            <span class="ag-group-child-count" ref="eChildCount"></span>\n        </span>';
      __decorate$j([
        Autowired("gridOptionsWrapper")
      ], GroupCellRenderer2.prototype, "gridOptionsWrapper", void 0);
      __decorate$j([
        Autowired("expressionService")
      ], GroupCellRenderer2.prototype, "expressionService", void 0);
      __decorate$j([
        Autowired("valueFormatterService")
      ], GroupCellRenderer2.prototype, "valueFormatterService", void 0);
      __decorate$j([
        Autowired("columnController")
      ], GroupCellRenderer2.prototype, "columnController", void 0);
      __decorate$j([
        Autowired("userComponentFactory")
      ], GroupCellRenderer2.prototype, "userComponentFactory", void 0);
      __decorate$j([
        RefSelector("eExpanded")
      ], GroupCellRenderer2.prototype, "eExpanded", void 0);
      __decorate$j([
        RefSelector("eContracted")
      ], GroupCellRenderer2.prototype, "eContracted", void 0);
      __decorate$j([
        RefSelector("eCheckbox")
      ], GroupCellRenderer2.prototype, "eCheckbox", void 0);
      __decorate$j([
        RefSelector("eValue")
      ], GroupCellRenderer2.prototype, "eValue", void 0);
      __decorate$j([
        RefSelector("eChildCount")
      ], GroupCellRenderer2.prototype, "eChildCount", void 0);
      return GroupCellRenderer2;
    }(Component);
    var __extends$h = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$k = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ARROW_UP = "\u2191";
    var ARROW_DOWN = "\u2193";
    var AnimateShowChangeCellRenderer = function(_super) {
      __extends$h(AnimateShowChangeCellRenderer2, _super);
      function AnimateShowChangeCellRenderer2() {
        var _this = _super.call(this, AnimateShowChangeCellRenderer2.TEMPLATE) || this;
        _this.refreshCount = 0;
        return _this;
      }
      AnimateShowChangeCellRenderer2.prototype.init = function(params) {
        this.eValue = this.queryForHtmlElement(".ag-value-change-value");
        this.eDelta = this.queryForHtmlElement(".ag-value-change-delta");
        this.refresh(params);
      };
      AnimateShowChangeCellRenderer2.prototype.showDelta = function(params, delta) {
        var absDelta = Math.abs(delta);
        var valueFormatted = params.formatValue(absDelta);
        var valueToUse = exists(valueFormatted) ? valueFormatted : absDelta;
        var deltaUp = delta >= 0;
        if (deltaUp) {
          this.eDelta.innerHTML = ARROW_UP + valueToUse;
        } else {
          this.eDelta.innerHTML = ARROW_DOWN + valueToUse;
        }
        addOrRemoveCssClass(this.eDelta, "ag-value-change-delta-up", deltaUp);
        addOrRemoveCssClass(this.eDelta, "ag-value-change-delta-down", !deltaUp);
      };
      AnimateShowChangeCellRenderer2.prototype.setTimerToRemoveDelta = function() {
        var _this = this;
        this.refreshCount++;
        var refreshCountCopy = this.refreshCount;
        window.setTimeout(function() {
          if (refreshCountCopy === _this.refreshCount) {
            _this.hideDeltaValue();
          }
        }, 2e3);
      };
      AnimateShowChangeCellRenderer2.prototype.hideDeltaValue = function() {
        removeCssClass(this.eValue, "ag-value-change-value-highlight");
        clearElement(this.eDelta);
      };
      AnimateShowChangeCellRenderer2.prototype.refresh = function(params) {
        var value = params.value;
        if (value === this.lastValue) {
          return;
        }
        if (exists(params.valueFormatted)) {
          this.eValue.innerHTML = params.valueFormatted;
        } else if (exists(params.value)) {
          this.eValue.innerHTML = value;
        } else {
          clearElement(this.eValue);
        }
        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {
          return;
        }
        if (typeof value === "number" && typeof this.lastValue === "number") {
          var delta = value - this.lastValue;
          this.showDelta(params, delta);
        }
        if (this.lastValue) {
          addCssClass(this.eValue, "ag-value-change-value-highlight");
        }
        this.setTimerToRemoveDelta();
        this.lastValue = value;
        return true;
      };
      AnimateShowChangeCellRenderer2.TEMPLATE = '<span><span class="ag-value-change-delta"></span><span class="ag-value-change-value"></span></span>';
      __decorate$k([
        Autowired("filterManager")
      ], AnimateShowChangeCellRenderer2.prototype, "filterManager", void 0);
      return AnimateShowChangeCellRenderer2;
    }(Component);
    var __extends$i = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$l = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AnimateSlideCellRenderer = function(_super) {
      __extends$i(AnimateSlideCellRenderer2, _super);
      function AnimateSlideCellRenderer2() {
        var _this = _super.call(this, AnimateSlideCellRenderer2.TEMPLATE) || this;
        _this.refreshCount = 0;
        _this.eCurrent = _this.queryForHtmlElement(".ag-value-slide-current");
        return _this;
      }
      AnimateSlideCellRenderer2.prototype.init = function(params) {
        this.params = params;
        this.refresh(params);
      };
      AnimateSlideCellRenderer2.prototype.addSlideAnimation = function() {
        var _this = this;
        this.refreshCount++;
        var refreshCountCopy = this.refreshCount;
        if (this.ePrevious) {
          this.getGui().removeChild(this.ePrevious);
        }
        this.ePrevious = loadTemplate('<span class="ag-value-slide-previous ag-value-slide-out"></span>');
        this.ePrevious.innerHTML = this.eCurrent.innerHTML;
        this.getGui().insertBefore(this.ePrevious, this.eCurrent);
        window.setTimeout(function() {
          if (refreshCountCopy !== _this.refreshCount) {
            return;
          }
          addCssClass(_this.ePrevious, "ag-value-slide-out-end");
        }, 50);
        window.setTimeout(function() {
          if (refreshCountCopy !== _this.refreshCount) {
            return;
          }
          _this.getGui().removeChild(_this.ePrevious);
          _this.ePrevious = null;
        }, 3e3);
      };
      AnimateSlideCellRenderer2.prototype.refresh = function(params) {
        var value = params.value;
        if (missing(value)) {
          value = "";
        }
        if (value === this.lastValue) {
          return;
        }
        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {
          return;
        }
        this.addSlideAnimation();
        this.lastValue = value;
        if (exists(params.valueFormatted)) {
          this.eCurrent.innerHTML = params.valueFormatted;
        } else if (exists(params.value)) {
          this.eCurrent.innerHTML = value;
        } else {
          clearElement(this.eCurrent);
        }
        return true;
      };
      AnimateSlideCellRenderer2.TEMPLATE = '<span><span class="ag-value-slide-current"></span></span>';
      __decorate$l([
        Autowired("filterManager")
      ], AnimateSlideCellRenderer2.prototype, "filterManager", void 0);
      return AnimateSlideCellRenderer2;
    }(Component);
    var __extends$j = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$m = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var LoadingCellRenderer = function(_super) {
      __extends$j(LoadingCellRenderer2, _super);
      function LoadingCellRenderer2() {
        return _super.call(this, LoadingCellRenderer2.TEMPLATE) || this;
      }
      LoadingCellRenderer2.prototype.init = function(params) {
        var eLoadingIcon = createIconNoSpan("groupLoading", this.gridOptionsWrapper, null);
        this.eLoadingIcon.appendChild(eLoadingIcon);
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        this.eLoadingText.innerText = localeTextFunc("loadingOoo", "Loading");
      };
      LoadingCellRenderer2.prototype.refresh = function(params) {
        return false;
      };
      LoadingCellRenderer2.TEMPLATE = '<div class="ag-loading">\n            <span class="ag-loading-icon" ref="eLoadingIcon"></span>\n            <span class="ag-loading-text" ref="eLoadingText"></span>\n        </div>';
      __decorate$m([
        Autowired("gridOptionsWrapper")
      ], LoadingCellRenderer2.prototype, "gridOptionsWrapper", void 0);
      __decorate$m([
        RefSelector("eLoadingIcon")
      ], LoadingCellRenderer2.prototype, "eLoadingIcon", void 0);
      __decorate$m([
        RefSelector("eLoadingText")
      ], LoadingCellRenderer2.prototype, "eLoadingText", void 0);
      return LoadingCellRenderer2;
    }(Component);
    var __extends$k = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$n = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SelectCellEditor = function(_super) {
      __extends$k(SelectCellEditor2, _super);
      function SelectCellEditor2() {
        var _this = _super.call(this, '<div class="ag-cell-edit-wrapper"><ag-select class="ag-cell-editor" ref="eSelect"></ag-select></div>') || this;
        _this.startedByEnter = false;
        return _this;
      }
      SelectCellEditor2.prototype.init = function(params) {
        var _this = this;
        this.focusAfterAttached = params.cellStartedEdit;
        if (missing(params.values)) {
          console.warn("ag-Grid: no values found for select cellEditor");
          return;
        }
        this.startedByEnter = params.keyPress === KeyCode.ENTER;
        var hasValue = false;
        params.values.forEach(function(value) {
          var option = { value };
          var valueFormatted = _this.valueFormatterService.formatValue(params.column, null, null, value);
          var valueFormattedExits = valueFormatted !== null && valueFormatted !== void 0;
          option.text = valueFormattedExits ? valueFormatted : value;
          _this.eSelect.addOption(option);
          hasValue = hasValue || params.value === value;
        });
        if (hasValue) {
          this.eSelect.setValue(params.value, true);
        } else if (params.values.length) {
          this.eSelect.setValue(params.values[0], true);
        }
        if (!this.gridOptionsWrapper.isFullRowEdit()) {
          this.eSelect.onValueChange(function() {
            return params.stopEditing();
          });
        }
      };
      SelectCellEditor2.prototype.afterGuiAttached = function() {
        if (this.focusAfterAttached) {
          this.eSelect.getFocusableElement().focus();
        }
        if (this.startedByEnter) {
          this.eSelect.showPicker();
        }
      };
      SelectCellEditor2.prototype.focusIn = function() {
        this.eSelect.getFocusableElement().focus();
      };
      SelectCellEditor2.prototype.getValue = function() {
        return this.eSelect.getValue();
      };
      SelectCellEditor2.prototype.isPopup = function() {
        return false;
      };
      __decorate$n([
        Autowired("gridOptionsWrapper")
      ], SelectCellEditor2.prototype, "gridOptionsWrapper", void 0);
      __decorate$n([
        Autowired("valueFormatterService")
      ], SelectCellEditor2.prototype, "valueFormatterService", void 0);
      __decorate$n([
        RefSelector("eSelect")
      ], SelectCellEditor2.prototype, "eSelect", void 0);
      return SelectCellEditor2;
    }(PopupComponent);
    var __extends$l = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var PopupTextCellEditor = function(_super) {
      __extends$l(PopupTextCellEditor2, _super);
      function PopupTextCellEditor2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PopupTextCellEditor2.prototype.isPopup = function() {
        return true;
      };
      return PopupTextCellEditor2;
    }(TextCellEditor);
    var __extends$m = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var PopupSelectCellEditor = function(_super) {
      __extends$m(PopupSelectCellEditor2, _super);
      function PopupSelectCellEditor2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PopupSelectCellEditor2.prototype.isPopup = function() {
        return true;
      };
      return PopupSelectCellEditor2;
    }(SelectCellEditor);
    var __extends$n = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$o = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var LargeTextCellEditor = function(_super) {
      __extends$n(LargeTextCellEditor2, _super);
      function LargeTextCellEditor2() {
        return _super.call(this, LargeTextCellEditor2.TEMPLATE) || this;
      }
      LargeTextCellEditor2.prototype.init = function(params) {
        this.params = params;
        this.focusAfterAttached = params.cellStartedEdit;
        this.eTextArea.setMaxLength(params.maxLength || 200).setCols(params.cols || 60).setRows(params.rows || 10);
        if (exists(params.value)) {
          this.eTextArea.setValue(params.value.toString(), true);
        }
        this.addGuiEventListener("keydown", this.onKeyDown.bind(this));
      };
      LargeTextCellEditor2.prototype.onKeyDown = function(event) {
        var key = event.which || event.keyCode;
        if (key === KeyCode.LEFT || key === KeyCode.UP || key === KeyCode.RIGHT || key === KeyCode.DOWN || event.shiftKey && key === KeyCode.ENTER) {
          event.stopPropagation();
        }
      };
      LargeTextCellEditor2.prototype.afterGuiAttached = function() {
        this.eTextArea.setInputAriaLabel("Input Editor");
        if (this.focusAfterAttached) {
          this.eTextArea.getFocusableElement().focus();
        }
      };
      LargeTextCellEditor2.prototype.getValue = function() {
        return this.params.parseValue(this.eTextArea.getValue());
      };
      LargeTextCellEditor2.TEMPLATE = '<div class="ag-large-text" tabindex="0">\n            <ag-input-text-area ref="eTextArea" class="ag-large-text-input"></ag-input-text-area>\n        </div>';
      __decorate$o([
        RefSelector("eTextArea")
      ], LargeTextCellEditor2.prototype, "eTextArea", void 0);
      return LargeTextCellEditor2;
    }(PopupComponent);
    var __extends$o = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$p = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var NumberFilter = function(_super) {
      __extends$o(NumberFilter2, _super);
      function NumberFilter2() {
        return _super.call(this, "numberFilter") || this;
      }
      NumberFilter2.prototype.mapRangeFromModel = function(filterModel) {
        return {
          from: filterModel.filter,
          to: filterModel.filterTo
        };
      };
      NumberFilter2.prototype.getDefaultDebounceMs = function() {
        return 500;
      };
      NumberFilter2.prototype.resetUiToDefaults = function(silent) {
        var _this = this;
        return _super.prototype.resetUiToDefaults.call(this, silent).then(function() {
          var fields = [_this.eValueFrom1, _this.eValueFrom2, _this.eValueTo1, _this.eValueTo2];
          fields.forEach(function(field) {
            return field.setValue(null, silent);
          });
          _this.resetPlaceholder();
        });
      };
      NumberFilter2.prototype.setConditionIntoUi = function(model, position) {
        var positionOne = position === ConditionPosition.One;
        var eValueFrom = positionOne ? this.eValueFrom1 : this.eValueFrom2;
        var eValueTo = positionOne ? this.eValueTo1 : this.eValueTo2;
        eValueFrom.setValue(model ? "" + model.filter : null);
        eValueTo.setValue(model ? "" + model.filterTo : null);
      };
      NumberFilter2.prototype.setValueFromFloatingFilter = function(value) {
        this.eValueFrom1.setValue(value);
        this.eValueTo1.setValue(null);
        this.eValueFrom2.setValue(null);
        this.eValueTo2.setValue(null);
      };
      NumberFilter2.prototype.comparator = function() {
        return function(left, right) {
          if (left === right) {
            return 0;
          }
          return left < right ? 1 : -1;
        };
      };
      NumberFilter2.prototype.setParams = function(params) {
        this.numberFilterParams = params;
        var allowedCharPattern = params.allowedCharPattern;
        if (allowedCharPattern) {
          var config = { allowedCharPattern };
          this.resetTemplate({
            eValueFrom1: config,
            eValueTo1: config,
            eValueFrom2: config,
            eValueTo2: config
          });
        }
        _super.prototype.setParams.call(this, params);
        this.addValueChangedListeners();
      };
      NumberFilter2.prototype.addValueChangedListeners = function() {
        var _this = this;
        var listener = function() {
          return _this.onUiChanged();
        };
        this.eValueFrom1.onValueChange(listener);
        this.eValueTo1.onValueChange(listener);
        this.eValueFrom2.onValueChange(listener);
        this.eValueTo2.onValueChange(listener);
      };
      NumberFilter2.prototype.resetPlaceholder = function() {
        var isRange1 = this.showValueTo(this.getCondition1Type());
        var isRange2 = this.showValueTo(this.getCondition2Type());
        this.eValueFrom1.setInputPlaceholder(this.translate(isRange1 ? "inRangeStart" : "filterOoo"));
        this.eValueFrom1.setInputAriaLabel(isRange1 ? "Filter from value" : "Filter value");
        this.eValueTo1.setInputPlaceholder(this.translate("inRangeEnd"));
        this.eValueTo1.setInputAriaLabel("Filter to value");
        this.eValueFrom2.setInputPlaceholder(this.translate(isRange2 ? "inRangeStart" : "filterOoo"));
        this.eValueFrom2.setInputAriaLabel(isRange2 ? "Filter from value" : "Filter value");
        this.eValueTo2.setInputPlaceholder(this.translate("inRangeEnd"));
        this.eValueTo2.setInputAriaLabel("Filter to value");
      };
      NumberFilter2.prototype.afterGuiAttached = function(params) {
        _super.prototype.afterGuiAttached.call(this, params);
        this.resetPlaceholder();
        if (!params || !params.suppressFocus) {
          this.eValueFrom1.getInputElement().focus();
        }
      };
      NumberFilter2.prototype.getDefaultFilterOptions = function() {
        return NumberFilter2.DEFAULT_FILTER_OPTIONS;
      };
      NumberFilter2.prototype.createValueTemplate = function(position) {
        var pos = position === ConditionPosition.One ? "1" : "2";
        var allowedCharPattern = (this.numberFilterParams || {}).allowedCharPattern;
        var agElementTag = allowedCharPattern ? "ag-input-text-field" : "ag-input-number-field";
        return '\n            <div class="ag-filter-body" ref="eCondition' + pos + 'Body" role="presentation">\n                <' + agElementTag + ' class="ag-filter-from ag-filter-filter" ref="eValueFrom' + pos + '"></' + agElementTag + ">\n                <" + agElementTag + ' class="ag-filter-to ag-filter-filter" ref="eValueTo' + pos + '"></' + agElementTag + ">\n            </div>";
      };
      NumberFilter2.prototype.isConditionUiComplete = function(position) {
        var positionOne = position === ConditionPosition.One;
        var option = positionOne ? this.getCondition1Type() : this.getCondition2Type();
        if (option === SimpleFilter.EMPTY) {
          return false;
        }
        if (this.doesFilterHaveHiddenInput(option)) {
          return true;
        }
        var eValue = positionOne ? this.eValueFrom1 : this.eValueFrom2;
        var eValueTo = positionOne ? this.eValueTo1 : this.eValueTo2;
        var value = this.stringToFloat(eValue.getValue());
        return value != null && (!this.showValueTo(option) || this.stringToFloat(eValueTo.getValue()) != null);
      };
      NumberFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
        return aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type;
      };
      NumberFilter2.prototype.getFilterType = function() {
        return "number";
      };
      NumberFilter2.prototype.stringToFloat = function(value) {
        if (typeof value === "number") {
          return value;
        }
        var filterText = makeNull(value);
        if (filterText != null && filterText.trim() === "") {
          filterText = null;
        }
        if (this.numberFilterParams.numberParser) {
          return this.numberFilterParams.numberParser(filterText);
        }
        return filterText == null || filterText.trim() === "-" ? null : parseFloat(filterText);
      };
      NumberFilter2.prototype.createCondition = function(position) {
        var positionOne = position === ConditionPosition.One;
        var type = positionOne ? this.getCondition1Type() : this.getCondition2Type();
        var eValue = positionOne ? this.eValueFrom1 : this.eValueFrom2;
        var value = this.stringToFloat(eValue.getValue());
        var model = {
          filterType: this.getFilterType(),
          type
        };
        if (!this.doesFilterHaveHiddenInput(type)) {
          model.filter = value;
          if (this.showValueTo(type)) {
            var eValueTo = positionOne ? this.eValueTo1 : this.eValueTo2;
            var valueTo = this.stringToFloat(eValueTo.getValue());
            model.filterTo = valueTo;
          }
        }
        return model;
      };
      NumberFilter2.prototype.updateUiVisibility = function() {
        _super.prototype.updateUiVisibility.call(this);
        this.resetPlaceholder();
        var condition1Type = this.getCondition1Type();
        var condition2Type = this.getCondition2Type();
        setDisplayed(this.eValueFrom1.getGui(), this.showValueFrom(condition1Type));
        setDisplayed(this.eValueTo1.getGui(), this.showValueTo(condition1Type));
        setDisplayed(this.eValueFrom2.getGui(), this.showValueFrom(condition2Type));
        setDisplayed(this.eValueTo2.getGui(), this.showValueTo(condition2Type));
      };
      NumberFilter2.DEFAULT_FILTER_OPTIONS = [
        ScalarFilter.EQUALS,
        ScalarFilter.NOT_EQUAL,
        ScalarFilter.LESS_THAN,
        ScalarFilter.LESS_THAN_OR_EQUAL,
        ScalarFilter.GREATER_THAN,
        ScalarFilter.GREATER_THAN_OR_EQUAL,
        ScalarFilter.IN_RANGE
      ];
      __decorate$p([
        RefSelector("eValueFrom1")
      ], NumberFilter2.prototype, "eValueFrom1", void 0);
      __decorate$p([
        RefSelector("eValueTo1")
      ], NumberFilter2.prototype, "eValueTo1", void 0);
      __decorate$p([
        RefSelector("eValueFrom2")
      ], NumberFilter2.prototype, "eValueFrom2", void 0);
      __decorate$p([
        RefSelector("eValueTo2")
      ], NumberFilter2.prototype, "eValueTo2", void 0);
      return NumberFilter2;
    }(ScalarFilter);
    var __extends$p = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var LoadingOverlayComponent$1 = function(_super) {
      __extends$p(LoadingOverlayComponent2, _super);
      function LoadingOverlayComponent2() {
        return _super.call(this) || this;
      }
      LoadingOverlayComponent2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      LoadingOverlayComponent2.prototype.init = function(params) {
        var template = this.gridOptionsWrapper.getOverlayLoadingTemplate() ? this.gridOptionsWrapper.getOverlayLoadingTemplate() : LoadingOverlayComponent2.DEFAULT_LOADING_OVERLAY_TEMPLATE;
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        var localisedTemplate = template.replace("[LOADING...]", localeTextFunc("loadingOoo", "Loading..."));
        this.setTemplate(localisedTemplate);
      };
      LoadingOverlayComponent2.DEFAULT_LOADING_OVERLAY_TEMPLATE = '<span class="ag-overlay-loading-center">[LOADING...]</span>';
      __decorate$q([
        Autowired("gridOptionsWrapper")
      ], LoadingOverlayComponent2.prototype, "gridOptionsWrapper", void 0);
      return LoadingOverlayComponent2;
    }(Component);
    var __extends$q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$r = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var NoRowsOverlayComponent$1 = function(_super) {
      __extends$q(NoRowsOverlayComponent2, _super);
      function NoRowsOverlayComponent2() {
        return _super.call(this) || this;
      }
      NoRowsOverlayComponent2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      NoRowsOverlayComponent2.prototype.init = function(params) {
        var template = this.gridOptionsWrapper.getOverlayNoRowsTemplate() ? this.gridOptionsWrapper.getOverlayNoRowsTemplate() : NoRowsOverlayComponent2.DEFAULT_NO_ROWS_TEMPLATE;
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        var localisedTemplate = template.replace("[NO_ROWS_TO_SHOW]", localeTextFunc("noRowsToShow", "No Rows To Show"));
        this.setTemplate(localisedTemplate);
      };
      NoRowsOverlayComponent2.DEFAULT_NO_ROWS_TEMPLATE = '<span class="ag-overlay-no-rows-center">[NO_ROWS_TO_SHOW]</span>';
      __decorate$r([
        Autowired("gridOptionsWrapper")
      ], NoRowsOverlayComponent2.prototype, "gridOptionsWrapper", void 0);
      return NoRowsOverlayComponent2;
    }(Component);
    var __extends$r = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var TooltipComponent$1 = function(_super) {
      __extends$r(TooltipComponent2, _super);
      function TooltipComponent2() {
        return _super.call(this, '<div class="ag-tooltip"></div>') || this;
      }
      TooltipComponent2.prototype.init = function(params) {
        var value = params.value;
        this.getGui().innerHTML = value;
      };
      return TooltipComponent2;
    }(PopupComponent);
    var __extends$s = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$s = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DefaultDateComponent = function(_super) {
      __extends$s(DefaultDateComponent2, _super);
      function DefaultDateComponent2() {
        return _super.call(this, '\n            <div class="ag-filter-filter">\n                <ag-input-text-field class="ag-date-filter" ref="eDateInput"></ag-input-text-field>\n            </div>') || this;
      }
      DefaultDateComponent2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      DefaultDateComponent2.prototype.init = function(params) {
        var _this = this;
        if (this.shouldUseBrowserDatePicker(params)) {
          if (isBrowserIE()) {
            console.warn("ag-grid: browserDatePicker is specified to true, but it is not supported in IE 11, reverting to plain text date picker");
          } else {
            this.eDateInput.getInputElement().type = "date";
          }
        }
        this.listener = params.onDateChanged;
        this.addManagedListener(this.eDateInput.getInputElement(), "input", function(e) {
          if (e.target !== document.activeElement) {
            return;
          }
          _this.listener();
        });
      };
      DefaultDateComponent2.prototype.getDate = function() {
        return parseDateTimeFromString(this.eDateInput.getValue());
      };
      DefaultDateComponent2.prototype.setDate = function(date) {
        this.eDateInput.setValue(serialiseDate(date, false));
      };
      DefaultDateComponent2.prototype.setInputPlaceholder = function(placeholder) {
        this.eDateInput.setInputPlaceholder(placeholder);
      };
      DefaultDateComponent2.prototype.shouldUseBrowserDatePicker = function(params) {
        if (params.filterParams && params.filterParams.browserDatePicker != null) {
          return params.filterParams.browserDatePicker;
        } else {
          return isBrowserChrome() || isBrowserFirefox();
        }
      };
      __decorate$s([
        RefSelector("eDateInput")
      ], DefaultDateComponent2.prototype, "eDateInput", void 0);
      return DefaultDateComponent2;
    }(Component);
    var __extends$t = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var SimpleFloatingFilter = function(_super) {
      __extends$t(SimpleFloatingFilter2, _super);
      function SimpleFloatingFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SimpleFloatingFilter2.prototype.getDefaultDebounceMs = function() {
        return 0;
      };
      SimpleFloatingFilter2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      SimpleFloatingFilter2.prototype.getTextFromModel = function(model) {
        if (!model) {
          return null;
        }
        var isCombined = model.operator;
        if (isCombined) {
          var combinedModel = model;
          var con1Str = this.conditionToString(combinedModel.condition1);
          var con2Str = this.conditionToString(combinedModel.condition2);
          return con1Str + " " + combinedModel.operator + " " + con2Str;
        } else {
          var condition = model;
          return this.conditionToString(condition);
        }
      };
      SimpleFloatingFilter2.prototype.isEventFromFloatingFilter = function(event) {
        return event && event.afterFloatingFilter;
      };
      SimpleFloatingFilter2.prototype.getLastType = function() {
        return this.lastType;
      };
      SimpleFloatingFilter2.prototype.setLastTypeFromModel = function(model) {
        if (!model) {
          this.lastType = this.optionsFactory.getDefaultOption();
          return;
        }
        var isCombined = model.operator;
        var condition;
        if (isCombined) {
          var combinedModel = model;
          condition = combinedModel.condition1;
        } else {
          condition = model;
        }
        this.lastType = condition.type;
      };
      SimpleFloatingFilter2.prototype.canWeEditAfterModelFromParentFilter = function(model) {
        if (!model) {
          return this.isTypeEditable(this.lastType);
        }
        var isCombined = model.operator;
        if (isCombined) {
          return false;
        }
        var simpleModel = model;
        return this.isTypeEditable(simpleModel.type);
      };
      SimpleFloatingFilter2.prototype.init = function(params) {
        this.optionsFactory = new OptionsFactory();
        this.optionsFactory.init(params.filterParams, this.getDefaultFilterOptions());
        this.lastType = this.optionsFactory.getDefaultOption();
        var editable = this.isTypeEditable(this.lastType);
        this.setEditable(editable);
      };
      SimpleFloatingFilter2.prototype.doesFilterHaveHiddenInput = function(filterType) {
        var customFilterOption = this.optionsFactory.getCustomOption(filterType);
        return customFilterOption && customFilterOption.hideFilterInput;
      };
      SimpleFloatingFilter2.prototype.isTypeEditable = function(type) {
        return !this.doesFilterHaveHiddenInput(type) && type && type !== SimpleFilter.IN_RANGE && type !== SimpleFilter.EMPTY;
      };
      return SimpleFloatingFilter2;
    }(Component);
    var __extends$u = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$t = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DateFloatingFilter = function(_super) {
      __extends$u(DateFloatingFilter2, _super);
      function DateFloatingFilter2() {
        return _super.call(this, '\n            <div class="ag-floating-filter-input" role="presentation">\n                <ag-input-text-field ref="eReadOnlyText"></ag-input-text-field>\n                <div ref="eDateWrapper" style="display: flex;"></div>\n            </div>') || this;
      }
      DateFloatingFilter2.prototype.getDefaultFilterOptions = function() {
        return DateFilter.DEFAULT_FILTER_OPTIONS;
      };
      DateFloatingFilter2.prototype.conditionToString = function(condition) {
        if (condition.type === SimpleFilter.IN_RANGE) {
          return condition.dateFrom + "-" + condition.dateTo;
        }
        return condition.dateFrom == null ? "" + condition.type : "" + condition.dateFrom;
      };
      DateFloatingFilter2.prototype.init = function(params) {
        _super.prototype.init.call(this, params);
        this.params = params;
        this.createDateComponent();
        this.eReadOnlyText.setDisabled(true).setInputAriaLabel("Date Filter Input");
      };
      DateFloatingFilter2.prototype.setEditable = function(editable) {
        setDisplayed(this.eDateWrapper, editable);
        setDisplayed(this.eReadOnlyText.getGui(), !editable);
      };
      DateFloatingFilter2.prototype.onParentModelChanged = function(model, event) {
        if (this.isEventFromFloatingFilter(event)) {
          return;
        }
        _super.prototype.setLastTypeFromModel.call(this, model);
        var allowEditing = this.canWeEditAfterModelFromParentFilter(model);
        this.setEditable(allowEditing);
        if (allowEditing) {
          if (model) {
            var dateModel = model;
            this.dateComp.setDate(parseDateTimeFromString(dateModel.dateFrom));
          } else {
            this.dateComp.setDate(null);
          }
          this.eReadOnlyText.setValue("");
        } else {
          this.eReadOnlyText.setValue(this.getTextFromModel(model));
          this.dateComp.setDate(null);
        }
      };
      DateFloatingFilter2.prototype.onDateChanged = function() {
        var _this = this;
        var filterValueDate = this.dateComp.getDate();
        var filterValueText = serialiseDate(filterValueDate);
        this.params.parentFilterInstance(function(filterInstance) {
          if (filterInstance) {
            var simpleFilter = filterInstance;
            simpleFilter.onFloatingFilterChanged(_this.getLastType(), filterValueText);
          }
        });
      };
      DateFloatingFilter2.prototype.createDateComponent = function() {
        var _this = this;
        var debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
        var dateComponentParams = {
          onDateChanged: debounce(this.onDateChanged.bind(this), debounceMs),
          filterParams: this.params.column.getColDef().filterParams
        };
        this.dateComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eDateWrapper);
        this.addDestroyFunc(function() {
          return _this.dateComp.destroy();
        });
      };
      __decorate$t([
        Autowired("userComponentFactory")
      ], DateFloatingFilter2.prototype, "userComponentFactory", void 0);
      __decorate$t([
        RefSelector("eReadOnlyText")
      ], DateFloatingFilter2.prototype, "eReadOnlyText", void 0);
      __decorate$t([
        RefSelector("eDateWrapper")
      ], DateFloatingFilter2.prototype, "eDateWrapper", void 0);
      return DateFloatingFilter2;
    }(SimpleFloatingFilter);
    var __extends$v = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$u = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TextFilter = function(_super) {
      __extends$v(TextFilter2, _super);
      function TextFilter2() {
        return _super.call(this, "textFilter") || this;
      }
      TextFilter2.cleanInput = function(value) {
        var trimmedInput = value && value.trim();
        return trimmedInput === "" ? value : trimmedInput;
      };
      TextFilter2.prototype.getDefaultDebounceMs = function() {
        return 500;
      };
      TextFilter2.prototype.getCleanValue = function(inputField) {
        return TextFilter2.cleanInput(makeNull(inputField.getValue()));
      };
      TextFilter2.prototype.addValueChangedListeners = function() {
        var _this = this;
        var listener = function() {
          return _this.onUiChanged();
        };
        this.eValue1.onValueChange(listener);
        this.eValue2.onValueChange(listener);
      };
      TextFilter2.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.textFilterParams = params;
        this.comparator = this.textFilterParams.textCustomComparator || TextFilter2.DEFAULT_COMPARATOR;
        this.formatter = this.textFilterParams.textFormatter || (this.textFilterParams.caseSensitive == true ? TextFilter2.DEFAULT_FORMATTER : TextFilter2.DEFAULT_LOWERCASE_FORMATTER);
        this.addValueChangedListeners();
      };
      TextFilter2.prototype.setConditionIntoUi = function(model, position) {
        var positionOne = position === ConditionPosition.One;
        var eValue = positionOne ? this.eValue1 : this.eValue2;
        eValue.setValue(model ? model.filter : null);
      };
      TextFilter2.prototype.createCondition = function(position) {
        var positionOne = position === ConditionPosition.One;
        var type = positionOne ? this.getCondition1Type() : this.getCondition2Type();
        var eValue = positionOne ? this.eValue1 : this.eValue2;
        var value = this.getCleanValue(eValue);
        eValue.setValue(value, true);
        var model = {
          filterType: this.getFilterType(),
          type
        };
        if (!this.doesFilterHaveHiddenInput(type)) {
          model.filter = value;
        }
        return model;
      };
      TextFilter2.prototype.getFilterType = function() {
        return "text";
      };
      TextFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
        return aSimple.filter === bSimple.filter && aSimple.type === bSimple.type;
      };
      TextFilter2.prototype.resetUiToDefaults = function(silent) {
        var _this = this;
        return _super.prototype.resetUiToDefaults.call(this, silent).then(function() {
          _this.forEachInput(function(field) {
            return field.setValue(null, silent);
          });
          _this.resetPlaceholder();
        });
      };
      TextFilter2.prototype.resetPlaceholder = function() {
        var placeholder = this.translate("filterOoo");
        this.forEachInput(function(field) {
          field.setInputPlaceholder(placeholder);
          field.setInputAriaLabel("Filter value");
        });
      };
      TextFilter2.prototype.forEachInput = function(action) {
        forEach([this.eValue1, this.eValue2], action);
      };
      TextFilter2.prototype.setValueFromFloatingFilter = function(value) {
        this.eValue1.setValue(value);
        this.eValue2.setValue(null);
      };
      TextFilter2.prototype.getDefaultFilterOptions = function() {
        return TextFilter2.DEFAULT_FILTER_OPTIONS;
      };
      TextFilter2.prototype.createValueTemplate = function(position) {
        var pos = position === ConditionPosition.One ? "1" : "2";
        return '\n            <div class="ag-filter-body" ref="eCondition' + pos + 'Body" role="presentation">\n                <ag-input-text-field class="ag-filter-filter" ref="eValue' + pos + '"></ag-input-text-field>\n            </div>';
      };
      TextFilter2.prototype.updateUiVisibility = function() {
        _super.prototype.updateUiVisibility.call(this);
        setDisplayed(this.eCondition1Body, this.showValueFrom(this.getCondition1Type()));
        setDisplayed(this.eCondition2Body, this.isCondition2Enabled() && this.showValueFrom(this.getCondition2Type()));
      };
      TextFilter2.prototype.afterGuiAttached = function(params) {
        _super.prototype.afterGuiAttached.call(this, params);
        this.resetPlaceholder();
        if (!params || !params.suppressFocus) {
          this.eValue1.getInputElement().focus();
        }
      };
      TextFilter2.prototype.isConditionUiComplete = function(position) {
        var positionOne = position === ConditionPosition.One;
        var option = positionOne ? this.getCondition1Type() : this.getCondition2Type();
        if (option === SimpleFilter.EMPTY) {
          return false;
        }
        if (this.doesFilterHaveHiddenInput(option)) {
          return true;
        }
        return this.getCleanValue(positionOne ? this.eValue1 : this.eValue2) != null;
      };
      TextFilter2.prototype.individualConditionPasses = function(params, filterModel) {
        var filterText = filterModel.filter;
        var filterOption = filterModel.type;
        var cellValue = this.textFilterParams.valueGetter(params.node);
        var cellValueFormatted = this.formatter(cellValue);
        var customFilterOption = this.optionsFactory.getCustomOption(filterOption);
        if (customFilterOption) {
          if (filterText != null || customFilterOption.hideFilterInput) {
            return customFilterOption.test(filterText, cellValueFormatted);
          }
        }
        if (cellValue == null) {
          return filterOption === SimpleFilter.NOT_EQUAL || filterOption === SimpleFilter.NOT_CONTAINS;
        }
        var filterTextFormatted = this.formatter(filterText);
        return this.comparator(filterOption, cellValueFormatted, filterTextFormatted);
      };
      TextFilter2.DEFAULT_FILTER_OPTIONS = [
        SimpleFilter.CONTAINS,
        SimpleFilter.NOT_CONTAINS,
        SimpleFilter.EQUALS,
        SimpleFilter.NOT_EQUAL,
        SimpleFilter.STARTS_WITH,
        SimpleFilter.ENDS_WITH
      ];
      TextFilter2.DEFAULT_FORMATTER = function(from) {
        return from;
      };
      TextFilter2.DEFAULT_LOWERCASE_FORMATTER = function(from) {
        return from == null ? null : from.toString().toLowerCase();
      };
      TextFilter2.DEFAULT_COMPARATOR = function(filter2, value, filterText) {
        switch (filter2) {
          case TextFilter2.CONTAINS:
            return value.indexOf(filterText) >= 0;
          case TextFilter2.NOT_CONTAINS:
            return value.indexOf(filterText) < 0;
          case TextFilter2.EQUALS:
            return value === filterText;
          case TextFilter2.NOT_EQUAL:
            return value != filterText;
          case TextFilter2.STARTS_WITH:
            return value.indexOf(filterText) === 0;
          case TextFilter2.ENDS_WITH:
            var index = value.lastIndexOf(filterText);
            return index >= 0 && index === value.length - filterText.length;
          default:
            console.warn("invalid filter type " + filter2);
            return false;
        }
      };
      __decorate$u([
        RefSelector("eValue1")
      ], TextFilter2.prototype, "eValue1", void 0);
      __decorate$u([
        RefSelector("eValue2")
      ], TextFilter2.prototype, "eValue2", void 0);
      return TextFilter2;
    }(SimpleFilter);
    var __extends$w = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$v = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TextInputFloatingFilter = function(_super) {
      __extends$w(TextInputFloatingFilter2, _super);
      function TextInputFloatingFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      TextInputFloatingFilter2.prototype.postConstruct = function() {
        this.setTemplate('\n            <div class="ag-floating-filter-input" role="presentation">\n                <ag-input-text-field ref="eFloatingFilterInput"></ag-input-text-field>\n            </div>');
      };
      TextInputFloatingFilter2.prototype.getDefaultDebounceMs = function() {
        return 500;
      };
      TextInputFloatingFilter2.prototype.onParentModelChanged = function(model, event) {
        if (this.isEventFromFloatingFilter(event)) {
          return;
        }
        this.setLastTypeFromModel(model);
        this.eFloatingFilterInput.setValue(this.getTextFromModel(model));
        this.setEditable(this.canWeEditAfterModelFromParentFilter(model));
      };
      TextInputFloatingFilter2.prototype.init = function(params) {
        _super.prototype.init.call(this, params);
        this.params = params;
        this.applyActive = ProvidedFilter.isUseApplyButton(this.params.filterParams);
        var debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
        var toDebounce = debounce(this.syncUpWithParentFilter.bind(this), debounceMs);
        var filterGui = this.eFloatingFilterInput.getGui();
        this.addManagedListener(filterGui, "input", toDebounce);
        this.addManagedListener(filterGui, "keypress", toDebounce);
        this.addManagedListener(filterGui, "keydown", toDebounce);
        var columnDef = params.column.getDefinition();
        if (columnDef.filterParams && columnDef.filterParams.filterOptions && columnDef.filterParams.filterOptions.length === 1 && columnDef.filterParams.filterOptions[0] === "inRange") {
          this.eFloatingFilterInput.setDisabled(true);
        }
        var displayName = this.columnController.getDisplayNameForColumn(params.column, "header", true);
        this.eFloatingFilterInput.setInputAriaLabel(displayName + " Filter Input");
      };
      TextInputFloatingFilter2.prototype.syncUpWithParentFilter = function(e) {
        var _this = this;
        var enterKeyPressed = isKeyPressed(e, KeyCode.ENTER);
        if (this.applyActive && !enterKeyPressed) {
          return;
        }
        var value = TextFilter.cleanInput(this.eFloatingFilterInput.getValue());
        this.eFloatingFilterInput.setValue(value, true);
        this.params.parentFilterInstance(function(filterInstance) {
          if (filterInstance) {
            var simpleFilter = filterInstance;
            simpleFilter.onFloatingFilterChanged(_this.getLastType(), value);
          }
        });
      };
      TextInputFloatingFilter2.prototype.setEditable = function(editable) {
        this.eFloatingFilterInput.setDisabled(!editable);
      };
      __decorate$v([
        Autowired("columnController")
      ], TextInputFloatingFilter2.prototype, "columnController", void 0);
      __decorate$v([
        RefSelector("eFloatingFilterInput")
      ], TextInputFloatingFilter2.prototype, "eFloatingFilterInput", void 0);
      __decorate$v([
        PostConstruct
      ], TextInputFloatingFilter2.prototype, "postConstruct", null);
      return TextInputFloatingFilter2;
    }(SimpleFloatingFilter);
    var __extends$x = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var NumberFloatingFilter = function(_super) {
      __extends$x(NumberFloatingFilter2, _super);
      function NumberFloatingFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      NumberFloatingFilter2.prototype.getDefaultFilterOptions = function() {
        return NumberFilter.DEFAULT_FILTER_OPTIONS;
      };
      NumberFloatingFilter2.prototype.conditionToString = function(condition) {
        var isRange = condition.type == SimpleFilter.IN_RANGE;
        if (isRange) {
          return condition.filter + "-" + condition.filterTo;
        }
        if (condition.filter != null) {
          return "" + condition.filter;
        }
        return "" + condition.type;
      };
      return NumberFloatingFilter2;
    }(TextInputFloatingFilter);
    var __extends$y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var TextFloatingFilter = function(_super) {
      __extends$y(TextFloatingFilter2, _super);
      function TextFloatingFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      TextFloatingFilter2.prototype.conditionToString = function(condition) {
        if (condition.filter != null) {
          return "" + condition.filter;
        } else {
          return "" + condition.type;
        }
      };
      TextFloatingFilter2.prototype.getDefaultFilterOptions = function() {
        return TextFilter.DEFAULT_FILTER_OPTIONS;
      };
      return TextFloatingFilter2;
    }(TextInputFloatingFilter);
    var __extends$z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$w = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RegisteredComponentSource;
    (function(RegisteredComponentSource2) {
      RegisteredComponentSource2[RegisteredComponentSource2["DEFAULT"] = 0] = "DEFAULT";
      RegisteredComponentSource2[RegisteredComponentSource2["REGISTERED"] = 1] = "REGISTERED";
    })(RegisteredComponentSource || (RegisteredComponentSource = {}));
    var UserComponentRegistry = function(_super) {
      __extends$z(UserComponentRegistry2, _super);
      function UserComponentRegistry2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.agGridDefaults = {
          agDateInput: DefaultDateComponent,
          agColumnHeader: HeaderComp,
          agColumnGroupHeader: HeaderGroupComp,
          agTextColumnFloatingFilter: TextFloatingFilter,
          agNumberColumnFloatingFilter: NumberFloatingFilter,
          agDateColumnFloatingFilter: DateFloatingFilter,
          agAnimateShowChangeCellRenderer: AnimateShowChangeCellRenderer,
          agAnimateSlideCellRenderer: AnimateSlideCellRenderer,
          agGroupCellRenderer: GroupCellRenderer,
          agGroupRowRenderer: GroupCellRenderer,
          agLoadingCellRenderer: LoadingCellRenderer,
          agCellEditor: TextCellEditor,
          agTextCellEditor: TextCellEditor,
          agSelectCellEditor: SelectCellEditor,
          agPopupTextCellEditor: PopupTextCellEditor,
          agPopupSelectCellEditor: PopupSelectCellEditor,
          agLargeTextCellEditor: LargeTextCellEditor,
          agTextColumnFilter: TextFilter,
          agNumberColumnFilter: NumberFilter,
          agDateColumnFilter: DateFilter,
          agLoadingOverlay: LoadingOverlayComponent$1,
          agNoRowsOverlay: NoRowsOverlayComponent$1,
          agTooltipComponent: TooltipComponent$1
        };
        _this.agDeprecatedNames = {
          set: {
            newComponentName: "agSetColumnFilter",
            propertyHolder: "filter"
          },
          text: {
            newComponentName: "agTextColumnFilter",
            propertyHolder: "filter"
          },
          number: {
            newComponentName: "agNumberColumnFilter",
            propertyHolder: "filter"
          },
          date: {
            newComponentName: "agDateColumnFilter",
            propertyHolder: "filter"
          },
          group: {
            newComponentName: "agGroupCellRenderer",
            propertyHolder: "cellRenderer"
          },
          animateShowChange: {
            newComponentName: "agAnimateShowChangeCellRenderer",
            propertyHolder: "cellRenderer"
          },
          animateSlide: {
            newComponentName: "agAnimateSlideCellRenderer",
            propertyHolder: "cellRenderer"
          },
          select: {
            newComponentName: "agSelectCellEditor",
            propertyHolder: "cellEditor"
          },
          largeText: {
            newComponentName: "agLargeTextCellEditor",
            propertyHolder: "cellEditor"
          },
          popupSelect: {
            newComponentName: "agPopupSelectCellEditor",
            propertyHolder: "cellEditor"
          },
          popupText: {
            newComponentName: "agPopupTextCellEditor",
            propertyHolder: "cellEditor"
          },
          richSelect: {
            newComponentName: "agRichSelectCellEditor",
            propertyHolder: "cellEditor"
          },
          headerComponent: {
            newComponentName: "agColumnHeader",
            propertyHolder: "headerComponent"
          }
        };
        _this.jsComponents = {};
        _this.frameworkComponents = {};
        return _this;
      }
      UserComponentRegistry2.prototype.init = function() {
        var _this = this;
        if (this.gridOptions.components != null) {
          iterateObject(this.gridOptions.components, function(key, component) {
            return _this.registerComponent(key, component);
          });
        }
        if (this.gridOptions.frameworkComponents != null) {
          iterateObject(this.gridOptions.frameworkComponents, function(key, component) {
            return _this.registerFwComponent(key, component);
          });
        }
      };
      UserComponentRegistry2.prototype.registerDefaultComponent = function(rawName, component) {
        var name = this.translateIfDeprecated(rawName);
        if (this.agGridDefaults[name]) {
          console.error("Trying to overwrite a default component. You should call registerComponent");
          return;
        }
        this.agGridDefaults[name] = component;
      };
      UserComponentRegistry2.prototype.registerComponent = function(rawName, component) {
        var name = this.translateIfDeprecated(rawName);
        if (this.frameworkComponents[name]) {
          console.error("Trying to register a component that you have already registered for frameworks: " + name);
          return;
        }
        this.jsComponents[name] = component;
      };
      UserComponentRegistry2.prototype.registerFwComponent = function(rawName, component) {
        var name = this.translateIfDeprecated(rawName);
        if (this.jsComponents[name]) {
          console.error("Trying to register a component that you have already registered for plain javascript: " + name);
          return;
        }
        this.frameworkComponents[name] = component;
      };
      UserComponentRegistry2.prototype.retrieve = function(rawName) {
        var name = this.translateIfDeprecated(rawName);
        var frameworkComponent = this.frameworkComponents[name];
        if (frameworkComponent) {
          return {
            componentFromFramework: true,
            component: frameworkComponent,
            source: RegisteredComponentSource.REGISTERED
          };
        }
        var jsComponent = this.jsComponents[name];
        if (jsComponent) {
          return {
            componentFromFramework: false,
            component: jsComponent,
            source: RegisteredComponentSource.REGISTERED
          };
        }
        var defaultComponent = this.agGridDefaults[name];
        if (defaultComponent) {
          return {
            componentFromFramework: false,
            component: defaultComponent,
            source: RegisteredComponentSource.DEFAULT
          };
        }
        if (Object.keys(this.agGridDefaults).indexOf(name) < 0) {
          console.warn("ag-Grid: Looking for component [" + name + "] but it wasn't found.");
        }
        return null;
      };
      UserComponentRegistry2.prototype.translateIfDeprecated = function(raw) {
        var deprecatedInfo = this.agDeprecatedNames[raw];
        if (deprecatedInfo != null) {
          doOnce(function() {
            console.warn("ag-grid. Since v15.0 component names have been renamed to be namespaced. You should rename " + deprecatedInfo.propertyHolder + ":" + raw + " to " + deprecatedInfo.propertyHolder + ":" + deprecatedInfo.newComponentName);
          }, "DEPRECATE_COMPONENT_" + raw);
          return deprecatedInfo.newComponentName;
        }
        return raw;
      };
      __decorate$w([
        Autowired("gridOptions")
      ], UserComponentRegistry2.prototype, "gridOptions", void 0);
      __decorate$w([
        PostConstruct
      ], UserComponentRegistry2.prototype, "init", null);
      UserComponentRegistry2 = __decorate$w([
        Bean("userComponentRegistry")
      ], UserComponentRegistry2);
      return UserComponentRegistry2;
    }(BeanStub);
    var SideBarDefParser = function() {
      function SideBarDefParser2() {
      }
      SideBarDefParser2.parse = function(toParse) {
        if (!toParse) {
          return null;
        }
        if (toParse === true) {
          return {
            toolPanels: [
              SideBarDefParser2.DEFAULT_COLUMN_COMP,
              SideBarDefParser2.DEFAULT_FILTER_COMP
            ],
            defaultToolPanel: "columns"
          };
        }
        if (typeof toParse === "string") {
          return SideBarDefParser2.parse([toParse]);
        }
        if (Array.isArray(toParse)) {
          var comps_1 = [];
          toParse.forEach(function(key) {
            var lookupResult = SideBarDefParser2.DEFAULT_BY_KEY[key];
            if (!lookupResult) {
              console.warn("ag-grid: the key " + key + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(SideBarDefParser2.DEFAULT_BY_KEY).join(","));
              return;
            }
            comps_1.push(lookupResult);
          });
          if (comps_1.length === 0) {
            return null;
          }
          return {
            toolPanels: comps_1,
            defaultToolPanel: comps_1[0].id
          };
        }
        var result = {
          toolPanels: SideBarDefParser2.parseComponents(toParse.toolPanels),
          defaultToolPanel: toParse.defaultToolPanel,
          hiddenByDefault: toParse.hiddenByDefault,
          position: toParse.position
        };
        return result;
      };
      SideBarDefParser2.parseComponents = function(from) {
        var result = [];
        from.forEach(function(it) {
          var toAdd = null;
          if (typeof it === "string") {
            var lookupResult = SideBarDefParser2.DEFAULT_BY_KEY[it];
            if (!lookupResult) {
              console.warn("ag-grid: the key " + it + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(SideBarDefParser2.DEFAULT_BY_KEY).join(","));
              return;
            }
            toAdd = lookupResult;
          } else {
            toAdd = it;
          }
          result.push(toAdd);
        });
        return result;
      };
      SideBarDefParser2.DEFAULT_COLUMN_COMP = {
        id: "columns",
        labelDefault: "Columns",
        labelKey: "columns",
        iconKey: "columns",
        toolPanel: "agColumnsToolPanel"
      };
      SideBarDefParser2.DEFAULT_FILTER_COMP = {
        id: "filters",
        labelDefault: "Filters",
        labelKey: "filters",
        iconKey: "filter",
        toolPanel: "agFiltersToolPanel"
      };
      SideBarDefParser2.DEFAULT_BY_KEY = {
        columns: SideBarDefParser2.DEFAULT_COLUMN_COMP,
        filters: SideBarDefParser2.DEFAULT_FILTER_COMP
      };
      return SideBarDefParser2;
    }();
    var __decorate$x = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$3 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var __spreadArrays$3 = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var DEFAULT_ROW_HEIGHT = 25;
    var DEFAULT_DETAIL_ROW_HEIGHT = 300;
    var DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE = 5;
    var DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE = 5;
    var DEFAULT_KEEP_DETAIL_ROW_COUNT = 10;
    function isTrue(value) {
      return value === true || value === "true";
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (typeof value == "string") {
        return parseInt(value, 10);
      }
    }
    function zeroOrGreater(value, defaultValue) {
      if (value >= 0) {
        return value;
      }
      return defaultValue;
    }
    function oneOrGreater(value, defaultValue) {
      if (value > 0) {
        return value;
      }
      return defaultValue;
    }
    var GridOptionsWrapper = function() {
      function GridOptionsWrapper2() {
        this.propertyEventService = new EventService();
        this.domDataKey = "__AG_" + Math.random().toString();
        this.layoutElements = [];
        this.destroyed = false;
      }
      GridOptionsWrapper_1 = GridOptionsWrapper2;
      GridOptionsWrapper2.prototype.agWire = function(gridApi, columnApi) {
        this.gridOptions.api = gridApi;
        this.gridOptions.columnApi = columnApi;
        this.checkForDeprecated();
        this.checkForViolations();
      };
      GridOptionsWrapper2.prototype.destroy = function() {
        this.gridOptions.api = null;
        this.gridOptions.columnApi = null;
        this.removeEventListener(GridOptionsWrapper_1.PROP_DOM_LAYOUT, this.updateLayoutClassesListener);
        this.destroyed = true;
      };
      GridOptionsWrapper2.prototype.init = function() {
        var _this = this;
        if (!(this.gridOptions.suppressPropertyNamesCheck === true)) {
          this.checkGridOptionsProperties();
          this.checkColumnDefProperties();
        }
        if (this.gridOptions.sideBar != null) {
          this.gridOptions.sideBar = SideBarDefParser.parse(this.gridOptions.sideBar);
        }
        var async = this.useAsyncEvents();
        this.eventService.addGlobalListener(this.globalEventHandler.bind(this), async);
        if (this.isGroupSelectsChildren() && this.isSuppressParentsInRowNodes()) {
          console.warn("ag-Grid: 'groupSelectsChildren' does not work with 'suppressParentsInRowNodes', this selection method needs the part in rowNode to work");
        }
        if (this.isGroupSelectsChildren()) {
          if (!this.isRowSelectionMulti()) {
            console.warn("ag-Grid: rowSelection must be 'multiple' for groupSelectsChildren to make sense");
          }
          if (this.isRowModelServerSide()) {
            console.warn("ag-Grid: group selects children is NOT support for Server Side Row Model. This is because the rows are lazy loaded, so selecting a group is not possible asthe grid has no way of knowing what the children are.");
          }
        }
        if (this.isGroupRemoveSingleChildren() && this.isGroupHideOpenParents()) {
          console.warn("ag-Grid: groupRemoveSingleChildren and groupHideOpenParents do not work with each other, you need to pick one. And don't ask us how to us these together on our support forum either you will get the same answer!");
        }
        if (this.isRowModelServerSide()) {
          var msg = function(prop) {
            return "ag-Grid: '" + prop + "' is not supported on the Server-Side Row Model";
          };
          if (exists(this.gridOptions.groupDefaultExpanded)) {
            console.warn(msg("groupDefaultExpanded"));
          }
          if (exists(this.gridOptions.groupDefaultExpanded)) {
            console.warn(msg("groupIncludeFooter"));
          }
          if (exists(this.gridOptions.groupDefaultExpanded)) {
            console.warn(msg("groupIncludeTotalFooter"));
          }
        }
        if (this.isEnableRangeSelection()) {
          ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, "enableRangeSelection");
        }
        if (!this.isEnableRangeSelection() && (this.isEnableRangeHandle() || this.isEnableFillHandle())) {
          console.warn("ag-Grid: 'enableRangeHandle' and 'enableFillHandle' will not work unless 'enableRangeSelection' is set to true");
        }
        var warnOfDeprecaredIcon = function(name) {
          if (_this.gridOptions.icons && _this.gridOptions.icons[name]) {
            console.warn("gridOptions.icons." + name + " is no longer supported. For information on how to style checkboxes and radio buttons, see https://www.ag-grid.com/javascript-grid-icons/");
          }
        };
        warnOfDeprecaredIcon("radioButtonOff");
        warnOfDeprecaredIcon("radioButtonOn");
        warnOfDeprecaredIcon("checkboxChecked");
        warnOfDeprecaredIcon("checkboxUnchecked");
        warnOfDeprecaredIcon("checkboxIndeterminate");
        this.updateLayoutClassesListener = this.updateLayoutClasses.bind(this);
        this.addEventListener(GridOptionsWrapper_1.PROP_DOM_LAYOUT, this.updateLayoutClassesListener);
        this.getScrollbarWidth();
      };
      GridOptionsWrapper2.prototype.checkColumnDefProperties = function() {
        var _this = this;
        if (this.gridOptions.columnDefs == null) {
          return;
        }
        this.gridOptions.columnDefs.forEach(function(colDef) {
          var userProperties = Object.getOwnPropertyNames(colDef);
          var validProperties = __spreadArrays$3(ColDefUtil.ALL_PROPERTIES, ColDefUtil.FRAMEWORK_PROPERTIES);
          _this.checkProperties(userProperties, validProperties, validProperties, "colDef", "https://www.ag-grid.com/javascript-grid-column-properties/");
        });
      };
      GridOptionsWrapper2.prototype.checkGridOptionsProperties = function() {
        var userProperties = Object.getOwnPropertyNames(this.gridOptions);
        var validProperties = __spreadArrays$3(PropertyKeys.ALL_PROPERTIES, PropertyKeys.FRAMEWORK_PROPERTIES, values(Events).map(function(event) {
          return ComponentUtil.getCallbackForEvent(event);
        }));
        var validPropertiesAndExceptions = __spreadArrays$3(validProperties, ["api", "columnApi"]);
        this.checkProperties(userProperties, validPropertiesAndExceptions, validProperties, "gridOptions", "https://www.ag-grid.com/javascript-grid-properties/");
      };
      GridOptionsWrapper2.prototype.checkProperties = function(userProperties, validPropertiesAndExceptions, validProperties, containerName, docsUrl) {
        var invalidProperties = fuzzyCheckStrings(userProperties, validPropertiesAndExceptions, validProperties);
        iterateObject(invalidProperties, function(key, value) {
          console.warn("ag-grid: invalid " + containerName + " property '" + key + "' did you mean any of these: " + value.slice(0, 8).join(", "));
        });
        if (Object.keys(invalidProperties).length > 0) {
          console.warn("ag-grid: to see all the valid " + containerName + " properties please check: " + docsUrl);
        }
      };
      GridOptionsWrapper2.prototype.getDomDataKey = function() {
        return this.domDataKey;
      };
      GridOptionsWrapper2.prototype.getDomData = function(element, key) {
        var domData = element[this.getDomDataKey()];
        return domData ? domData[key] : void 0;
      };
      GridOptionsWrapper2.prototype.setDomData = function(element, key, value) {
        var domDataKey = this.getDomDataKey();
        var domData = element[domDataKey];
        if (missing(domData)) {
          domData = {};
          element[domDataKey] = domData;
        }
        domData[key] = value;
      };
      GridOptionsWrapper2.prototype.isRowSelection = function() {
        return this.gridOptions.rowSelection === "single" || this.gridOptions.rowSelection === "multiple";
      };
      GridOptionsWrapper2.prototype.isSuppressRowDeselection = function() {
        return isTrue(this.gridOptions.suppressRowDeselection);
      };
      GridOptionsWrapper2.prototype.isRowSelectionMulti = function() {
        return this.gridOptions.rowSelection === "multiple";
      };
      GridOptionsWrapper2.prototype.isRowMultiSelectWithClick = function() {
        return isTrue(this.gridOptions.rowMultiSelectWithClick);
      };
      GridOptionsWrapper2.prototype.getContext = function() {
        return this.gridOptions.context;
      };
      GridOptionsWrapper2.prototype.isPivotMode = function() {
        return isTrue(this.gridOptions.pivotMode);
      };
      GridOptionsWrapper2.prototype.isSuppressExpandablePivotGroups = function() {
        return isTrue(this.gridOptions.suppressExpandablePivotGroups);
      };
      GridOptionsWrapper2.prototype.getPivotColumnGroupTotals = function() {
        return this.gridOptions.pivotColumnGroupTotals;
      };
      GridOptionsWrapper2.prototype.getPivotRowTotals = function() {
        return this.gridOptions.pivotRowTotals;
      };
      GridOptionsWrapper2.prototype.isRowModelInfinite = function() {
        return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_INFINITE;
      };
      GridOptionsWrapper2.prototype.isRowModelViewport = function() {
        return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT;
      };
      GridOptionsWrapper2.prototype.isRowModelServerSide = function() {
        return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;
      };
      GridOptionsWrapper2.prototype.isRowModelDefault = function() {
        return missing(this.gridOptions.rowModelType) || this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
      };
      GridOptionsWrapper2.prototype.isFullRowEdit = function() {
        return this.gridOptions.editType === "fullRow";
      };
      GridOptionsWrapper2.prototype.isSuppressFocusAfterRefresh = function() {
        return isTrue(this.gridOptions.suppressFocusAfterRefresh);
      };
      GridOptionsWrapper2.prototype.isSuppressBrowserResizeObserver = function() {
        return isTrue(this.gridOptions.suppressBrowserResizeObserver);
      };
      GridOptionsWrapper2.prototype.isSuppressMaintainUnsortedOrder = function() {
        return isTrue(this.gridOptions.suppressMaintainUnsortedOrder);
      };
      GridOptionsWrapper2.prototype.isSuppressClearOnFillReduction = function() {
        return isTrue(this.gridOptions.suppressClearOnFillReduction);
      };
      GridOptionsWrapper2.prototype.isShowToolPanel = function() {
        return isTrue(this.gridOptions.sideBar && Array.isArray(this.getSideBar().toolPanels));
      };
      GridOptionsWrapper2.prototype.getSideBar = function() {
        return this.gridOptions.sideBar;
      };
      GridOptionsWrapper2.prototype.isSuppressTouch = function() {
        return isTrue(this.gridOptions.suppressTouch);
      };
      GridOptionsWrapper2.prototype.isApplyColumnDefOrder = function() {
        return isTrue(this.gridOptions.applyColumnDefOrder);
      };
      GridOptionsWrapper2.prototype.isSuppressRowTransform = function() {
        return isTrue(this.gridOptions.suppressRowTransform);
      };
      GridOptionsWrapper2.prototype.isSuppressColumnStateEvents = function() {
        return isTrue(this.gridOptions.suppressColumnStateEvents);
      };
      GridOptionsWrapper2.prototype.isAllowDragFromColumnsToolPanel = function() {
        return isTrue(this.gridOptions.allowDragFromColumnsToolPanel);
      };
      GridOptionsWrapper2.prototype.useAsyncEvents = function() {
        return !isTrue(this.gridOptions.suppressAsyncEvents);
      };
      GridOptionsWrapper2.prototype.isEnableCellChangeFlash = function() {
        return isTrue(this.gridOptions.enableCellChangeFlash);
      };
      GridOptionsWrapper2.prototype.getCellFlashDelay = function() {
        return this.gridOptions.cellFlashDelay || 500;
      };
      GridOptionsWrapper2.prototype.getCellFadeDelay = function() {
        return this.gridOptions.cellFadeDelay || 1e3;
      };
      GridOptionsWrapper2.prototype.isGroupSelectsChildren = function() {
        var result = isTrue(this.gridOptions.groupSelectsChildren);
        if (result && this.isTreeData()) {
          console.warn("ag-Grid: groupSelectsChildren does not work with tree data");
          return false;
        }
        return result;
      };
      GridOptionsWrapper2.prototype.isSuppressRowHoverHighlight = function() {
        return isTrue(this.gridOptions.suppressRowHoverHighlight);
      };
      GridOptionsWrapper2.prototype.isGroupSelectsFiltered = function() {
        return isTrue(this.gridOptions.groupSelectsFiltered);
      };
      GridOptionsWrapper2.prototype.isGroupHideOpenParents = function() {
        return isTrue(this.gridOptions.groupHideOpenParents);
      };
      GridOptionsWrapper2.prototype.isGroupMultiAutoColumn = function() {
        return isTrue(this.gridOptions.groupMultiAutoColumn) || isTrue(this.gridOptions.groupHideOpenParents);
      };
      GridOptionsWrapper2.prototype.isGroupRemoveSingleChildren = function() {
        return isTrue(this.gridOptions.groupRemoveSingleChildren);
      };
      GridOptionsWrapper2.prototype.isGroupRemoveLowestSingleChildren = function() {
        return isTrue(this.gridOptions.groupRemoveLowestSingleChildren);
      };
      GridOptionsWrapper2.prototype.isGroupIncludeFooter = function() {
        return isTrue(this.gridOptions.groupIncludeFooter);
      };
      GridOptionsWrapper2.prototype.isGroupIncludeTotalFooter = function() {
        return isTrue(this.gridOptions.groupIncludeTotalFooter);
      };
      GridOptionsWrapper2.prototype.isGroupSuppressBlankHeader = function() {
        return isTrue(this.gridOptions.groupSuppressBlankHeader);
      };
      GridOptionsWrapper2.prototype.isSuppressRowClickSelection = function() {
        return isTrue(this.gridOptions.suppressRowClickSelection);
      };
      GridOptionsWrapper2.prototype.isSuppressCellSelection = function() {
        return isTrue(this.gridOptions.suppressCellSelection);
      };
      GridOptionsWrapper2.prototype.isSuppressMultiSort = function() {
        return isTrue(this.gridOptions.suppressMultiSort);
      };
      GridOptionsWrapper2.prototype.isMultiSortKeyCtrl = function() {
        return this.gridOptions.multiSortKey === "ctrl";
      };
      GridOptionsWrapper2.prototype.isGroupSuppressAutoColumn = function() {
        return isTrue(this.gridOptions.groupSuppressAutoColumn);
      };
      GridOptionsWrapper2.prototype.isPivotSuppressAutoColumn = function() {
        return isTrue(this.gridOptions.pivotSuppressAutoColumn);
      };
      GridOptionsWrapper2.prototype.isSuppressDragLeaveHidesColumns = function() {
        return isTrue(this.gridOptions.suppressDragLeaveHidesColumns);
      };
      GridOptionsWrapper2.prototype.isSuppressScrollOnNewData = function() {
        return isTrue(this.gridOptions.suppressScrollOnNewData);
      };
      GridOptionsWrapper2.prototype.isRowDragManaged = function() {
        return isTrue(this.gridOptions.rowDragManaged);
      };
      GridOptionsWrapper2.prototype.isSuppressRowDrag = function() {
        return isTrue(this.gridOptions.suppressRowDrag);
      };
      GridOptionsWrapper2.prototype.isSuppressMoveWhenRowDragging = function() {
        return isTrue(this.gridOptions.suppressMoveWhenRowDragging);
      };
      GridOptionsWrapper2.prototype.isEnableMultiRowDragging = function() {
        return isTrue(this.gridOptions.enableMultiRowDragging);
      };
      GridOptionsWrapper2.prototype.getDomLayout = function() {
        var domLayout = this.gridOptions.domLayout || Constants.DOM_LAYOUT_NORMAL;
        var validLayouts = [
          Constants.DOM_LAYOUT_PRINT,
          Constants.DOM_LAYOUT_AUTO_HEIGHT,
          Constants.DOM_LAYOUT_NORMAL
        ];
        if (validLayouts.indexOf(domLayout) === -1) {
          doOnce(function() {
            return console.warn("ag-Grid: " + domLayout + " is not valid for DOM Layout, valid values are " + Constants.DOM_LAYOUT_NORMAL + ", " + Constants.DOM_LAYOUT_AUTO_HEIGHT + " and " + Constants.DOM_LAYOUT_PRINT);
          }, "warn about dom layout values");
          return Constants.DOM_LAYOUT_NORMAL;
        }
        return domLayout;
      };
      GridOptionsWrapper2.prototype.isSuppressHorizontalScroll = function() {
        return isTrue(this.gridOptions.suppressHorizontalScroll);
      };
      GridOptionsWrapper2.prototype.isSuppressMaxRenderedRowRestriction = function() {
        return isTrue(this.gridOptions.suppressMaxRenderedRowRestriction);
      };
      GridOptionsWrapper2.prototype.isExcludeChildrenWhenTreeDataFiltering = function() {
        return isTrue(this.gridOptions.excludeChildrenWhenTreeDataFiltering);
      };
      GridOptionsWrapper2.prototype.isAlwaysShowVerticalScroll = function() {
        return isTrue(this.gridOptions.alwaysShowVerticalScroll);
      };
      GridOptionsWrapper2.prototype.isDebounceVerticalScrollbar = function() {
        return isTrue(this.gridOptions.debounceVerticalScrollbar);
      };
      GridOptionsWrapper2.prototype.isSuppressLoadingOverlay = function() {
        return isTrue(this.gridOptions.suppressLoadingOverlay);
      };
      GridOptionsWrapper2.prototype.isSuppressNoRowsOverlay = function() {
        return isTrue(this.gridOptions.suppressNoRowsOverlay);
      };
      GridOptionsWrapper2.prototype.isSuppressFieldDotNotation = function() {
        return isTrue(this.gridOptions.suppressFieldDotNotation);
      };
      GridOptionsWrapper2.prototype.getPinnedTopRowData = function() {
        return this.gridOptions.pinnedTopRowData;
      };
      GridOptionsWrapper2.prototype.getPinnedBottomRowData = function() {
        return this.gridOptions.pinnedBottomRowData;
      };
      GridOptionsWrapper2.prototype.isFunctionsPassive = function() {
        return isTrue(this.gridOptions.functionsPassive);
      };
      GridOptionsWrapper2.prototype.isSuppressChangeDetection = function() {
        return isTrue(this.gridOptions.suppressChangeDetection);
      };
      GridOptionsWrapper2.prototype.isSuppressAnimationFrame = function() {
        return isTrue(this.gridOptions.suppressAnimationFrame);
      };
      GridOptionsWrapper2.prototype.getQuickFilterText = function() {
        return this.gridOptions.quickFilterText;
      };
      GridOptionsWrapper2.prototype.isCacheQuickFilter = function() {
        return isTrue(this.gridOptions.cacheQuickFilter);
      };
      GridOptionsWrapper2.prototype.isUnSortIcon = function() {
        return isTrue(this.gridOptions.unSortIcon);
      };
      GridOptionsWrapper2.prototype.isSuppressMenuHide = function() {
        return isTrue(this.gridOptions.suppressMenuHide);
      };
      GridOptionsWrapper2.prototype.isEnterMovesDownAfterEdit = function() {
        return isTrue(this.gridOptions.enterMovesDownAfterEdit);
      };
      GridOptionsWrapper2.prototype.isEnterMovesDown = function() {
        return isTrue(this.gridOptions.enterMovesDown);
      };
      GridOptionsWrapper2.prototype.isUndoRedoCellEditing = function() {
        return isTrue(this.gridOptions.undoRedoCellEditing);
      };
      GridOptionsWrapper2.prototype.getUndoRedoCellEditingLimit = function() {
        return this.gridOptions.undoRedoCellEditingLimit;
      };
      GridOptionsWrapper2.prototype.getRowStyle = function() {
        return this.gridOptions.rowStyle;
      };
      GridOptionsWrapper2.prototype.getRowClass = function() {
        return this.gridOptions.rowClass;
      };
      GridOptionsWrapper2.prototype.getRowStyleFunc = function() {
        return this.gridOptions.getRowStyle;
      };
      GridOptionsWrapper2.prototype.getRowClassFunc = function() {
        return this.gridOptions.getRowClass;
      };
      GridOptionsWrapper2.prototype.rowClassRules = function() {
        return this.gridOptions.rowClassRules;
      };
      GridOptionsWrapper2.prototype.getCreateChartContainerFunc = function() {
        return this.gridOptions.createChartContainer;
      };
      GridOptionsWrapper2.prototype.getPopupParent = function() {
        return this.gridOptions.popupParent;
      };
      GridOptionsWrapper2.prototype.getBlockLoadDebounceMillis = function() {
        return this.gridOptions.blockLoadDebounceMillis;
      };
      GridOptionsWrapper2.prototype.getPostProcessPopupFunc = function() {
        return this.gridOptions.postProcessPopup;
      };
      GridOptionsWrapper2.prototype.getPaginationNumberFormatterFunc = function() {
        return this.gridOptions.paginationNumberFormatter;
      };
      GridOptionsWrapper2.prototype.getChildCountFunc = function() {
        return this.gridOptions.getChildCount;
      };
      GridOptionsWrapper2.prototype.getDefaultGroupSortComparator = function() {
        return this.gridOptions.defaultGroupSortComparator;
      };
      GridOptionsWrapper2.prototype.getIsFullWidthCellFunc = function() {
        return this.gridOptions.isFullWidthCell;
      };
      GridOptionsWrapper2.prototype.getFullWidthCellRendererParams = function() {
        return this.gridOptions.fullWidthCellRendererParams;
      };
      GridOptionsWrapper2.prototype.isEmbedFullWidthRows = function() {
        return isTrue(this.gridOptions.embedFullWidthRows) || isTrue(this.gridOptions.deprecatedEmbedFullWidthRows);
      };
      GridOptionsWrapper2.prototype.isDetailRowAutoHeight = function() {
        return isTrue(this.gridOptions.detailRowAutoHeight);
      };
      GridOptionsWrapper2.prototype.getSuppressKeyboardEventFunc = function() {
        return this.gridOptions.suppressKeyboardEvent;
      };
      GridOptionsWrapper2.prototype.getBusinessKeyForNodeFunc = function() {
        return this.gridOptions.getBusinessKeyForNode;
      };
      GridOptionsWrapper2.prototype.getApi = function() {
        return this.gridOptions.api;
      };
      GridOptionsWrapper2.prototype.getColumnApi = function() {
        return this.gridOptions.columnApi;
      };
      GridOptionsWrapper2.prototype.isImmutableData = function() {
        return isTrue(this.gridOptions.immutableData);
      };
      GridOptionsWrapper2.prototype.isEnsureDomOrder = function() {
        return isTrue(this.gridOptions.ensureDomOrder);
      };
      GridOptionsWrapper2.prototype.isEnableCharts = function() {
        if (isTrue(this.gridOptions.enableCharts)) {
          return ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, "enableCharts");
        }
        return false;
      };
      GridOptionsWrapper2.prototype.getColResizeDefault = function() {
        return this.gridOptions.colResizeDefault;
      };
      GridOptionsWrapper2.prototype.isSingleClickEdit = function() {
        return isTrue(this.gridOptions.singleClickEdit);
      };
      GridOptionsWrapper2.prototype.isSuppressClickEdit = function() {
        return isTrue(this.gridOptions.suppressClickEdit);
      };
      GridOptionsWrapper2.prototype.isStopEditingWhenGridLosesFocus = function() {
        return isTrue(this.gridOptions.stopEditingWhenGridLosesFocus);
      };
      GridOptionsWrapper2.prototype.getGroupDefaultExpanded = function() {
        return this.gridOptions.groupDefaultExpanded;
      };
      GridOptionsWrapper2.prototype.getMaxConcurrentDatasourceRequests = function() {
        return this.gridOptions.maxConcurrentDatasourceRequests;
      };
      GridOptionsWrapper2.prototype.getMaxBlocksInCache = function() {
        return this.gridOptions.maxBlocksInCache;
      };
      GridOptionsWrapper2.prototype.getCacheOverflowSize = function() {
        return this.gridOptions.cacheOverflowSize;
      };
      GridOptionsWrapper2.prototype.getPaginationPageSize = function() {
        return toNumber(this.gridOptions.paginationPageSize);
      };
      GridOptionsWrapper2.prototype.isPaginateChildRows = function() {
        var shouldPaginate = this.isGroupRemoveSingleChildren() || this.isGroupRemoveLowestSingleChildren();
        if (shouldPaginate) {
          return true;
        }
        return isTrue(this.gridOptions.paginateChildRows);
      };
      GridOptionsWrapper2.prototype.getCacheBlockSize = function() {
        return this.gridOptions.cacheBlockSize;
      };
      GridOptionsWrapper2.prototype.getInfiniteInitialRowCount = function() {
        return this.gridOptions.infiniteInitialRowCount;
      };
      GridOptionsWrapper2.prototype.isPurgeClosedRowNodes = function() {
        return isTrue(this.gridOptions.purgeClosedRowNodes);
      };
      GridOptionsWrapper2.prototype.isSuppressPaginationPanel = function() {
        return isTrue(this.gridOptions.suppressPaginationPanel);
      };
      GridOptionsWrapper2.prototype.getRowData = function() {
        return this.gridOptions.rowData;
      };
      GridOptionsWrapper2.prototype.isGroupUseEntireRow = function(pivotMode) {
        return pivotMode ? false : isTrue(this.gridOptions.groupUseEntireRow);
      };
      GridOptionsWrapper2.prototype.isEnableRtl = function() {
        return isTrue(this.gridOptions.enableRtl);
      };
      GridOptionsWrapper2.prototype.getAutoGroupColumnDef = function() {
        return this.gridOptions.autoGroupColumnDef;
      };
      GridOptionsWrapper2.prototype.getRowGroupPanelShow = function() {
        return this.gridOptions.rowGroupPanelShow;
      };
      GridOptionsWrapper2.prototype.getPivotPanelShow = function() {
        return this.gridOptions.pivotPanelShow;
      };
      GridOptionsWrapper2.prototype.isAngularCompileRows = function() {
        return isTrue(this.gridOptions.angularCompileRows);
      };
      GridOptionsWrapper2.prototype.isAngularCompileFilters = function() {
        return isTrue(this.gridOptions.angularCompileFilters);
      };
      GridOptionsWrapper2.prototype.isDebug = function() {
        return isTrue(this.gridOptions.debug);
      };
      GridOptionsWrapper2.prototype.getColumnDefs = function() {
        return this.gridOptions.columnDefs;
      };
      GridOptionsWrapper2.prototype.getColumnTypes = function() {
        return this.gridOptions.columnTypes;
      };
      GridOptionsWrapper2.prototype.getDatasource = function() {
        return this.gridOptions.datasource;
      };
      GridOptionsWrapper2.prototype.getViewportDatasource = function() {
        return this.gridOptions.viewportDatasource;
      };
      GridOptionsWrapper2.prototype.getServerSideDatasource = function() {
        return this.gridOptions.serverSideDatasource;
      };
      GridOptionsWrapper2.prototype.isAccentedSort = function() {
        return isTrue(this.gridOptions.accentedSort);
      };
      GridOptionsWrapper2.prototype.isEnableBrowserTooltips = function() {
        return isTrue(this.gridOptions.enableBrowserTooltips);
      };
      GridOptionsWrapper2.prototype.isEnableCellExpressions = function() {
        return isTrue(this.gridOptions.enableCellExpressions);
      };
      GridOptionsWrapper2.prototype.isEnableGroupEdit = function() {
        return isTrue(this.gridOptions.enableGroupEdit);
      };
      GridOptionsWrapper2.prototype.isSuppressMiddleClickScrolls = function() {
        return isTrue(this.gridOptions.suppressMiddleClickScrolls);
      };
      GridOptionsWrapper2.prototype.isPreventDefaultOnContextMenu = function() {
        return isTrue(this.gridOptions.preventDefaultOnContextMenu);
      };
      GridOptionsWrapper2.prototype.isSuppressPreventDefaultOnMouseWheel = function() {
        return isTrue(this.gridOptions.suppressPreventDefaultOnMouseWheel);
      };
      GridOptionsWrapper2.prototype.isSuppressColumnVirtualisation = function() {
        return isTrue(this.gridOptions.suppressColumnVirtualisation);
      };
      GridOptionsWrapper2.prototype.isSuppressContextMenu = function() {
        return isTrue(this.gridOptions.suppressContextMenu);
      };
      GridOptionsWrapper2.prototype.isAllowContextMenuWithControlKey = function() {
        return isTrue(this.gridOptions.allowContextMenuWithControlKey);
      };
      GridOptionsWrapper2.prototype.isSuppressCopyRowsToClipboard = function() {
        return isTrue(this.gridOptions.suppressCopyRowsToClipboard);
      };
      GridOptionsWrapper2.prototype.isCopyHeadersToClipboard = function() {
        return isTrue(this.gridOptions.copyHeadersToClipboard);
      };
      GridOptionsWrapper2.prototype.isSuppressClipboardPaste = function() {
        return isTrue(this.gridOptions.suppressClipboardPaste);
      };
      GridOptionsWrapper2.prototype.isSuppressLastEmptyLineOnPaste = function() {
        return isTrue(this.gridOptions.suppressLastEmptyLineOnPaste);
      };
      GridOptionsWrapper2.prototype.isPagination = function() {
        return isTrue(this.gridOptions.pagination);
      };
      GridOptionsWrapper2.prototype.isSuppressEnterpriseResetOnNewColumns = function() {
        return isTrue(this.gridOptions.suppressEnterpriseResetOnNewColumns);
      };
      GridOptionsWrapper2.prototype.getProcessDataFromClipboardFunc = function() {
        return this.gridOptions.processDataFromClipboard;
      };
      GridOptionsWrapper2.prototype.getAsyncTransactionWaitMillis = function() {
        return exists(this.gridOptions.asyncTransactionWaitMillis) ? this.gridOptions.asyncTransactionWaitMillis : Constants.BATCH_WAIT_MILLIS;
      };
      GridOptionsWrapper2.prototype.isSuppressMovableColumns = function() {
        return isTrue(this.gridOptions.suppressMovableColumns);
      };
      GridOptionsWrapper2.prototype.isAnimateRows = function() {
        if (this.isEnsureDomOrder()) {
          return false;
        }
        return isTrue(this.gridOptions.animateRows);
      };
      GridOptionsWrapper2.prototype.isSuppressColumnMoveAnimation = function() {
        return isTrue(this.gridOptions.suppressColumnMoveAnimation);
      };
      GridOptionsWrapper2.prototype.isSuppressAggFuncInHeader = function() {
        return isTrue(this.gridOptions.suppressAggFuncInHeader);
      };
      GridOptionsWrapper2.prototype.isSuppressAggAtRootLevel = function() {
        return isTrue(this.gridOptions.suppressAggAtRootLevel);
      };
      GridOptionsWrapper2.prototype.isEnableRangeSelection = function() {
        return ModuleRegistry.isRegistered(exports.ModuleNames.RangeSelectionModule) && isTrue(this.gridOptions.enableRangeSelection);
      };
      GridOptionsWrapper2.prototype.isEnableRangeHandle = function() {
        return isTrue(this.gridOptions.enableRangeHandle);
      };
      GridOptionsWrapper2.prototype.isEnableFillHandle = function() {
        return isTrue(this.gridOptions.enableFillHandle);
      };
      GridOptionsWrapper2.prototype.getFillHandleDirection = function() {
        var direction = this.gridOptions.fillHandleDirection;
        if (!direction) {
          return "xy";
        }
        if (direction !== "x" && direction !== "y" && direction !== "xy") {
          doOnce(function() {
            return console.warn("ag-Grid: valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.");
          }, "warn invalid fill direction");
          return "xy";
        }
        return direction;
      };
      GridOptionsWrapper2.prototype.getFillOperation = function() {
        return this.gridOptions.fillOperation;
      };
      GridOptionsWrapper2.prototype.isSuppressMultiRangeSelection = function() {
        return isTrue(this.gridOptions.suppressMultiRangeSelection);
      };
      GridOptionsWrapper2.prototype.isPaginationAutoPageSize = function() {
        return isTrue(this.gridOptions.paginationAutoPageSize);
      };
      GridOptionsWrapper2.prototype.isRememberGroupStateWhenNewData = function() {
        return isTrue(this.gridOptions.rememberGroupStateWhenNewData);
      };
      GridOptionsWrapper2.prototype.getIcons = function() {
        return this.gridOptions.icons;
      };
      GridOptionsWrapper2.prototype.getAggFuncs = function() {
        return this.gridOptions.aggFuncs;
      };
      GridOptionsWrapper2.prototype.getSortingOrder = function() {
        return this.gridOptions.sortingOrder;
      };
      GridOptionsWrapper2.prototype.getAlignedGrids = function() {
        return this.gridOptions.alignedGrids;
      };
      GridOptionsWrapper2.prototype.isMasterDetail = function() {
        var masterDetail = isTrue(this.gridOptions.masterDetail);
        if (masterDetail) {
          return ModuleRegistry.assertRegistered(exports.ModuleNames.MasterDetailModule, "masterDetail");
        } else {
          return false;
        }
      };
      GridOptionsWrapper2.prototype.isKeepDetailRows = function() {
        return isTrue(this.gridOptions.keepDetailRows);
      };
      GridOptionsWrapper2.prototype.getKeepDetailRowsCount = function() {
        if (this.gridOptions.keepDetailRowsCount > 0) {
          return this.gridOptions.keepDetailRowsCount;
        }
        return DEFAULT_KEEP_DETAIL_ROW_COUNT;
      };
      GridOptionsWrapper2.prototype.getIsRowMasterFunc = function() {
        return this.gridOptions.isRowMaster;
      };
      GridOptionsWrapper2.prototype.getIsRowSelectableFunc = function() {
        return this.gridOptions.isRowSelectable;
      };
      GridOptionsWrapper2.prototype.getGroupRowRendererParams = function() {
        return this.gridOptions.groupRowRendererParams;
      };
      GridOptionsWrapper2.prototype.getOverlayLoadingTemplate = function() {
        return this.gridOptions.overlayLoadingTemplate;
      };
      GridOptionsWrapper2.prototype.getOverlayNoRowsTemplate = function() {
        return this.gridOptions.overlayNoRowsTemplate;
      };
      GridOptionsWrapper2.prototype.isSuppressAutoSize = function() {
        return isTrue(this.gridOptions.suppressAutoSize);
      };
      GridOptionsWrapper2.prototype.isEnableCellTextSelection = function() {
        return isTrue(this.gridOptions.enableCellTextSelection);
      };
      GridOptionsWrapper2.prototype.isSuppressParentsInRowNodes = function() {
        return isTrue(this.gridOptions.suppressParentsInRowNodes);
      };
      GridOptionsWrapper2.prototype.isFunctionsReadOnly = function() {
        return isTrue(this.gridOptions.functionsReadOnly);
      };
      GridOptionsWrapper2.prototype.isFloatingFilter = function() {
        return this.gridOptions.floatingFilter;
      };
      GridOptionsWrapper2.prototype.isEnableCellTextSelect = function() {
        return isTrue(this.gridOptions.enableCellTextSelection);
      };
      GridOptionsWrapper2.prototype.isEnableOldSetFilterModel = function() {
        return isTrue(this.gridOptions.enableOldSetFilterModel);
      };
      GridOptionsWrapper2.prototype.getDefaultColDef = function() {
        return this.gridOptions.defaultColDef;
      };
      GridOptionsWrapper2.prototype.getDefaultColGroupDef = function() {
        return this.gridOptions.defaultColGroupDef;
      };
      GridOptionsWrapper2.prototype.getDefaultExportParams = function() {
        return this.gridOptions.defaultExportParams;
      };
      GridOptionsWrapper2.prototype.isSuppressCsvExport = function() {
        return isTrue(this.gridOptions.suppressCsvExport);
      };
      GridOptionsWrapper2.prototype.isAllowShowChangeAfterFilter = function() {
        return isTrue(this.gridOptions.allowShowChangeAfterFilter);
      };
      GridOptionsWrapper2.prototype.isSuppressExcelExport = function() {
        return isTrue(this.gridOptions.suppressExcelExport);
      };
      GridOptionsWrapper2.prototype.isSuppressMakeColumnVisibleAfterUnGroup = function() {
        return isTrue(this.gridOptions.suppressMakeColumnVisibleAfterUnGroup);
      };
      GridOptionsWrapper2.prototype.getDataPathFunc = function() {
        return this.gridOptions.getDataPath;
      };
      GridOptionsWrapper2.prototype.getIsServerSideGroupFunc = function() {
        return this.gridOptions.isServerSideGroup;
      };
      GridOptionsWrapper2.prototype.getServerSideGroupKeyFunc = function() {
        return this.gridOptions.getServerSideGroupKey;
      };
      GridOptionsWrapper2.prototype.getGroupRowAggNodesFunc = function() {
        return this.gridOptions.groupRowAggNodes;
      };
      GridOptionsWrapper2.prototype.getContextMenuItemsFunc = function() {
        return this.gridOptions.getContextMenuItems;
      };
      GridOptionsWrapper2.prototype.getMainMenuItemsFunc = function() {
        return this.gridOptions.getMainMenuItems;
      };
      GridOptionsWrapper2.prototype.getRowNodeIdFunc = function() {
        return this.gridOptions.getRowNodeId;
      };
      GridOptionsWrapper2.prototype.getNavigateToNextHeaderFunc = function() {
        return this.gridOptions.navigateToNextHeader;
      };
      GridOptionsWrapper2.prototype.getTabToNextHeaderFunc = function() {
        return this.gridOptions.tabToNextHeader;
      };
      GridOptionsWrapper2.prototype.getNavigateToNextCellFunc = function() {
        return this.gridOptions.navigateToNextCell;
      };
      GridOptionsWrapper2.prototype.getTabToNextCellFunc = function() {
        return this.gridOptions.tabToNextCell;
      };
      GridOptionsWrapper2.prototype.isTreeData = function() {
        var usingTreeData = isTrue(this.gridOptions.treeData);
        if (usingTreeData) {
          return ModuleRegistry.assertRegistered(exports.ModuleNames.RowGroupingModule, "Tree Data");
        } else {
          return false;
        }
      };
      GridOptionsWrapper2.prototype.isValueCache = function() {
        return isTrue(this.gridOptions.valueCache);
      };
      GridOptionsWrapper2.prototype.isValueCacheNeverExpires = function() {
        return isTrue(this.gridOptions.valueCacheNeverExpires);
      };
      GridOptionsWrapper2.prototype.isDeltaSort = function() {
        return isTrue(this.gridOptions.deltaSort);
      };
      GridOptionsWrapper2.prototype.isAggregateOnlyChangedColumns = function() {
        return isTrue(this.gridOptions.aggregateOnlyChangedColumns);
      };
      GridOptionsWrapper2.prototype.getProcessSecondaryColDefFunc = function() {
        return this.gridOptions.processSecondaryColDef;
      };
      GridOptionsWrapper2.prototype.getProcessSecondaryColGroupDefFunc = function() {
        return this.gridOptions.processSecondaryColGroupDef;
      };
      GridOptionsWrapper2.prototype.getSendToClipboardFunc = function() {
        return this.gridOptions.sendToClipboard;
      };
      GridOptionsWrapper2.prototype.getProcessRowPostCreateFunc = function() {
        return this.gridOptions.processRowPostCreate;
      };
      GridOptionsWrapper2.prototype.getProcessCellForClipboardFunc = function() {
        return this.gridOptions.processCellForClipboard;
      };
      GridOptionsWrapper2.prototype.getProcessHeaderForClipboardFunc = function() {
        return this.gridOptions.processHeaderForClipboard;
      };
      GridOptionsWrapper2.prototype.getProcessCellFromClipboardFunc = function() {
        return this.gridOptions.processCellFromClipboard;
      };
      GridOptionsWrapper2.prototype.getViewportRowModelPageSize = function() {
        return oneOrGreater(this.gridOptions.viewportRowModelPageSize, DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE);
      };
      GridOptionsWrapper2.prototype.getViewportRowModelBufferSize = function() {
        return zeroOrGreater(this.gridOptions.viewportRowModelBufferSize, DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE);
      };
      GridOptionsWrapper2.prototype.isServerSideSortingAlwaysResets = function() {
        return isTrue(this.gridOptions.serverSideSortingAlwaysResets);
      };
      GridOptionsWrapper2.prototype.getPostSortFunc = function() {
        return this.gridOptions.postSort;
      };
      GridOptionsWrapper2.prototype.getChartToolbarItemsFunc = function() {
        return this.gridOptions.getChartToolbarItems;
      };
      GridOptionsWrapper2.prototype.getChartThemeOverrides = function() {
        return this.gridOptions.chartThemeOverrides;
      };
      GridOptionsWrapper2.prototype.getCustomChartThemes = function() {
        return this.gridOptions.customChartThemes;
      };
      GridOptionsWrapper2.prototype.getChartThemes = function() {
        return this.gridOptions.chartThemes || ["ag-default", "ag-material", "ag-pastel", "ag-vivid", "ag-solar"];
      };
      GridOptionsWrapper2.prototype.getProcessChartOptionsFunc = function() {
        return this.gridOptions.processChartOptions;
      };
      GridOptionsWrapper2.prototype.getClipboardDeliminator = function() {
        return exists(this.gridOptions.clipboardDeliminator) ? this.gridOptions.clipboardDeliminator : "	";
      };
      GridOptionsWrapper2.prototype.setProperty = function(key, value, force) {
        if (force === void 0) {
          force = false;
        }
        var gridOptionsNoType = this.gridOptions;
        var previousValue = gridOptionsNoType[key];
        if (force || previousValue !== value) {
          gridOptionsNoType[key] = value;
          var event_1 = {
            type: key,
            currentValue: value,
            previousValue
          };
          this.propertyEventService.dispatchEvent(event_1);
        }
      };
      GridOptionsWrapper2.prototype.addLayoutElement = function(element) {
        this.layoutElements.push(element);
        this.updateLayoutClasses();
      };
      GridOptionsWrapper2.prototype.updateLayoutClasses = function() {
        var domLayout = this.getDomLayout();
        var domLayoutAutoHeight = domLayout === Constants.DOM_LAYOUT_AUTO_HEIGHT;
        var domLayoutPrint = domLayout === Constants.DOM_LAYOUT_PRINT;
        var domLayoutNormal = domLayout === Constants.DOM_LAYOUT_NORMAL;
        this.layoutElements.forEach(function(e) {
          addOrRemoveCssClass(e, "ag-layout-auto-height", domLayoutAutoHeight);
          addOrRemoveCssClass(e, "ag-layout-normal", domLayoutNormal);
          addOrRemoveCssClass(e, "ag-layout-print", domLayoutPrint);
        });
      };
      GridOptionsWrapper2.prototype.addEventListener = function(key, listener) {
        this.propertyEventService.addEventListener(key, listener);
      };
      GridOptionsWrapper2.prototype.removeEventListener = function(key, listener) {
        this.propertyEventService.removeEventListener(key, listener);
      };
      GridOptionsWrapper2.prototype.isSkipHeaderOnAutoSize = function() {
        return !!this.gridOptions.skipHeaderOnAutoSize;
      };
      GridOptionsWrapper2.prototype.getAutoSizePadding = function() {
        var value = this.gridOptions.autoSizePadding;
        return value != null && value >= 0 ? value : 20;
      };
      GridOptionsWrapper2.prototype.getHeaderHeight = function() {
        if (typeof this.gridOptions.headerHeight === "number") {
          return this.gridOptions.headerHeight;
        }
        return this.getFromTheme(25, "headerHeight");
      };
      GridOptionsWrapper2.prototype.getFloatingFiltersHeight = function() {
        if (typeof this.gridOptions.floatingFiltersHeight === "number") {
          return this.gridOptions.floatingFiltersHeight;
        }
        return this.getFromTheme(25, "headerHeight");
      };
      GridOptionsWrapper2.prototype.getGroupHeaderHeight = function() {
        if (typeof this.gridOptions.groupHeaderHeight === "number") {
          return this.gridOptions.groupHeaderHeight;
        }
        return this.getHeaderHeight();
      };
      GridOptionsWrapper2.prototype.getPivotHeaderHeight = function() {
        if (typeof this.gridOptions.pivotHeaderHeight === "number") {
          return this.gridOptions.pivotHeaderHeight;
        }
        return this.getHeaderHeight();
      };
      GridOptionsWrapper2.prototype.getPivotGroupHeaderHeight = function() {
        if (typeof this.gridOptions.pivotGroupHeaderHeight === "number") {
          return this.gridOptions.pivotGroupHeaderHeight;
        }
        return this.getGroupHeaderHeight();
      };
      GridOptionsWrapper2.prototype.isExternalFilterPresent = function() {
        if (typeof this.gridOptions.isExternalFilterPresent === "function") {
          return this.gridOptions.isExternalFilterPresent();
        }
        return false;
      };
      GridOptionsWrapper2.prototype.doesExternalFilterPass = function(node) {
        if (typeof this.gridOptions.doesExternalFilterPass === "function") {
          return this.gridOptions.doesExternalFilterPass(node);
        }
        return false;
      };
      GridOptionsWrapper2.prototype.getTooltipShowDelay = function() {
        var tooltipShowDelay = this.gridOptions.tooltipShowDelay;
        if (exists(tooltipShowDelay)) {
          if (tooltipShowDelay < 0) {
            console.warn("ag-grid: tooltipShowDelay should not be lower than 0");
          }
          return Math.max(200, tooltipShowDelay);
        }
        return null;
      };
      GridOptionsWrapper2.prototype.isTooltipMouseTrack = function() {
        return isTrue(this.gridOptions.tooltipMouseTrack);
      };
      GridOptionsWrapper2.prototype.getDocument = function() {
        var result = null;
        if (this.gridOptions.getDocument && exists(this.gridOptions.getDocument)) {
          result = this.gridOptions.getDocument();
        }
        if (result && exists(result)) {
          return result;
        }
        return document;
      };
      GridOptionsWrapper2.prototype.getMinColWidth = function() {
        if (this.gridOptions.minColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
          return this.gridOptions.minColWidth;
        }
        var measuredMin = this.getFromTheme(null, "headerCellMinWidth");
        return Math.max(measuredMin, GridOptionsWrapper_1.MIN_COL_WIDTH);
      };
      GridOptionsWrapper2.prototype.getMaxColWidth = function() {
        if (this.gridOptions.maxColWidth && this.gridOptions.maxColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
          return this.gridOptions.maxColWidth;
        }
        return null;
      };
      GridOptionsWrapper2.prototype.getColWidth = function() {
        if (typeof this.gridOptions.colWidth !== "number" || this.gridOptions.colWidth < GridOptionsWrapper_1.MIN_COL_WIDTH) {
          return 200;
        }
        return this.gridOptions.colWidth;
      };
      GridOptionsWrapper2.prototype.getRowBuffer = function() {
        var rowBuffer = this.gridOptions.rowBuffer;
        if (typeof rowBuffer === "number") {
          if (rowBuffer < 0) {
            doOnce(function() {
              return console.warn("ag-Grid: rowBuffer should not be negative");
            }, "warn rowBuffer negative");
            this.gridOptions.rowBuffer = rowBuffer = 0;
          }
        } else {
          rowBuffer = Constants.ROW_BUFFER_SIZE;
        }
        return rowBuffer;
      };
      GridOptionsWrapper2.prototype.getRowBufferInPixels = function() {
        var rowsToBuffer = this.getRowBuffer();
        var defaultRowHeight = this.getRowHeightAsNumber();
        return rowsToBuffer * defaultRowHeight;
      };
      GridOptionsWrapper2.prototype.getScrollbarWidth = function() {
        if (this.scrollbarWidth == null) {
          var useGridOptions = typeof this.gridOptions.scrollbarWidth === "number" && this.gridOptions.scrollbarWidth >= 0;
          var scrollbarWidth = useGridOptions ? this.gridOptions.scrollbarWidth : getScrollbarWidth();
          if (scrollbarWidth != null) {
            this.scrollbarWidth = scrollbarWidth;
            this.eventService.dispatchEvent({
              type: Events.EVENT_SCROLLBAR_WIDTH_CHANGED
            });
          }
        }
        return this.scrollbarWidth;
      };
      GridOptionsWrapper2.prototype.checkForDeprecated = function() {
        var options = this.gridOptions;
        if (options.deprecatedEmbedFullWidthRows) {
          console.warn("ag-Grid: since v21.2, deprecatedEmbedFullWidthRows has been replaced with embedFullWidthRows.");
        }
        if (options.enableOldSetFilterModel) {
          console.warn("ag-Grid: since v22.x, enableOldSetFilterModel is deprecated. Please move to the new Set Filter Model as the old one may not be supported in v23 onwards.");
        }
        if (options.floatingFilter) {
          console.warn("ag-Grid: since v23.1, floatingFilter on the gridOptions is deprecated. Please use floatingFilter on the colDef instead.");
          if (!options.defaultColDef) {
            options.defaultColDef = {};
          }
          if (options.defaultColDef.floatingFilter == null) {
            options.defaultColDef.floatingFilter = true;
          }
        }
        if (options.rowDeselection) {
          console.warn("ag-Grid: since v24.x, rowDeselection is deprecated and the behaviour is true by default. Please use `suppressRowDeselection` to prevent rows from being deselected.");
        }
        var checkRenamedProperty = function(oldProp, newProp, version) {
          if (options[oldProp] != null) {
            console.warn("ag-grid: since version " + version + ", '" + oldProp + "' is deprecated / renamed, please use the new property name '" + newProp + "' instead.");
            if (options[newProp] == null) {
              options[newProp] = options[oldProp];
            }
          }
        };
        checkRenamedProperty("batchUpdateWaitMillis", "asyncTransactionWaitMillis", "23.1.x");
        checkRenamedProperty("deltaRowDataMode", "immutableData", "23.1.x");
        if (options.immutableColumns || options.deltaColumnMode) {
          console.warn("ag-Grid: since v24.0, immutableColumns and deltaColumnMode properties are gone. The grid now works like this as default. To keep column order maintained, set grid property applyColumnDefOrder=true");
        }
        checkRenamedProperty("suppressSetColumnStateEvents", "suppressColumnStateEvents", "24.0.x");
        if (options.groupRowInnerRenderer || options.groupRowInnerRendererParams || options.groupRowInnerRendererFramework) {
          console.warn("ag-Grid: since v24.0, grid properties groupRowInnerRenderer, groupRowInnerRendererFramework and groupRowInnerRendererParams are no longer used.");
          console.warn("  Instead use the grid properties groupRowRendererParams.innerRenderer, groupRowRendererParams.innerRendererFramework and groupRowRendererParams.innerRendererParams.");
          console.warn("  For example instead of this:");
          console.warn('    groupRowInnerRenderer: "myRenderer"');
          console.warn("    groupRowInnerRendererParams: {x: a}");
          console.warn("  Replace with this:");
          console.warn("    groupRowRendererParams: {");
          console.warn('      innerRenderer: "myRenderer",');
          console.warn("      innerRendererParams: {x: a}");
          console.warn("    }");
          console.warn("  We have copied the properties over for you. However to stop this error message, please change your application code.");
          if (!options.groupRowRendererParams) {
            options.groupRowRendererParams = {};
          }
          var params = options.groupRowRendererParams;
          if (options.groupRowInnerRenderer) {
            params.innerRenderer = options.groupRowInnerRenderer;
          }
          if (options.groupRowInnerRendererParams) {
            params.innerRendererParams = options.groupRowInnerRendererParams;
          }
          if (options.groupRowInnerRendererFramework) {
            params.innerRendererFramework = options.groupRowInnerRendererFramework;
          }
        }
        if (options.rememberGroupStateWhenNewData) {
          console.warn("ag-Grid: since v24.0, grid property rememberGroupStateWhenNewData is deprecated. This feature was provided before Transaction Updates worked (which keep group state). Now that transaction updates are possible and they keep group state, this feature is no longer needed.");
        }
        if (options.detailCellRendererParams && options.detailCellRendererParams.autoHeight) {
          console.warn("ag-Grid: since v24.1, grid property detailCellRendererParams.autoHeight is replaced with grid property detailRowAutoHeight. This allows this feature to work when you provide a custom DetailCellRenderer");
          options.detailRowAutoHeight = true;
        }
        if (options.suppressKeyboardEvent) {
          console.warn("ag-Grid: since v24.1 suppressKeyboardEvent in the gridOptions has been deprecated and will be removed in\n                 future versions of ag-Grid. If you need this to be set for every column use the defaultColDef property.");
        }
      };
      GridOptionsWrapper2.prototype.checkForViolations = function() {
        if (this.isTreeData()) {
          this.treeDataViolations();
        }
      };
      GridOptionsWrapper2.prototype.treeDataViolations = function() {
        if (this.isRowModelDefault()) {
          if (missing(this.getDataPathFunc())) {
            console.warn("ag-Grid: property usingTreeData=true with rowModel=clientSide, but you did not provide getDataPath function, please provide getDataPath function if using tree data.");
          }
        }
        if (this.isRowModelServerSide()) {
          if (missing(this.getIsServerSideGroupFunc())) {
            console.warn("ag-Grid: property usingTreeData=true with rowModel=serverSide, but you did not provide isServerSideGroup function, please provide isServerSideGroup function if using tree data.");
          }
          if (missing(this.getServerSideGroupKeyFunc())) {
            console.warn("ag-Grid: property usingTreeData=true with rowModel=serverSide, but you did not provide getServerSideGroupKey function, please provide getServerSideGroupKey function if using tree data.");
          }
        }
      };
      GridOptionsWrapper2.prototype.getLocaleTextFunc = function() {
        if (this.gridOptions.localeTextFunc) {
          return this.gridOptions.localeTextFunc;
        }
        var localeText = this.gridOptions.localeText;
        return function(key, defaultValue) {
          return localeText && localeText[key] ? localeText[key] : defaultValue;
        };
      };
      GridOptionsWrapper2.prototype.globalEventHandler = function(eventName, event) {
        if (this.destroyed) {
          return;
        }
        var callbackMethodName = ComponentUtil.getCallbackForEvent(eventName);
        if (typeof this.gridOptions[callbackMethodName] === "function") {
          this.gridOptions[callbackMethodName](event);
        }
      };
      GridOptionsWrapper2.prototype.getRowHeightAsNumber = function() {
        if (!this.gridOptions.rowHeight || missing(this.gridOptions.rowHeight)) {
          return this.getDefaultRowHeight();
        }
        if (this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight)) {
          return this.gridOptions.rowHeight;
        }
        console.warn("ag-Grid row height must be a number if not using standard row model");
        return this.getDefaultRowHeight();
      };
      GridOptionsWrapper2.prototype.getRowHeightForNode = function(rowNode, allowEstimate) {
        if (allowEstimate === void 0) {
          allowEstimate = false;
        }
        if (typeof this.gridOptions.getRowHeight === "function") {
          if (allowEstimate) {
            return { height: this.getDefaultRowHeight(), estimated: true };
          }
          var params = {
            node: rowNode,
            data: rowNode.data,
            api: this.gridOptions.api,
            context: this.gridOptions.context
          };
          var height = this.gridOptions.getRowHeight(params);
          if (this.isNumeric(height)) {
            return { height, estimated: false };
          }
        }
        if (rowNode.detail && this.isMasterDetail()) {
          if (this.isNumeric(this.gridOptions.detailRowHeight)) {
            return { height: this.gridOptions.detailRowHeight, estimated: false };
          }
          return { height: DEFAULT_DETAIL_ROW_HEIGHT, estimated: false };
        }
        var defaultRowHeight = this.getDefaultRowHeight();
        var rowHeight = this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight) ? this.gridOptions.rowHeight : defaultRowHeight;
        var minRowHeight = Math.min(defaultRowHeight, rowHeight);
        if (this.columnController.isAutoRowHeightActive()) {
          if (allowEstimate) {
            return { height: rowHeight, estimated: true };
          }
          var autoHeight = this.autoHeightCalculator.getPreferredHeightForRow(rowNode);
          return { height: Math.max(autoHeight, minRowHeight), estimated: false };
        }
        return { height: rowHeight, estimated: false };
      };
      GridOptionsWrapper2.prototype.isDynamicRowHeight = function() {
        return typeof this.gridOptions.getRowHeight === "function";
      };
      GridOptionsWrapper2.prototype.getListItemHeight = function() {
        return this.getFromTheme(20, "listItemHeight");
      };
      GridOptionsWrapper2.prototype.chartMenuPanelWidth = function() {
        return this.environment.chartMenuPanelWidth();
      };
      GridOptionsWrapper2.prototype.isNumeric = function(value) {
        return !isNaN(value) && typeof value === "number" && isFinite(value);
      };
      GridOptionsWrapper2.prototype.getFromTheme = function(defaultValue, sassVariableName) {
        var theme = this.environment.getTheme().theme;
        if (theme && theme.indexOf("ag-theme") === 0) {
          return this.environment.getSassVariable(theme, sassVariableName);
        }
        return defaultValue;
      };
      GridOptionsWrapper2.prototype.getDefaultRowHeight = function() {
        return this.getFromTheme(DEFAULT_ROW_HEIGHT, "rowHeight");
      };
      var GridOptionsWrapper_1;
      GridOptionsWrapper2.MIN_COL_WIDTH = 10;
      GridOptionsWrapper2.PROP_HEADER_HEIGHT = "headerHeight";
      GridOptionsWrapper2.PROP_GROUP_REMOVE_SINGLE_CHILDREN = "groupRemoveSingleChildren";
      GridOptionsWrapper2.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN = "groupRemoveLowestSingleChildren";
      GridOptionsWrapper2.PROP_PIVOT_HEADER_HEIGHT = "pivotHeaderHeight";
      GridOptionsWrapper2.PROP_SUPPRESS_CLIPBOARD_PASTE = "suppressClipboardPaste";
      GridOptionsWrapper2.PROP_GROUP_HEADER_HEIGHT = "groupHeaderHeight";
      GridOptionsWrapper2.PROP_PIVOT_GROUP_HEADER_HEIGHT = "pivotGroupHeaderHeight";
      GridOptionsWrapper2.PROP_FLOATING_FILTERS_HEIGHT = "floatingFiltersHeight";
      GridOptionsWrapper2.PROP_SUPPRESS_ROW_CLICK_SELECTION = "suppressRowClickSelection";
      GridOptionsWrapper2.PROP_SUPPRESS_ROW_DRAG = "suppressRowDrag";
      GridOptionsWrapper2.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG = "suppressMoveWhenRowDragging";
      GridOptionsWrapper2.PROP_POPUP_PARENT = "popupParent";
      GridOptionsWrapper2.PROP_DOM_LAYOUT = "domLayout";
      GridOptionsWrapper2.PROP_FILL_HANDLE_DIRECTION = "fillHandleDirection";
      __decorate$x([
        Autowired("gridOptions")
      ], GridOptionsWrapper2.prototype, "gridOptions", void 0);
      __decorate$x([
        Autowired("columnController")
      ], GridOptionsWrapper2.prototype, "columnController", void 0);
      __decorate$x([
        Autowired("eventService")
      ], GridOptionsWrapper2.prototype, "eventService", void 0);
      __decorate$x([
        Autowired("environment")
      ], GridOptionsWrapper2.prototype, "environment", void 0);
      __decorate$x([
        Autowired("autoHeightCalculator")
      ], GridOptionsWrapper2.prototype, "autoHeightCalculator", void 0);
      __decorate$x([
        __param$3(0, Qualifier("gridApi")),
        __param$3(1, Qualifier("columnApi"))
      ], GridOptionsWrapper2.prototype, "agWire", null);
      __decorate$x([
        PreDestroy
      ], GridOptionsWrapper2.prototype, "destroy", null);
      __decorate$x([
        PostConstruct
      ], GridOptionsWrapper2.prototype, "init", null);
      GridOptionsWrapper2 = GridOptionsWrapper_1 = __decorate$x([
        Bean("gridOptionsWrapper")
      ], GridOptionsWrapper2);
      return GridOptionsWrapper2;
    }();
    var ChangedPath = function() {
      function ChangedPath2(keepingColumns, rootNode) {
        this.active = true;
        this.nodeIdsToColumns = {};
        this.mapToItems = {};
        this.keepingColumns = keepingColumns;
        this.pathRoot = {
          rowNode: rootNode,
          children: null
        };
        this.mapToItems[rootNode.id] = this.pathRoot;
      }
      ChangedPath2.prototype.setInactive = function() {
        this.active = false;
      };
      ChangedPath2.prototype.isActive = function() {
        return this.active;
      };
      ChangedPath2.prototype.depthFirstSearchChangedPath = function(pathItem, callback) {
        if (pathItem.children) {
          for (var i = 0; i < pathItem.children.length; i++) {
            this.depthFirstSearchChangedPath(pathItem.children[i], callback);
          }
        }
        callback(pathItem.rowNode);
      };
      ChangedPath2.prototype.depthFirstSearchEverything = function(rowNode, callback, traverseEverything) {
        if (rowNode.childrenAfterGroup) {
          for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
            var childNode = rowNode.childrenAfterGroup[i];
            if (childNode.childrenAfterGroup) {
              this.depthFirstSearchEverything(rowNode.childrenAfterGroup[i], callback, traverseEverything);
            } else if (traverseEverything) {
              callback(childNode);
            }
          }
        }
        callback(rowNode);
      };
      ChangedPath2.prototype.forEachChangedNodeDepthFirst = function(callback, traverseLeafNodes) {
        if (traverseLeafNodes === void 0) {
          traverseLeafNodes = false;
        }
        if (this.active) {
          this.depthFirstSearchChangedPath(this.pathRoot, callback);
        } else {
          this.depthFirstSearchEverything(this.pathRoot.rowNode, callback, traverseLeafNodes);
        }
      };
      ChangedPath2.prototype.executeFromRootNode = function(callback) {
        callback(this.pathRoot.rowNode);
      };
      ChangedPath2.prototype.createPathItems = function(rowNode) {
        var pointer = rowNode;
        var newEntryCount = 0;
        while (!this.mapToItems[pointer.id]) {
          var newEntry = {
            rowNode: pointer,
            children: null
          };
          this.mapToItems[pointer.id] = newEntry;
          newEntryCount++;
          pointer = pointer.parent;
        }
        return newEntryCount;
      };
      ChangedPath2.prototype.populateColumnsMap = function(rowNode, columns) {
        var _this = this;
        if (!this.keepingColumns || !columns) {
          return;
        }
        var pointer = rowNode;
        while (pointer) {
          if (!this.nodeIdsToColumns[pointer.id]) {
            this.nodeIdsToColumns[pointer.id] = {};
          }
          columns.forEach(function(col) {
            return _this.nodeIdsToColumns[pointer.id][col.getId()] = true;
          });
          pointer = pointer.parent;
        }
      };
      ChangedPath2.prototype.linkPathItems = function(rowNode, newEntryCount) {
        var pointer = rowNode;
        for (var i = 0; i < newEntryCount; i++) {
          var thisItem = this.mapToItems[pointer.id];
          var parentItem = this.mapToItems[pointer.parent.id];
          if (!parentItem.children) {
            parentItem.children = [];
          }
          parentItem.children.push(thisItem);
          pointer = pointer.parent;
        }
      };
      ChangedPath2.prototype.addParentNode = function(rowNode, columns) {
        if (!rowNode || rowNode.isRowPinned()) {
          return;
        }
        var newEntryCount = this.createPathItems(rowNode);
        this.linkPathItems(rowNode, newEntryCount);
        this.populateColumnsMap(rowNode, columns);
      };
      ChangedPath2.prototype.canSkip = function(rowNode) {
        return this.active && !this.mapToItems[rowNode.id];
      };
      ChangedPath2.prototype.getValueColumnsForNode = function(rowNode, valueColumns) {
        if (!this.keepingColumns) {
          return valueColumns;
        }
        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
        var result = valueColumns.filter(function(col) {
          return colsForThisNode[col.getId()];
        });
        return result;
      };
      ChangedPath2.prototype.getNotValueColumnsForNode = function(rowNode, valueColumns) {
        if (!this.keepingColumns) {
          return null;
        }
        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
        var result = valueColumns.filter(function(col) {
          return !colsForThisNode[col.getId()];
        });
        return result;
      };
      return ChangedPath2;
    }();
    var __extends$A = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$4 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var SelectionController = function(_super) {
      __extends$A(SelectionController2, _super);
      function SelectionController2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SelectionController2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("SelectionController");
        this.reset();
        if (this.gridOptionsWrapper.isRowModelDefault()) {
          this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));
        }
      };
      SelectionController2.prototype.init = function() {
        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
        this.addManagedListener(this.eventService, Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
      };
      SelectionController2.prototype.setLastSelectedNode = function(rowNode) {
        this.lastSelectedNode = rowNode;
      };
      SelectionController2.prototype.getLastSelectedNode = function() {
        return this.lastSelectedNode;
      };
      SelectionController2.prototype.getSelectedNodes = function() {
        var selectedNodes = [];
        iterateObject(this.selectedNodes, function(key, rowNode) {
          if (rowNode) {
            selectedNodes.push(rowNode);
          }
        });
        return selectedNodes;
      };
      SelectionController2.prototype.getSelectedRows = function() {
        var selectedRows = [];
        iterateObject(this.selectedNodes, function(key, rowNode) {
          if (rowNode && rowNode.data) {
            selectedRows.push(rowNode.data);
          }
        });
        return selectedRows;
      };
      SelectionController2.prototype.removeGroupsFromSelection = function() {
        var _this = this;
        iterateObject(this.selectedNodes, function(key, rowNode) {
          if (rowNode && rowNode.group) {
            _this.selectedNodes[rowNode.id] = void 0;
          }
        });
      };
      SelectionController2.prototype.updateGroupsFromChildrenSelections = function(changedPath) {
        if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {
          return;
        }
        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
          return;
        }
        var clientSideRowModel = this.rowModel;
        var rootNode = clientSideRowModel.getRootNode();
        if (!changedPath) {
          changedPath = new ChangedPath(true, rootNode);
          changedPath.setInactive();
        }
        changedPath.forEachChangedNodeDepthFirst(function(rowNode) {
          if (rowNode !== rootNode) {
            rowNode.calculateSelectedFromChildren();
          }
        });
      };
      SelectionController2.prototype.getNodeForIdIfSelected = function(id) {
        return this.selectedNodes[id];
      };
      SelectionController2.prototype.clearOtherNodes = function(rowNodeToKeepSelected) {
        var _this = this;
        var groupsToRefresh = {};
        var updatedCount = 0;
        iterateObject(this.selectedNodes, function(key, otherRowNode) {
          if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {
            var rowNode = _this.selectedNodes[otherRowNode.id];
            updatedCount += rowNode.setSelectedParams({
              newValue: false,
              clearSelection: false,
              suppressFinishActions: true
            });
            if (_this.groupSelectsChildren && otherRowNode.parent) {
              groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;
            }
          }
        });
        iterateObject(groupsToRefresh, function(key, group) {
          group.calculateSelectedFromChildren();
        });
        return updatedCount;
      };
      SelectionController2.prototype.onRowSelected = function(event) {
        var rowNode = event.node;
        if (this.groupSelectsChildren && rowNode.group) {
          return;
        }
        if (rowNode.isSelected()) {
          this.selectedNodes[rowNode.id] = rowNode;
        } else {
          this.selectedNodes[rowNode.id] = void 0;
        }
      };
      SelectionController2.prototype.syncInRowNode = function(rowNode, oldNode) {
        this.syncInOldRowNode(rowNode, oldNode);
        this.syncInNewRowNode(rowNode);
      };
      SelectionController2.prototype.syncInOldRowNode = function(rowNode, oldNode) {
        var oldNodeHasDifferentId = exists(oldNode) && rowNode.id !== oldNode.id;
        if (oldNodeHasDifferentId) {
          var oldNodeSelected = exists(this.selectedNodes[oldNode.id]);
          if (oldNodeSelected) {
            this.selectedNodes[oldNode.id] = oldNode;
          }
        }
      };
      SelectionController2.prototype.syncInNewRowNode = function(rowNode) {
        if (exists(this.selectedNodes[rowNode.id])) {
          rowNode.setSelectedInitialValue(true);
          this.selectedNodes[rowNode.id] = rowNode;
        } else {
          rowNode.setSelectedInitialValue(false);
        }
      };
      SelectionController2.prototype.reset = function() {
        this.logger.log("reset");
        this.selectedNodes = {};
        this.lastSelectedNode = null;
      };
      SelectionController2.prototype.getBestCostNodeSelection = function() {
        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
          console.warn("getBestCostNodeSelection is only available when using normal row model");
          return;
        }
        var clientSideRowModel = this.rowModel;
        var topLevelNodes = clientSideRowModel.getTopLevelNodes();
        if (topLevelNodes === null) {
          console.warn("selectAll not available doing rowModel=virtual");
          return;
        }
        var result = [];
        function traverse(nodes) {
          for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            if (node.isSelected()) {
              result.push(node);
            } else {
              if (node.group && node.children) {
                traverse(node.children);
              }
            }
          }
        }
        traverse(topLevelNodes);
        return result;
      };
      SelectionController2.prototype.setRowModel = function(rowModel) {
        this.rowModel = rowModel;
      };
      SelectionController2.prototype.isEmpty = function() {
        var count = 0;
        iterateObject(this.selectedNodes, function(nodeId, rowNode) {
          if (rowNode) {
            count++;
          }
        });
        return count === 0;
      };
      SelectionController2.prototype.deselectAllRowNodes = function(justFiltered) {
        if (justFiltered === void 0) {
          justFiltered = false;
        }
        var callback = function(rowNode) {
          return rowNode.selectThisNode(false);
        };
        var rowModelClientSide = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        if (justFiltered) {
          if (!rowModelClientSide) {
            console.error("ag-Grid: selecting just filtered only works with In Memory Row Model");
            return;
          }
          var clientSideRowModel = this.rowModel;
          clientSideRowModel.forEachNodeAfterFilter(callback);
        } else {
          iterateObject(this.selectedNodes, function(id, rowNode) {
            if (rowNode) {
              callback(rowNode);
            }
          });
          this.reset();
        }
        if (rowModelClientSide && this.groupSelectsChildren) {
          this.updateGroupsFromChildrenSelections();
        }
        var event = {
          type: Events.EVENT_SELECTION_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
      };
      SelectionController2.prototype.selectAllRowNodes = function(justFiltered) {
        if (justFiltered === void 0) {
          justFiltered = false;
        }
        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
          throw new Error("selectAll only available with normal row model, ie not " + this.rowModel.getType());
        }
        var clientSideRowModel = this.rowModel;
        var callback = function(rowNode) {
          return rowNode.selectThisNode(true);
        };
        if (justFiltered) {
          clientSideRowModel.forEachNodeAfterFilter(callback);
        } else {
          clientSideRowModel.forEachNode(callback);
        }
        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {
          this.updateGroupsFromChildrenSelections();
        }
        var event = {
          type: Events.EVENT_SELECTION_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
      };
      SelectionController2.prototype.selectNode = function(rowNode, tryMulti) {
        if (rowNode) {
          rowNode.setSelectedParams({ newValue: true, clearSelection: !tryMulti });
        }
      };
      SelectionController2.prototype.deselectIndex = function(rowIndex) {
        var node = this.rowModel.getRow(rowIndex);
        this.deselectNode(node);
      };
      SelectionController2.prototype.deselectNode = function(rowNode) {
        if (rowNode) {
          rowNode.setSelectedParams({ newValue: false, clearSelection: false });
        }
      };
      SelectionController2.prototype.selectIndex = function(index, tryMulti) {
        var node = this.rowModel.getRow(index);
        this.selectNode(node, tryMulti);
      };
      __decorate$y([
        Autowired("rowModel")
      ], SelectionController2.prototype, "rowModel", void 0);
      __decorate$y([
        Autowired("gridOptionsWrapper")
      ], SelectionController2.prototype, "gridOptionsWrapper", void 0);
      __decorate$y([
        Autowired("columnApi")
      ], SelectionController2.prototype, "columnApi", void 0);
      __decorate$y([
        Autowired("gridApi")
      ], SelectionController2.prototype, "gridApi", void 0);
      __decorate$y([
        __param$4(0, Qualifier("loggerFactory"))
      ], SelectionController2.prototype, "setBeans", null);
      __decorate$y([
        PostConstruct
      ], SelectionController2.prototype, "init", null);
      SelectionController2 = __decorate$y([
        Bean("selectionController")
      ], SelectionController2);
      return SelectionController2;
    }(BeanStub);
    var __decorate$z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ColumnApi = function() {
      function ColumnApi2() {
      }
      ColumnApi2.prototype.sizeColumnsToFit = function(gridWidth) {
        if (typeof gridWidth === "undefined") {
          console.error("ag-Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)");
        }
        this.columnController.sizeColumnsToFit(gridWidth, "api");
      };
      ColumnApi2.prototype.setColumnGroupOpened = function(group, newValue) {
        this.columnController.setColumnGroupOpened(group, newValue, "api");
      };
      ColumnApi2.prototype.getColumnGroup = function(name, instanceId) {
        return this.columnController.getColumnGroup(name, instanceId);
      };
      ColumnApi2.prototype.getOriginalColumnGroup = function(name) {
        return this.columnController.getOriginalColumnGroup(name);
      };
      ColumnApi2.prototype.getDisplayNameForColumn = function(column, location) {
        return this.columnController.getDisplayNameForColumn(column, location) || "";
      };
      ColumnApi2.prototype.getDisplayNameForColumnGroup = function(columnGroup, location) {
        return this.columnController.getDisplayNameForColumnGroup(columnGroup, location) || "";
      };
      ColumnApi2.prototype.getColumn = function(key) {
        return this.columnController.getPrimaryColumn(key);
      };
      ColumnApi2.prototype.applyColumnState = function(params) {
        return this.columnController.applyColumnState(params, "api");
      };
      ColumnApi2.prototype.getColumnState = function() {
        return this.columnController.getColumnState();
      };
      ColumnApi2.prototype.resetColumnState = function() {
        this.columnController.resetColumnState(false, "api");
      };
      ColumnApi2.prototype.getColumnGroupState = function() {
        return this.columnController.getColumnGroupState();
      };
      ColumnApi2.prototype.setColumnGroupState = function(stateItems) {
        this.columnController.setColumnGroupState(stateItems, "api");
      };
      ColumnApi2.prototype.resetColumnGroupState = function() {
        this.columnController.resetColumnGroupState("api");
      };
      ColumnApi2.prototype.isPinning = function() {
        return this.columnController.isPinningLeft() || this.columnController.isPinningRight();
      };
      ColumnApi2.prototype.isPinningLeft = function() {
        return this.columnController.isPinningLeft();
      };
      ColumnApi2.prototype.isPinningRight = function() {
        return this.columnController.isPinningRight();
      };
      ColumnApi2.prototype.getDisplayedColAfter = function(col) {
        return this.columnController.getDisplayedColAfter(col);
      };
      ColumnApi2.prototype.getDisplayedColBefore = function(col) {
        return this.columnController.getDisplayedColBefore(col);
      };
      ColumnApi2.prototype.setColumnVisible = function(key, visible) {
        this.columnController.setColumnVisible(key, visible, "api");
      };
      ColumnApi2.prototype.setColumnsVisible = function(keys2, visible) {
        this.columnController.setColumnsVisible(keys2, visible, "api");
      };
      ColumnApi2.prototype.setColumnPinned = function(key, pinned) {
        this.columnController.setColumnPinned(key, pinned, "api");
      };
      ColumnApi2.prototype.setColumnsPinned = function(keys2, pinned) {
        this.columnController.setColumnsPinned(keys2, pinned, "api");
      };
      ColumnApi2.prototype.getAllColumns = function() {
        return this.columnController.getAllPrimaryColumns();
      };
      ColumnApi2.prototype.getAllGridColumns = function() {
        return this.columnController.getAllGridColumns();
      };
      ColumnApi2.prototype.getDisplayedLeftColumns = function() {
        return this.columnController.getDisplayedLeftColumns();
      };
      ColumnApi2.prototype.getDisplayedCenterColumns = function() {
        return this.columnController.getDisplayedCenterColumns();
      };
      ColumnApi2.prototype.getDisplayedRightColumns = function() {
        return this.columnController.getDisplayedRightColumns();
      };
      ColumnApi2.prototype.getAllDisplayedColumns = function() {
        return this.columnController.getAllDisplayedColumns();
      };
      ColumnApi2.prototype.getAllDisplayedVirtualColumns = function() {
        return this.columnController.getAllDisplayedVirtualColumns();
      };
      ColumnApi2.prototype.moveColumn = function(key, toIndex) {
        if (typeof key === "number") {
          console.warn("ag-Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead");
          this.columnController.moveColumnByIndex(key, toIndex, "api");
        } else {
          this.columnController.moveColumn(key, toIndex, "api");
        }
      };
      ColumnApi2.prototype.moveColumnByIndex = function(fromIndex, toIndex) {
        this.columnController.moveColumnByIndex(fromIndex, toIndex, "api");
      };
      ColumnApi2.prototype.moveColumns = function(columnsToMoveKeys, toIndex) {
        this.columnController.moveColumns(columnsToMoveKeys, toIndex, "api");
      };
      ColumnApi2.prototype.moveRowGroupColumn = function(fromIndex, toIndex) {
        this.columnController.moveRowGroupColumn(fromIndex, toIndex);
      };
      ColumnApi2.prototype.setColumnAggFunc = function(key, aggFunc) {
        this.columnController.setColumnAggFunc(key, aggFunc);
      };
      ColumnApi2.prototype.setColumnWidth = function(key, newWidth, finished) {
        if (finished === void 0) {
          finished = true;
        }
        this.columnController.setColumnWidths([{ key, newWidth }], false, finished);
      };
      ColumnApi2.prototype.setColumnWidths = function(columnWidths, finished) {
        if (finished === void 0) {
          finished = true;
        }
        this.columnController.setColumnWidths(columnWidths, false, finished);
      };
      ColumnApi2.prototype.setPivotMode = function(pivotMode) {
        this.columnController.setPivotMode(pivotMode);
      };
      ColumnApi2.prototype.isPivotMode = function() {
        return this.columnController.isPivotMode();
      };
      ColumnApi2.prototype.getSecondaryPivotColumn = function(pivotKeys, valueColKey) {
        return this.columnController.getSecondaryPivotColumn(pivotKeys, valueColKey);
      };
      ColumnApi2.prototype.setValueColumns = function(colKeys) {
        this.columnController.setValueColumns(colKeys, "api");
      };
      ColumnApi2.prototype.getValueColumns = function() {
        return this.columnController.getValueColumns();
      };
      ColumnApi2.prototype.removeValueColumn = function(colKey) {
        this.columnController.removeValueColumn(colKey, "api");
      };
      ColumnApi2.prototype.removeValueColumns = function(colKeys) {
        this.columnController.removeValueColumns(colKeys, "api");
      };
      ColumnApi2.prototype.addValueColumn = function(colKey) {
        this.columnController.addValueColumn(colKey, "api");
      };
      ColumnApi2.prototype.addValueColumns = function(colKeys) {
        this.columnController.addValueColumns(colKeys, "api");
      };
      ColumnApi2.prototype.setRowGroupColumns = function(colKeys) {
        this.columnController.setRowGroupColumns(colKeys, "api");
      };
      ColumnApi2.prototype.removeRowGroupColumn = function(colKey) {
        this.columnController.removeRowGroupColumn(colKey, "api");
      };
      ColumnApi2.prototype.removeRowGroupColumns = function(colKeys) {
        this.columnController.removeRowGroupColumns(colKeys, "api");
      };
      ColumnApi2.prototype.addRowGroupColumn = function(colKey) {
        this.columnController.addRowGroupColumn(colKey, "api");
      };
      ColumnApi2.prototype.addRowGroupColumns = function(colKeys) {
        this.columnController.addRowGroupColumns(colKeys, "api");
      };
      ColumnApi2.prototype.getRowGroupColumns = function() {
        return this.columnController.getRowGroupColumns();
      };
      ColumnApi2.prototype.setPivotColumns = function(colKeys) {
        this.columnController.setPivotColumns(colKeys, "api");
      };
      ColumnApi2.prototype.removePivotColumn = function(colKey) {
        this.columnController.removePivotColumn(colKey, "api");
      };
      ColumnApi2.prototype.removePivotColumns = function(colKeys) {
        this.columnController.removePivotColumns(colKeys, "api");
      };
      ColumnApi2.prototype.addPivotColumn = function(colKey) {
        this.columnController.addPivotColumn(colKey, "api");
      };
      ColumnApi2.prototype.addPivotColumns = function(colKeys) {
        this.columnController.addPivotColumns(colKeys, "api");
      };
      ColumnApi2.prototype.getPivotColumns = function() {
        return this.columnController.getPivotColumns();
      };
      ColumnApi2.prototype.getLeftDisplayedColumnGroups = function() {
        return this.columnController.getLeftDisplayedColumnGroups();
      };
      ColumnApi2.prototype.getCenterDisplayedColumnGroups = function() {
        return this.columnController.getCenterDisplayedColumnGroups();
      };
      ColumnApi2.prototype.getRightDisplayedColumnGroups = function() {
        return this.columnController.getRightDisplayedColumnGroups();
      };
      ColumnApi2.prototype.getAllDisplayedColumnGroups = function() {
        return this.columnController.getAllDisplayedColumnGroups();
      };
      ColumnApi2.prototype.autoSizeColumn = function(key, skipHeader) {
        return this.columnController.autoSizeColumn(key, skipHeader, "api");
      };
      ColumnApi2.prototype.autoSizeColumns = function(keys2, skipHeader) {
        return this.columnController.autoSizeColumns(keys2, skipHeader, "api");
      };
      ColumnApi2.prototype.autoSizeAllColumns = function(skipHeader) {
        this.columnController.autoSizeAllColumns(skipHeader, "api");
      };
      ColumnApi2.prototype.setSecondaryColumns = function(colDefs) {
        this.columnController.setSecondaryColumns(colDefs, "api");
      };
      ColumnApi2.prototype.getSecondaryColumns = function() {
        return this.columnController.getSecondaryColumns();
      };
      ColumnApi2.prototype.getPrimaryColumns = function() {
        return this.columnController.getAllPrimaryColumns();
      };
      ColumnApi2.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function() {
        setTimeout(_.removeAllReferences.bind(window, this, "Column API"), 100);
      };
      ColumnApi2.prototype.columnGroupOpened = function(group, newValue) {
        console.error("ag-Grid: columnGroupOpened no longer exists, use setColumnGroupOpened");
        this.setColumnGroupOpened(group, newValue);
      };
      ColumnApi2.prototype.hideColumns = function(colIds, hide) {
        console.error("ag-Grid: hideColumns is deprecated, use setColumnsVisible");
        this.columnController.setColumnsVisible(colIds, !hide, "api");
      };
      ColumnApi2.prototype.hideColumn = function(colId, hide) {
        console.error("ag-Grid: hideColumn is deprecated, use setColumnVisible");
        this.columnController.setColumnVisible(colId, !hide, "api");
      };
      ColumnApi2.prototype.setState = function(columnState) {
        console.error("ag-Grid: setState is deprecated, use setColumnState");
        return this.setColumnState(columnState);
      };
      ColumnApi2.prototype.getState = function() {
        console.error("ag-Grid: getState is deprecated, use getColumnState");
        return this.getColumnState();
      };
      ColumnApi2.prototype.resetState = function() {
        console.error("ag-Grid: resetState is deprecated, use resetColumnState");
        this.resetColumnState();
      };
      ColumnApi2.prototype.getAggregationColumns = function() {
        console.error("ag-Grid: getAggregationColumns is deprecated, use getValueColumns");
        return this.columnController.getValueColumns();
      };
      ColumnApi2.prototype.removeAggregationColumn = function(colKey) {
        console.error("ag-Grid: removeAggregationColumn is deprecated, use removeValueColumn");
        this.columnController.removeValueColumn(colKey, "api");
      };
      ColumnApi2.prototype.removeAggregationColumns = function(colKeys) {
        console.error("ag-Grid: removeAggregationColumns is deprecated, use removeValueColumns");
        this.columnController.removeValueColumns(colKeys, "api");
      };
      ColumnApi2.prototype.addAggregationColumn = function(colKey) {
        console.error("ag-Grid: addAggregationColumn is deprecated, use addValueColumn");
        this.columnController.addValueColumn(colKey, "api");
      };
      ColumnApi2.prototype.addAggregationColumns = function(colKeys) {
        console.error("ag-Grid: addAggregationColumns is deprecated, use addValueColumns");
        this.columnController.addValueColumns(colKeys, "api");
      };
      ColumnApi2.prototype.setColumnAggFunction = function(column, aggFunc) {
        console.error("ag-Grid: setColumnAggFunction is deprecated, use setColumnAggFunc");
        this.columnController.setColumnAggFunc(column, aggFunc, "api");
      };
      ColumnApi2.prototype.getDisplayNameForCol = function(column) {
        console.error("ag-Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn");
        return this.getDisplayNameForColumn(column, null);
      };
      ColumnApi2.prototype.setColumnState = function(columnState) {
        return this.columnController.applyColumnState({ state: columnState, applyOrder: true }, "api");
      };
      __decorate$z([
        Autowired("columnController")
      ], ColumnApi2.prototype, "columnController", void 0);
      __decorate$z([
        PreDestroy
      ], ColumnApi2.prototype, "cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid", null);
      ColumnApi2 = __decorate$z([
        Bean("columnApi")
      ], ColumnApi2);
      return ColumnApi2;
    }();
    (function(SelectionHandleType) {
      SelectionHandleType[SelectionHandleType["FILL"] = 0] = "FILL";
      SelectionHandleType[SelectionHandleType["RANGE"] = 1] = "RANGE";
    })(exports.SelectionHandleType || (exports.SelectionHandleType = {}));
    (function(CellRangeType) {
      CellRangeType[CellRangeType["VALUE"] = 0] = "VALUE";
      CellRangeType[CellRangeType["DIMENSION"] = 1] = "DIMENSION";
    })(exports.CellRangeType || (exports.CellRangeType = {}));
    var __extends$B = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$A = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(DragSourceType) {
      DragSourceType[DragSourceType["ToolPanel"] = 0] = "ToolPanel";
      DragSourceType[DragSourceType["HeaderCell"] = 1] = "HeaderCell";
      DragSourceType[DragSourceType["RowDrag"] = 2] = "RowDrag";
      DragSourceType[DragSourceType["ChartPanel"] = 3] = "ChartPanel";
    })(exports.DragSourceType || (exports.DragSourceType = {}));
    (function(VerticalDirection) {
      VerticalDirection[VerticalDirection["Up"] = 0] = "Up";
      VerticalDirection[VerticalDirection["Down"] = 1] = "Down";
    })(exports.VerticalDirection || (exports.VerticalDirection = {}));
    (function(HorizontalDirection) {
      HorizontalDirection[HorizontalDirection["Left"] = 0] = "Left";
      HorizontalDirection[HorizontalDirection["Right"] = 1] = "Right";
    })(exports.HorizontalDirection || (exports.HorizontalDirection = {}));
    var DragAndDropService = function(_super) {
      __extends$B(DragAndDropService2, _super);
      function DragAndDropService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dragSourceAndParamsList = [];
        _this.dropTargets = [];
        return _this;
      }
      DragAndDropService_1 = DragAndDropService2;
      DragAndDropService2.prototype.init = function() {
        this.ePinnedIcon = createIcon("columnMovePin", this.gridOptionsWrapper, null);
        this.eHideIcon = createIcon("columnMoveHide", this.gridOptionsWrapper, null);
        this.eMoveIcon = createIcon("columnMoveMove", this.gridOptionsWrapper, null);
        this.eLeftIcon = createIcon("columnMoveLeft", this.gridOptionsWrapper, null);
        this.eRightIcon = createIcon("columnMoveRight", this.gridOptionsWrapper, null);
        this.eGroupIcon = createIcon("columnMoveGroup", this.gridOptionsWrapper, null);
        this.eAggregateIcon = createIcon("columnMoveValue", this.gridOptionsWrapper, null);
        this.ePivotIcon = createIcon("columnMovePivot", this.gridOptionsWrapper, null);
        this.eDropNotAllowedIcon = createIcon("dropNotAllowed", this.gridOptionsWrapper, null);
      };
      DragAndDropService2.prototype.addDragSource = function(dragSource, allowTouch) {
        if (allowTouch === void 0) {
          allowTouch = false;
        }
        var params = {
          eElement: dragSource.eElement,
          dragStartPixels: dragSource.dragStartPixels,
          onDragStart: this.onDragStart.bind(this, dragSource),
          onDragStop: this.onDragStop.bind(this),
          onDragging: this.onDragging.bind(this)
        };
        this.dragSourceAndParamsList.push({ params, dragSource });
        this.dragService.addDragSource(params, allowTouch);
      };
      DragAndDropService2.prototype.removeDragSource = function(dragSource) {
        var sourceAndParams = find(this.dragSourceAndParamsList, function(item) {
          return item.dragSource === dragSource;
        });
        if (sourceAndParams) {
          this.dragService.removeDragSource(sourceAndParams.params);
          removeFromArray(this.dragSourceAndParamsList, sourceAndParams);
        }
      };
      DragAndDropService2.prototype.clearDragSourceParamsList = function() {
        var _this = this;
        this.dragSourceAndParamsList.forEach(function(sourceAndParams) {
          return _this.dragService.removeDragSource(sourceAndParams.params);
        });
        this.dragSourceAndParamsList.length = 0;
      };
      DragAndDropService2.prototype.nudge = function() {
        if (this.dragging) {
          this.onDragging(this.eventLastTime, true);
        }
      };
      DragAndDropService2.prototype.onDragStart = function(dragSource, mouseEvent) {
        this.dragging = true;
        this.dragSource = dragSource;
        this.eventLastTime = mouseEvent;
        this.dragItem = this.dragSource.getDragItem();
        this.lastDropTarget = this.dragSource.dragSourceDropTarget;
        if (this.dragSource.onDragStarted) {
          this.dragSource.onDragStarted();
        }
        this.createGhost();
      };
      DragAndDropService2.prototype.onDragStop = function(mouseEvent) {
        this.eventLastTime = null;
        this.dragging = false;
        if (this.dragSource.onDragStopped) {
          this.dragSource.onDragStopped();
        }
        if (this.lastDropTarget && this.lastDropTarget.onDragStop) {
          var draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);
          this.lastDropTarget.onDragStop(draggingEvent);
        }
        this.lastDropTarget = null;
        this.dragItem = null;
        this.removeGhost();
      };
      DragAndDropService2.prototype.onDragging = function(mouseEvent, fromNudge) {
        var hDirection = this.getHorizontalDirection(mouseEvent);
        var vDirection = this.getVerticalDirection(mouseEvent);
        this.eventLastTime = mouseEvent;
        this.positionGhost(mouseEvent);
        var dropTarget = find(this.dropTargets, this.isMouseOnDropTarget.bind(this, mouseEvent));
        if (dropTarget !== this.lastDropTarget) {
          this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);
          this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
          this.lastDropTarget = dropTarget;
        } else if (dropTarget && dropTarget.onDragging) {
          var draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
          dropTarget.onDragging(draggingEvent);
        }
      };
      DragAndDropService2.prototype.enterDragTargetIfExists = function(dropTarget, mouseEvent, hDirection, vDirection, fromNudge) {
        if (!dropTarget) {
          return;
        }
        if (dropTarget.onDragEnter) {
          var dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
          dropTarget.onDragEnter(dragEnterEvent);
        }
        this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);
      };
      DragAndDropService2.prototype.leaveLastTargetIfExists = function(mouseEvent, hDirection, vDirection, fromNudge) {
        if (!this.lastDropTarget) {
          return;
        }
        if (this.lastDropTarget.onDragLeave) {
          var dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);
          this.lastDropTarget.onDragLeave(dragLeaveEvent);
        }
        this.setGhostIcon(null);
      };
      DragAndDropService2.prototype.getAllContainersFromDropTarget = function(dropTarget) {
        var containers = [dropTarget.getContainer()];
        var secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;
        if (secondaryContainers) {
          containers = containers.concat(secondaryContainers);
        }
        return containers;
      };
      DragAndDropService2.prototype.isMouseOnDropTarget = function(mouseEvent, dropTarget) {
        var mouseOverTarget = false;
        this.getAllContainersFromDropTarget(dropTarget).filter(function(eContainer) {
          return eContainer;
        }).forEach(function(eContainer) {
          var rect = eContainer.getBoundingClientRect();
          if (rect.width === 0 || rect.height === 0) {
            return;
          }
          var horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX <= rect.right;
          var verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY <= rect.bottom;
          if (horizontalFit && verticalFit) {
            mouseOverTarget = true;
          }
        });
        return mouseOverTarget && dropTarget.isInterestedIn(this.dragSource.type);
      };
      DragAndDropService2.prototype.addDropTarget = function(dropTarget) {
        this.dropTargets.push(dropTarget);
      };
      DragAndDropService2.prototype.removeDropTarget = function(dropTarget) {
        this.dropTargets = this.dropTargets.filter(function(target) {
          return target.getContainer() !== dropTarget.getContainer();
        });
      };
      DragAndDropService2.prototype.hasExternalDropZones = function() {
        return this.dropTargets.some(function(zones) {
          return zones.external;
        });
      };
      DragAndDropService2.prototype.findExternalZone = function(params) {
        var externalTargets = this.dropTargets.filter(function(target) {
          return target.external;
        });
        return find(externalTargets, function(zone) {
          return zone.getContainer() === params.getContainer();
        });
      };
      DragAndDropService2.prototype.getHorizontalDirection = function(event) {
        var clientX = this.eventLastTime.clientX;
        var eClientX = event.clientX;
        if (clientX === eClientX) {
          return null;
        }
        return clientX > eClientX ? exports.HorizontalDirection.Left : exports.HorizontalDirection.Right;
      };
      DragAndDropService2.prototype.getVerticalDirection = function(event) {
        var clientY = this.eventLastTime.clientY;
        var eClientY = event.clientY;
        if (clientY === eClientY) {
          return null;
        }
        return clientY > eClientY ? exports.VerticalDirection.Up : exports.VerticalDirection.Down;
      };
      DragAndDropService2.prototype.createDropTargetEvent = function(dropTarget, event, hDirection, vDirection, fromNudge) {
        var dropZoneTarget = dropTarget.getContainer();
        var rect = dropZoneTarget.getBoundingClientRect();
        var _a = this, api = _a.gridApi, columnApi = _a.columnApi, dragItem = _a.dragItem, dragSource = _a.dragSource;
        var x = event.clientX - rect.left;
        var y = event.clientY - rect.top;
        return { event, x, y, vDirection, hDirection, dragSource, fromNudge, dragItem, api, columnApi, dropZoneTarget };
      };
      DragAndDropService2.prototype.positionGhost = function(event) {
        var ghost = this.eGhost;
        var ghostRect = ghost.getBoundingClientRect();
        var ghostHeight = ghostRect.height;
        var browserWidth = getBodyWidth() - 2;
        var browserHeight = getBodyHeight() - 2;
        var top = event.pageY - ghostHeight / 2;
        var left = event.pageX - 10;
        var usrDocument = this.gridOptionsWrapper.getDocument();
        var windowScrollY = window.pageYOffset || usrDocument.documentElement.scrollTop;
        var windowScrollX = window.pageXOffset || usrDocument.documentElement.scrollLeft;
        if (browserWidth > 0 && left + ghost.clientWidth > browserWidth + windowScrollX) {
          left = browserWidth + windowScrollX - ghost.clientWidth;
        }
        if (left < 0) {
          left = 0;
        }
        if (browserHeight > 0 && top + ghost.clientHeight > browserHeight + windowScrollY) {
          top = browserHeight + windowScrollY - ghost.clientHeight;
        }
        if (top < 0) {
          top = 0;
        }
        ghost.style.left = left + "px";
        ghost.style.top = top + "px";
      };
      DragAndDropService2.prototype.removeGhost = function() {
        if (this.eGhost && this.eGhostParent) {
          this.eGhostParent.removeChild(this.eGhost);
        }
        this.eGhost = null;
      };
      DragAndDropService2.prototype.createGhost = function() {
        this.eGhost = loadTemplate(DragAndDropService_1.GHOST_TEMPLATE);
        var theme = this.environment.getTheme().theme;
        if (theme) {
          addCssClass(this.eGhost, theme);
        }
        this.eGhostIcon = this.eGhost.querySelector(".ag-dnd-ghost-icon");
        this.setGhostIcon(null);
        var eText = this.eGhost.querySelector(".ag-dnd-ghost-label");
        var dragItemName = this.dragSource.dragItemName;
        if (isFunction(dragItemName)) {
          dragItemName = dragItemName();
        }
        eText.innerHTML = escapeString(dragItemName);
        this.eGhost.style.height = "25px";
        this.eGhost.style.top = "20px";
        this.eGhost.style.left = "20px";
        var usrDocument = this.gridOptionsWrapper.getDocument();
        this.eGhostParent = usrDocument.querySelector("body");
        if (!this.eGhostParent) {
          console.warn("ag-Grid: could not find document body, it is needed for dragging columns");
        } else {
          this.eGhostParent.appendChild(this.eGhost);
        }
      };
      DragAndDropService2.prototype.setGhostIcon = function(iconName, shake) {
        if (shake === void 0) {
          shake = false;
        }
        clearElement(this.eGhostIcon);
        var eIcon;
        if (!iconName) {
          iconName = this.dragSource.defaultIconName || DragAndDropService_1.ICON_NOT_ALLOWED;
        }
        switch (iconName) {
          case DragAndDropService_1.ICON_PINNED:
            eIcon = this.ePinnedIcon;
            break;
          case DragAndDropService_1.ICON_MOVE:
            eIcon = this.eMoveIcon;
            break;
          case DragAndDropService_1.ICON_LEFT:
            eIcon = this.eLeftIcon;
            break;
          case DragAndDropService_1.ICON_RIGHT:
            eIcon = this.eRightIcon;
            break;
          case DragAndDropService_1.ICON_GROUP:
            eIcon = this.eGroupIcon;
            break;
          case DragAndDropService_1.ICON_AGGREGATE:
            eIcon = this.eAggregateIcon;
            break;
          case DragAndDropService_1.ICON_PIVOT:
            eIcon = this.ePivotIcon;
            break;
          case DragAndDropService_1.ICON_NOT_ALLOWED:
            eIcon = this.eDropNotAllowedIcon;
            break;
          case DragAndDropService_1.ICON_HIDE:
            eIcon = this.eHideIcon;
            break;
        }
        addOrRemoveCssClass(this.eGhostIcon, "ag-shake-left-to-right", shake);
        if (eIcon === this.eHideIcon && this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns()) {
          return;
        }
        if (eIcon) {
          this.eGhostIcon.appendChild(eIcon);
        }
      };
      var DragAndDropService_1;
      DragAndDropService2.ICON_PINNED = "pinned";
      DragAndDropService2.ICON_MOVE = "move";
      DragAndDropService2.ICON_LEFT = "left";
      DragAndDropService2.ICON_RIGHT = "right";
      DragAndDropService2.ICON_GROUP = "group";
      DragAndDropService2.ICON_AGGREGATE = "aggregate";
      DragAndDropService2.ICON_PIVOT = "pivot";
      DragAndDropService2.ICON_NOT_ALLOWED = "notAllowed";
      DragAndDropService2.ICON_HIDE = "hide";
      DragAndDropService2.GHOST_TEMPLATE = '<div class="ag-dnd-ghost ag-unselectable">\n            <span class="ag-dnd-ghost-icon ag-shake-left-to-right"></span>\n            <div class="ag-dnd-ghost-label"></div>\n        </div>';
      __decorate$A([
        Autowired("gridOptionsWrapper")
      ], DragAndDropService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$A([
        Autowired("dragService")
      ], DragAndDropService2.prototype, "dragService", void 0);
      __decorate$A([
        Autowired("environment")
      ], DragAndDropService2.prototype, "environment", void 0);
      __decorate$A([
        Autowired("columnApi")
      ], DragAndDropService2.prototype, "columnApi", void 0);
      __decorate$A([
        Autowired("gridApi")
      ], DragAndDropService2.prototype, "gridApi", void 0);
      __decorate$A([
        PostConstruct
      ], DragAndDropService2.prototype, "init", null);
      __decorate$A([
        PreDestroy
      ], DragAndDropService2.prototype, "clearDragSourceParamsList", null);
      DragAndDropService2 = DragAndDropService_1 = __decorate$A([
        Bean("dragAndDropService")
      ], DragAndDropService2);
      return DragAndDropService2;
    }(BeanStub);
    var __extends$C = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$B = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RowDragComp = function(_super) {
      __extends$C(RowDragComp2, _super);
      function RowDragComp2(rowNode, column, cellValueFn, beans) {
        var _this = _super.call(this, '<div class="ag-drag-handle ag-row-drag" aria-hidden="true"></div>') || this;
        _this.rowNode = rowNode;
        _this.column = column;
        _this.cellValueFn = cellValueFn;
        _this.beans = beans;
        return _this;
      }
      RowDragComp2.prototype.postConstruct = function() {
        var eGui = this.getGui();
        eGui.appendChild(createIconNoSpan("rowDrag", this.beans.gridOptionsWrapper, null));
        this.addDragSource();
        this.checkCompatibility();
        var strategy = this.beans.gridOptionsWrapper.isRowDragManaged() ? new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) : new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);
        this.createManagedBean(strategy, this.beans.context);
      };
      RowDragComp2.prototype.getSelectedCount = function() {
        var multiRowEnabled = this.beans.gridOptionsWrapper.isEnableMultiRowDragging();
        if (!multiRowEnabled) {
          return 1;
        }
        var selection = this.beans.selectionController.getSelectedNodes();
        return selection.indexOf(this.rowNode) !== -1 ? selection.length : 1;
      };
      RowDragComp2.prototype.checkCompatibility = function() {
        var managed = this.beans.gridOptionsWrapper.isRowDragManaged();
        var treeData = this.beans.gridOptionsWrapper.isTreeData();
        if (treeData && managed) {
          doOnce(function() {
            return console.warn("ag-Grid: If using row drag with tree data, you cannot have rowDragManaged=true");
          }, "RowDragComp.managedAndTreeData");
        }
      };
      RowDragComp2.prototype.addDragSource = function() {
        var _this = this;
        var dragItem = {
          rowNode: this.rowNode,
          columns: [this.column],
          defaultTextValue: this.cellValueFn()
        };
        var rowDragText = this.column.getColDef().rowDragText;
        var dragSource = {
          type: exports.DragSourceType.RowDrag,
          eElement: this.getGui(),
          dragItemName: function() {
            var dragItemCount = _this.getSelectedCount();
            if (rowDragText) {
              return rowDragText(dragItem, dragItemCount);
            }
            return dragItemCount === 1 ? _this.cellValueFn() : dragItemCount + " rows";
          },
          getDragItem: function() {
            return dragItem;
          },
          dragStartPixels: 0,
          dragSourceDomDataKey: this.beans.gridOptionsWrapper.getDomDataKey()
        };
        this.beans.dragAndDropService.addDragSource(dragSource, true);
        this.addDestroyFunc(function() {
          return _this.beans.dragAndDropService.removeDragSource(dragSource);
        });
      };
      __decorate$B([
        PostConstruct
      ], RowDragComp2.prototype, "postConstruct", null);
      return RowDragComp2;
    }(Component);
    var VisibilityStrategy = function(_super) {
      __extends$C(VisibilityStrategy2, _super);
      function VisibilityStrategy2(parent, rowNode, column) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.column = column;
        _this.rowNode = rowNode;
        return _this;
      }
      VisibilityStrategy2.prototype.setDisplayedOrVisible = function(neverDisplayed) {
        if (neverDisplayed) {
          this.parent.setDisplayed(false);
        } else {
          var shown = this.column.isRowDrag(this.rowNode);
          var isShownSometimes = isFunction(this.column.getColDef().rowDrag);
          if (isShownSometimes) {
            this.parent.setDisplayed(true);
            this.parent.setVisible(shown);
          } else {
            this.parent.setDisplayed(shown);
          }
        }
      };
      return VisibilityStrategy2;
    }(BeanStub);
    var NonManagedVisibilityStrategy = function(_super) {
      __extends$C(NonManagedVisibilityStrategy2, _super);
      function NonManagedVisibilityStrategy2(parent, beans, rowNode, column) {
        var _this = _super.call(this, parent, rowNode, column) || this;
        _this.beans = beans;
        return _this;
      }
      NonManagedVisibilityStrategy2.prototype.postConstruct = function() {
        this.addManagedListener(this.beans.gridOptionsWrapper, "suppressRowDrag", this.onSuppressRowDrag.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
        this.workOutVisibility();
      };
      NonManagedVisibilityStrategy2.prototype.onSuppressRowDrag = function() {
        this.workOutVisibility();
      };
      NonManagedVisibilityStrategy2.prototype.workOutVisibility = function() {
        var neverDisplayed = this.beans.gridOptionsWrapper.isSuppressRowDrag();
        this.setDisplayedOrVisible(neverDisplayed);
      };
      __decorate$B([
        PostConstruct
      ], NonManagedVisibilityStrategy2.prototype, "postConstruct", null);
      return NonManagedVisibilityStrategy2;
    }(VisibilityStrategy);
    var ManagedVisibilityStrategy = function(_super) {
      __extends$C(ManagedVisibilityStrategy2, _super);
      function ManagedVisibilityStrategy2(parent, beans, rowNode, column) {
        var _this = _super.call(this, parent, rowNode, column) || this;
        _this.beans = beans;
        return _this;
      }
      ManagedVisibilityStrategy2.prototype.postConstruct = function() {
        this.addManagedListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.beans.gridOptionsWrapper, "suppressRowDrag", this.onSuppressRowDrag.bind(this));
        this.workOutVisibility();
      };
      ManagedVisibilityStrategy2.prototype.onSuppressRowDrag = function() {
        this.workOutVisibility();
      };
      ManagedVisibilityStrategy2.prototype.workOutVisibility = function() {
        var rowDragFeature = this.beans.gridPanel.getRowDragFeature();
        var shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();
        var suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();
        var hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();
        var neverDisplayed = shouldPreventRowMove && !hasExternalDropZones || suppressRowDrag;
        this.setDisplayedOrVisible(neverDisplayed);
      };
      __decorate$B([
        PostConstruct
      ], ManagedVisibilityStrategy2.prototype, "postConstruct", null);
      return ManagedVisibilityStrategy2;
    }(VisibilityStrategy);
    var __extends$D = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$C = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var PopupEditorWrapper = function(_super) {
      __extends$D(PopupEditorWrapper2, _super);
      function PopupEditorWrapper2(cellEditor) {
        var _this = _super.call(this, '<div class="ag-popup-editor" tabindex="-1"/>') || this;
        _this.getGuiCalledOnChild = false;
        _this.cellEditor = cellEditor;
        return _this;
      }
      PopupEditorWrapper2.prototype.onKeyDown = function(event) {
        if (!isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, event, this.params.node, this.params.column, true)) {
          this.params.onKeyDown(event);
        }
      };
      PopupEditorWrapper2.prototype.getGui = function() {
        if (!this.getGuiCalledOnChild) {
          this.appendChild(this.cellEditor.getGui());
          this.getGuiCalledOnChild = true;
        }
        return _super.prototype.getGui.call(this);
      };
      PopupEditorWrapper2.prototype.init = function(params) {
        var _this = this;
        this.params = params;
        this.gridOptionsWrapper.setDomData(this.getGui(), PopupEditorWrapper2.DOM_KEY_POPUP_EDITOR_WRAPPER, true);
        this.addDestroyFunc(function() {
          return _this.destroyBean(_this.cellEditor);
        });
        this.addManagedListener(
          _super.prototype.getGui.call(this),
          "keydown",
          this.onKeyDown.bind(this)
        );
      };
      PopupEditorWrapper2.prototype.afterGuiAttached = function() {
        if (this.cellEditor.afterGuiAttached) {
          this.cellEditor.afterGuiAttached();
        }
      };
      PopupEditorWrapper2.prototype.getValue = function() {
        return this.cellEditor.getValue();
      };
      PopupEditorWrapper2.prototype.isCancelBeforeStart = function() {
        if (this.cellEditor.isCancelBeforeStart) {
          return this.cellEditor.isCancelBeforeStart();
        }
      };
      PopupEditorWrapper2.prototype.isCancelAfterEnd = function() {
        if (this.cellEditor.isCancelAfterEnd) {
          return this.cellEditor.isCancelAfterEnd();
        }
      };
      PopupEditorWrapper2.prototype.getPopupPosition = function() {
        if (this.cellEditor.getPopupPosition) {
          return this.cellEditor.getPopupPosition();
        }
      };
      PopupEditorWrapper2.prototype.focusIn = function() {
        if (this.cellEditor.focusIn) {
          this.cellEditor.focusIn();
        }
      };
      PopupEditorWrapper2.prototype.focusOut = function() {
        if (this.cellEditor.focusOut) {
          this.cellEditor.focusOut();
        }
      };
      PopupEditorWrapper2.DOM_KEY_POPUP_EDITOR_WRAPPER = "popupEditorWrapper";
      __decorate$C([
        Autowired("gridOptionsWrapper")
      ], PopupEditorWrapper2.prototype, "gridOptionsWrapper", void 0);
      return PopupEditorWrapper2;
    }(PopupComponent);
    var __extends$E = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$D = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DndSourceComp = function(_super) {
      __extends$E(DndSourceComp2, _super);
      function DndSourceComp2(rowNode, column, cellValue, beans, eCell) {
        var _this = _super.call(this, '<div class="ag-drag-handle ag-row-drag" draggable="true"></div>') || this;
        _this.rowNode = rowNode;
        _this.column = column;
        _this.cellValue = cellValue;
        _this.beans = beans;
        _this.eCell = eCell;
        return _this;
      }
      DndSourceComp2.prototype.postConstruct = function() {
        var eGui = this.getGui();
        eGui.appendChild(createIconNoSpan("rowDrag", this.beans.gridOptionsWrapper, null));
        this.addGuiEventListener("mousedown", function(e) {
          e.stopPropagation();
        });
        this.addDragSource();
        this.checkVisibility();
      };
      DndSourceComp2.prototype.addDragSource = function() {
        this.addGuiEventListener("dragstart", this.onDragStart.bind(this));
      };
      DndSourceComp2.prototype.onDragStart = function(dragEvent) {
        var _this = this;
        var providedOnRowDrag = this.column.getColDef().dndSourceOnRowDrag;
        var isIE2 = isBrowserIE();
        if (!isIE2) {
          dragEvent.dataTransfer.setDragImage(this.eCell, 0, 0);
        }
        var defaultOnRowDrag = function() {
          try {
            var jsonData = JSON.stringify(_this.rowNode.data);
            if (isIE2) {
              dragEvent.dataTransfer.setData("text", jsonData);
            } else {
              dragEvent.dataTransfer.setData("application/json", jsonData);
              dragEvent.dataTransfer.setData("text/plain", jsonData);
            }
          } catch (e) {
          }
        };
        if (providedOnRowDrag) {
          providedOnRowDrag({ rowNode: this.rowNode, dragEvent });
        } else {
          defaultOnRowDrag();
        }
      };
      DndSourceComp2.prototype.checkVisibility = function() {
        var visible = this.column.isDndSource(this.rowNode);
        this.setDisplayed(visible);
      };
      __decorate$D([
        PostConstruct
      ], DndSourceComp2.prototype, "postConstruct", null);
      return DndSourceComp2;
    }(Component);
    var __extends$F = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$1 = function() {
      __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$1.apply(this, arguments);
    };
    var __decorate$E = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TooltipStates;
    (function(TooltipStates2) {
      TooltipStates2[TooltipStates2["NOTHING"] = 0] = "NOTHING";
      TooltipStates2[TooltipStates2["WAITING_TO_SHOW"] = 1] = "WAITING_TO_SHOW";
      TooltipStates2[TooltipStates2["SHOWING"] = 2] = "SHOWING";
    })(TooltipStates || (TooltipStates = {}));
    var TooltipFeature = function(_super) {
      __extends$F(TooltipFeature2, _super);
      function TooltipFeature2(parentComp) {
        var _this = _super.call(this) || this;
        _this.DEFAULT_HIDE_TOOLTIP_TIMEOUT = 1e4;
        _this.SHOW_QUICK_TOOLTIP_DIFF = 1e3;
        _this.FADE_OUT_TOOLTIP_TIMEOUT = 1e3;
        _this.state = TooltipStates.NOTHING;
        _this.tooltipInstanceCount = 0;
        _this.tooltipMouseTrack = false;
        _this.parentComp = parentComp;
        return _this;
      }
      TooltipFeature2.prototype.postConstruct = function() {
        this.tooltipShowDelay = this.gridOptionsWrapper.getTooltipShowDelay() || 2e3;
        this.tooltipMouseTrack = this.gridOptionsWrapper.isTooltipMouseTrack();
        var el = this.parentComp.getGui();
        this.addManagedListener(el, "mouseenter", this.onMouseEnter.bind(this));
        this.addManagedListener(el, "mouseleave", this.onMouseLeave.bind(this));
        this.addManagedListener(el, "mousemove", this.onMouseMove.bind(this));
        this.addManagedListener(el, "mousedown", this.onMouseDown.bind(this));
        this.addManagedListener(el, "keydown", this.onKeyDown.bind(this));
      };
      TooltipFeature2.prototype.destroy = function() {
        this.setToDoNothing();
        _super.prototype.destroy.call(this);
      };
      TooltipFeature2.prototype.onMouseEnter = function(e) {
        if (this.state != TooltipStates.NOTHING) {
          return;
        }
        var delay = this.isLastTooltipHiddenRecently() ? 200 : this.tooltipShowDelay;
        this.showTooltipTimeoutId = window.setTimeout(this.showTooltip.bind(this), delay);
        this.lastMouseEvent = e;
        this.state = TooltipStates.WAITING_TO_SHOW;
      };
      TooltipFeature2.prototype.onMouseLeave = function() {
        this.setToDoNothing();
      };
      TooltipFeature2.prototype.onKeyDown = function() {
        this.setToDoNothing();
      };
      TooltipFeature2.prototype.setToDoNothing = function() {
        if (this.state === TooltipStates.SHOWING) {
          this.hideTooltip();
        }
        this.clearTimeouts();
        this.state = TooltipStates.NOTHING;
      };
      TooltipFeature2.prototype.onMouseMove = function(e) {
        this.lastMouseEvent = e;
        if (this.tooltipMouseTrack && this.state === TooltipStates.SHOWING && this.tooltipComp) {
          this.positionTooltipUnderLastMouseEvent();
        }
      };
      TooltipFeature2.prototype.onMouseDown = function() {
        this.setToDoNothing();
      };
      TooltipFeature2.prototype.hideTooltip = function() {
        if (this.tooltipComp) {
          this.destroyTooltipComp();
          TooltipFeature2.lastTooltipHideTime = new Date().getTime();
        }
        this.state = TooltipStates.NOTHING;
      };
      TooltipFeature2.prototype.destroyTooltipComp = function() {
        var _this = this;
        addCssClass(this.tooltipComp.getGui(), "ag-tooltip-hiding");
        var tooltipPopupDestroyFunc = this.tooltipPopupDestroyFunc;
        var tooltipComp = this.tooltipComp;
        window.setTimeout(function() {
          tooltipPopupDestroyFunc();
          _this.getContext().destroyBean(tooltipComp);
        }, this.FADE_OUT_TOOLTIP_TIMEOUT);
        this.tooltipPopupDestroyFunc = void 0;
        this.tooltipComp = void 0;
      };
      TooltipFeature2.prototype.isLastTooltipHiddenRecently = function() {
        var now = new Date().getTime();
        var then = TooltipFeature2.lastTooltipHideTime;
        return now - then < this.SHOW_QUICK_TOOLTIP_DIFF;
      };
      TooltipFeature2.prototype.showTooltip = function() {
        var params = __assign$1({ api: this.gridApi, columnApi: this.columnApi, context: this.gridOptionsWrapper.getContext() }, this.parentComp.getTooltipParams());
        if (!exists(params.value)) {
          this.setToDoNothing();
          return;
        }
        this.state = TooltipStates.SHOWING;
        this.tooltipInstanceCount++;
        var callback = this.newTooltipComponentCallback.bind(this, this.tooltipInstanceCount);
        this.userComponentFactory.newTooltipComponent(params).then(callback);
      };
      TooltipFeature2.prototype.newTooltipComponentCallback = function(tooltipInstanceCopy, tooltipComp) {
        var compNoLongerNeeded = this.state !== TooltipStates.SHOWING || this.tooltipInstanceCount !== tooltipInstanceCopy;
        if (compNoLongerNeeded) {
          this.getContext().destroyBean(tooltipComp);
          return;
        }
        var eGui = tooltipComp.getGui();
        this.tooltipComp = tooltipComp;
        if (!containsClass(eGui, "ag-tooltip")) {
          addCssClass(eGui, "ag-tooltip-custom");
        }
        this.tooltipPopupDestroyFunc = this.popupService.addPopup({
          eChild: eGui
        });
        this.positionTooltipUnderLastMouseEvent();
        this.hideTooltipTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.DEFAULT_HIDE_TOOLTIP_TIMEOUT);
      };
      TooltipFeature2.prototype.positionTooltipUnderLastMouseEvent = function() {
        this.popupService.positionPopupUnderMouseEvent({
          type: "tooltip",
          mouseEvent: this.lastMouseEvent,
          ePopup: this.tooltipComp.getGui(),
          nudgeY: 18
        });
      };
      TooltipFeature2.prototype.clearTimeouts = function() {
        if (this.showTooltipTimeoutId) {
          window.clearTimeout(this.showTooltipTimeoutId);
          this.showTooltipTimeoutId = void 0;
        }
        if (this.hideTooltipTimeoutId) {
          window.clearTimeout(this.hideTooltipTimeoutId);
          this.hideTooltipTimeoutId = void 0;
        }
      };
      __decorate$E([
        Autowired("popupService")
      ], TooltipFeature2.prototype, "popupService", void 0);
      __decorate$E([
        Autowired("userComponentFactory")
      ], TooltipFeature2.prototype, "userComponentFactory", void 0);
      __decorate$E([
        Autowired("columnApi")
      ], TooltipFeature2.prototype, "columnApi", void 0);
      __decorate$E([
        Autowired("gridApi")
      ], TooltipFeature2.prototype, "gridApi", void 0);
      __decorate$E([
        Autowired("gridOptionsWrapper")
      ], TooltipFeature2.prototype, "gridOptionsWrapper", void 0);
      __decorate$E([
        PostConstruct
      ], TooltipFeature2.prototype, "postConstruct", null);
      return TooltipFeature2;
    }(BeanStub);
    var __extends$G = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$2 = function() {
      __assign$2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$2.apply(this, arguments);
    };
    var CSS_CELL = "ag-cell";
    var CSS_CELL_VALUE = "ag-cell-value";
    var CSS_AUTO_HEIGHT = "ag-cell-auto-height";
    var CSS_RANGE_TOP = "ag-cell-range-top";
    var CSS_RANGE_RIGHT = "ag-cell-range-right";
    var CSS_RANGE_BOTTOM = "ag-cell-range-bottom";
    var CSS_RANGE_LEFT = "ag-cell-range-left";
    var CSS_CELL_FOCUS = "ag-cell-focus";
    var CSS_FIRST_RIGHT_PINNED = "ag-cell-first-right-pinned";
    var CSS_LAST_LEFT_PINNED = "ag-cell-last-left-pinned";
    var CSS_NOT_INLINE_EDITING = "ag-cell-not-inline-editing";
    var CSS_INLINE_EDITING = "ag-cell-inline-editing";
    var CSS_POPUP_EDITING = "ag-cell-popup-editing";
    var CSS_RANGE_SELECTED = "ag-cell-range-selected";
    var CSS_COLUMN_HOVER = "ag-column-hover";
    var CSS_CELL_WRAP_TEXT = "ag-cell-wrap-text";
    var CSS_RANGE_CHART = "ag-cell-range-chart";
    var CSS_RANGE_SINGLE_CELL = "ag-cell-range-single-cell";
    var CSS_RANGE_CHART_CATEGORY = "ag-cell-range-chart-category";
    var CSS_RANGE_HANDLE = "ag-cell-range-handle";
    var CellComp = function(_super) {
      __extends$G(CellComp2, _super);
      function CellComp2(scope, beans, column, rowNode, rowComp, autoHeightCell, printLayout) {
        var _this = _super.call(this) || this;
        _this.hasChartRange = false;
        _this.editingCell = false;
        _this.suppressRefreshCell = false;
        _this.tooltipFeatureEnabled = false;
        _this.scope = null;
        _this.cellEditorVersion = 0;
        _this.cellRendererVersion = 0;
        _this.scope = scope;
        _this.beans = beans;
        _this.column = column;
        _this.rowNode = rowNode;
        _this.rowComp = rowComp;
        _this.autoHeightCell = autoHeightCell;
        _this.printLayout = printLayout;
        _this.createGridCellVo();
        _this.rangeSelectionEnabled = _this.beans.rangeController && beans.gridOptionsWrapper.isEnableRangeSelection();
        _this.cellFocused = _this.beans.focusController.isCellFocused(_this.cellPosition);
        _this.firstRightPinned = _this.column.isFirstRightPinned();
        _this.lastLeftPinned = _this.column.isLastLeftPinned();
        if (_this.rangeSelectionEnabled && _this.beans.rangeController) {
          var rangeController = _this.beans.rangeController;
          _this.rangeCount = rangeController.getCellRangeCount(_this.cellPosition);
          _this.hasChartRange = _this.getHasChartRange();
        }
        _this.getValueAndFormat();
        _this.setUsingWrapper();
        _this.chooseCellRenderer();
        _this.setupColSpan();
        _this.rowSpan = _this.column.getRowSpan(_this.rowNode);
        return _this;
      }
      CellComp2.prototype.getCreateTemplate = function() {
        var unselectable = !this.beans.gridOptionsWrapper.isEnableCellTextSelection() ? 'unselectable="on"' : "";
        var templateParts = [];
        var col = this.column;
        var width = this.getCellWidth();
        var left = this.modifyLeftForPrintLayout(this.getCellLeft());
        var valueToRender = this.getInitialValueToRender();
        var valueSanitised = get(this.column, "colDef.template", null) ? valueToRender : escapeString(valueToRender);
        this.tooltip = this.getToolTip();
        var tooltipSanitised = escapeString(this.tooltip);
        var colIdSanitised = escapeString(col.getId());
        var wrapperStartTemplate = "";
        var wrapperEndTemplate = "";
        var stylesFromColDef = this.preProcessStylesFromColDef();
        var cssClasses = this.getInitialCssClasses();
        var stylesForRowSpanning = this.getStylesForRowSpanning();
        var colIdxSanitised = escapeString(this.beans.columnController.getAriaColumnIndex(this.column).toString());
        templateParts.push("<div");
        templateParts.push(' tabindex="-1"');
        templateParts.push(" " + unselectable);
        templateParts.push(' role="gridcell"');
        templateParts.push(' aria-colindex="' + colIdxSanitised + '"');
        templateParts.push(' comp-id="' + this.getCompId() + '" ');
        templateParts.push(' col-id="' + colIdSanitised + '"');
        templateParts.push(' class="' + escapeString(cssClasses.join(" ")) + '"');
        if (this.beans.gridOptionsWrapper.isEnableBrowserTooltips() && exists(tooltipSanitised)) {
          templateParts.push(' title="' + tooltipSanitised + '"');
        }
        if (this.rangeSelectionEnabled) {
          templateParts.push(' aria-selected="' + (this.rangeCount ? "true" : "false") + '"');
        }
        if (this.usingWrapper) {
          wrapperStartTemplate = '<div ref="eCellWrapper" class="ag-cell-wrapper" role="presentation">\n                    <span ref="eCellValue" role="presentation" class="' + CSS_CELL_VALUE + '" ' + unselectable + ">";
          wrapperEndTemplate = "</span></div>";
        }
        templateParts.push(' style="width: ' + Number(width) + "px; left: " + Number(left) + "px; " + escapeString(stylesFromColDef) + " " + escapeString(stylesForRowSpanning) + '">');
        templateParts.push(wrapperStartTemplate);
        if (exists(valueSanitised, true)) {
          templateParts.push(valueSanitised);
        }
        templateParts.push(wrapperEndTemplate);
        templateParts.push("</div>");
        return templateParts.join("");
      };
      CellComp2.prototype.getStylesForRowSpanning = function() {
        if (this.rowSpan === 1) {
          return "";
        }
        var singleRowHeight = this.beans.gridOptionsWrapper.getRowHeightAsNumber();
        var totalRowHeight = singleRowHeight * this.rowSpan;
        return "height: " + totalRowHeight + "px; z-index: 1;";
      };
      CellComp2.prototype.afterAttached = function() {
        var querySelector = '[comp-id="' + this.getCompId() + '"]';
        var eGui = this.eParentRow.querySelector(querySelector);
        this.setGui(eGui);
        this.addDomData();
        this.populateTemplate();
        this.createCellRendererInstance(true);
        this.angular1Compile();
        this.refreshHandle();
        if (exists(this.tooltip)) {
          this.createTooltipFeatureIfNeeded();
        }
      };
      CellComp2.prototype.createTooltipFeatureIfNeeded = function() {
        if (this.beans.gridOptionsWrapper.isEnableBrowserTooltips() || this.tooltipFeatureEnabled) {
          return;
        }
        this.createManagedBean(new TooltipFeature(this), this.beans.context);
        this.tooltipFeatureEnabled = true;
      };
      CellComp2.prototype.onColumnHover = function() {
        var isHovered = this.beans.columnHoverService.isHovered(this.column);
        this.addOrRemoveCssClass(CSS_COLUMN_HOVER, isHovered);
      };
      CellComp2.prototype.onCellChanged = function(event) {
        var eventImpactsThisCell = event.column === this.column;
        if (eventImpactsThisCell) {
          this.refreshCell({});
        }
      };
      CellComp2.prototype.getCellLeft = function() {
        var mostLeftCol;
        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
          mostLeftCol = last(this.colsSpanning);
        } else {
          mostLeftCol = this.column;
        }
        return mostLeftCol.getLeft();
      };
      CellComp2.prototype.getCellWidth = function() {
        if (!this.colsSpanning) {
          return this.column.getActualWidth();
        }
        return this.colsSpanning.reduce(function(width, col) {
          return width + col.getActualWidth();
        }, 0);
      };
      CellComp2.prototype.onFlashCells = function(event) {
        var cellId = this.beans.cellPositionUtils.createId(this.cellPosition);
        var shouldFlash = event.cells[cellId];
        if (shouldFlash) {
          this.animateCell("highlight");
        }
      };
      CellComp2.prototype.setupColSpan = function() {
        if (missing(this.getComponentHolder().colSpan)) {
          return;
        }
        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));
        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));
        this.colsSpanning = this.getColSpanningList();
      };
      CellComp2.prototype.getColSpanningList = function() {
        var colSpan = this.column.getColSpan(this.rowNode);
        var colsSpanning = [];
        if (colSpan === 1) {
          colsSpanning.push(this.column);
        } else {
          var pointer = this.column;
          var pinned = this.column.getPinned();
          for (var i = 0; pointer && i < colSpan; i++) {
            colsSpanning.push(pointer);
            pointer = this.beans.columnController.getDisplayedColAfter(pointer);
            if (!pointer || missing(pointer)) {
              break;
            }
            if (pinned !== pointer.getPinned()) {
              break;
            }
          }
        }
        return colsSpanning;
      };
      CellComp2.prototype.onDisplayColumnsChanged = function() {
        var colsSpanning = this.getColSpanningList();
        if (!areEqual(this.colsSpanning, colsSpanning)) {
          this.colsSpanning = colsSpanning;
          this.onWidthChanged();
          this.onLeftChanged();
        }
      };
      CellComp2.prototype.refreshAriaIndex = function() {
        var colIdx = this.beans.columnController.getAriaColumnIndex(this.column);
        setAriaColIndex(this.getGui(), colIdx);
      };
      CellComp2.prototype.getInitialCssClasses = function() {
        var cssClasses = [CSS_CELL, CSS_NOT_INLINE_EDITING];
        if (!this.autoHeightCell) {
          cssClasses.push(CSS_AUTO_HEIGHT);
        }
        var doingFocusCss = !this.beans.gridOptionsWrapper.isSuppressCellSelection();
        if (doingFocusCss && this.cellFocused) {
          cssClasses.push(CSS_CELL_FOCUS);
        }
        if (this.firstRightPinned) {
          cssClasses.push(CSS_FIRST_RIGHT_PINNED);
        }
        if (this.lastLeftPinned) {
          cssClasses.push(CSS_LAST_LEFT_PINNED);
        }
        if (this.beans.columnHoverService.isHovered(this.column)) {
          cssClasses.push(CSS_COLUMN_HOVER);
        }
        pushAll(cssClasses, this.preProcessClassesFromColDef());
        pushAll(cssClasses, this.preProcessCellClassRules());
        pushAll(cssClasses, this.getInitialRangeClasses());
        if (!this.usingWrapper) {
          cssClasses.push(CSS_CELL_VALUE);
        }
        if (this.column.getColDef().wrapText) {
          cssClasses.push(CSS_CELL_WRAP_TEXT);
        }
        return cssClasses;
      };
      CellComp2.prototype.getInitialValueToRender = function() {
        if (this.usingCellRenderer) {
          if (typeof this.cellRendererGui === "string") {
            return this.cellRendererGui;
          }
          return "";
        }
        var colDef = this.getComponentHolder();
        if (colDef.template) {
          return colDef.template;
        }
        if (colDef.templateUrl) {
          var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));
          return template || "";
        }
        return this.getValueToUse();
      };
      CellComp2.prototype.getRenderedRow = function() {
        return this.rowComp;
      };
      CellComp2.prototype.isSuppressNavigable = function() {
        return this.column.isSuppressNavigable(this.rowNode);
      };
      CellComp2.prototype.getCellRenderer = function() {
        return this.cellRenderer;
      };
      CellComp2.prototype.getCellEditor = function() {
        return this.cellEditor;
      };
      CellComp2.prototype.refreshCell = function(params) {
        if (this.suppressRefreshCell || this.editingCell) {
          return;
        }
        var colDef = this.getComponentHolder();
        var newData = params && params.newData;
        var suppressFlash = params && params.suppressFlash || colDef.suppressCellFlash;
        var forceRefresh = params && params.forceRefresh;
        var oldValue = this.value;
        this.value = this.getValue();
        var valuesDifferent = !this.valuesAreEqual(oldValue, this.value);
        var dataNeedsUpdating = forceRefresh || valuesDifferent;
        if (dataNeedsUpdating) {
          this.valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, this.value);
          var cellRendererRefreshed = newData ? false : this.attemptCellRendererRefresh();
          if (!cellRendererRefreshed) {
            this.replaceContentsAfterRefresh();
          }
          var processingFilterChange = this.beans.filterManager.isSuppressFlashingCellsBecauseFiltering();
          var flashCell = !suppressFlash && !processingFilterChange && (this.beans.gridOptionsWrapper.isEnableCellChangeFlash() || colDef.enableCellChangeFlash);
          if (flashCell) {
            this.flashCell();
          }
          this.postProcessStylesFromColDef();
          this.postProcessClassesFromColDef();
        }
        this.updateAngular1ScopeAndCompile();
        this.refreshToolTip();
        this.postProcessCellClassRules();
      };
      CellComp2.prototype.flashCell = function(delays) {
        var flashDelay = delays && delays.flashDelay;
        var fadeDelay = delays && delays.fadeDelay;
        this.animateCell("data-changed", flashDelay, fadeDelay);
      };
      CellComp2.prototype.animateCell = function(cssName, flashDelay, fadeDelay) {
        var _this = this;
        var fullName = "ag-cell-" + cssName;
        var animationFullName = "ag-cell-" + cssName + "-animation";
        var element = this.getGui();
        var gridOptionsWrapper = this.beans.gridOptionsWrapper;
        if (!flashDelay) {
          flashDelay = gridOptionsWrapper.getCellFlashDelay();
        }
        if (!fadeDelay) {
          fadeDelay = gridOptionsWrapper.getCellFadeDelay();
        }
        this.addCssClass(fullName);
        this.removeCssClass(animationFullName);
        window.setTimeout(function() {
          _this.removeCssClass(fullName);
          _this.addCssClass(animationFullName);
          element.style.transition = "background-color " + fadeDelay + "ms";
          window.setTimeout(function() {
            _this.removeCssClass(animationFullName);
            element.style.transition = null;
          }, fadeDelay);
        }, flashDelay);
      };
      CellComp2.prototype.replaceContentsAfterRefresh = function() {
        clearElement(this.eCellValue);
        this.cellRenderer = this.beans.context.destroyBean(this.cellRenderer);
        this.cellRendererGui = null;
        this.putDataIntoCellAfterRefresh();
        this.updateAngular1ScopeAndCompile();
      };
      CellComp2.prototype.updateAngular1ScopeAndCompile = function() {
        if (this.beans.gridOptionsWrapper.isAngularCompileRows() && this.scope) {
          this.scope.data = __assign$2({}, this.rowNode.data);
          this.angular1Compile();
        }
      };
      CellComp2.prototype.angular1Compile = function() {
        if (this.beans.gridOptionsWrapper.isAngularCompileRows()) {
          var eGui = this.getGui();
          if (!eGui.classList.contains("ng-scope") || eGui.childElementCount === 0) {
            var compiledElement_1 = this.beans.$compile(eGui)(this.scope);
            this.addDestroyFunc(function() {
              return compiledElement_1.remove();
            });
          }
        }
      };
      CellComp2.prototype.postProcessStylesFromColDef = function() {
        var stylesToUse = this.processStylesFromColDef();
        if (stylesToUse) {
          addStylesToElement(this.getGui(), stylesToUse);
        }
      };
      CellComp2.prototype.preProcessStylesFromColDef = function() {
        return cssStyleObjectToMarkup(this.processStylesFromColDef());
      };
      CellComp2.prototype.processStylesFromColDef = function() {
        var colDef = this.getComponentHolder();
        if (colDef.cellStyle) {
          var cssToUse = void 0;
          if (typeof colDef.cellStyle === "function") {
            var cellStyleParams = {
              value: this.value,
              data: this.rowNode.data,
              node: this.rowNode,
              colDef,
              column: this.column,
              $scope: this.scope,
              context: this.beans.gridOptionsWrapper.getContext(),
              api: this.beans.gridOptionsWrapper.getApi()
            };
            var cellStyleFunc = colDef.cellStyle;
            cssToUse = cellStyleFunc(cellStyleParams);
          } else {
            cssToUse = colDef.cellStyle;
          }
          return cssToUse;
        }
      };
      CellComp2.prototype.postProcessClassesFromColDef = function() {
        var _this = this;
        this.processClassesFromColDef(function(className) {
          return _this.addCssClass(className);
        });
      };
      CellComp2.prototype.preProcessClassesFromColDef = function() {
        var res = [];
        this.processClassesFromColDef(function(className) {
          return res.push(className);
        });
        return res;
      };
      CellComp2.prototype.processClassesFromColDef = function(onApplicableClass) {
        var colDef = this.getComponentHolder();
        this.beans.stylingService.processStaticCellClasses(colDef, {
          value: this.value,
          data: this.rowNode.data,
          node: this.rowNode,
          colDef,
          rowIndex: this.rowNode.rowIndex,
          $scope: this.scope,
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext()
        }, onApplicableClass);
      };
      CellComp2.prototype.putDataIntoCellAfterRefresh = function() {
        var colDef = this.getComponentHolder();
        if (colDef.template) {
          this.eCellValue.innerHTML = colDef.template;
        } else if (colDef.templateUrl) {
          var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));
          if (template) {
            this.eCellValue.innerHTML = template;
          }
        } else {
          this.chooseCellRenderer();
          if (this.usingCellRenderer) {
            this.createCellRendererInstance();
          } else {
            var valueToUse = this.getValueToUse();
            if (valueToUse != null) {
              this.eCellValue.innerHTML = escapeString(valueToUse);
            }
          }
        }
      };
      CellComp2.prototype.attemptCellRendererRefresh = function() {
        if (missing(this.cellRenderer) || !this.cellRenderer || missing(this.cellRenderer.refresh)) {
          return false;
        }
        var params = this.createCellRendererParams();
        var finalParams = this.beans.userComponentFactory.createFinalParams(this.getComponentHolder(), this.cellRendererType, params);
        var result = this.cellRenderer.refresh(finalParams);
        return result === true || result === void 0;
      };
      CellComp2.prototype.refreshToolTip = function() {
        var newTooltip = this.getToolTip();
        if (this.tooltip === newTooltip) {
          return;
        }
        this.createTooltipFeatureIfNeeded();
        var hasNewTooltip = exists(newTooltip);
        if (hasNewTooltip && this.tooltip === newTooltip.toString()) {
          return;
        }
        this.tooltip = newTooltip;
        if (this.beans.gridOptionsWrapper.isEnableBrowserTooltips()) {
          if (hasNewTooltip) {
            this.eCellValue.setAttribute("title", this.tooltip);
          } else {
            this.eCellValue.removeAttribute("title");
          }
        }
      };
      CellComp2.prototype.valuesAreEqual = function(val1, val2) {
        var colDef = this.getComponentHolder();
        var equalsMethod = colDef ? colDef.equals : null;
        return equalsMethod ? equalsMethod(val1, val2) : val1 === val2;
      };
      CellComp2.prototype.getToolTip = function() {
        var colDef = this.getComponentHolder();
        var data = this.rowNode.data;
        if (colDef.tooltipField && exists(data)) {
          return getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());
        }
        var valueGetter = colDef.tooltipValueGetter;
        if (valueGetter) {
          return valueGetter(__assign$2(__assign$2({ api: this.beans.gridOptionsWrapper.getApi(), columnApi: this.beans.gridOptionsWrapper.getColumnApi(), context: this.beans.gridOptionsWrapper.getContext() }, this.getTooltipParams()), { value: this.value }));
        }
        return null;
      };
      CellComp2.prototype.getTooltipParams = function() {
        return {
          location: "cell",
          colDef: this.getComponentHolder(),
          column: this.getColumn(),
          rowIndex: this.cellPosition.rowIndex,
          node: this.rowNode,
          data: this.rowNode.data,
          value: this.getTooltipText(),
          valueFormatted: this.valueFormatted
        };
      };
      CellComp2.prototype.getTooltipText = function(escape) {
        if (escape === void 0) {
          escape = true;
        }
        return escape ? escapeString(this.tooltip) : this.tooltip;
      };
      CellComp2.prototype.processCellClassRules = function(onApplicableClass, onNotApplicableClass) {
        var colDef = this.getComponentHolder();
        this.beans.stylingService.processClassRules(colDef.cellClassRules, {
          value: this.value,
          data: this.rowNode.data,
          node: this.rowNode,
          colDef,
          rowIndex: this.cellPosition.rowIndex,
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          $scope: this.scope,
          context: this.beans.gridOptionsWrapper.getContext()
        }, onApplicableClass, onNotApplicableClass);
      };
      CellComp2.prototype.postProcessCellClassRules = function() {
        var _this = this;
        this.processCellClassRules(function(className) {
          return _this.addCssClass(className);
        }, function(className) {
          return _this.removeCssClass(className);
        });
      };
      CellComp2.prototype.preProcessCellClassRules = function() {
        var res = [];
        this.processCellClassRules(function(className) {
          return res.push(className);
        }, function(_2) {
        });
        return res;
      };
      CellComp2.prototype.setUsingWrapper = function() {
        var colDef = this.getComponentHolder();
        if (this.rowNode.rowPinned) {
          this.usingWrapper = false;
          this.includeSelectionComponent = false;
          this.includeRowDraggingComponent = false;
          this.includeDndSourceComponent = false;
          return;
        }
        var cbSelectionIsFunc = typeof colDef.checkboxSelection === "function";
        var rowDraggableIsFunc = typeof colDef.rowDrag === "function";
        var dndSourceIsFunc = typeof colDef.dndSource === "function";
        this.includeSelectionComponent = cbSelectionIsFunc || colDef.checkboxSelection === true;
        this.includeRowDraggingComponent = rowDraggableIsFunc || colDef.rowDrag === true;
        this.includeDndSourceComponent = dndSourceIsFunc || colDef.dndSource === true;
        var enableTextSelection = this.beans.gridOptionsWrapper.isEnableCellTextSelection();
        this.usingWrapper = enableTextSelection || this.includeRowDraggingComponent || this.includeSelectionComponent || this.includeDndSourceComponent;
      };
      CellComp2.prototype.chooseCellRenderer = function() {
        var colDef = this.getComponentHolder();
        if (colDef.template || colDef.templateUrl) {
          this.usingCellRenderer = false;
          return;
        }
        var params = this.createCellRendererParams();
        if (this.rowNode.rowPinned && this.beans.userComponentFactory.lookupComponentClassDef(colDef, "pinnedRowCellRenderer", params)) {
          this.cellRendererType = CellComp2.CELL_RENDERER_TYPE_PINNED;
          this.usingCellRenderer = true;
        } else if (this.beans.userComponentFactory.lookupComponentClassDef(colDef, "cellRenderer", params)) {
          this.cellRendererType = CellComp2.CELL_RENDERER_TYPE_NORMAL;
          this.usingCellRenderer = true;
        } else {
          this.usingCellRenderer = false;
        }
      };
      CellComp2.prototype.createCellRendererInstance = function(useTaskService) {
        var _this = this;
        if (useTaskService === void 0) {
          useTaskService = false;
        }
        if (!this.usingCellRenderer) {
          return;
        }
        var angularCompileRows = this.beans.gridOptionsWrapper.isAngularCompileRows();
        var suppressAnimationFrame = this.beans.gridOptionsWrapper.isSuppressAnimationFrame();
        if (angularCompileRows || suppressAnimationFrame || this.autoHeightCell) {
          useTaskService = false;
        }
        var params = this.createCellRendererParams();
        this.cellRendererVersion++;
        var callback = this.afterCellRendererCreated.bind(this, this.cellRendererVersion);
        var cellRendererTypeNormal = this.cellRendererType === CellComp2.CELL_RENDERER_TYPE_NORMAL;
        this.createCellRendererFunc = function() {
          _this.createCellRendererFunc = null;
          var componentPromise = _this.beans.userComponentFactory.newCellRenderer(_this.getComponentHolder(), params, !cellRendererTypeNormal);
          if (componentPromise) {
            componentPromise.then(callback);
          }
        };
        if (useTaskService) {
          this.beans.taskQueue.createTask(this.createCellRendererFunc, this.rowNode.rowIndex, "createTasksP2");
        } else {
          this.createCellRendererFunc();
        }
      };
      CellComp2.prototype.afterCellRendererCreated = function(cellRendererVersion, cellRenderer) {
        var cellRendererNotRequired = !this.isAlive() || cellRendererVersion !== this.cellRendererVersion;
        if (cellRendererNotRequired) {
          this.beans.context.destroyBean(cellRenderer);
          return;
        }
        this.cellRenderer = cellRenderer;
        this.cellRendererGui = this.cellRenderer.getGui();
        if (missing(this.cellRendererGui)) {
          return;
        }
        if (!this.editingCell) {
          this.eCellValue.appendChild(this.cellRendererGui);
        }
      };
      CellComp2.prototype.createCellRendererParams = function() {
        var _this = this;
        return {
          value: this.value,
          valueFormatted: this.valueFormatted,
          getValue: this.getValue.bind(this),
          setValue: function(value) {
            return _this.beans.valueService.setValue(_this.rowNode, _this.column, value);
          },
          formatValue: this.formatValue.bind(this),
          data: this.rowNode.data,
          node: this.rowNode,
          colDef: this.getComponentHolder(),
          column: this.column,
          $scope: this.scope,
          rowIndex: this.cellPosition.rowIndex,
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext(),
          refreshCell: this.refreshCell.bind(this),
          eGridCell: this.getGui(),
          eParentOfValue: this.eCellValue,
          addRowCompListener: this.rowComp ? this.rowComp.addEventListener.bind(this.rowComp) : null,
          addRenderedRowListener: function(eventType, listener) {
            console.warn("ag-Grid: since ag-Grid .v11, params.addRenderedRowListener() is now params.addRowCompListener()");
            if (_this.rowComp) {
              _this.rowComp.addEventListener(eventType, listener);
            }
          }
        };
      };
      CellComp2.prototype.formatValue = function(value) {
        var valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, value);
        return valueFormatted != null ? valueFormatted : value;
      };
      CellComp2.prototype.getValueToUse = function() {
        return this.valueFormatted != null ? this.valueFormatted : this.value;
      };
      CellComp2.prototype.getValueAndFormat = function() {
        this.value = this.getValue();
        this.valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, this.value);
      };
      CellComp2.prototype.getValue = function() {
        var lockedClosedGroup = this.rowNode.leafGroup && this.beans.columnController.isPivotMode();
        var isOpenGroup = this.rowNode.group && this.rowNode.expanded && !this.rowNode.footer && !lockedClosedGroup;
        var groupFootersEnabled = this.beans.gridOptionsWrapper.isGroupIncludeFooter();
        var groupAlwaysShowAggData = this.beans.gridOptionsWrapper.isGroupSuppressBlankHeader();
        var ignoreAggData = isOpenGroup && groupFootersEnabled && !groupAlwaysShowAggData;
        return this.beans.valueService.getValue(this.column, this.rowNode, false, ignoreAggData);
      };
      CellComp2.prototype.onMouseEvent = function(eventName, mouseEvent) {
        if (isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        switch (eventName) {
          case "click":
            this.onCellClicked(mouseEvent);
            break;
          case "mousedown":
            this.onMouseDown(mouseEvent);
            break;
          case "dblclick":
            this.onCellDoubleClicked(mouseEvent);
            break;
          case "mouseout":
            this.onMouseOut(mouseEvent);
            break;
          case "mouseover":
            this.onMouseOver(mouseEvent);
            break;
        }
      };
      CellComp2.prototype.dispatchCellContextMenuEvent = function(event) {
        var colDef = this.getComponentHolder();
        var cellContextMenuEvent = this.createEvent(event, Events.EVENT_CELL_CONTEXT_MENU);
        this.beans.eventService.dispatchEvent(cellContextMenuEvent);
        if (colDef.onCellContextMenu) {
          window.setTimeout(function() {
            return colDef.onCellContextMenu(cellContextMenuEvent);
          }, 0);
        }
      };
      CellComp2.prototype.createEvent = function(domEvent, eventType) {
        var event = {
          node: this.rowNode,
          data: this.rowNode.data,
          value: this.value,
          column: this.column,
          colDef: this.getComponentHolder(),
          context: this.beans.gridOptionsWrapper.getContext(),
          api: this.beans.gridApi,
          columnApi: this.beans.columnApi,
          rowPinned: this.rowNode.rowPinned,
          event: domEvent,
          type: eventType,
          rowIndex: this.rowNode.rowIndex
        };
        if (this.scope) {
          event.$scope = this.scope;
        }
        return event;
      };
      CellComp2.prototype.onMouseOut = function(mouseEvent) {
        var cellMouseOutEvent = this.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OUT);
        this.beans.eventService.dispatchEvent(cellMouseOutEvent);
        this.beans.columnHoverService.clearMouseOver();
      };
      CellComp2.prototype.onMouseOver = function(mouseEvent) {
        var cellMouseOverEvent = this.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OVER);
        this.beans.eventService.dispatchEvent(cellMouseOverEvent);
        this.beans.columnHoverService.setMouseOver([this.column]);
      };
      CellComp2.prototype.onCellDoubleClicked = function(mouseEvent) {
        var colDef = this.getComponentHolder();
        var cellDoubleClickedEvent = this.createEvent(mouseEvent, Events.EVENT_CELL_DOUBLE_CLICKED);
        this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);
        if (typeof colDef.onCellDoubleClicked === "function") {
          window.setTimeout(function() {
            return colDef.onCellDoubleClicked(cellDoubleClickedEvent);
          }, 0);
        }
        var editOnDoubleClick = !this.beans.gridOptionsWrapper.isSingleClickEdit() && !this.beans.gridOptionsWrapper.isSuppressClickEdit();
        if (editOnDoubleClick) {
          this.startRowOrCellEdit();
        }
      };
      CellComp2.prototype.startRowOrCellEdit = function(keyPress, charPress) {
        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
          this.rowComp.startRowEditing(keyPress, charPress, this);
        } else {
          this.startEditingIfEnabled(keyPress, charPress, true);
        }
      };
      CellComp2.prototype.isCellEditable = function() {
        return this.column.isCellEditable(this.rowNode);
      };
      CellComp2.prototype.startEditingIfEnabled = function(keyPress, charPress, cellStartedEdit) {
        if (keyPress === void 0) {
          keyPress = null;
        }
        if (charPress === void 0) {
          charPress = null;
        }
        if (cellStartedEdit === void 0) {
          cellStartedEdit = false;
        }
        if (!this.isCellEditable()) {
          return;
        }
        if (this.editingCell) {
          return;
        }
        this.editingCell = true;
        this.cellEditorVersion++;
        var callback = this.afterCellEditorCreated.bind(this, this.cellEditorVersion);
        var params = this.createCellEditorParams(keyPress, charPress, cellStartedEdit);
        this.createCellEditor(params).then(callback);
        var cellEditorAsync = missing(this.cellEditor);
        if (cellEditorAsync && cellStartedEdit) {
          this.focusCell(true);
        }
      };
      CellComp2.prototype.createCellEditor = function(params) {
        var _this = this;
        var cellEditorPromise = this.beans.userComponentFactory.newCellEditor(this.column.getColDef(), params);
        return cellEditorPromise.then(function(cellEditor) {
          var isPopup = cellEditor.isPopup && cellEditor.isPopup();
          if (!isPopup) {
            return cellEditor;
          }
          if (_this.beans.gridOptionsWrapper.isFullRowEdit()) {
            console.warn("ag-Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both - either turn off fullRowEdit, or stop using popup editors.");
          }
          var popupEditorWrapper = new PopupEditorWrapper(cellEditor);
          _this.beans.context.createBean(popupEditorWrapper);
          popupEditorWrapper.init(params);
          return popupEditorWrapper;
        });
      };
      CellComp2.prototype.afterCellEditorCreated = function(cellEditorVersion, cellEditor) {
        var versionMismatch = cellEditorVersion !== this.cellEditorVersion;
        var cellEditorNotNeeded = versionMismatch || !this.editingCell;
        if (cellEditorNotNeeded) {
          this.beans.context.destroyBean(cellEditor);
          return;
        }
        var editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();
        if (editingCancelledByUserComp) {
          this.beans.context.destroyBean(cellEditor);
          this.editingCell = false;
          return;
        }
        if (!cellEditor.getGui) {
          console.warn("ag-Grid: cellEditor for column " + this.column.getId() + " is missing getGui() method");
          if (cellEditor.render) {
            console.warn("ag-Grid: we found 'render' on the component, are you trying to set a React renderer but added it as colDef.cellEditor instead of colDef.cellEditorFmk?");
          }
          this.beans.context.destroyBean(cellEditor);
          this.editingCell = false;
          return;
        }
        this.cellEditor = cellEditor;
        this.cellEditorInPopup = cellEditor.isPopup !== void 0 && cellEditor.isPopup();
        this.setInlineEditingClass();
        if (this.cellEditorInPopup) {
          this.addPopupCellEditor();
        } else {
          this.addInCellEditor();
        }
        if (cellEditor.afterGuiAttached) {
          cellEditor.afterGuiAttached();
        }
        var event = this.createEvent(null, Events.EVENT_CELL_EDITING_STARTED);
        this.beans.eventService.dispatchEvent(event);
      };
      CellComp2.prototype.addInCellEditor = function() {
        clearElement(this.getGui());
        if (this.cellEditor) {
          this.getGui().appendChild(this.cellEditor.getGui());
        }
        this.angular1Compile();
      };
      CellComp2.prototype.addPopupCellEditor = function() {
        var _this = this;
        var ePopupGui = this.cellEditor ? this.cellEditor.getGui() : null;
        var useModelPopup = this.beans.gridOptionsWrapper.isStopEditingWhenGridLosesFocus();
        this.hideEditorPopup = this.beans.popupService.addPopup({
          modal: useModelPopup,
          eChild: ePopupGui,
          closeOnEsc: true,
          closedCallback: function() {
            _this.onPopupEditorClosed();
          }
        });
        var params = {
          column: this.column,
          rowNode: this.rowNode,
          type: "popupCellEditor",
          eventSource: this.getGui(),
          ePopup: ePopupGui,
          keepWithinBounds: true
        };
        var position = this.cellEditor && this.cellEditor.getPopupPosition ? this.cellEditor.getPopupPosition() : "over";
        if (position === "under") {
          this.beans.popupService.positionPopupUnderComponent(params);
        } else {
          this.beans.popupService.positionPopupOverComponent(params);
        }
        this.angular1Compile();
      };
      CellComp2.prototype.onPopupEditorClosed = function() {
        if (this.editingCell) {
          this.stopRowOrCellEdit();
          if (this.beans.focusController.isCellFocused(this.cellPosition)) {
            this.focusCell(true);
          }
        }
      };
      CellComp2.prototype.setInlineEditingClass = function() {
        if (!this.isAlive()) {
          return;
        }
        var editingInline = this.editingCell && !this.cellEditorInPopup;
        var popupEditorShowing = this.editingCell && this.cellEditorInPopup;
        this.addOrRemoveCssClass(CSS_INLINE_EDITING, editingInline);
        this.addOrRemoveCssClass(CSS_NOT_INLINE_EDITING, !editingInline);
        this.addOrRemoveCssClass(CSS_POPUP_EDITING, popupEditorShowing);
        addOrRemoveCssClass(this.getGui().parentNode, "ag-row-inline-editing", editingInline);
        addOrRemoveCssClass(this.getGui().parentNode, "ag-row-not-inline-editing", !editingInline);
      };
      CellComp2.prototype.createCellEditorParams = function(keyPress, charPress, cellStartedEdit) {
        return {
          value: this.getValue(),
          keyPress,
          charPress,
          column: this.column,
          colDef: this.column.getColDef(),
          rowIndex: this.cellPosition.rowIndex,
          node: this.rowNode,
          data: this.rowNode.data,
          api: this.beans.gridOptionsWrapper.getApi(),
          cellStartedEdit,
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext(),
          $scope: this.scope,
          onKeyDown: this.onKeyDown.bind(this),
          stopEditing: this.stopEditingAndFocus.bind(this),
          eGridCell: this.getGui(),
          parseValue: this.parseValue.bind(this),
          formatValue: this.formatValue.bind(this)
        };
      };
      CellComp2.prototype.stopEditingAndFocus = function(suppressNavigateAfterEdit) {
        if (suppressNavigateAfterEdit === void 0) {
          suppressNavigateAfterEdit = false;
        }
        this.stopRowOrCellEdit();
        this.focusCell(true);
        if (!suppressNavigateAfterEdit) {
          this.navigateAfterEdit();
        }
      };
      CellComp2.prototype.parseValue = function(newValue) {
        var colDef = this.getComponentHolder();
        var params = {
          node: this.rowNode,
          data: this.rowNode.data,
          oldValue: this.value,
          newValue,
          colDef,
          column: this.column,
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext()
        };
        var valueParser = colDef.valueParser;
        return exists(valueParser) ? this.beans.expressionService.evaluate(valueParser, params) : newValue;
      };
      CellComp2.prototype.focusCell = function(forceBrowserFocus) {
        if (forceBrowserFocus === void 0) {
          forceBrowserFocus = false;
        }
        this.beans.focusController.setFocusedCell(this.cellPosition.rowIndex, this.column, this.rowNode.rowPinned, forceBrowserFocus);
      };
      CellComp2.prototype.setFocusInOnEditor = function() {
        if (this.editingCell) {
          if (this.cellEditor && this.cellEditor.focusIn) {
            this.cellEditor.focusIn();
          } else {
            this.focusCell(true);
          }
        }
      };
      CellComp2.prototype.isEditing = function() {
        return this.editingCell;
      };
      CellComp2.prototype.onKeyDown = function(event) {
        var key = event.which || event.keyCode;
        switch (key) {
          case KeyCode.ENTER:
            this.onEnterKeyDown(event);
            break;
          case KeyCode.F2:
            this.onF2KeyDown();
            break;
          case KeyCode.ESCAPE:
            this.onEscapeKeyDown();
            break;
          case KeyCode.TAB:
            this.onTabKeyDown(event);
            break;
          case KeyCode.BACKSPACE:
          case KeyCode.DELETE:
            this.onBackspaceOrDeleteKeyPressed(key);
            break;
          case KeyCode.DOWN:
          case KeyCode.UP:
          case KeyCode.RIGHT:
          case KeyCode.LEFT:
            this.onNavigationKeyPressed(event, key);
            break;
        }
      };
      CellComp2.prototype.setFocusOutOnEditor = function() {
        if (this.editingCell && this.cellEditor && this.cellEditor.focusOut) {
          this.cellEditor.focusOut();
        }
      };
      CellComp2.prototype.onNavigationKeyPressed = function(event, key) {
        if (this.editingCell) {
          return;
        }
        if (event.shiftKey && this.rangeSelectionEnabled) {
          this.onShiftRangeSelect(key);
        } else {
          this.beans.rowRenderer.navigateToNextCell(event, key, this.cellPosition, true);
        }
        event.preventDefault();
      };
      CellComp2.prototype.onShiftRangeSelect = function(key) {
        if (!this.beans.rangeController) {
          return;
        }
        var endCell = this.beans.rangeController.extendLatestRangeInDirection(key);
        if (endCell) {
          this.beans.rowRenderer.ensureCellVisible(endCell);
        }
      };
      CellComp2.prototype.onTabKeyDown = function(event) {
        this.beans.rowRenderer.onTabKeyDown(this, event);
      };
      CellComp2.prototype.onBackspaceOrDeleteKeyPressed = function(key) {
        if (!this.editingCell) {
          this.startRowOrCellEdit(key);
        }
      };
      CellComp2.prototype.onEnterKeyDown = function(e) {
        if (this.editingCell || this.rowComp.isEditing()) {
          this.stopEditingAndFocus();
        } else {
          if (this.beans.gridOptionsWrapper.isEnterMovesDown()) {
            this.beans.rowRenderer.navigateToNextCell(null, KeyCode.DOWN, this.cellPosition, false);
          } else {
            this.startRowOrCellEdit(KeyCode.ENTER);
            if (this.editingCell) {
              e.preventDefault();
            }
          }
        }
      };
      CellComp2.prototype.navigateAfterEdit = function() {
        var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
        if (fullRowEdit) {
          return;
        }
        var enterMovesDownAfterEdit = this.beans.gridOptionsWrapper.isEnterMovesDownAfterEdit();
        if (enterMovesDownAfterEdit) {
          this.beans.rowRenderer.navigateToNextCell(null, KeyCode.DOWN, this.cellPosition, false);
        }
      };
      CellComp2.prototype.onF2KeyDown = function() {
        if (!this.editingCell) {
          this.startRowOrCellEdit(KeyCode.F2);
        }
      };
      CellComp2.prototype.onEscapeKeyDown = function() {
        if (this.editingCell) {
          this.stopRowOrCellEdit(true);
          this.focusCell(true);
        }
      };
      CellComp2.prototype.onKeyPress = function(event) {
        var eventTarget = getTarget(event);
        var eventOnChildComponent = eventTarget !== this.getGui();
        if (eventOnChildComponent || this.editingCell) {
          return;
        }
        var pressedChar = String.fromCharCode(event.charCode);
        if (pressedChar === " ") {
          this.onSpaceKeyPressed(event);
        } else if (isEventFromPrintableCharacter(event)) {
          this.startRowOrCellEdit(null, pressedChar);
          event.preventDefault();
        }
      };
      CellComp2.prototype.onSpaceKeyPressed = function(event) {
        var gridOptionsWrapper = this.beans.gridOptionsWrapper;
        if (!this.editingCell && gridOptionsWrapper.isRowSelection()) {
          var currentSelection = this.rowNode.isSelected();
          var newSelection = !currentSelection;
          if (newSelection || !gridOptionsWrapper.isSuppressRowDeselection()) {
            var groupSelectsFiltered = this.beans.gridOptionsWrapper.isGroupSelectsFiltered();
            var updatedCount = this.rowNode.setSelectedParams({
              newValue: newSelection,
              rangeSelect: event.shiftKey,
              groupSelectsFiltered
            });
            if (currentSelection === void 0 && updatedCount === 0) {
              this.rowNode.setSelectedParams({
                newValue: false,
                rangeSelect: event.shiftKey,
                groupSelectsFiltered
              });
            }
          }
        }
        event.preventDefault();
      };
      CellComp2.prototype.onMouseDown = function(mouseEvent) {
        var ctrlKey = mouseEvent.ctrlKey, metaKey = mouseEvent.metaKey, shiftKey = mouseEvent.shiftKey;
        var target = mouseEvent.target;
        var _a = this.beans, eventService = _a.eventService, rangeController = _a.rangeController;
        if (this.isRightClickInExistingRange(mouseEvent)) {
          return;
        }
        if (!shiftKey || rangeController && !rangeController.getCellRanges().length) {
          var forceBrowserFocus = (isBrowserIE() || isBrowserEdge()) && !this.editingCell;
          this.focusCell(forceBrowserFocus);
        } else if (rangeController) {
          mouseEvent.preventDefault();
        }
        if (this.containsWidget(target)) {
          return;
        }
        if (rangeController) {
          var thisCell = this.cellPosition;
          if (shiftKey) {
            rangeController.extendLatestRangeToCell(thisCell);
          } else {
            var ctrlKeyPressed = ctrlKey || metaKey;
            rangeController.setRangeToCell(thisCell, ctrlKeyPressed);
          }
        }
        eventService.dispatchEvent(this.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_DOWN));
      };
      CellComp2.prototype.isRightClickInExistingRange = function(mouseEvent) {
        var rangeController = this.beans.rangeController;
        if (rangeController) {
          var cellInRange = rangeController.isCellInAnyRange(this.getCellPosition());
          if (cellInRange && mouseEvent.button === 2) {
            return true;
          }
        }
        return false;
      };
      CellComp2.prototype.containsWidget = function(target) {
        return isElementChildOfClass(target, "ag-selection-checkbox", 3);
      };
      CellComp2.prototype.isDoubleClickOnIPad = function() {
        if (!isIOSUserAgent() || isEventSupported("dblclick")) {
          return false;
        }
        var nowMillis = new Date().getTime();
        var res = nowMillis - this.lastIPadMouseClickEvent < 200;
        this.lastIPadMouseClickEvent = nowMillis;
        return res;
      };
      CellComp2.prototype.onCellClicked = function(mouseEvent) {
        if (this.isDoubleClickOnIPad()) {
          this.onCellDoubleClicked(mouseEvent);
          mouseEvent.preventDefault();
          return;
        }
        var _a = this.beans, eventService = _a.eventService, gridOptionsWrapper = _a.gridOptionsWrapper;
        var cellClickedEvent = this.createEvent(mouseEvent, Events.EVENT_CELL_CLICKED);
        eventService.dispatchEvent(cellClickedEvent);
        var colDef = this.getComponentHolder();
        if (colDef.onCellClicked) {
          window.setTimeout(function() {
            return colDef.onCellClicked(cellClickedEvent);
          }, 0);
        }
        var editOnSingleClick = (gridOptionsWrapper.isSingleClickEdit() || colDef.singleClickEdit) && !gridOptionsWrapper.isSuppressClickEdit();
        if (editOnSingleClick) {
          this.startRowOrCellEdit();
        }
      };
      CellComp2.prototype.createGridCellVo = function() {
        this.cellPosition = {
          rowIndex: this.rowNode.rowIndex,
          rowPinned: this.rowNode.rowPinned,
          column: this.column
        };
      };
      CellComp2.prototype.getCellPosition = function() {
        return this.cellPosition;
      };
      CellComp2.prototype.getParentRow = function() {
        return this.eParentRow;
      };
      CellComp2.prototype.setParentRow = function(eParentRow) {
        this.eParentRow = eParentRow;
      };
      CellComp2.prototype.getColumn = function() {
        return this.column;
      };
      CellComp2.prototype.getComponentHolder = function() {
        return this.column.getColDef();
      };
      CellComp2.prototype.detach = function() {
        this.eParentRow.removeChild(this.getGui());
      };
      CellComp2.prototype.destroy = function() {
        if (this.createCellRendererFunc) {
          this.beans.taskQueue.cancelTask(this.createCellRendererFunc);
        }
        this.stopEditing();
        this.cellRenderer = this.beans.context.destroyBean(this.cellRenderer);
        this.beans.context.destroyBean(this.selectionHandle);
        _super.prototype.destroy.call(this);
      };
      CellComp2.prototype.onLeftChanged = function() {
        var left = this.modifyLeftForPrintLayout(this.getCellLeft());
        this.getGui().style.left = left + "px";
        this.refreshAriaIndex();
      };
      CellComp2.prototype.modifyLeftForPrintLayout = function(leftPosition) {
        if (!this.printLayout || this.column.getPinned() === Constants.PINNED_LEFT) {
          return leftPosition;
        }
        if (this.column.getPinned() === Constants.PINNED_RIGHT) {
          var leftWidth_1 = this.beans.columnController.getPinnedLeftContainerWidth();
          var bodyWidth = this.beans.columnController.getBodyContainerWidth();
          return leftWidth_1 + bodyWidth + leftPosition;
        }
        var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();
        return leftWidth + leftPosition;
      };
      CellComp2.prototype.onWidthChanged = function() {
        var width = this.getCellWidth();
        this.getGui().style.width = width + "px";
      };
      CellComp2.prototype.getRangeBorders = function() {
        var _this = this;
        var isRtl = this.beans.gridOptionsWrapper.isEnableRtl();
        var top = false;
        var right = false;
        var bottom = false;
        var left = false;
        var thisCol = this.cellPosition.column;
        var _a = this.beans, rangeController = _a.rangeController, columnController = _a.columnController;
        var leftCol;
        var rightCol;
        if (isRtl) {
          leftCol = columnController.getDisplayedColAfter(thisCol);
          rightCol = columnController.getDisplayedColBefore(thisCol);
        } else {
          leftCol = columnController.getDisplayedColBefore(thisCol);
          rightCol = columnController.getDisplayedColAfter(thisCol);
        }
        var ranges = rangeController.getCellRanges().filter(function(range2) {
          return rangeController.isCellInSpecificRange(_this.cellPosition, range2);
        });
        if (!leftCol) {
          left = true;
        }
        if (!rightCol) {
          right = true;
        }
        for (var i = 0; i < ranges.length; i++) {
          if (top && right && bottom && left) {
            break;
          }
          var range = ranges[i];
          var startRow = rangeController.getRangeStartRow(range);
          var endRow = rangeController.getRangeEndRow(range);
          if (!top && this.beans.rowPositionUtils.sameRow(startRow, this.cellPosition)) {
            top = true;
          }
          if (!bottom && this.beans.rowPositionUtils.sameRow(endRow, this.cellPosition)) {
            bottom = true;
          }
          if (!left && range.columns.indexOf(leftCol) < 0) {
            left = true;
          }
          if (!right && range.columns.indexOf(rightCol) < 0) {
            right = true;
          }
        }
        return { top, right, bottom, left };
      };
      CellComp2.prototype.getInitialRangeClasses = function() {
        var classes = [];
        if (!this.rangeSelectionEnabled || !this.rangeCount) {
          return classes;
        }
        classes.push(CSS_RANGE_SELECTED);
        if (this.hasChartRange) {
          classes.push(CSS_RANGE_CHART);
        }
        var count = Math.min(this.rangeCount, 4);
        classes.push(CSS_RANGE_SELECTED + "-" + count);
        if (this.isSingleCell()) {
          classes.push(CSS_RANGE_SINGLE_CELL);
        }
        if (this.rangeCount > 0) {
          var borders = this.getRangeBorders();
          if (borders.top) {
            classes.push(CSS_RANGE_TOP);
          }
          if (borders.right) {
            classes.push(CSS_RANGE_RIGHT);
          }
          if (borders.bottom) {
            classes.push(CSS_RANGE_BOTTOM);
          }
          if (borders.left) {
            classes.push(CSS_RANGE_LEFT);
          }
        }
        if (!!this.selectionHandle) {
          classes.push(CSS_RANGE_HANDLE);
        }
        return classes;
      };
      CellComp2.prototype.onRowIndexChanged = function() {
        this.createGridCellVo();
        this.onCellFocused();
        this.onRangeSelectionChanged();
      };
      CellComp2.prototype.onRangeSelectionChanged = function() {
        var rangeController = this.beans.rangeController;
        if (!rangeController) {
          return;
        }
        var _a = this, cellPosition = _a.cellPosition, rangeCount = _a.rangeCount;
        var newRangeCount = rangeController.getCellRangeCount(cellPosition);
        var element = this.getGui();
        if (rangeCount !== newRangeCount) {
          this.addOrRemoveCssClass(CSS_RANGE_SELECTED, newRangeCount !== 0);
          this.addOrRemoveCssClass(CSS_RANGE_SELECTED + "-1", newRangeCount === 1);
          this.addOrRemoveCssClass(CSS_RANGE_SELECTED + "-2", newRangeCount === 2);
          this.addOrRemoveCssClass(CSS_RANGE_SELECTED + "-3", newRangeCount === 3);
          this.addOrRemoveCssClass(CSS_RANGE_SELECTED + "-4", newRangeCount >= 4);
          this.rangeCount = newRangeCount;
        }
        setAriaSelected(element, this.rangeCount > 0);
        var hasChartRange = this.getHasChartRange();
        if (hasChartRange !== this.hasChartRange) {
          this.hasChartRange = hasChartRange;
          this.addOrRemoveCssClass(CSS_RANGE_CHART, this.hasChartRange);
        }
        this.updateRangeBorders();
        this.addOrRemoveCssClass(CSS_RANGE_SINGLE_CELL, this.isSingleCell());
        this.refreshHandle();
      };
      CellComp2.prototype.getHasChartRange = function() {
        var rangeController = this.beans.rangeController;
        if (!this.rangeCount || !rangeController) {
          return false;
        }
        var cellRanges = rangeController.getCellRanges();
        return cellRanges.length > 0 && cellRanges.every(function(range) {
          return includes([exports.CellRangeType.DIMENSION, exports.CellRangeType.VALUE], range.type);
        });
      };
      CellComp2.prototype.shouldHaveSelectionHandle = function() {
        var _a = this.beans, gridOptionsWrapper = _a.gridOptionsWrapper, rangeController = _a.rangeController;
        var cellRanges = rangeController.getCellRanges();
        var rangesLen = cellRanges.length;
        if (this.rangeCount < 1 || rangesLen < 1) {
          return false;
        }
        var cellRange = last(cellRanges);
        var cellPosition = this.getCellPosition();
        var fillHandleIsAvailable = rangesLen === 1 && (gridOptionsWrapper.isEnableFillHandle() || gridOptionsWrapper.isEnableRangeHandle()) && !this.editingCell;
        if (this.hasChartRange) {
          var hasCategoryRange = cellRanges[0].type === exports.CellRangeType.DIMENSION;
          var isCategoryCell = hasCategoryRange && rangeController.isCellInSpecificRange(cellPosition, cellRanges[0]);
          this.addOrRemoveCssClass(CSS_RANGE_CHART_CATEGORY, isCategoryCell);
          fillHandleIsAvailable = cellRange.type === exports.CellRangeType.VALUE;
        }
        return fillHandleIsAvailable && cellRange.endRow != null && rangeController.isContiguousRange(cellRange) && rangeController.isBottomRightCell(cellRange, cellPosition);
      };
      CellComp2.prototype.addSelectionHandle = function() {
        var _a = this.beans, gridOptionsWrapper = _a.gridOptionsWrapper, context = _a.context, rangeController = _a.rangeController;
        var cellRangeType = last(rangeController.getCellRanges()).type;
        var selectionHandleFill = gridOptionsWrapper.isEnableFillHandle() && missing(cellRangeType);
        var type = selectionHandleFill ? exports.SelectionHandleType.FILL : exports.SelectionHandleType.RANGE;
        if (this.selectionHandle && this.selectionHandle.getType() !== type) {
          this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
        }
        if (!this.selectionHandle) {
          this.selectionHandle = this.beans.selectionHandleFactory.createSelectionHandle(type);
        }
        this.selectionHandle.refresh(this);
      };
      CellComp2.prototype.updateRangeBordersIfRangeCount = function() {
        if (this.rangeCount > 0) {
          this.updateRangeBorders();
          this.refreshHandle();
        }
      };
      CellComp2.prototype.refreshHandle = function() {
        if (!this.beans.rangeController) {
          return;
        }
        var shouldHaveSelectionHandle = this.shouldHaveSelectionHandle();
        if (this.selectionHandle && !shouldHaveSelectionHandle) {
          this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
        }
        if (shouldHaveSelectionHandle) {
          this.addSelectionHandle();
        }
        this.addOrRemoveCssClass(CSS_RANGE_HANDLE, !!this.selectionHandle);
      };
      CellComp2.prototype.updateRangeBorders = function() {
        var rangeBorders = this.getRangeBorders();
        var isSingleCell = this.isSingleCell();
        var isTop = !isSingleCell && rangeBorders.top;
        var isRight = !isSingleCell && rangeBorders.right;
        var isBottom = !isSingleCell && rangeBorders.bottom;
        var isLeft = !isSingleCell && rangeBorders.left;
        this.addOrRemoveCssClass(CSS_RANGE_TOP, isTop);
        this.addOrRemoveCssClass(CSS_RANGE_RIGHT, isRight);
        this.addOrRemoveCssClass(CSS_RANGE_BOTTOM, isBottom);
        this.addOrRemoveCssClass(CSS_RANGE_LEFT, isLeft);
      };
      CellComp2.prototype.onFirstRightPinnedChanged = function() {
        var firstRightPinned = this.column.isFirstRightPinned();
        if (this.firstRightPinned !== firstRightPinned) {
          this.firstRightPinned = firstRightPinned;
          this.addOrRemoveCssClass(CSS_FIRST_RIGHT_PINNED, firstRightPinned);
        }
      };
      CellComp2.prototype.onLastLeftPinnedChanged = function() {
        var lastLeftPinned = this.column.isLastLeftPinned();
        if (this.lastLeftPinned !== lastLeftPinned) {
          this.lastLeftPinned = lastLeftPinned;
          this.addOrRemoveCssClass(CSS_LAST_LEFT_PINNED, lastLeftPinned);
        }
      };
      CellComp2.prototype.populateTemplate = function() {
        if (this.usingWrapper) {
          this.eCellValue = this.getRefElement("eCellValue");
          this.eCellWrapper = this.getRefElement("eCellWrapper");
          if (this.includeRowDraggingComponent) {
            this.addRowDragging();
          }
          if (this.includeDndSourceComponent) {
            this.addDndSource();
          }
          if (this.includeSelectionComponent) {
            this.addSelectionCheckbox();
          }
        } else {
          this.eCellValue = this.getGui();
        }
      };
      CellComp2.prototype.getFrameworkOverrides = function() {
        return this.beans.frameworkOverrides;
      };
      CellComp2.prototype.addRowDragging = function() {
        var _this = this;
        var pagination = this.beans.gridOptionsWrapper.isPagination();
        var rowDragManaged = this.beans.gridOptionsWrapper.isRowDragManaged();
        var clientSideRowModelActive = this.beans.gridOptionsWrapper.isRowModelDefault();
        if (rowDragManaged) {
          if (!clientSideRowModelActive) {
            doOnce(function() {
              return console.warn("ag-Grid: managed row dragging is only allowed in the Client Side Row Model");
            }, "CellComp.addRowDragging");
            return;
          }
          if (pagination) {
            doOnce(function() {
              return console.warn("ag-Grid: managed row dragging is not possible when doing pagination");
            }, "CellComp.addRowDragging");
            return;
          }
        }
        var rowDraggingComp = new RowDragComp(this.rowNode, this.column, function() {
          return _this.value;
        }, this.beans);
        this.createManagedBean(rowDraggingComp, this.beans.context);
        this.eCellWrapper.insertBefore(rowDraggingComp.getGui(), this.eCellValue);
      };
      CellComp2.prototype.addDndSource = function() {
        var dndSourceComp = new DndSourceComp(this.rowNode, this.column, this.getValueToUse(), this.beans, this.getGui());
        this.createManagedBean(dndSourceComp, this.beans.context);
        this.eCellWrapper.insertBefore(dndSourceComp.getGui(), this.eCellValue);
      };
      CellComp2.prototype.addSelectionCheckbox = function() {
        var _this = this;
        var cbSelectionComponent = new CheckboxSelectionComponent();
        this.beans.context.createBean(cbSelectionComponent);
        var visibleFunc = this.getComponentHolder().checkboxSelection;
        visibleFunc = typeof visibleFunc === "function" ? visibleFunc : null;
        cbSelectionComponent.init({ rowNode: this.rowNode, column: this.column, visibleFunc });
        this.addDestroyFunc(function() {
          return _this.beans.context.destroyBean(cbSelectionComponent);
        });
        this.eCellWrapper.insertBefore(cbSelectionComponent.getGui(), this.eCellValue);
      };
      CellComp2.prototype.addDomData = function() {
        var _this = this;
        var element = this.getGui();
        this.beans.gridOptionsWrapper.setDomData(element, CellComp2.DOM_DATA_KEY_CELL_COMP, this);
        this.addDestroyFunc(function() {
          return _this.beans.gridOptionsWrapper.setDomData(element, CellComp2.DOM_DATA_KEY_CELL_COMP, null);
        });
      };
      CellComp2.prototype.isSingleCell = function() {
        var rangeController = this.beans.rangeController;
        return this.rangeCount === 1 && rangeController && !rangeController.isMoreThanOneCell();
      };
      CellComp2.prototype.onCellFocused = function(event) {
        var cellFocused = this.beans.focusController.isCellFocused(this.cellPosition);
        if (cellFocused !== this.cellFocused) {
          var doingFocusCss = !this.beans.gridOptionsWrapper.isSuppressCellSelection();
          if (doingFocusCss) {
            this.addOrRemoveCssClass(CSS_CELL_FOCUS, cellFocused);
          }
          this.cellFocused = cellFocused;
        }
        if (cellFocused && event && event.forceBrowserFocus) {
          var focusEl = this.getFocusableElement();
          focusEl.focus();
          if (!document.activeElement || document.activeElement === document.body) {
            focusEl.focus();
          }
        }
        var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
        if (!cellFocused && !fullRowEdit && this.editingCell) {
          this.stopRowOrCellEdit();
        }
      };
      CellComp2.prototype.stopRowOrCellEdit = function(cancel) {
        if (cancel === void 0) {
          cancel = false;
        }
        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
          this.rowComp.stopRowEditing(cancel);
        } else {
          this.stopEditing(cancel);
        }
      };
      CellComp2.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) {
          cancel = false;
        }
        if (!this.editingCell) {
          return;
        }
        if (!this.cellEditor) {
          this.editingCell = false;
          return;
        }
        var oldValue = this.getValue();
        var newValueExists = false;
        var newValue;
        if (!cancel) {
          var userWantsToCancel = this.cellEditor.isCancelAfterEnd && this.cellEditor.isCancelAfterEnd();
          if (!userWantsToCancel) {
            newValue = this.cellEditor.getValue();
            newValueExists = true;
          }
        }
        this.editingCell = false;
        this.cellEditor = this.beans.context.destroyBean(this.cellEditor);
        this.cellEditor = null;
        if (this.cellEditorInPopup && this.hideEditorPopup) {
          this.hideEditorPopup();
          this.hideEditorPopup = null;
        } else {
          clearElement(this.getGui());
          if (this.usingWrapper) {
            this.getGui().appendChild(this.eCellWrapper);
          } else if (this.cellRenderer) {
            var eCell = this.cellRendererGui;
            if (eCell) {
              this.getGui().appendChild(eCell);
            }
          }
        }
        this.setInlineEditingClass();
        this.refreshHandle();
        if (newValueExists && newValue !== oldValue) {
          this.suppressRefreshCell = true;
          this.rowNode.setDataValue(this.column, newValue);
          this.suppressRefreshCell = false;
        }
        this.refreshCell({ forceRefresh: true, suppressFlash: true });
        var editingStoppedEvent = __assign$2(__assign$2({}, this.createEvent(null, Events.EVENT_CELL_EDITING_STOPPED)), {
          oldValue,
          newValue
        });
        this.beans.eventService.dispatchEvent(editingStoppedEvent);
      };
      CellComp2.DOM_DATA_KEY_CELL_COMP = "cellComp";
      CellComp2.CELL_RENDERER_TYPE_NORMAL = "cellRenderer";
      CellComp2.CELL_RENDERER_TYPE_PINNED = "pinnedRowCellRenderer";
      return CellComp2;
    }(Component);
    var __assign$3 = function() {
      __assign$3 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$3.apply(this, arguments);
    };
    var AngularRowUtils = function() {
      function AngularRowUtils2() {
      }
      AngularRowUtils2.createChildScopeOrNull = function(rowNode, parentScope, gridOptionsWrapper) {
        var isAngularCompileRows = gridOptionsWrapper.isAngularCompileRows();
        if (!isAngularCompileRows) {
          return null;
        }
        var newChildScope = parentScope.$new();
        newChildScope.data = __assign$3({}, rowNode.data);
        newChildScope.rowNode = rowNode;
        newChildScope.context = gridOptionsWrapper.getContext();
        var destroyFunc = function() {
          newChildScope.$destroy();
          newChildScope.data = null;
          newChildScope.rowNode = null;
          newChildScope.context = null;
        };
        return {
          scope: newChildScope,
          scopeDestroyFunc: destroyFunc
        };
      };
      return AngularRowUtils2;
    }();
    var __extends$H = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var RowComp = function(_super) {
      __extends$H(RowComp2, _super);
      function RowComp2(parentScope, bodyContainerComp, pinnedLeftContainerComp, pinnedRightContainerComp, fullWidthContainerComp, rowNode, beans, animateIn, useAnimationFrameForCreate, printLayout, embedFullWidth) {
        var _this = _super.call(this) || this;
        _this.eAllRowContainers = [];
        _this.fullWidthRowDestroyFuncs = [];
        _this.active = true;
        _this.rowContainerReadyCount = 0;
        _this.refreshNeeded = false;
        _this.columnRefreshPending = false;
        _this.cellComps = {};
        _this.createSecondPassFuncs = [];
        _this.removeFirstPassFuncs = [];
        _this.removeSecondPassFuncs = [];
        _this.initialised = false;
        _this.elementOrderChanged = false;
        _this.lastMouseDownOnDragger = false;
        _this.parentScope = parentScope;
        _this.beans = beans;
        _this.bodyContainerComp = bodyContainerComp;
        _this.pinnedLeftContainerComp = pinnedLeftContainerComp;
        _this.pinnedRightContainerComp = pinnedRightContainerComp;
        _this.fullWidthContainerComp = fullWidthContainerComp;
        _this.rowNode = rowNode;
        _this.rowIsEven = _this.rowNode.rowIndex % 2 === 0;
        _this.paginationPage = _this.beans.paginationProxy.getCurrentPage();
        _this.useAnimationFrameForCreate = useAnimationFrameForCreate;
        _this.printLayout = printLayout;
        _this.embedFullWidth = embedFullWidth;
        _this.setAnimateFlags(animateIn);
        return _this;
      }
      RowComp2.prototype.init = function() {
        var _this = this;
        this.rowFocused = this.beans.focusController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
        this.setupAngular1Scope();
        this.rowLevel = this.beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);
        this.setupRowContainers();
        this.addListeners();
        if (this.slideRowIn) {
          this.createSecondPassFuncs.push(function() {
            _this.onTopChanged();
          });
        }
        if (this.fadeRowIn) {
          this.createSecondPassFuncs.push(function() {
            _this.eAllRowContainers.forEach(function(eRow) {
              return removeCssClass(eRow, "ag-opacity-zero");
            });
          });
        }
      };
      RowComp2.prototype.setupAngular1Scope = function() {
        var scopeResult = AngularRowUtils.createChildScopeOrNull(this.rowNode, this.parentScope, this.beans.gridOptionsWrapper);
        if (scopeResult) {
          this.scope = scopeResult.scope;
          this.addDestroyFunc(scopeResult.scopeDestroyFunc);
        }
      };
      RowComp2.prototype.createTemplate = function(contents, extraCssClass) {
        if (extraCssClass === void 0) {
          extraCssClass = null;
        }
        var templateParts = [];
        var rowHeight = this.rowNode.rowHeight;
        var rowClasses = this.getInitialRowClasses(extraCssClass).join(" ");
        var rowIdSanitised = escapeString(this.rowNode.id);
        var userRowStyles = this.preProcessStylesFromGridOptions();
        var businessKey = this.getRowBusinessKey();
        var businessKeySanitised = escapeString(businessKey);
        var rowTopStyle = this.getInitialRowTopStyle();
        var rowIdx = this.rowNode.getRowIndexString();
        var headerRowCount = this.beans.headerNavigationService.getHeaderRowCount();
        templateParts.push("<div");
        templateParts.push(' role="row"');
        templateParts.push(' row-index="' + rowIdx + '" aria-rowindex="' + (headerRowCount + this.rowNode.rowIndex + 1) + '"');
        templateParts.push(rowIdSanitised ? ' row-id="' + rowIdSanitised + '"' : "");
        templateParts.push(businessKey ? ' row-business-key="' + businessKeySanitised + '"' : "");
        templateParts.push(' comp-id="' + this.getCompId() + '"');
        templateParts.push(' class="' + rowClasses + '"');
        if (this.beans.gridOptionsWrapper.isRowSelection()) {
          templateParts.push(' aria-selected="' + (this.rowNode.isSelected() ? "true" : "false") + '"');
        }
        if (this.rowNode.group) {
          templateParts.push(" aria-expanded=" + (this.rowNode.expanded ? "true" : "false"));
        }
        templateParts.push(' style="height: ' + rowHeight + "px; " + rowTopStyle + " " + userRowStyles + '">');
        templateParts.push(contents);
        templateParts.push("</div>");
        return templateParts.join("");
      };
      RowComp2.prototype.getCellForCol = function(column) {
        var cellComp = this.cellComps[column.getColId()];
        return cellComp ? cellComp.getGui() : null;
      };
      RowComp2.prototype.afterFlush = function() {
        if (this.initialised) {
          return;
        }
        this.initialised = true;
        this.executeProcessRowPostCreateFunc();
      };
      RowComp2.prototype.executeProcessRowPostCreateFunc = function() {
        var func = this.beans.gridOptionsWrapper.getProcessRowPostCreateFunc();
        if (!func) {
          return;
        }
        var params = {
          eRow: this.eBodyRow,
          ePinnedLeftRow: this.ePinnedLeftRow,
          ePinnedRightRow: this.ePinnedRightRow,
          node: this.rowNode,
          api: this.beans.gridOptionsWrapper.getApi(),
          rowIndex: this.rowNode.rowIndex,
          addRenderedRowListener: this.addEventListener.bind(this),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext()
        };
        func(params);
      };
      RowComp2.prototype.getInitialRowTopStyle = function() {
        if (this.printLayout) {
          return "";
        }
        var pixels = this.slideRowIn ? this.roundRowTopToBounds(this.rowNode.oldRowTop) : this.rowNode.rowTop;
        var afterPaginationPixels = this.applyPaginationOffset(pixels);
        var afterScalingPixels = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.maxDivHeightScaler.getRealPixelPosition(afterPaginationPixels);
        var isSuppressRowTransform = this.beans.gridOptionsWrapper.isSuppressRowTransform();
        return isSuppressRowTransform ? "top: " + afterScalingPixels + "px; " : "transform: translateY(" + afterScalingPixels + "px);";
      };
      RowComp2.prototype.getRowBusinessKey = function() {
        var businessKeyForNodeFunc = this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc();
        if (typeof businessKeyForNodeFunc !== "function") {
          return;
        }
        return businessKeyForNodeFunc(this.rowNode);
      };
      RowComp2.prototype.areAllContainersReady = function() {
        return this.rowContainerReadyCount === 3;
      };
      RowComp2.prototype.lazyCreateCells = function(cols, eRow) {
        if (!this.active) {
          return;
        }
        var cellTemplatesAndComps = this.createCells(cols);
        eRow.innerHTML = cellTemplatesAndComps.template;
        this.callAfterRowAttachedOnCells(cellTemplatesAndComps.cellComps, eRow);
        this.rowContainerReadyCount++;
        if (this.areAllContainersReady() && this.refreshNeeded) {
          this.refreshCells();
        }
      };
      RowComp2.prototype.createRowContainer = function(rowContainerComp, cols, callback) {
        var _this = this;
        var useAnimationsFrameForCreate = this.useAnimationFrameForCreate;
        var cellTemplatesAndComps = useAnimationsFrameForCreate ? { cellComps: [], template: "" } : this.createCells(cols);
        var rowTemplate = this.createTemplate(cellTemplatesAndComps.template);
        rowContainerComp.appendRowTemplate(rowTemplate, function() {
          var eRow = rowContainerComp.getRowElement(_this.getCompId());
          _this.refreshAriaLabel(eRow, _this.rowNode.isSelected());
          _this.afterRowAttached(rowContainerComp, eRow);
          callback(eRow);
          if (useAnimationsFrameForCreate) {
            _this.beans.taskQueue.createTask(_this.lazyCreateCells.bind(_this, cols, eRow), _this.rowNode.rowIndex, "createTasksP1");
          } else {
            _this.callAfterRowAttachedOnCells(cellTemplatesAndComps.cellComps, eRow);
            _this.rowContainerReadyCount = 3;
          }
        });
      };
      RowComp2.prototype.setupRowContainers = function() {
        var isFullWidthCell = this.rowNode.isFullWidthCell();
        var isDetailCell = this.beans.doingMasterDetail && this.rowNode.detail;
        var pivotMode = this.beans.columnController.isPivotMode();
        var isGroupRow = this.rowNode.group && !this.rowNode.footer;
        var isFullWidthGroup = isGroupRow && this.beans.gridOptionsWrapper.isGroupUseEntireRow(pivotMode);
        if (this.rowNode.stub) {
          this.createFullWidthRows(RowComp2.LOADING_CELL_RENDERER, RowComp2.LOADING_CELL_RENDERER_COMP_NAME, false);
        } else if (isDetailCell) {
          this.createFullWidthRows(RowComp2.DETAIL_CELL_RENDERER, RowComp2.DETAIL_CELL_RENDERER_COMP_NAME, true);
        } else if (isFullWidthCell) {
          this.createFullWidthRows(RowComp2.FULL_WIDTH_CELL_RENDERER, null, false);
        } else if (isFullWidthGroup) {
          this.createFullWidthRows(RowComp2.GROUP_ROW_RENDERER, RowComp2.GROUP_ROW_RENDERER_COMP_NAME, false);
        } else {
          this.setupNormalRowContainers();
        }
      };
      RowComp2.prototype.setupNormalRowContainers = function() {
        var _this = this;
        var centerCols;
        var leftCols = [];
        var rightCols = [];
        if (this.printLayout) {
          centerCols = this.beans.columnController.getAllDisplayedColumns();
        } else {
          centerCols = this.beans.columnController.getAllDisplayedCenterVirtualColumnsForRow(this.rowNode);
          leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
          rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
        }
        this.createRowContainer(this.bodyContainerComp, centerCols, function(eRow) {
          return _this.eBodyRow = eRow;
        });
        this.createRowContainer(this.pinnedRightContainerComp, rightCols, function(eRow) {
          return _this.ePinnedRightRow = eRow;
        });
        this.createRowContainer(this.pinnedLeftContainerComp, leftCols, function(eRow) {
          return _this.ePinnedLeftRow = eRow;
        });
      };
      RowComp2.prototype.createFullWidthRows = function(type, name, detailRow) {
        var _this = this;
        this.fullWidthRow = true;
        if (this.embedFullWidth) {
          this.createFullWidthRowContainer(this.bodyContainerComp, null, null, type, name, function(eRow) {
            _this.eFullWidthRowBody = eRow;
          }, function(cellRenderer) {
            _this.fullWidthRowComponentBody = cellRenderer;
          }, detailRow);
          if (this.printLayout) {
            return;
          }
          this.createFullWidthRowContainer(this.pinnedLeftContainerComp, Constants.PINNED_LEFT, "ag-cell-last-left-pinned", type, name, function(eRow) {
            _this.eFullWidthRowLeft = eRow;
          }, function(cellRenderer) {
            _this.fullWidthRowComponentLeft = cellRenderer;
          }, detailRow);
          this.createFullWidthRowContainer(this.pinnedRightContainerComp, Constants.PINNED_RIGHT, "ag-cell-first-right-pinned", type, name, function(eRow) {
            _this.eFullWidthRowRight = eRow;
          }, function(cellRenderer) {
            _this.fullWidthRowComponentRight = cellRenderer;
          }, detailRow);
        } else {
          this.createFullWidthRowContainer(this.fullWidthContainerComp, null, null, type, name, function(eRow) {
            _this.eFullWidthRow = eRow;
          }, function(cellRenderer) {
            _this.fullWidthRowComponent = cellRenderer;
          }, detailRow);
        }
      };
      RowComp2.prototype.setAnimateFlags = function(animateIn) {
        if (animateIn) {
          var oldRowTopExists = exists(this.rowNode.oldRowTop);
          this.slideRowIn = oldRowTopExists;
          this.fadeRowIn = !oldRowTopExists;
        } else {
          this.slideRowIn = false;
          this.fadeRowIn = false;
        }
      };
      RowComp2.prototype.isEditing = function() {
        return this.editingRow;
      };
      RowComp2.prototype.stopRowEditing = function(cancel) {
        this.stopEditing(cancel);
      };
      RowComp2.prototype.isFullWidth = function() {
        return this.fullWidthRow;
      };
      RowComp2.prototype.refreshFullWidth = function() {
        var _this = this;
        var tryRefresh = function(eRow, cellComp, pinned) {
          if (!eRow || !cellComp) {
            return true;
          }
          if (!cellComp.refresh) {
            return false;
          }
          var params = _this.createFullWidthParams(eRow, pinned);
          var refreshSucceeded = cellComp.refresh(params);
          return refreshSucceeded;
        };
        var normalSuccess = tryRefresh(this.eFullWidthRow, this.fullWidthRowComponent, null);
        var bodySuccess = tryRefresh(this.eFullWidthRowBody, this.fullWidthRowComponentBody, null);
        var leftSuccess = tryRefresh(this.eFullWidthRowLeft, this.fullWidthRowComponentLeft, Constants.PINNED_LEFT);
        var rightSuccess = tryRefresh(this.eFullWidthRowRight, this.fullWidthRowComponentRight, Constants.PINNED_RIGHT);
        var allFullWidthRowsRefreshed = normalSuccess && bodySuccess && leftSuccess && rightSuccess;
        return allFullWidthRowsRefreshed;
      };
      RowComp2.prototype.addListeners = function() {
        this.addManagedListener(this.rowNode, RowNode.EVENT_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_EXPANDED_CHANGED, this.updateExpandedCss.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, this.updateExpandedCss.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.onRowNodeCellChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_HIGHLIGHT_CHANGED, this.onRowNodeHighlightChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DRAGGING_CHANGED, this.onRowNodeDraggingChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_UI_LEVEL_CHANGED, this.onUiLevelChanged.bind(this));
        var eventService = this.beans.eventService;
        this.addManagedListener(eventService, Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED, this.onPaginationPixelOffsetChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, this.onTopChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
        this.addManagedListener(eventService, Events.EVENT_CELL_FOCUSED, this.onCellFocusChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
        this.addManagedListener(eventService, Events.EVENT_COLUMN_MOVED, this.onColumnMoved.bind(this));
        this.addListenersForCellComps();
      };
      RowComp2.prototype.addListenersForCellComps = function() {
        var _this = this;
        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, function() {
          _this.forEachCellComp(function(cellComp) {
            return cellComp.onRowIndexChanged();
          });
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, function(event) {
          _this.forEachCellComp(function(cellComp) {
            return cellComp.onCellChanged(event);
          });
        });
      };
      RowComp2.prototype.onRowNodeDataChanged = function(event) {
        this.forEachCellComp(function(cellComp) {
          return cellComp.refreshCell({
            suppressFlash: !event.update,
            newData: !event.update
          });
        });
        this.onRowSelected();
        this.postProcessCss();
      };
      RowComp2.prototype.onRowNodeCellChanged = function() {
        this.postProcessCss();
      };
      RowComp2.prototype.postProcessCss = function() {
        this.postProcessStylesFromGridOptions();
        this.postProcessClassesFromGridOptions();
        this.postProcessRowClassRules();
        this.postProcessRowDragging();
      };
      RowComp2.prototype.onRowNodeHighlightChanged = function() {
        var highlighted = this.rowNode.highlighted;
        this.eAllRowContainers.forEach(function(row) {
          removeCssClass(row, "ag-row-highlight-above");
          removeCssClass(row, "ag-row-highlight-below");
          if (highlighted) {
            addCssClass(row, "ag-row-highlight-" + highlighted);
          }
        });
      };
      RowComp2.prototype.onRowNodeDraggingChanged = function() {
        this.postProcessRowDragging();
      };
      RowComp2.prototype.postProcessRowDragging = function() {
        var dragging = this.rowNode.dragging;
        this.eAllRowContainers.forEach(function(row) {
          return addOrRemoveCssClass(row, "ag-row-dragging", dragging);
        });
      };
      RowComp2.prototype.updateExpandedCss = function() {
        var expandable = this.rowNode.isExpandable();
        var expanded = this.rowNode.expanded == true;
        this.eAllRowContainers.forEach(function(eRow) {
          addOrRemoveCssClass(eRow, "ag-row-group", expandable);
          addOrRemoveCssClass(eRow, "ag-row-group-expanded", expandable && expanded);
          addOrRemoveCssClass(eRow, "ag-row-group-contracted", expandable && !expanded);
          setAriaExpanded(eRow, expandable && expanded);
        });
      };
      RowComp2.prototype.onDisplayedColumnsChanged = function() {
        if (this.fullWidthRow) {
          return;
        }
        this.refreshCells();
      };
      RowComp2.prototype.destroyFullWidthComponents = function() {
        this.fullWidthRowDestroyFuncs.forEach(function(f) {
          return f();
        });
        this.fullWidthRowDestroyFuncs = [];
        if (this.fullWidthRowComponent) {
          this.beans.detailRowCompCache.addOrDestroy(this.rowNode, null, this.fullWidthRowComponent);
          this.fullWidthRowComponent = null;
        }
        if (this.fullWidthRowComponentBody) {
          this.beans.detailRowCompCache.addOrDestroy(this.rowNode, null, this.fullWidthRowComponentBody);
          this.fullWidthRowComponentBody = null;
        }
        if (this.fullWidthRowComponentLeft) {
          this.beans.detailRowCompCache.addOrDestroy(this.rowNode, Constants.PINNED_LEFT, this.fullWidthRowComponentLeft);
          this.fullWidthRowComponentLeft = null;
        }
        if (this.fullWidthRowComponentRight) {
          this.beans.detailRowCompCache.addOrDestroy(this.rowNode, Constants.PINNED_RIGHT, this.fullWidthRowComponentRight);
          this.fullWidthRowComponentRight = null;
        }
      };
      RowComp2.prototype.getContainerForCell = function(pinnedType) {
        switch (pinnedType) {
          case Constants.PINNED_LEFT:
            return this.ePinnedLeftRow;
          case Constants.PINNED_RIGHT:
            return this.ePinnedRightRow;
          default:
            return this.eBodyRow;
        }
      };
      RowComp2.prototype.onVirtualColumnsChanged = function() {
        if (this.fullWidthRow) {
          return;
        }
        this.refreshCells();
      };
      RowComp2.prototype.onColumnResized = function() {
        if (this.fullWidthRow) {
          return;
        }
        this.refreshCells();
      };
      RowComp2.prototype.refreshCells = function() {
        if (!this.areAllContainersReady()) {
          this.refreshNeeded = true;
          return;
        }
        var suppressAnimationFrame = this.beans.gridOptionsWrapper.isSuppressAnimationFrame();
        var skipAnimationFrame = suppressAnimationFrame || this.printLayout;
        if (skipAnimationFrame) {
          this.refreshCellsInAnimationFrame();
        } else {
          if (this.columnRefreshPending) {
            return;
          }
          this.beans.taskQueue.createTask(this.refreshCellsInAnimationFrame.bind(this), this.rowNode.rowIndex, "createTasksP1");
        }
      };
      RowComp2.prototype.refreshCellsInAnimationFrame = function() {
        if (!this.active) {
          return;
        }
        this.columnRefreshPending = false;
        var centerCols;
        var leftCols;
        var rightCols;
        if (this.printLayout) {
          centerCols = this.beans.columnController.getAllDisplayedColumns();
          leftCols = [];
          rightCols = [];
        } else {
          centerCols = this.beans.columnController.getAllDisplayedCenterVirtualColumnsForRow(this.rowNode);
          leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
          rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
        }
        this.insertCellsIntoContainer(this.eBodyRow, centerCols);
        this.insertCellsIntoContainer(this.ePinnedLeftRow, leftCols);
        this.insertCellsIntoContainer(this.ePinnedRightRow, rightCols);
        this.elementOrderChanged = false;
        var colIdsToRemove = Object.keys(this.cellComps);
        centerCols.forEach(function(col) {
          return removeFromArray(colIdsToRemove, col.getId());
        });
        leftCols.forEach(function(col) {
          return removeFromArray(colIdsToRemove, col.getId());
        });
        rightCols.forEach(function(col) {
          return removeFromArray(colIdsToRemove, col.getId());
        });
        var eligibleToBeRemoved = colIdsToRemove.filter(this.isCellEligibleToBeRemoved.bind(this));
        this.destroyCells(eligibleToBeRemoved);
      };
      RowComp2.prototype.onColumnMoved = function() {
        this.elementOrderChanged = true;
      };
      RowComp2.prototype.destroyCells = function(colIds) {
        var _this = this;
        colIds.forEach(function(key) {
          var cellComp = _this.cellComps[key];
          if (missing(cellComp)) {
            return;
          }
          cellComp.detach();
          cellComp.destroy();
          _this.cellComps[key] = null;
        });
      };
      RowComp2.prototype.isCellEligibleToBeRemoved = function(indexStr) {
        var displayedColumns = this.beans.columnController.getAllDisplayedColumns();
        var REMOVE_CELL = true;
        var KEEP_CELL = false;
        var renderedCell = this.cellComps[indexStr];
        if (!renderedCell || this.isCellInWrongRow(renderedCell)) {
          return REMOVE_CELL;
        }
        var editing = renderedCell.isEditing();
        var focused = this.beans.focusController.isCellFocused(renderedCell.getCellPosition());
        var mightWantToKeepCell = editing || focused;
        if (mightWantToKeepCell) {
          var column = renderedCell.getColumn();
          var cellStillDisplayed = displayedColumns.indexOf(column) >= 0;
          return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;
        }
        return REMOVE_CELL;
      };
      RowComp2.prototype.ensureCellInCorrectContainer = function(cellComp) {
        if (this.printLayout) {
          return;
        }
        var element = cellComp.getGui();
        var column = cellComp.getColumn();
        var pinnedType = column.getPinned();
        var eContainer = this.getContainerForCell(pinnedType);
        var eOldContainer = cellComp.getParentRow();
        var inWrongRow = eOldContainer !== eContainer;
        if (inWrongRow) {
          if (eOldContainer) {
            eOldContainer.removeChild(element);
          }
          eContainer.appendChild(element);
          cellComp.setParentRow(eContainer);
          this.elementOrderChanged = true;
        }
      };
      RowComp2.prototype.isCellInWrongRow = function(cellComp) {
        var column = cellComp.getColumn();
        var rowWeWant = this.getContainerForCell(column.getPinned());
        var oldRow = cellComp.getParentRow();
        return oldRow !== rowWeWant;
      };
      RowComp2.prototype.insertCellsIntoContainer = function(eRow, cols) {
        var _this = this;
        if (!eRow) {
          return;
        }
        var cellTemplates = [];
        var newCellComps = [];
        cols.forEach(function(col) {
          var colId = col.getId();
          var existingCell = _this.cellComps[colId];
          if (existingCell && existingCell.getColumn() == col) {
            _this.ensureCellInCorrectContainer(existingCell);
          } else {
            if (existingCell) {
              _this.destroyCells([colId]);
            }
            _this.createNewCell(col, eRow, cellTemplates, newCellComps);
          }
        });
        if (cellTemplates.length > 0) {
          appendHtml(eRow, cellTemplates.join(""));
          this.callAfterRowAttachedOnCells(newCellComps, eRow);
        }
        if (this.elementOrderChanged && this.beans.gridOptionsWrapper.isEnsureDomOrder()) {
          var correctChildOrder = cols.map(function(col) {
            return _this.getCellForCol(col);
          });
          setDomChildOrder(eRow, correctChildOrder);
        }
      };
      RowComp2.prototype.addDomData = function(eRowContainer) {
        var gow = this.beans.gridOptionsWrapper;
        gow.setDomData(eRowContainer, RowComp2.DOM_DATA_KEY_RENDERED_ROW, this);
        this.addDestroyFunc(function() {
          gow.setDomData(eRowContainer, RowComp2.DOM_DATA_KEY_RENDERED_ROW, null);
        });
      };
      RowComp2.prototype.createNewCell = function(col, eContainer, cellTemplates, newCellComps) {
        var newCellComp = new CellComp(this.scope, this.beans, col, this.rowNode, this, false, this.printLayout);
        var cellTemplate = newCellComp.getCreateTemplate();
        cellTemplates.push(cellTemplate);
        newCellComps.push(newCellComp);
        this.cellComps[col.getId()] = newCellComp;
        newCellComp.setParentRow(eContainer);
        this.elementOrderChanged = true;
      };
      RowComp2.prototype.onMouseEvent = function(eventName, mouseEvent) {
        switch (eventName) {
          case "dblclick":
            this.onRowDblClick(mouseEvent);
            break;
          case "click":
            this.onRowClick(mouseEvent);
            break;
          case "mousedown":
            this.onRowMouseDown(mouseEvent);
            break;
        }
      };
      RowComp2.prototype.createRowEvent = function(type, domEvent) {
        return {
          type,
          node: this.rowNode,
          data: this.rowNode.data,
          rowIndex: this.rowNode.rowIndex,
          rowPinned: this.rowNode.rowPinned,
          context: this.beans.gridOptionsWrapper.getContext(),
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          event: domEvent
        };
      };
      RowComp2.prototype.createRowEventWithSource = function(type, domEvent) {
        var event = this.createRowEvent(type, domEvent);
        event.source = this;
        return event;
      };
      RowComp2.prototype.onRowDblClick = function(mouseEvent) {
        if (isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        var agEvent = this.createRowEventWithSource(Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);
        this.beans.eventService.dispatchEvent(agEvent);
      };
      RowComp2.prototype.onRowMouseDown = function(mouseEvent) {
        this.lastMouseDownOnDragger = isElementChildOfClass(mouseEvent.target, "ag-row-drag", 3);
      };
      RowComp2.prototype.onRowClick = function(mouseEvent) {
        var stop = isStopPropagationForAgGrid(mouseEvent) || this.lastMouseDownOnDragger;
        if (stop) {
          return;
        }
        var agEvent = this.createRowEventWithSource(Events.EVENT_ROW_CLICKED, mouseEvent);
        this.beans.eventService.dispatchEvent(agEvent);
        var multiSelectKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;
        var shiftKeyPressed = mouseEvent.shiftKey;
        var groupSelectsChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();
        if (groupSelectsChildren && this.rowNode.group || !this.rowNode.selectable || this.rowNode.rowPinned || !this.beans.gridOptionsWrapper.isRowSelection() || this.beans.gridOptionsWrapper.isSuppressRowClickSelection()) {
          return;
        }
        var multiSelectOnClick = this.beans.gridOptionsWrapper.isRowMultiSelectWithClick();
        var rowDeselectionWithCtrl = !this.beans.gridOptionsWrapper.isSuppressRowDeselection();
        if (this.rowNode.isSelected()) {
          if (multiSelectOnClick) {
            this.rowNode.setSelectedParams({ newValue: false });
          } else if (multiSelectKeyPressed) {
            if (rowDeselectionWithCtrl) {
              this.rowNode.setSelectedParams({ newValue: false });
            }
          } else {
            this.rowNode.setSelectedParams({ newValue: true, clearSelection: true });
          }
        } else {
          var clearSelection = multiSelectOnClick ? false : !multiSelectKeyPressed;
          this.rowNode.setSelectedParams({ newValue: true, clearSelection, rangeSelect: shiftKeyPressed });
        }
      };
      RowComp2.prototype.createFullWidthRowContainer = function(rowContainerComp, pinned, extraCssClass, cellRendererType, cellRendererName, eRowCallback, cellRendererCallback, detailRow) {
        var _this = this;
        var rowTemplate = this.createTemplate("", extraCssClass);
        rowContainerComp.appendRowTemplate(rowTemplate, function() {
          var eRow = rowContainerComp.getRowElement(_this.getCompId());
          var params = _this.createFullWidthParams(eRow, pinned);
          var callback = function(cellRenderer) {
            if (_this.isAlive()) {
              var eGui = cellRenderer.getGui();
              eRow.appendChild(eGui);
              if (detailRow) {
                _this.setupDetailRowAutoHeight(eGui);
              }
              cellRendererCallback(cellRenderer);
            } else {
              _this.beans.context.destroyBean(cellRenderer);
            }
          };
          var cachedRowComp = _this.beans.detailRowCompCache.get(_this.rowNode, pinned);
          if (cachedRowComp) {
            callback(cachedRowComp);
          } else {
            var res = _this.beans.userComponentFactory.newFullWidthCellRenderer(params, cellRendererType, cellRendererName);
            if (!res) {
              var masterDetailModuleLoaded = ModuleRegistry.isRegistered(exports.ModuleNames.MasterDetailModule);
              if (cellRendererName === "agDetailCellRenderer" && !masterDetailModuleLoaded) {
                console.warn("ag-Grid: cell renderer agDetailCellRenderer (for master detail) not found. Did you forget to include the master detail module?");
              } else {
                console.error("ag-Grid: fullWidthCellRenderer " + cellRendererName + " not found");
              }
              return;
            }
            res.then(callback);
          }
          _this.afterRowAttached(rowContainerComp, eRow);
          eRowCallback(eRow);
          _this.angular1Compile(eRow);
        });
      };
      RowComp2.prototype.setupDetailRowAutoHeight = function(eDetailGui) {
        var _this = this;
        if (!this.beans.gridOptionsWrapper.isDetailRowAutoHeight()) {
          return;
        }
        var checkRowSizeFunc = function() {
          var clientHeight = eDetailGui.clientHeight;
          if (clientHeight != null && clientHeight > 0) {
            var updateRowHeightFunc = function() {
              _this.rowNode.setRowHeight(clientHeight);
              if (_this.beans.clientSideRowModel) {
                _this.beans.clientSideRowModel.onRowHeightChanged();
              } else if (_this.beans.serverSideRowModel) {
                _this.beans.serverSideRowModel.onRowHeightChanged();
              }
            };
            _this.beans.frameworkOverrides.setTimeout(updateRowHeightFunc, 0);
          }
        };
        var resizeObserverDestroyFunc = this.beans.resizeObserverService.observeResize(eDetailGui, checkRowSizeFunc);
        this.fullWidthRowDestroyFuncs.push(resizeObserverDestroyFunc);
        checkRowSizeFunc();
      };
      RowComp2.prototype.angular1Compile = function(element) {
        if (!this.scope) {
          return;
        }
        this.beans.$compile(element)(this.scope);
      };
      RowComp2.prototype.createFullWidthParams = function(eRow, pinned) {
        var params = {
          fullWidth: true,
          data: this.rowNode.data,
          node: this.rowNode,
          value: this.rowNode.key,
          $scope: this.scope ? this.scope : this.parentScope,
          $compile: this.beans.$compile,
          rowIndex: this.rowNode.rowIndex,
          api: this.beans.gridOptionsWrapper.getApi(),
          columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
          context: this.beans.gridOptionsWrapper.getContext(),
          eGridCell: eRow,
          eParentOfValue: eRow,
          pinned,
          addRenderedRowListener: this.addEventListener.bind(this)
        };
        return params;
      };
      RowComp2.prototype.getInitialRowClasses = function(extraCssClass) {
        var params = {
          rowNode: this.rowNode,
          extraCssClass,
          rowFocused: this.rowFocused,
          fadeRowIn: this.fadeRowIn,
          rowIsEven: this.rowIsEven,
          rowLevel: this.rowLevel,
          fullWidthRow: this.fullWidthRow,
          firstRowOnPage: this.isFirstRowOnPage(),
          lastRowOnPage: this.isLastRowOnPage(),
          printLayout: this.printLayout,
          expandable: this.rowNode.isExpandable(),
          scope: this.scope
        };
        return this.beans.rowCssClassCalculator.getInitialRowClasses(params);
      };
      RowComp2.prototype.onUiLevelChanged = function() {
        var newLevel = this.beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);
        if (this.rowLevel != newLevel) {
          var classToAdd_1 = "ag-row-level-" + newLevel;
          var classToRemove_1 = "ag-row-level-" + this.rowLevel;
          this.eAllRowContainers.forEach(function(row) {
            addCssClass(row, classToAdd_1);
            removeCssClass(row, classToRemove_1);
          });
        }
        this.rowLevel = newLevel;
      };
      RowComp2.prototype.isFirstRowOnPage = function() {
        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageFirstRow();
      };
      RowComp2.prototype.isLastRowOnPage = function() {
        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageLastRow();
      };
      RowComp2.prototype.onModelUpdated = function() {
        var newFirst = this.isFirstRowOnPage();
        var newLast = this.isLastRowOnPage();
        if (this.firstRowOnPage !== newFirst) {
          this.firstRowOnPage = newFirst;
          this.eAllRowContainers.forEach(function(row) {
            return addOrRemoveCssClass(row, "ag-row-first", newFirst);
          });
        }
        if (this.lastRowOnPage !== newLast) {
          this.lastRowOnPage = newLast;
          this.eAllRowContainers.forEach(function(row) {
            return addOrRemoveCssClass(row, "ag-row-last", newLast);
          });
        }
      };
      RowComp2.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) {
          cancel = false;
        }
        this.forEachCellComp(function(renderedCell) {
          renderedCell.stopEditing(cancel);
        });
        if (!this.editingRow) {
          return;
        }
        if (!cancel) {
          var event_1 = this.createRowEvent(Events.EVENT_ROW_VALUE_CHANGED);
          this.beans.eventService.dispatchEvent(event_1);
        }
        this.setEditingRow(false);
      };
      RowComp2.prototype.setEditingRow = function(value) {
        this.editingRow = value;
        this.eAllRowContainers.forEach(function(row) {
          return addOrRemoveCssClass(row, "ag-row-editing", value);
        });
        var event = value ? this.createRowEvent(Events.EVENT_ROW_EDITING_STARTED) : this.createRowEvent(Events.EVENT_ROW_EDITING_STOPPED);
        this.beans.eventService.dispatchEvent(event);
      };
      RowComp2.prototype.startRowEditing = function(keyPress, charPress, sourceRenderedCell) {
        if (keyPress === void 0) {
          keyPress = null;
        }
        if (charPress === void 0) {
          charPress = null;
        }
        if (sourceRenderedCell === void 0) {
          sourceRenderedCell = null;
        }
        if (this.editingRow) {
          return;
        }
        this.forEachCellComp(function(renderedCell) {
          var cellStartedEdit = renderedCell === sourceRenderedCell;
          if (cellStartedEdit) {
            renderedCell.startEditingIfEnabled(keyPress, charPress, cellStartedEdit);
          } else {
            renderedCell.startEditingIfEnabled(null, null, cellStartedEdit);
          }
        });
        this.setEditingRow(true);
      };
      RowComp2.prototype.forEachCellComp = function(callback) {
        iterateObject(this.cellComps, function(key, cellComp) {
          if (!cellComp) {
            return;
          }
          callback(cellComp);
        });
      };
      RowComp2.prototype.postProcessClassesFromGridOptions = function() {
        var _this = this;
        var cssClasses = this.beans.rowCssClassCalculator.processClassesFromGridOptions(this.rowNode);
        if (!cssClasses || !cssClasses.length) {
          return;
        }
        cssClasses.forEach(function(classStr) {
          _this.eAllRowContainers.forEach(function(row) {
            return addCssClass(row, classStr);
          });
        });
      };
      RowComp2.prototype.postProcessRowClassRules = function() {
        var _this = this;
        this.beans.rowCssClassCalculator.processRowClassRules(this.rowNode, this.scope, function(className) {
          _this.eAllRowContainers.forEach(function(row) {
            return addCssClass(row, className);
          });
        }, function(className) {
          _this.eAllRowContainers.forEach(function(row) {
            return removeCssClass(row, className);
          });
        });
      };
      RowComp2.prototype.preProcessStylesFromGridOptions = function() {
        var rowStyles = this.processStylesFromGridOptions();
        return cssStyleObjectToMarkup(rowStyles);
      };
      RowComp2.prototype.postProcessStylesFromGridOptions = function() {
        var rowStyles = this.processStylesFromGridOptions();
        this.eAllRowContainers.forEach(function(row) {
          return addStylesToElement(row, rowStyles);
        });
      };
      RowComp2.prototype.processStylesFromGridOptions = function() {
        var rowStyle = this.beans.gridOptionsWrapper.getRowStyle();
        if (rowStyle && typeof rowStyle === "function") {
          console.warn("ag-Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead");
          return;
        }
        var rowStyleFunc = this.beans.gridOptionsWrapper.getRowStyleFunc();
        var rowStyleFuncResult;
        if (rowStyleFunc) {
          var params = {
            data: this.rowNode.data,
            node: this.rowNode,
            api: this.beans.gridOptionsWrapper.getApi(),
            context: this.beans.gridOptionsWrapper.getContext(),
            $scope: this.scope
          };
          rowStyleFuncResult = rowStyleFunc(params);
        }
        return assign({}, rowStyle, rowStyleFuncResult);
      };
      RowComp2.prototype.createCells = function(cols) {
        var _this = this;
        var templateParts = [];
        var newCellComps = [];
        cols.forEach(function(col) {
          var newCellComp = new CellComp(_this.scope, _this.beans, col, _this.rowNode, _this, false, _this.printLayout);
          var cellTemplate = newCellComp.getCreateTemplate();
          templateParts.push(cellTemplate);
          newCellComps.push(newCellComp);
          _this.cellComps[col.getId()] = newCellComp;
        });
        var templateAndComps = {
          template: templateParts.join(""),
          cellComps: newCellComps
        };
        return templateAndComps;
      };
      RowComp2.prototype.onRowSelected = function() {
        var _this = this;
        var selected = this.rowNode.isSelected();
        this.eAllRowContainers.forEach(function(row) {
          setAriaSelected(row, selected);
          addOrRemoveCssClass(row, "ag-row-selected", selected);
          _this.refreshAriaLabel(row, selected);
        });
      };
      RowComp2.prototype.refreshAriaLabel = function(node, selected) {
        if (selected && this.beans.gridOptionsWrapper.isSuppressRowDeselection()) {
          node.removeAttribute("aria-label");
          return;
        }
        setAriaLabel(node, "Press SPACE to " + (selected ? "deselect" : "select") + " this row.");
      };
      RowComp2.prototype.callAfterRowAttachedOnCells = function(newCellComps, eRow) {
        var _this = this;
        newCellComps.forEach(function(cellComp) {
          cellComp.setParentRow(eRow);
          cellComp.afterAttached();
          if (_this.editingRow) {
            cellComp.startEditingIfEnabled();
          }
        });
      };
      RowComp2.prototype.afterRowAttached = function(rowContainerComp, eRow) {
        var _this = this;
        this.addDomData(eRow);
        this.removeSecondPassFuncs.push(function() {
          rowContainerComp.removeRowElement(eRow);
        });
        this.removeFirstPassFuncs.push(function() {
          if (exists(_this.rowNode.rowTop)) {
            var rowTop = _this.roundRowTopToBounds(_this.rowNode.rowTop);
            _this.setRowTop(rowTop);
          } else {
            addCssClass(eRow, "ag-opacity-zero");
          }
        });
        this.eAllRowContainers.push(eRow);
        if (this.useAnimationFrameForCreate) {
          this.beans.taskQueue.createTask(this.addHoverFunctionality.bind(this, eRow), this.rowNode.rowIndex, "createTasksP2");
        } else {
          this.addHoverFunctionality(eRow);
        }
      };
      RowComp2.prototype.addHoverFunctionality = function(eRow) {
        var _this = this;
        if (!this.active) {
          return;
        }
        this.addManagedListener(eRow, "mouseenter", function() {
          return _this.rowNode.onMouseEnter();
        });
        this.addManagedListener(eRow, "mouseleave", function() {
          return _this.rowNode.onMouseLeave();
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_ENTER, function() {
          if (!_this.beans.gridOptionsWrapper.isSuppressRowHoverHighlight()) {
            addCssClass(eRow, "ag-row-hover");
          }
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_LEAVE, function() {
          removeCssClass(eRow, "ag-row-hover");
        });
      };
      RowComp2.prototype.roundRowTopToBounds = function(rowTop) {
        var range = this.beans.gridPanel.getVScrollPosition();
        var minPixel = this.applyPaginationOffset(range.top, true) - 100;
        var maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;
        return Math.min(Math.max(minPixel, rowTop), maxPixel);
      };
      RowComp2.prototype.getFrameworkOverrides = function() {
        return this.beans.frameworkOverrides;
      };
      RowComp2.prototype.onRowHeightChanged = function() {
        if (exists(this.rowNode.rowHeight)) {
          var heightPx_1 = this.rowNode.rowHeight + "px";
          this.eAllRowContainers.forEach(function(row) {
            return row.style.height = heightPx_1;
          });
        }
      };
      RowComp2.prototype.addEventListener = function(eventType, listener) {
        if (eventType === "renderedRowRemoved" || eventType === "rowRemoved") {
          eventType = Events.EVENT_VIRTUAL_ROW_REMOVED;
          console.warn("ag-Grid: Since version 11, event renderedRowRemoved is now called " + Events.EVENT_VIRTUAL_ROW_REMOVED);
        }
        _super.prototype.addEventListener.call(this, eventType, listener);
      };
      RowComp2.prototype.removeEventListener = function(eventType, listener) {
        if (eventType === "renderedRowRemoved" || eventType === "rowRemoved") {
          eventType = Events.EVENT_VIRTUAL_ROW_REMOVED;
          console.warn("ag-Grid: Since version 11, event renderedRowRemoved and rowRemoved is now called " + Events.EVENT_VIRTUAL_ROW_REMOVED);
        }
        _super.prototype.removeEventListener.call(this, eventType, listener);
      };
      RowComp2.prototype.destroy = function(animate) {
        if (animate === void 0) {
          animate = false;
        }
        this.active = false;
        this.destroyFullWidthComponents();
        if (animate) {
          this.removeFirstPassFuncs.forEach(function(func) {
            return func();
          });
          this.removeSecondPassFuncs.push(this.destroyContainingCells.bind(this));
        } else {
          this.destroyContainingCells();
          var delayedDestroyFunctions = this.getAndClearDelayedDestroyFunctions();
          delayedDestroyFunctions.forEach(function(func) {
            return func();
          });
        }
        var event = this.createRowEvent(Events.EVENT_VIRTUAL_ROW_REMOVED);
        this.dispatchEvent(event);
        this.beans.eventService.dispatchEvent(event);
        _super.prototype.destroy.call(this);
      };
      RowComp2.prototype.destroyContainingCells = function() {
        var cellsToDestroy = Object.keys(this.cellComps);
        this.destroyCells(cellsToDestroy);
      };
      RowComp2.prototype.getAndClearDelayedDestroyFunctions = function() {
        var result = this.removeSecondPassFuncs;
        this.removeSecondPassFuncs = [];
        return result;
      };
      RowComp2.prototype.onCellFocusChanged = function() {
        var rowFocused = this.beans.focusController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
        if (rowFocused !== this.rowFocused) {
          this.eAllRowContainers.forEach(function(row) {
            return addOrRemoveCssClass(row, "ag-row-focus", rowFocused);
          });
          this.eAllRowContainers.forEach(function(row) {
            return addOrRemoveCssClass(row, "ag-row-no-focus", !rowFocused);
          });
          this.rowFocused = rowFocused;
        }
        if (!rowFocused && this.editingRow) {
          this.stopEditing(false);
        }
      };
      RowComp2.prototype.onPaginationChanged = function() {
        var currentPage = this.beans.paginationProxy.getCurrentPage();
        if (this.paginationPage !== currentPage) {
          this.paginationPage = currentPage;
          this.onTopChanged();
        }
      };
      RowComp2.prototype.onTopChanged = function() {
        this.setRowTop(this.rowNode.rowTop);
      };
      RowComp2.prototype.onPaginationPixelOffsetChanged = function() {
        this.onTopChanged();
      };
      RowComp2.prototype.applyPaginationOffset = function(topPx, reverse) {
        if (reverse === void 0) {
          reverse = false;
        }
        if (this.rowNode.isRowPinned()) {
          return topPx;
        }
        var pixelOffset = this.beans.paginationProxy.getPixelOffset();
        var multiplier = reverse ? 1 : -1;
        return topPx + pixelOffset * multiplier;
      };
      RowComp2.prototype.setRowTop = function(pixels) {
        if (this.printLayout) {
          return;
        }
        if (exists(pixels)) {
          var afterPaginationPixels = this.applyPaginationOffset(pixels);
          var afterScalingPixels = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.maxDivHeightScaler.getRealPixelPosition(afterPaginationPixels);
          var topPx_1 = afterScalingPixels + "px";
          if (this.beans.gridOptionsWrapper.isSuppressRowTransform()) {
            this.eAllRowContainers.forEach(function(row) {
              return row.style.top = topPx_1;
            });
          } else {
            this.eAllRowContainers.forEach(function(row) {
              return row.style.transform = "translateY(" + topPx_1 + ")";
            });
          }
        }
      };
      RowComp2.prototype.getAndClearNextVMTurnFunctions = function() {
        var result = this.createSecondPassFuncs;
        this.createSecondPassFuncs = [];
        return result;
      };
      RowComp2.prototype.getRowNode = function() {
        return this.rowNode;
      };
      RowComp2.prototype.getRenderedCellForColumn = function(column) {
        var _this = this;
        var cellComp = this.cellComps[column.getColId()];
        if (cellComp) {
          return cellComp;
        }
        var spanList = Object.keys(this.cellComps).map(function(name) {
          return _this.cellComps[name];
        }).filter(function(cmp) {
          return cmp && cmp.getColSpanningList().indexOf(column) !== -1;
        });
        return spanList.length ? spanList[0] : void 0;
      };
      RowComp2.prototype.onRowIndexChanged = function() {
        if (this.rowNode.rowIndex != null) {
          this.onCellFocusChanged();
          this.updateRowIndexes();
        }
      };
      RowComp2.prototype.updateRowIndexes = function() {
        var _this = this;
        var rowIndexStr = this.rowNode.getRowIndexString();
        var rowIsEven = this.rowNode.rowIndex % 2 === 0;
        var rowIsEvenChanged = this.rowIsEven !== rowIsEven;
        var headerRowCount = this.beans.headerNavigationService.getHeaderRowCount();
        if (rowIsEvenChanged) {
          this.rowIsEven = rowIsEven;
        }
        this.eAllRowContainers.forEach(function(eRow) {
          eRow.setAttribute("row-index", rowIndexStr);
          setAriaRowIndex(eRow, headerRowCount + _this.rowNode.rowIndex + 1);
          if (!rowIsEvenChanged) {
            return;
          }
          addOrRemoveCssClass(eRow, "ag-row-even", rowIsEven);
          addOrRemoveCssClass(eRow, "ag-row-odd", !rowIsEven);
        });
      };
      RowComp2.prototype.ensureDomOrder = function() {
        var sides = [
          {
            el: this.getBodyRowElement(),
            ct: this.bodyContainerComp
          },
          {
            el: this.getPinnedLeftRowElement(),
            ct: this.pinnedLeftContainerComp
          },
          {
            el: this.getPinnedRightRowElement(),
            ct: this.pinnedRightContainerComp
          },
          {
            el: this.getFullWidthRowElement(),
            ct: this.fullWidthContainerComp
          }
        ];
        sides.forEach(function(side) {
          if (!side.el) {
            return;
          }
          side.ct.ensureDomOrder(side.el);
        });
      };
      RowComp2.prototype.getPinnedLeftRowElement = function() {
        return this.ePinnedLeftRow ? this.ePinnedLeftRow : this.eFullWidthRowLeft;
      };
      RowComp2.prototype.getPinnedRightRowElement = function() {
        return this.ePinnedRightRow ? this.ePinnedRightRow : this.eFullWidthRowRight;
      };
      RowComp2.prototype.getBodyRowElement = function() {
        return this.eBodyRow ? this.eBodyRow : this.eFullWidthRowBody;
      };
      RowComp2.prototype.getFullWidthRowElement = function() {
        return this.eFullWidthRow;
      };
      RowComp2.DOM_DATA_KEY_RENDERED_ROW = "renderedRow";
      RowComp2.FULL_WIDTH_CELL_RENDERER = "fullWidthCellRenderer";
      RowComp2.GROUP_ROW_RENDERER = "groupRowRenderer";
      RowComp2.GROUP_ROW_RENDERER_COMP_NAME = "agGroupRowRenderer";
      RowComp2.LOADING_CELL_RENDERER = "loadingCellRenderer";
      RowComp2.LOADING_CELL_RENDERER_COMP_NAME = "agLoadingCellRenderer";
      RowComp2.DETAIL_CELL_RENDERER = "detailCellRenderer";
      RowComp2.DETAIL_CELL_RENDERER_COMP_NAME = "agDetailCellRenderer";
      return RowComp2;
    }(Component);
    var __extends$I = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$F = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$5 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var RowRenderer = function(_super) {
      __extends$I(RowRenderer2, _super);
      function RowRenderer2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.destroyFuncsForColumnListeners = [];
        _this.rowCompsByIndex = {};
        _this.floatingTopRowComps = [];
        _this.floatingBottomRowComps = [];
        _this.refreshInProgress = false;
        return _this;
      }
      RowRenderer2.prototype.registerGridCore = function(gridCore) {
        this.gridCore = gridCore;
      };
      RowRenderer2.prototype.getGridCore = function() {
        return this.gridCore;
      };
      RowRenderer2.prototype.agWire = function(loggerFactory) {
        this.logger = loggerFactory.create("RowRenderer");
      };
      RowRenderer2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
        this.rowContainers = this.gridPanel.getRowContainers();
        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.redrawAfterScroll.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.redrawAfterScroll.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
        this.registerCellEventListeners();
        this.printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        this.embedFullWidthRows = this.printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();
        this.redrawAfterModelUpdate();
      };
      RowRenderer2.prototype.registerCellEventListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUSED, function(event) {
          _this.forEachCellComp(function(cellComp) {
            return cellComp.onCellFocused(event);
          });
        });
        this.addManagedListener(this.eventService, Events.EVENT_FLASH_CELLS, function(event) {
          _this.forEachCellComp(function(cellComp) {
            return cellComp.onFlashCells(event);
          });
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, function() {
          _this.forEachCellComp(function(cellComp) {
            return cellComp.onColumnHover();
          });
        });
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, function() {
          if (_this.printLayout) {
            _this.forEachCellComp(function(cellComp) {
              return cellComp.onLeftChanged();
            });
          }
        });
        var rangeSelectionEnabled = this.gridOptionsWrapper.isEnableRangeSelection();
        if (rangeSelectionEnabled) {
          this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, function() {
            _this.forEachCellComp(function(cellComp) {
              return cellComp.onRangeSelectionChanged();
            });
          });
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, function() {
            _this.forEachCellComp(function(cellComp) {
              return cellComp.updateRangeBordersIfRangeCount();
            });
          });
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, function() {
            _this.forEachCellComp(function(cellComp) {
              return cellComp.updateRangeBordersIfRangeCount();
            });
          });
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, function() {
            _this.forEachCellComp(function(cellComp) {
              return cellComp.updateRangeBordersIfRangeCount();
            });
          });
        }
        this.refreshListenersToColumnsForCellComps();
        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.refreshListenersToColumnsForCellComps.bind(this));
        this.addDestroyFunc(this.removeGridColumnListeners.bind(this));
      };
      RowRenderer2.prototype.removeGridColumnListeners = function() {
        this.destroyFuncsForColumnListeners.forEach(function(func) {
          return func();
        });
        this.destroyFuncsForColumnListeners.length = 0;
      };
      RowRenderer2.prototype.refreshListenersToColumnsForCellComps = function() {
        var _this = this;
        this.removeGridColumnListeners();
        var cols = this.columnController.getAllGridColumns();
        if (!cols) {
          return;
        }
        cols.forEach(function(col) {
          var forEachCellWithThisCol = function(callback) {
            _this.forEachCellComp(function(cellComp) {
              if (cellComp.getColumn() === col) {
                callback(cellComp);
              }
            });
          };
          var leftChangedListener = function() {
            forEachCellWithThisCol(function(cellComp) {
              return cellComp.onLeftChanged();
            });
          };
          var widthChangedListener = function() {
            forEachCellWithThisCol(function(cellComp) {
              return cellComp.onWidthChanged();
            });
          };
          var firstRightPinnedChangedListener = function() {
            forEachCellWithThisCol(function(cellComp) {
              return cellComp.onFirstRightPinnedChanged();
            });
          };
          var lastLeftPinnedChangedListener = function() {
            forEachCellWithThisCol(function(cellComp) {
              return cellComp.onLastLeftPinnedChanged();
            });
          };
          col.addEventListener(Column.EVENT_LEFT_CHANGED, leftChangedListener);
          col.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
          col.addEventListener(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);
          col.addEventListener(Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);
          _this.destroyFuncsForColumnListeners.push(function() {
            col.removeEventListener(Column.EVENT_LEFT_CHANGED, leftChangedListener);
            col.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
            col.removeEventListener(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);
            col.removeEventListener(Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);
          });
        });
      };
      RowRenderer2.prototype.onDomLayoutChanged = function() {
        var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        var embedFullWidthRows = printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();
        var destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;
        this.printLayout = printLayout;
        this.embedFullWidthRows = embedFullWidthRows;
        if (destroyRows) {
          this.redrawAfterModelUpdate();
        }
      };
      RowRenderer2.prototype.datasourceChanged = function() {
        this.firstRenderedRow = 0;
        this.lastRenderedRow = -1;
        var rowIndexesToRemove = Object.keys(this.rowCompsByIndex);
        this.removeRowComps(rowIndexesToRemove);
      };
      RowRenderer2.prototype.onPageLoaded = function(refreshEvent) {
        if (missing(refreshEvent)) {
          refreshEvent = {
            type: Events.EVENT_MODEL_UPDATED,
            api: this.gridApi,
            columnApi: this.columnApi,
            animate: false,
            keepRenderedRows: false,
            newData: false,
            newPage: false
          };
        }
        this.onModelUpdated(refreshEvent);
      };
      RowRenderer2.prototype.getAllCellsForColumn = function(column) {
        var eCells = [];
        function callback(key, rowComp) {
          var eCell = rowComp.getCellForCol(column);
          if (eCell) {
            eCells.push(eCell);
          }
        }
        iterateObject(this.rowCompsByIndex, callback);
        iterateObject(this.floatingBottomRowComps, callback);
        iterateObject(this.floatingTopRowComps, callback);
        return eCells;
      };
      RowRenderer2.prototype.refreshFloatingRowComps = function() {
        this.refreshFloatingRows(this.floatingTopRowComps, this.pinnedRowModel.getPinnedTopRowData(), this.rowContainers.floatingTopPinnedLeft, this.rowContainers.floatingTopPinnedRight, this.rowContainers.floatingTop, this.rowContainers.floatingTopFullWidth);
        this.refreshFloatingRows(this.floatingBottomRowComps, this.pinnedRowModel.getPinnedBottomRowData(), this.rowContainers.floatingBottomPinnedLeft, this.rowContainers.floatingBottomPinnedRight, this.rowContainers.floatingBottom, this.rowContainers.floatingBottomFullWidth);
      };
      RowRenderer2.prototype.refreshFloatingRows = function(rowComps, rowNodes, pinnedLeftContainerComp, pinnedRightContainerComp, bodyContainerComp, fullWidthContainerComp) {
        var _this = this;
        rowComps.forEach(function(row) {
          row.destroy();
        });
        rowComps.length = 0;
        if (rowNodes) {
          rowNodes.forEach(function(node) {
            var rowComp = new RowComp(_this.$scope, bodyContainerComp, pinnedLeftContainerComp, pinnedRightContainerComp, fullWidthContainerComp, node, _this.beans, false, false, _this.printLayout, _this.embedFullWidthRows);
            rowComp.init();
            rowComps.push(rowComp);
          });
        }
        this.flushContainers(rowComps);
      };
      RowRenderer2.prototype.onPinnedRowDataChanged = function() {
        var params = {
          recycleRows: true
        };
        this.redrawAfterModelUpdate(params);
      };
      RowRenderer2.prototype.onModelUpdated = function(refreshEvent) {
        var params = {
          recycleRows: refreshEvent.keepRenderedRows,
          animate: refreshEvent.animate,
          newData: refreshEvent.newData,
          newPage: refreshEvent.newPage,
          onlyBody: true
        };
        this.redrawAfterModelUpdate(params);
      };
      RowRenderer2.prototype.getRenderedIndexesForRowNodes = function(rowNodes) {
        var result = [];
        if (missing(rowNodes)) {
          return result;
        }
        iterateObject(this.rowCompsByIndex, function(index, renderedRow) {
          var rowNode = renderedRow.getRowNode();
          if (rowNodes.indexOf(rowNode) >= 0) {
            result.push(index);
          }
        });
        return result;
      };
      RowRenderer2.prototype.redrawRows = function(rowNodes) {
        if (!rowNodes || rowNodes.length == 0) {
          return;
        }
        var indexesToRemove = this.getRenderedIndexesForRowNodes(rowNodes);
        this.removeRowComps(indexesToRemove);
        this.redrawAfterModelUpdate({
          recycleRows: true
        });
      };
      RowRenderer2.prototype.getCellToRestoreFocusToAfterRefresh = function(params) {
        var focusedCell = params.suppressKeepFocus ? null : this.focusController.getFocusCellToUseAfterRefresh();
        if (missing(focusedCell)) {
          return null;
        }
        var activeElement = document.activeElement;
        var domData = this.gridOptionsWrapper.getDomData(activeElement, CellComp.DOM_DATA_KEY_CELL_COMP);
        var elementIsNotACellDev = missing(domData);
        return elementIsNotACellDev ? null : focusedCell;
      };
      RowRenderer2.prototype.redrawAfterModelUpdate = function(params) {
        if (params === void 0) {
          params = {};
        }
        this.getLockOnRefresh();
        var focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);
        this.sizeContainerToPageHeight();
        this.scrollToTopIfNewData(params);
        var recycleRows = !this.printLayout && params.recycleRows;
        var animate = params.animate && this.gridOptionsWrapper.isAnimateRows();
        var rowsToRecycle = this.binRowComps(recycleRows);
        var isFocusedCellGettingRecycled = function() {
          if (focusedCell == null || rowsToRecycle == null) {
            return false;
          }
          var res = false;
          iterateObject(rowsToRecycle, function(key, rowComp) {
            var rowNode = rowComp.getRowNode();
            var rowIndexEqual = rowNode.rowIndex == focusedCell.rowIndex;
            var pinnedEqual = rowNode.rowPinned == focusedCell.rowPinned;
            if (rowIndexEqual && pinnedEqual) {
              res = true;
            }
          });
          return res;
        };
        var focusedCellRecycled = isFocusedCellGettingRecycled();
        this.redraw(rowsToRecycle, animate);
        if (!params.onlyBody) {
          this.refreshFloatingRowComps();
        }
        if (!focusedCellRecycled) {
          this.restoreFocusedCell(focusedCell);
        }
        this.releaseLockOnRefresh();
      };
      RowRenderer2.prototype.scrollToTopIfNewData = function(params) {
        var scrollToTop = params.newData || params.newPage;
        var suppressScrollToTop = this.gridOptionsWrapper.isSuppressScrollOnNewData();
        if (scrollToTop && !suppressScrollToTop) {
          this.gridPanel.scrollToTop();
        }
      };
      RowRenderer2.prototype.sizeContainerToPageHeight = function() {
        var containers = [
          this.rowContainers.body,
          this.rowContainers.fullWidth,
          this.rowContainers.pinnedLeft,
          this.rowContainers.pinnedRight
        ];
        if (this.printLayout) {
          containers.forEach(function(container) {
            return container.setHeight(null);
          });
          return;
        }
        var containerHeight = this.paginationProxy.getCurrentPageHeight();
        if (containerHeight === 0) {
          containerHeight = 1;
        }
        this.maxDivHeightScaler.setModelHeight(containerHeight);
        var realHeight = this.maxDivHeightScaler.getUiContainerHeight();
        containers.forEach(function(container) {
          return container.setHeight(realHeight);
        });
      };
      RowRenderer2.prototype.getLockOnRefresh = function() {
        if (this.refreshInProgress) {
          throw new Error("ag-Grid: cannot get grid to draw rows when it is in the middle of drawing rows. Your code probably called a grid API method while the grid was in the render stage. To overcome this, put the API call into a timeout, e.g. instead of api.refreshView(), call setTimeout(function() { api.refreshView(); }, 0). To see what part of your code that caused the refresh check this stacktrace.");
        }
        this.refreshInProgress = true;
      };
      RowRenderer2.prototype.releaseLockOnRefresh = function() {
        this.refreshInProgress = false;
      };
      RowRenderer2.prototype.restoreFocusedCell = function(cellPosition) {
        if (cellPosition) {
          this.focusController.setFocusedCell(cellPosition.rowIndex, cellPosition.column, cellPosition.rowPinned, true);
        }
      };
      RowRenderer2.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) {
          cancel = false;
        }
        this.forEachRowComp(function(key, rowComp) {
          rowComp.stopEditing(cancel);
        });
      };
      RowRenderer2.prototype.forEachCellComp = function(callback) {
        this.forEachRowComp(function(key, rowComp) {
          return rowComp.forEachCellComp(callback);
        });
      };
      RowRenderer2.prototype.forEachRowComp = function(callback) {
        iterateObject(this.rowCompsByIndex, callback);
        iterateObject(this.floatingTopRowComps, callback);
        iterateObject(this.floatingBottomRowComps, callback);
      };
      RowRenderer2.prototype.addRenderedRowListener = function(eventName, rowIndex, callback) {
        var rowComp = this.rowCompsByIndex[rowIndex];
        if (rowComp) {
          rowComp.addEventListener(eventName, callback);
        }
      };
      RowRenderer2.prototype.flashCells = function(params) {
        if (params === void 0) {
          params = {};
        }
        var flashDelay = params.flashDelay, fadeDelay = params.fadeDelay;
        this.forEachCellCompFiltered(params.rowNodes, params.columns, function(cellComp) {
          return cellComp.flashCell({ flashDelay, fadeDelay });
        });
      };
      RowRenderer2.prototype.refreshCells = function(params) {
        if (params === void 0) {
          params = {};
        }
        var refreshCellParams = {
          forceRefresh: params.force,
          newData: false,
          suppressFlash: params.suppressFlash
        };
        this.forEachCellCompFiltered(params.rowNodes, params.columns, function(cellComp) {
          return cellComp.refreshCell(refreshCellParams);
        });
      };
      RowRenderer2.prototype.getCellRendererInstances = function(params) {
        var res = [];
        this.forEachCellCompFiltered(params.rowNodes, params.columns, function(cellComp) {
          var cellRenderer = cellComp.getCellRenderer();
          if (cellRenderer) {
            res.push(cellRenderer);
          }
        });
        return res;
      };
      RowRenderer2.prototype.getCellEditorInstances = function(params) {
        var res = [];
        this.forEachCellCompFiltered(params.rowNodes, params.columns, function(cellComp) {
          var cellEditor = cellComp.getCellEditor();
          if (cellEditor) {
            res.push(cellEditor);
          }
        });
        return res;
      };
      RowRenderer2.prototype.getEditingCells = function() {
        var res = [];
        this.forEachCellComp(function(cellComp) {
          if (cellComp.isEditing()) {
            var cellPosition = cellComp.getCellPosition();
            res.push(cellPosition);
          }
        });
        return res;
      };
      RowRenderer2.prototype.forEachCellCompFiltered = function(rowNodes, columns, callback) {
        var _this = this;
        var rowIdsMap;
        if (exists(rowNodes)) {
          rowIdsMap = {
            top: {},
            bottom: {},
            normal: {}
          };
          rowNodes.forEach(function(rowNode) {
            if (rowNode.rowPinned === Constants.PINNED_TOP) {
              rowIdsMap.top[rowNode.id] = true;
            } else if (rowNode.rowPinned === Constants.PINNED_BOTTOM) {
              rowIdsMap.bottom[rowNode.id] = true;
            } else {
              rowIdsMap.normal[rowNode.id] = true;
            }
          });
        }
        var colIdsMap;
        if (exists(columns)) {
          colIdsMap = {};
          columns.forEach(function(colKey) {
            var column = _this.columnController.getGridColumn(colKey);
            if (exists(column)) {
              colIdsMap[column.getId()] = true;
            }
          });
        }
        var processRow = function(rowComp) {
          var rowNode = rowComp.getRowNode();
          var id = rowNode.id;
          var floating = rowNode.rowPinned;
          if (exists(rowIdsMap)) {
            if (floating === Constants.PINNED_BOTTOM) {
              if (!rowIdsMap.bottom[id]) {
                return;
              }
            } else if (floating === Constants.PINNED_TOP) {
              if (!rowIdsMap.top[id]) {
                return;
              }
            } else {
              if (!rowIdsMap.normal[id]) {
                return;
              }
            }
          }
          rowComp.forEachCellComp(function(cellComp) {
            var colId = cellComp.getColumn().getId();
            var excludeColFromRefresh = colIdsMap && !colIdsMap[colId];
            if (excludeColFromRefresh) {
              return;
            }
            callback(cellComp);
          });
        };
        iterateObject(this.rowCompsByIndex, function(index, rowComp) {
          processRow(rowComp);
        });
        if (this.floatingTopRowComps) {
          this.floatingTopRowComps.forEach(processRow);
        }
        if (this.floatingBottomRowComps) {
          this.floatingBottomRowComps.forEach(processRow);
        }
      };
      RowRenderer2.prototype.destroy = function() {
        var rowIndexesToRemove = Object.keys(this.rowCompsByIndex);
        this.removeRowComps(rowIndexesToRemove);
        _super.prototype.destroy.call(this);
      };
      RowRenderer2.prototype.binRowComps = function(recycleRows) {
        var _this = this;
        var rowsToRecycle = {};
        var indexesToRemove;
        if (recycleRows) {
          indexesToRemove = [];
          iterateObject(this.rowCompsByIndex, function(index, rowComp) {
            var rowNode = rowComp.getRowNode();
            if (exists(rowNode.id)) {
              rowsToRecycle[rowNode.id] = rowComp;
              delete _this.rowCompsByIndex[index];
            } else {
              indexesToRemove.push(index);
            }
          });
        } else {
          indexesToRemove = Object.keys(this.rowCompsByIndex);
        }
        this.removeRowComps(indexesToRemove);
        return rowsToRecycle;
      };
      RowRenderer2.prototype.removeRowComps = function(rowsToRemove) {
        var _this = this;
        rowsToRemove.forEach(function(indexToRemove) {
          var renderedRow = _this.rowCompsByIndex[indexToRemove];
          renderedRow.destroy();
          delete _this.rowCompsByIndex[indexToRemove];
        });
      };
      RowRenderer2.prototype.redrawAfterScroll = function() {
        this.getLockOnRefresh();
        this.redraw(null, false, true);
        this.releaseLockOnRefresh();
      };
      RowRenderer2.prototype.removeRowCompsNotToDraw = function(indexesToDraw) {
        var indexesToDrawMap = {};
        indexesToDraw.forEach(function(index) {
          return indexesToDrawMap[index] = true;
        });
        var existingIndexes = Object.keys(this.rowCompsByIndex);
        var indexesNotToDraw = existingIndexes.filter(function(index) {
          return !indexesToDrawMap[index];
        });
        this.removeRowComps(indexesNotToDraw);
      };
      RowRenderer2.prototype.calculateIndexesToDraw = function(rowsToRecycle) {
        var _this = this;
        var indexesToDraw = createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);
        var checkRowToDraw = function(indexStr, rowComp) {
          var index = Number(indexStr);
          if (index < _this.firstRenderedRow || index > _this.lastRenderedRow) {
            if (_this.doNotUnVirtualiseRow(rowComp)) {
              indexesToDraw.push(index);
            }
          }
        };
        iterateObject(this.rowCompsByIndex, checkRowToDraw);
        iterateObject(rowsToRecycle, checkRowToDraw);
        indexesToDraw.sort(function(a, b) {
          return a - b;
        });
        return indexesToDraw;
      };
      RowRenderer2.prototype.redraw = function(rowsToRecycle, animate, afterScroll) {
        var _this = this;
        if (animate === void 0) {
          animate = false;
        }
        if (afterScroll === void 0) {
          afterScroll = false;
        }
        this.maxDivHeightScaler.updateOffset();
        this.workOutFirstAndLastRowsToRender();
        var indexesToDraw = this.calculateIndexesToDraw(rowsToRecycle);
        this.removeRowCompsNotToDraw(indexesToDraw);
        if (this.printLayout) {
          animate = false;
        }
        var nextVmTurnFunctions = [];
        var rowComps = [];
        indexesToDraw.forEach(function(rowIndex) {
          var rowComp = _this.createOrUpdateRowComp(rowIndex, rowsToRecycle, animate, afterScroll);
          if (exists(rowComp)) {
            rowComps.push(rowComp);
            pushAll(nextVmTurnFunctions, rowComp.getAndClearNextVMTurnFunctions());
          }
        });
        this.flushContainers(rowComps);
        executeNextVMTurn(nextVmTurnFunctions);
        var useAnimationFrame = afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame() && !this.printLayout;
        if (useAnimationFrame) {
          this.beans.taskQueue.addDestroyTask(this.destroyRowComps.bind(this, rowsToRecycle, animate));
        } else {
          this.destroyRowComps(rowsToRecycle, animate);
        }
        this.checkAngularCompile();
        this.gridPanel.updateRowCount();
      };
      RowRenderer2.prototype.flushContainers = function(rowComps) {
        iterateObject(this.rowContainers, function(key, rowContainerComp) {
          if (rowContainerComp) {
            rowContainerComp.flushRowTemplates();
          }
        });
        rowComps.forEach(function(rowComp) {
          return rowComp.afterFlush();
        });
      };
      RowRenderer2.prototype.onDisplayedColumnsChanged = function() {
        var pinningLeft = this.columnController.isPinningLeft();
        var pinningRight = this.columnController.isPinningRight();
        var atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;
        if (atLeastOneChanged) {
          this.pinningLeft = pinningLeft;
          this.pinningRight = pinningRight;
          if (this.embedFullWidthRows) {
            this.redrawFullWidthEmbeddedRows();
          }
        }
      };
      RowRenderer2.prototype.redrawFullWidthEmbeddedRows = function() {
        var rowsToRemove = [];
        iterateObject(this.rowCompsByIndex, function(id, rowComp) {
          if (rowComp.isFullWidth()) {
            var rowIndex = rowComp.getRowNode().rowIndex;
            rowsToRemove.push(rowIndex.toString());
          }
        });
        this.refreshFloatingRowComps();
        this.removeRowComps(rowsToRemove);
        this.redrawAfterScroll();
      };
      RowRenderer2.prototype.refreshFullWidthRows = function(rowNodesToRefresh) {
        var rowsToRemove = [];
        var selectivelyRefreshing = !!rowNodesToRefresh;
        var idsToRefresh = selectivelyRefreshing ? {} : void 0;
        if (selectivelyRefreshing) {
          rowNodesToRefresh.forEach(function(r) {
            return idsToRefresh[r.id] = true;
          });
        }
        iterateObject(this.rowCompsByIndex, function(id, rowComp) {
          if (!rowComp.isFullWidth()) {
            return;
          }
          var rowNode = rowComp.getRowNode();
          if (selectivelyRefreshing) {
            var parentId = rowNode.level > 0 && rowNode.parent ? rowNode.parent.id : void 0;
            var skipThisNode = !idsToRefresh[rowNode.id] && !idsToRefresh[parentId];
            if (skipThisNode) {
              return;
            }
          }
          var fullWidthRowsRefreshed = rowComp.refreshFullWidth();
          if (!fullWidthRowsRefreshed) {
            var rowIndex = rowComp.getRowNode().rowIndex;
            rowsToRemove.push(rowIndex.toString());
          }
        });
        this.removeRowComps(rowsToRemove);
        this.redrawAfterScroll();
      };
      RowRenderer2.prototype.createOrUpdateRowComp = function(rowIndex, rowsToRecycle, animate, afterScroll) {
        var rowNode;
        var rowComp = this.rowCompsByIndex[rowIndex];
        if (!rowComp) {
          rowNode = this.paginationProxy.getRow(rowIndex);
          if (exists(rowNode) && exists(rowsToRecycle) && rowsToRecycle[rowNode.id] && rowNode.alreadyRendered) {
            rowComp = rowsToRecycle[rowNode.id];
            rowsToRecycle[rowNode.id] = null;
          }
        }
        var creatingNewRowComp = !rowComp;
        if (creatingNewRowComp) {
          if (!rowNode) {
            rowNode = this.paginationProxy.getRow(rowIndex);
          }
          if (exists(rowNode)) {
            rowComp = this.createRowComp(rowNode, animate, afterScroll);
          } else {
            return;
          }
        } else {
          rowComp.ensureDomOrder();
        }
        if (rowNode) {
          rowNode.alreadyRendered = true;
        }
        this.rowCompsByIndex[rowIndex] = rowComp;
        return rowComp;
      };
      RowRenderer2.prototype.destroyRowComps = function(rowCompsMap, animate) {
        var delayedFuncs = [];
        iterateObject(rowCompsMap, function(nodeId, rowComp) {
          if (!rowComp) {
            return;
          }
          rowComp.destroy(animate);
          pushAll(delayedFuncs, rowComp.getAndClearDelayedDestroyFunctions());
        });
        executeInAWhile(delayedFuncs);
      };
      RowRenderer2.prototype.checkAngularCompile = function() {
        var _this = this;
        if (this.gridOptionsWrapper.isAngularCompileRows()) {
          window.setTimeout(function() {
            _this.$scope.$apply();
          }, 0);
        }
      };
      RowRenderer2.prototype.workOutFirstAndLastRowsToRender = function() {
        var _this = this;
        var newFirst;
        var newLast;
        if (!this.paginationProxy.isRowsToRender()) {
          newFirst = 0;
          newLast = -1;
        } else if (this.printLayout) {
          newFirst = this.paginationProxy.getPageFirstRow();
          newLast = this.paginationProxy.getPageLastRow();
        } else {
          var paginationOffset = this.paginationProxy.getPixelOffset();
          var maxDivHeightScaler = this.maxDivHeightScaler.getOffset();
          var bodyVRange = this.gridPanel.getVScrollPosition();
          var bodyTopPixel = bodyVRange.top;
          var bodyBottomPixel = bodyVRange.bottom;
          var bufferPixels = this.gridOptionsWrapper.getRowBufferInPixels();
          var firstPixel = bodyTopPixel + paginationOffset + maxDivHeightScaler - bufferPixels;
          var lastPixel = bodyBottomPixel + paginationOffset + maxDivHeightScaler + bufferPixels;
          this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);
          var firstRowIndex = this.paginationProxy.getRowIndexAtPixel(firstPixel);
          var lastRowIndex = this.paginationProxy.getRowIndexAtPixel(lastPixel);
          var pageFirstRow = this.paginationProxy.getPageFirstRow();
          var pageLastRow = this.paginationProxy.getPageLastRow();
          if (firstRowIndex < pageFirstRow) {
            firstRowIndex = pageFirstRow;
          }
          if (lastRowIndex > pageLastRow) {
            lastRowIndex = pageLastRow;
          }
          newFirst = firstRowIndex;
          newLast = lastRowIndex;
        }
        var rowLayoutNormal = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;
        var suppressRowCountRestriction = this.gridOptionsWrapper.isSuppressMaxRenderedRowRestriction();
        var rowBufferMaxSize = Math.max(this.gridOptionsWrapper.getRowBuffer(), 500);
        if (rowLayoutNormal && !suppressRowCountRestriction) {
          if (newLast - newFirst > rowBufferMaxSize) {
            newLast = newFirst + rowBufferMaxSize;
          }
        }
        var firstDiffers = newFirst !== this.firstRenderedRow;
        var lastDiffers = newLast !== this.lastRenderedRow;
        if (firstDiffers || lastDiffers) {
          this.firstRenderedRow = newFirst;
          this.lastRenderedRow = newLast;
          var event_1 = {
            type: Events.EVENT_VIEWPORT_CHANGED,
            firstRow: newFirst,
            lastRow: newLast,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event_1);
        }
        if (this.paginationProxy.isRowsToRender()) {
          var event_2 = {
            type: Events.EVENT_FIRST_DATA_RENDERED,
            firstRow: newFirst,
            lastRow: newLast,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          window.setTimeout(function() {
            return _this.eventService.dispatchEventOnce(event_2);
          }, 50);
        }
      };
      RowRenderer2.prototype.ensureAllRowsInRangeHaveHeightsCalculated = function(topPixel, bottomPixel) {
        var rowHeightsChanged = this.paginationProxy.ensureRowHeightsValid(topPixel, bottomPixel, -1, -1);
        if (rowHeightsChanged) {
          this.sizeContainerToPageHeight();
          this.maxDivHeightScaler.updateOffset();
        }
      };
      RowRenderer2.prototype.getFirstVirtualRenderedRow = function() {
        return this.firstRenderedRow;
      };
      RowRenderer2.prototype.getLastVirtualRenderedRow = function() {
        return this.lastRenderedRow;
      };
      RowRenderer2.prototype.doNotUnVirtualiseRow = function(rowComp) {
        var REMOVE_ROW = false;
        var KEEP_ROW = true;
        var rowNode = rowComp.getRowNode();
        var rowHasFocus = this.focusController.isRowNodeFocused(rowNode);
        var rowIsEditing = rowComp.isEditing();
        var rowIsDetail = rowNode.detail;
        var mightWantToKeepRow = rowHasFocus || rowIsEditing || rowIsDetail;
        if (!mightWantToKeepRow) {
          return REMOVE_ROW;
        }
        var rowNodePresent = this.paginationProxy.isRowPresent(rowNode);
        return rowNodePresent ? KEEP_ROW : REMOVE_ROW;
      };
      RowRenderer2.prototype.createRowComp = function(rowNode, animate, afterScroll) {
        var suppressAnimationFrame = this.gridOptionsWrapper.isSuppressAnimationFrame();
        var useAnimationFrameForCreate = afterScroll && !suppressAnimationFrame && !this.printLayout;
        var rowComp = new RowComp(this.$scope, this.rowContainers.body, this.rowContainers.pinnedLeft, this.rowContainers.pinnedRight, this.rowContainers.fullWidth, rowNode, this.beans, animate, useAnimationFrameForCreate, this.printLayout, this.embedFullWidthRows);
        rowComp.init();
        return rowComp;
      };
      RowRenderer2.prototype.getRenderedNodes = function() {
        var renderedRows = this.rowCompsByIndex;
        return Object.keys(renderedRows).map(function(key) {
          return renderedRows[key].getRowNode();
        });
      };
      RowRenderer2.prototype.navigateToNextCell = function(event, key, currentCell, allowUserOverride) {
        var nextCell = currentCell;
        var hitEdgeOfGrid = false;
        while (nextCell && (nextCell === currentCell || !this.isValidNavigateCell(nextCell))) {
          if (this.gridOptionsWrapper.isEnableRtl()) {
            if (key === KeyCode.LEFT) {
              nextCell = this.getLastCellOfColSpan(nextCell);
            }
          } else if (key === KeyCode.RIGHT) {
            nextCell = this.getLastCellOfColSpan(nextCell);
          }
          nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);
          hitEdgeOfGrid = missing(nextCell);
        }
        if (hitEdgeOfGrid && event && event.keyCode === KeyCode.UP) {
          nextCell = {
            rowIndex: -1,
            rowPinned: null,
            column: currentCell.column
          };
        }
        if (allowUserOverride) {
          var userFunc = this.gridOptionsWrapper.getNavigateToNextCellFunc();
          if (exists(userFunc)) {
            var params = {
              key,
              previousCellPosition: currentCell,
              nextCellPosition: nextCell ? nextCell : null,
              event
            };
            var userCell = userFunc(params);
            if (exists(userCell)) {
              if (userCell.floating) {
                doOnce(function() {
                  console.warn("ag-Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
                }, "no floating in userCell");
                userCell.rowPinned = userCell.floating;
              }
              nextCell = {
                rowPinned: userCell.rowPinned,
                rowIndex: userCell.rowIndex,
                column: userCell.column
              };
            } else {
              nextCell = null;
            }
          }
        }
        if (!nextCell) {
          return;
        }
        if (nextCell.rowIndex < 0) {
          var headerLen = this.beans.headerNavigationService.getHeaderRowCount();
          this.focusController.focusHeaderPosition({ headerRowIndex: headerLen + nextCell.rowIndex, column: currentCell.column });
          return;
        }
        this.ensureCellVisible(nextCell);
        var cellComp = this.getComponentForCell(nextCell);
        if (!cellComp) {
          return;
        }
        nextCell = cellComp.getCellPosition();
        this.ensureCellVisible(nextCell);
        this.focusController.setFocusedCell(nextCell.rowIndex, nextCell.column, nextCell.rowPinned, true);
        if (this.rangeController) {
          this.rangeController.setRangeToCell(nextCell);
        }
      };
      RowRenderer2.prototype.isValidNavigateCell = function(cell) {
        var rowNode = this.rowPositionUtils.getRowNode(cell);
        if (rowNode.detail || rowNode.isFullWidthCell()) {
          return false;
        }
        if (!rowNode.group) {
          return true;
        }
        var pivotMode = this.columnController.isPivotMode();
        var usingFullWidthRows = this.gridOptionsWrapper.isGroupUseEntireRow(pivotMode);
        if (!usingFullWidthRows) {
          return true;
        }
        return false;
      };
      RowRenderer2.prototype.getLastCellOfColSpan = function(cell) {
        var cellComp = this.getComponentForCell(cell);
        if (!cellComp) {
          return cell;
        }
        var colSpanningList = cellComp.getColSpanningList();
        if (colSpanningList.length === 1) {
          return cell;
        }
        return {
          rowIndex: cell.rowIndex,
          column: last(colSpanningList),
          rowPinned: cell.rowPinned
        };
      };
      RowRenderer2.prototype.ensureCellVisible = function(gridCell) {
        if (missing(gridCell.rowPinned)) {
          this.gridPanel.ensureIndexVisible(gridCell.rowIndex);
        }
        if (!gridCell.column.isPinned()) {
          this.gridPanel.ensureColumnVisible(gridCell.column);
        }
        this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter();
        this.animationFrameService.flushAllFrames();
      };
      RowRenderer2.prototype.startEditingCell = function(gridCell, keyPress, charPress) {
        var cell = this.getComponentForCell(gridCell);
        if (cell) {
          cell.startRowOrCellEdit(keyPress, charPress);
        }
      };
      RowRenderer2.prototype.getComponentForCell = function(cellPosition) {
        var rowComponent;
        switch (cellPosition.rowPinned) {
          case Constants.PINNED_TOP:
            rowComponent = this.floatingTopRowComps[cellPosition.rowIndex];
            break;
          case Constants.PINNED_BOTTOM:
            rowComponent = this.floatingBottomRowComps[cellPosition.rowIndex];
            break;
          default:
            rowComponent = this.rowCompsByIndex[cellPosition.rowIndex];
            break;
        }
        if (!rowComponent) {
          return null;
        }
        var cellComponent = rowComponent.getRenderedCellForColumn(cellPosition.column);
        return cellComponent;
      };
      RowRenderer2.prototype.getRowNode = function(gridRow) {
        switch (gridRow.rowPinned) {
          case Constants.PINNED_TOP:
            return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
          case Constants.PINNED_BOTTOM:
            return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
          default:
            return this.rowModel.getRow(gridRow.rowIndex);
        }
      };
      RowRenderer2.prototype.onTabKeyDown = function(previousRenderedCell, keyboardEvent) {
        var backwards = keyboardEvent.shiftKey;
        var success = this.moveToCellAfter(previousRenderedCell, backwards);
        if (success) {
          keyboardEvent.preventDefault();
        } else if (backwards) {
          var _a = previousRenderedCell.getCellPosition(), rowIndex = _a.rowIndex, rowPinned = _a.rowPinned;
          var firstRow = rowPinned ? rowIndex === 0 : rowIndex === this.paginationProxy.getPageFirstRow();
          if (firstRow) {
            keyboardEvent.preventDefault();
            var headerRowIndex = this.beans.headerNavigationService.getHeaderRowCount() - 1;
            var column = last(this.columnController.getAllDisplayedColumns());
            this.focusController.focusHeaderPosition({ headerRowIndex, column });
          }
        } else {
          previousRenderedCell.focusCell(true);
          if (this.focusController.focusNextGridCoreContainer(false)) {
            keyboardEvent.preventDefault();
          }
        }
      };
      RowRenderer2.prototype.tabToNextCell = function(backwards) {
        var focusedCell = this.focusController.getFocusedCell();
        if (missing(focusedCell)) {
          return false;
        }
        var renderedCell = this.getComponentForCell(focusedCell);
        if (missing(renderedCell)) {
          return false;
        }
        var result = this.moveToCellAfter(renderedCell, backwards);
        return result;
      };
      RowRenderer2.prototype.moveToCellAfter = function(previousRenderedCell, backwards) {
        var editing = previousRenderedCell.isEditing();
        var res;
        if (editing) {
          if (this.gridOptionsWrapper.isFullRowEdit()) {
            res = this.moveToNextEditingRow(previousRenderedCell, backwards);
          } else {
            res = this.moveToNextEditingCell(previousRenderedCell, backwards);
          }
        } else {
          res = this.moveToNextCellNotEditing(previousRenderedCell, backwards);
        }
        return res || !!this.focusController.getFocusedHeader();
      };
      RowRenderer2.prototype.moveToNextEditingCell = function(previousRenderedCell, backwards) {
        var gridCell = previousRenderedCell.getCellPosition();
        previousRenderedCell.stopEditing();
        var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, true);
        var foundCell = exists(nextRenderedCell);
        if (foundCell) {
          nextRenderedCell.startEditingIfEnabled(null, null, true);
          nextRenderedCell.focusCell(false);
        }
        return foundCell;
      };
      RowRenderer2.prototype.moveToNextEditingRow = function(previousRenderedCell, backwards) {
        var gridCell = previousRenderedCell.getCellPosition();
        var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, true);
        var foundCell = exists(nextRenderedCell);
        if (foundCell) {
          this.moveEditToNextCellOrRow(previousRenderedCell, nextRenderedCell);
        }
        return foundCell;
      };
      RowRenderer2.prototype.moveToNextCellNotEditing = function(previousRenderedCell, backwards) {
        var gridCell = previousRenderedCell.getCellPosition();
        var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, false);
        var foundCell = exists(nextRenderedCell);
        if (foundCell) {
          nextRenderedCell.focusCell(true);
        }
        return foundCell;
      };
      RowRenderer2.prototype.moveEditToNextCellOrRow = function(previousRenderedCell, nextRenderedCell) {
        var pGridCell = previousRenderedCell.getCellPosition();
        var nGridCell = nextRenderedCell.getCellPosition();
        var rowsMatch = pGridCell.rowIndex === nGridCell.rowIndex && pGridCell.rowPinned === nGridCell.rowPinned;
        if (rowsMatch) {
          previousRenderedCell.setFocusOutOnEditor();
          nextRenderedCell.setFocusInOnEditor();
        } else {
          var pRow = previousRenderedCell.getRenderedRow();
          var nRow = nextRenderedCell.getRenderedRow();
          previousRenderedCell.setFocusOutOnEditor();
          pRow.stopEditing();
          nRow.startRowEditing();
          nextRenderedCell.setFocusInOnEditor();
        }
        nextRenderedCell.focusCell();
      };
      RowRenderer2.prototype.findNextCellToFocusOn = function(gridCell, backwards, startEditing) {
        var nextCell = gridCell;
        while (true) {
          if (!backwards) {
            nextCell = this.getLastCellOfColSpan(nextCell);
          }
          nextCell = this.cellNavigationService.getNextTabbedCell(nextCell, backwards);
          var userFunc = this.gridOptionsWrapper.getTabToNextCellFunc();
          if (exists(userFunc)) {
            var params = {
              backwards,
              editing: startEditing,
              previousCellPosition: gridCell,
              nextCellPosition: nextCell ? nextCell : null
            };
            var userCell = userFunc(params);
            if (exists(userCell)) {
              if (userCell.floating) {
                doOnce(function() {
                  console.warn("ag-Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
                }, "no floating in userCell");
                userCell.rowPinned = userCell.floating;
              }
              nextCell = {
                rowIndex: userCell.rowIndex,
                column: userCell.column,
                rowPinned: userCell.rowPinned
              };
            } else {
              nextCell = null;
            }
          }
          if (!nextCell) {
            return null;
          }
          if (nextCell.rowIndex < 0) {
            var headerLen = this.beans.headerNavigationService.getHeaderRowCount();
            this.focusController.focusHeaderPosition({ headerRowIndex: headerLen + nextCell.rowIndex, column: nextCell.column });
            return null;
          }
          if (startEditing) {
            var rowNode = this.lookupRowNodeForCell(nextCell);
            var cellIsEditable = nextCell.column.isCellEditable(rowNode);
            if (!cellIsEditable) {
              continue;
            }
          }
          var cellIsNotFloating = missing(nextCell.rowPinned);
          if (cellIsNotFloating) {
            this.gridPanel.ensureIndexVisible(nextCell.rowIndex);
          }
          if (!nextCell.column.isPinned()) {
            this.gridPanel.ensureColumnVisible(nextCell.column);
          }
          this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter();
          this.animationFrameService.flushAllFrames();
          var nextCellComp = this.getComponentForCell(nextCell);
          if (missing(nextCellComp)) {
            continue;
          }
          if (nextCellComp.isSuppressNavigable()) {
            continue;
          }
          if (this.rangeController) {
            this.rangeController.setRangeToCell(nextCell);
          }
          return nextCellComp;
        }
      };
      RowRenderer2.prototype.lookupRowNodeForCell = function(cell) {
        if (cell.rowPinned === Constants.PINNED_TOP) {
          return this.pinnedRowModel.getPinnedTopRow(cell.rowIndex);
        }
        if (cell.rowPinned === Constants.PINNED_BOTTOM) {
          return this.pinnedRowModel.getPinnedBottomRow(cell.rowIndex);
        }
        return this.paginationProxy.getRow(cell.rowIndex);
      };
      __decorate$F([
        Autowired("paginationProxy")
      ], RowRenderer2.prototype, "paginationProxy", void 0);
      __decorate$F([
        Autowired("columnController")
      ], RowRenderer2.prototype, "columnController", void 0);
      __decorate$F([
        Autowired("gridOptionsWrapper")
      ], RowRenderer2.prototype, "gridOptionsWrapper", void 0);
      __decorate$F([
        Autowired("$scope")
      ], RowRenderer2.prototype, "$scope", void 0);
      __decorate$F([
        Autowired("pinnedRowModel")
      ], RowRenderer2.prototype, "pinnedRowModel", void 0);
      __decorate$F([
        Autowired("rowModel")
      ], RowRenderer2.prototype, "rowModel", void 0);
      __decorate$F([
        Autowired("loggerFactory")
      ], RowRenderer2.prototype, "loggerFactory", void 0);
      __decorate$F([
        Autowired("focusController")
      ], RowRenderer2.prototype, "focusController", void 0);
      __decorate$F([
        Autowired("cellNavigationService")
      ], RowRenderer2.prototype, "cellNavigationService", void 0);
      __decorate$F([
        Autowired("columnApi")
      ], RowRenderer2.prototype, "columnApi", void 0);
      __decorate$F([
        Autowired("gridApi")
      ], RowRenderer2.prototype, "gridApi", void 0);
      __decorate$F([
        Autowired("beans")
      ], RowRenderer2.prototype, "beans", void 0);
      __decorate$F([
        Autowired("maxDivHeightScaler")
      ], RowRenderer2.prototype, "maxDivHeightScaler", void 0);
      __decorate$F([
        Autowired("animationFrameService")
      ], RowRenderer2.prototype, "animationFrameService", void 0);
      __decorate$F([
        Autowired("rowPositionUtils")
      ], RowRenderer2.prototype, "rowPositionUtils", void 0);
      __decorate$F([
        Optional("rangeController")
      ], RowRenderer2.prototype, "rangeController", void 0);
      __decorate$F([
        __param$5(0, Qualifier("loggerFactory"))
      ], RowRenderer2.prototype, "agWire", null);
      RowRenderer2 = __decorate$F([
        Bean("rowRenderer")
      ], RowRenderer2);
      return RowRenderer2;
    }(BeanStub);
    var CssClassApplier = function() {
      function CssClassApplier2() {
      }
      CssClassApplier2.addHeaderClassesFromColDef = function(abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
        if (missing(abstractColDef)) {
          return;
        }
        this.addColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
      };
      CssClassApplier2.addToolPanelClassesFromColDef = function(abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
        if (missing(abstractColDef)) {
          return;
        }
        this.addColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
      };
      CssClassApplier2.addColumnClassesFromCollDef = function(classesOrFunc, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
        if (missing(classesOrFunc)) {
          return;
        }
        var classToUse;
        if (typeof classesOrFunc === "function") {
          var params = {
            colDef: abstractColDef,
            column,
            columnGroup,
            context: gridOptionsWrapper.getContext(),
            api: gridOptionsWrapper.getApi()
          };
          var headerClassFunc = classesOrFunc;
          classToUse = headerClassFunc(params);
        } else {
          classToUse = classesOrFunc;
        }
        if (typeof classToUse === "string") {
          addCssClass(eHeaderCell, classToUse);
        } else if (Array.isArray(classToUse)) {
          classToUse.forEach(function(cssClassItem) {
            addCssClass(eHeaderCell, cssClassItem);
          });
        }
      };
      return CssClassApplier2;
    }();
    var __extends$J = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$G = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HoverFeature = function(_super) {
      __extends$J(HoverFeature2, _super);
      function HoverFeature2(columns, element) {
        var _this = _super.call(this) || this;
        _this.columns = columns;
        _this.element = element;
        return _this;
      }
      HoverFeature2.prototype.postConstruct = function() {
        this.addMouseHoverListeners();
      };
      HoverFeature2.prototype.addMouseHoverListeners = function() {
        this.addManagedListener(this.element, "mouseout", this.onMouseOut.bind(this));
        this.addManagedListener(this.element, "mouseover", this.onMouseOver.bind(this));
      };
      HoverFeature2.prototype.onMouseOut = function() {
        this.columnHoverService.clearMouseOver();
      };
      HoverFeature2.prototype.onMouseOver = function() {
        this.columnHoverService.setMouseOver(this.columns);
      };
      __decorate$G([
        Autowired("columnHoverService")
      ], HoverFeature2.prototype, "columnHoverService", void 0);
      __decorate$G([
        PostConstruct
      ], HoverFeature2.prototype, "postConstruct", null);
      return HoverFeature2;
    }(BeanStub);
    var __extends$K = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$H = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SetLeftFeature = function(_super) {
      __extends$K(SetLeftFeature2, _super);
      function SetLeftFeature2(columnOrGroup, eCell, beans, colsSpanning) {
        var _this = _super.call(this) || this;
        _this.columnOrGroup = columnOrGroup;
        _this.eCell = eCell;
        _this.ariaEl = _this.eCell.querySelector("[role=columnheader]") || _this.eCell;
        _this.colsSpanning = colsSpanning;
        _this.beans = beans;
        _this.printLayout = beans.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        return _this;
      }
      SetLeftFeature2.prototype.setColsSpanning = function(colsSpanning) {
        this.colsSpanning = colsSpanning;
        this.onLeftChanged();
      };
      SetLeftFeature2.prototype.getColumnOrGroup = function() {
        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
          return last(this.colsSpanning);
        }
        return this.columnOrGroup;
      };
      SetLeftFeature2.prototype.postConstruct = function() {
        this.addManagedListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
        this.setLeftFirstTime();
      };
      SetLeftFeature2.prototype.setLeftFirstTime = function() {
        var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();
        var oldLeftExists = exists(this.columnOrGroup.getOldLeft());
        var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;
        if (animateColumnMove) {
          this.animateInLeft();
        } else {
          this.onLeftChanged();
        }
      };
      SetLeftFeature2.prototype.animateInLeft = function() {
        var _this = this;
        var left = this.getColumnOrGroup().getLeft();
        var oldLeft = this.getColumnOrGroup().getOldLeft();
        this.setLeft(oldLeft);
        this.actualLeft = left;
        this.beans.columnAnimationService.executeNextVMTurn(function() {
          if (_this.actualLeft === left) {
            _this.setLeft(left);
          }
        });
      };
      SetLeftFeature2.prototype.onLeftChanged = function() {
        var colOrGroup = this.getColumnOrGroup();
        var left = colOrGroup.getLeft();
        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);
        this.setLeft(this.actualLeft);
      };
      SetLeftFeature2.prototype.modifyLeftForPrintLayout = function(colOrGroup, leftPosition) {
        if (!this.printLayout) {
          return leftPosition;
        }
        if (colOrGroup.getPinned() === Constants.PINNED_LEFT) {
          return leftPosition;
        }
        if (colOrGroup.getPinned() === Constants.PINNED_RIGHT) {
          var leftWidth_1 = this.beans.columnController.getPinnedLeftContainerWidth();
          var bodyWidth = this.beans.columnController.getBodyContainerWidth();
          return leftWidth_1 + bodyWidth + leftPosition;
        }
        var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();
        return leftWidth + leftPosition;
      };
      SetLeftFeature2.prototype.setLeft = function(value) {
        if (exists(value)) {
          this.eCell.style.left = value + "px";
        }
        var indexColumn;
        if (this.columnOrGroup instanceof Column) {
          indexColumn = this.columnOrGroup;
        } else {
          var columnGroup = this.columnOrGroup;
          var children = columnGroup.getLeafColumns();
          if (!children.length) {
            return;
          }
          if (children.length > 1) {
            setAriaColSpan(this.ariaEl, children.length);
          }
          indexColumn = children[0];
        }
        var index = this.beans.columnController.getAriaColumnIndex(indexColumn);
        setAriaColIndex(this.ariaEl, index);
      };
      __decorate$H([
        PostConstruct
      ], SetLeftFeature2.prototype, "postConstruct", null);
      return SetLeftFeature2;
    }(BeanStub);
    var __extends$L = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$I = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgAbstractLabel = function(_super) {
      __extends$L(AgAbstractLabel2, _super);
      function AgAbstractLabel2(config, template) {
        var _this = _super.call(this, template) || this;
        _this.labelSeparator = "";
        _this.labelAlignment = "left";
        _this.label = "";
        _this.config = config || {};
        return _this;
      }
      AgAbstractLabel2.prototype.postConstruct = function() {
        addCssClass(this.getGui(), "ag-labeled");
        addCssClass(this.eLabel, "ag-label");
        var _a = this.config, labelSeparator = _a.labelSeparator, label = _a.label, labelWidth = _a.labelWidth, labelAlignment = _a.labelAlignment;
        if (labelSeparator != null) {
          this.setLabelSeparator(labelSeparator);
        }
        if (label != null) {
          this.setLabel(label);
        }
        if (labelWidth != null) {
          this.setLabelWidth(labelWidth);
        }
        this.setLabelAlignment(labelAlignment || this.labelAlignment);
        this.refreshLabel();
      };
      AgAbstractLabel2.prototype.refreshLabel = function() {
        clearElement(this.eLabel);
        if (typeof this.label === "string") {
          this.eLabel.innerText = this.label + this.labelSeparator;
        } else {
          this.eLabel.appendChild(this.label);
        }
        addOrRemoveCssClass(this.eLabel, "ag-hidden", this.label === "");
      };
      AgAbstractLabel2.prototype.setLabelSeparator = function(labelSeparator) {
        if (this.labelSeparator === labelSeparator) {
          return this;
        }
        this.labelSeparator = labelSeparator;
        if (this.label != null) {
          this.refreshLabel();
        }
        return this;
      };
      AgAbstractLabel2.prototype.getLabelId = function() {
        this.eLabel.id = this.eLabel.id || "ag-" + this.getCompId() + "-label";
        return this.eLabel.id;
      };
      AgAbstractLabel2.prototype.getLabel = function() {
        return this.label;
      };
      AgAbstractLabel2.prototype.setLabel = function(label) {
        if (this.label === label) {
          return this;
        }
        this.label = label;
        this.refreshLabel();
        return this;
      };
      AgAbstractLabel2.prototype.setLabelAlignment = function(alignment) {
        var eGui = this.getGui();
        addOrRemoveCssClass(eGui, "ag-label-align-left", alignment === "left");
        addOrRemoveCssClass(eGui, "ag-label-align-right", alignment === "right");
        addOrRemoveCssClass(eGui, "ag-label-align-top", alignment === "top");
        return this;
      };
      AgAbstractLabel2.prototype.setLabelWidth = function(width) {
        if (this.label == null) {
          return this;
        }
        setElementWidth(this.eLabel, width);
        return this;
      };
      __decorate$I([
        PostConstruct
      ], AgAbstractLabel2.prototype, "postConstruct", null);
      return AgAbstractLabel2;
    }(Component);
    var __extends$M = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgAbstractField = function(_super) {
      __extends$M(AgAbstractField2, _super);
      function AgAbstractField2(config, template, className) {
        var _this = _super.call(this, config, template) || this;
        _this.className = className;
        _this.disabled = false;
        return _this;
      }
      AgAbstractField2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        addCssClass(this.getGui(), this.className);
      };
      AgAbstractField2.prototype.onValueChange = function(callbackFn) {
        var _this = this;
        this.addManagedListener(this, AgAbstractField2.EVENT_CHANGED, function() {
          return callbackFn(_this.getValue());
        });
        return this;
      };
      AgAbstractField2.prototype.getWidth = function() {
        return this.getGui().clientWidth;
      };
      AgAbstractField2.prototype.setWidth = function(width) {
        setFixedWidth(this.getGui(), width);
        return this;
      };
      AgAbstractField2.prototype.getValue = function() {
        return this.value;
      };
      AgAbstractField2.prototype.setValue = function(value, silent) {
        if (this.value === value) {
          return this;
        }
        this.value = value;
        if (!silent) {
          this.dispatchEvent({ type: AgAbstractField2.EVENT_CHANGED });
        }
        return this;
      };
      AgAbstractField2.prototype.setDisabled = function(disabled) {
        disabled = !!disabled;
        var element = this.getGui();
        setDisabled(element, disabled);
        addOrRemoveCssClass(element, "ag-disabled", disabled);
        this.disabled = disabled;
        return this;
      };
      AgAbstractField2.prototype.isDisabled = function() {
        return !!this.disabled;
      };
      AgAbstractField2.EVENT_CHANGED = "valueChange";
      return AgAbstractField2;
    }(AgAbstractLabel);
    var __extends$N = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$J = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgAbstractInputField = function(_super) {
      __extends$N(AgAbstractInputField2, _super);
      function AgAbstractInputField2(config, className, inputType, displayFieldTag) {
        if (inputType === void 0) {
          inputType = "text";
        }
        if (displayFieldTag === void 0) {
          displayFieldTag = "input";
        }
        var _this = _super.call(this, config, '\n            <div role="presentation">\n                <div ref="eLabel" class="ag-input-field-label"></div>\n                <div ref="eWrapper" class="ag-wrapper ag-input-wrapper" role="presentation">\n                    <' + displayFieldTag + ' ref="eInput" class="ag-input-field-input"></' + displayFieldTag + ">\n                </div>\n            </div>", className) || this;
        _this.inputType = inputType;
        _this.displayFieldTag = displayFieldTag;
        return _this;
      }
      AgAbstractInputField2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        this.setInputType();
        addCssClass(this.eLabel, this.className + "-label");
        addCssClass(this.eWrapper, this.className + "-input-wrapper");
        addCssClass(this.eInput, this.className + "-input");
        addCssClass(this.getGui(), "ag-input-field");
        this.eInput.id = this.eInput.id || "ag-" + this.getCompId() + "-input";
        var _a = this.config, width = _a.width, value = _a.value;
        if (width != null) {
          this.setWidth(width);
        }
        if (value != null) {
          this.setValue(value);
        }
        this.addInputListeners();
      };
      AgAbstractInputField2.prototype.refreshLabel = function() {
        if (exists(this.getLabel())) {
          setAriaLabelledBy(this.eInput, this.getLabelId());
        } else {
          this.eInput.removeAttribute("aria-labelledby");
        }
        _super.prototype.refreshLabel.call(this);
      };
      AgAbstractInputField2.prototype.addInputListeners = function() {
        var _this = this;
        this.addManagedListener(this.eInput, "input", function(e) {
          return _this.setValue(e.target.value);
        });
      };
      AgAbstractInputField2.prototype.setInputType = function() {
        if (this.displayFieldTag === "input") {
          this.eInput.setAttribute("type", this.inputType);
        }
      };
      AgAbstractInputField2.prototype.getInputElement = function() {
        return this.eInput;
      };
      AgAbstractInputField2.prototype.setInputWidth = function(width) {
        setElementWidth(this.eWrapper, width);
        return this;
      };
      AgAbstractInputField2.prototype.setInputName = function(name) {
        this.getInputElement().setAttribute("name", name);
        return this;
      };
      AgAbstractInputField2.prototype.getFocusableElement = function() {
        return this.eInput;
      };
      AgAbstractInputField2.prototype.setMaxLength = function(length) {
        var eInput = this.eInput;
        eInput.maxLength = length;
        return this;
      };
      AgAbstractInputField2.prototype.setInputPlaceholder = function(placeholder) {
        addOrRemoveAttribute(this.eInput, "placeholder", placeholder);
        return this;
      };
      AgAbstractInputField2.prototype.setInputAriaLabel = function(label) {
        setAriaLabel(this.eInput, label);
        return this;
      };
      AgAbstractInputField2.prototype.setDisabled = function(disabled) {
        setDisabled(this.eInput, disabled);
        return _super.prototype.setDisabled.call(this, disabled);
      };
      __decorate$J([
        RefSelector("eLabel")
      ], AgAbstractInputField2.prototype, "eLabel", void 0);
      __decorate$J([
        RefSelector("eWrapper")
      ], AgAbstractInputField2.prototype, "eWrapper", void 0);
      __decorate$J([
        RefSelector("eInput")
      ], AgAbstractInputField2.prototype, "eInput", void 0);
      return AgAbstractInputField2;
    }(AgAbstractField);
    var __extends$O = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$K = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgCheckbox = function(_super) {
      __extends$O(AgCheckbox2, _super);
      function AgCheckbox2(config, className, inputType) {
        if (className === void 0) {
          className = "ag-checkbox";
        }
        if (inputType === void 0) {
          inputType = "checkbox";
        }
        var _this = _super.call(this, config, className, inputType) || this;
        _this.labelAlignment = "right";
        _this.selected = false;
        _this.readOnly = false;
        _this.passive = false;
        return _this;
      }
      AgCheckbox2.prototype.addInputListeners = function() {
        this.addManagedListener(this.eInput, "click", this.onCheckboxClick.bind(this));
        this.addManagedListener(this.eLabel, "click", this.toggle.bind(this));
      };
      AgCheckbox2.prototype.getNextValue = function() {
        return this.selected === void 0 ? true : !this.selected;
      };
      AgCheckbox2.prototype.setPassive = function(passive) {
        this.passive = passive;
      };
      AgCheckbox2.prototype.isReadOnly = function() {
        return this.readOnly;
      };
      AgCheckbox2.prototype.setReadOnly = function(readOnly) {
        addOrRemoveCssClass(this.eWrapper, "ag-disabled", readOnly);
        this.eInput.disabled = readOnly;
        this.readOnly = readOnly;
      };
      AgCheckbox2.prototype.setDisabled = function(disabled) {
        addOrRemoveCssClass(this.eWrapper, "ag-disabled", disabled);
        return _super.prototype.setDisabled.call(this, disabled);
      };
      AgCheckbox2.prototype.toggle = function() {
        var previousValue = this.isSelected();
        var nextValue = this.getNextValue();
        if (this.passive) {
          this.dispatchChange(nextValue, previousValue);
        } else {
          this.setValue(nextValue);
        }
      };
      AgCheckbox2.prototype.getValue = function() {
        return this.isSelected();
      };
      AgCheckbox2.prototype.setValue = function(value, silent) {
        this.refreshSelectedClass(value);
        this.setSelected(value, silent);
        return this;
      };
      AgCheckbox2.prototype.setName = function(name) {
        var input = this.getInputElement();
        input.name = name;
        return this;
      };
      AgCheckbox2.prototype.isSelected = function() {
        return this.selected;
      };
      AgCheckbox2.prototype.setSelected = function(selected, silent) {
        if (this.isSelected() === selected) {
          return;
        }
        var previousValue = this.isSelected();
        selected = this.selected = typeof selected === "boolean" ? selected : void 0;
        this.eInput.checked = selected;
        this.eInput.indeterminate = selected === void 0;
        if (!silent) {
          this.dispatchChange(this.selected, previousValue);
        }
      };
      AgCheckbox2.prototype.dispatchChange = function(selected, previousValue, event) {
        this.dispatchEvent({ type: AgCheckbox2.EVENT_CHANGED, selected, previousValue, event });
        var input = this.getInputElement();
        var checkboxChangedEvent = {
          type: Events.EVENT_CHECKBOX_CHANGED,
          id: input.id,
          name: input.name,
          selected,
          previousValue
        };
        this.eventService.dispatchEvent(checkboxChangedEvent);
      };
      AgCheckbox2.prototype.onCheckboxClick = function(e) {
        if (this.passive) {
          return;
        }
        var previousValue = this.isSelected();
        var selected = this.selected = e.target.checked;
        this.refreshSelectedClass(selected);
        this.dispatchChange(selected, previousValue, e);
      };
      AgCheckbox2.prototype.refreshSelectedClass = function(value) {
        addOrRemoveCssClass(this.eWrapper, "ag-checked", value === true);
        addOrRemoveCssClass(this.eWrapper, "ag-indeterminate", value == null);
      };
      __decorate$K([
        Autowired("gridOptionsWrapper")
      ], AgCheckbox2.prototype, "gridOptionsWrapper", void 0);
      return AgCheckbox2;
    }(AgAbstractInputField);
    var __extends$P = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$L = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SelectAllFeature = function(_super) {
      __extends$P(SelectAllFeature2, _super);
      function SelectAllFeature2(cbSelectAll, column) {
        var _this = _super.call(this) || this;
        _this.cbSelectAllVisible = false;
        _this.processingEventFromCheckbox = false;
        _this.cbSelectAll = cbSelectAll;
        _this.column = column;
        var colDef = column.getColDef();
        _this.filteredOnly = colDef ? !!colDef.headerCheckboxSelectionFilteredOnly : false;
        return _this;
      }
      SelectAllFeature2.prototype.postConstruct = function() {
        this.showOrHideSelectAll();
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideSelectAll.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));
        this.addManagedListener(this.cbSelectAll, AgCheckbox.EVENT_CHANGED, this.onCbSelectAll.bind(this));
        this.cbSelectAll.getInputElement().setAttribute("tabindex", "-1");
        this.refreshSelectAllLabel();
      };
      SelectAllFeature2.prototype.showOrHideSelectAll = function() {
        this.cbSelectAllVisible = this.isCheckboxSelection();
        this.cbSelectAll.setDisplayed(this.cbSelectAllVisible);
        if (this.cbSelectAllVisible) {
          this.checkRightRowModelType();
          this.updateStateOfCheckbox();
        }
      };
      SelectAllFeature2.prototype.onModelChanged = function() {
        if (!this.cbSelectAllVisible) {
          return;
        }
        this.updateStateOfCheckbox();
      };
      SelectAllFeature2.prototype.onSelectionChanged = function() {
        if (!this.cbSelectAllVisible) {
          return;
        }
        this.updateStateOfCheckbox();
      };
      SelectAllFeature2.prototype.getNextCheckboxState = function(selectionCount) {
        if (selectionCount.selected === 0 && selectionCount.notSelected === 0) {
          return false;
        }
        if (selectionCount.selected > 0 && selectionCount.notSelected > 0) {
          return null;
        }
        if (selectionCount.selected > 0) {
          return true;
        }
        return false;
      };
      SelectAllFeature2.prototype.updateStateOfCheckbox = function() {
        if (this.processingEventFromCheckbox) {
          return;
        }
        this.processingEventFromCheckbox = true;
        var selectionCount = this.getSelectionCount();
        var allSelected = this.getNextCheckboxState(selectionCount);
        this.cbSelectAll.setValue(allSelected);
        this.refreshSelectAllLabel();
        this.processingEventFromCheckbox = false;
      };
      SelectAllFeature2.prototype.refreshSelectAllLabel = function() {
        var checked = this.cbSelectAll.getValue();
        this.cbSelectAll.setInputAriaLabel("Press Space to toggle all rows selection (" + (checked ? "checked" : "unchecked") + ")");
      };
      SelectAllFeature2.prototype.getSelectionCount = function() {
        var _this = this;
        var selectedCount = 0;
        var notSelectedCount = 0;
        var callback = function(node) {
          if (_this.gridOptionsWrapper.isGroupSelectsChildren() && node.group) {
            return;
          }
          if (node.isSelected()) {
            selectedCount++;
          } else if (!node.selectable)
            ;
          else {
            notSelectedCount++;
          }
        };
        if (this.filteredOnly) {
          this.gridApi.forEachNodeAfterFilter(callback);
        } else {
          this.gridApi.forEachNode(callback);
        }
        return {
          notSelected: notSelectedCount,
          selected: selectedCount
        };
      };
      SelectAllFeature2.prototype.checkRightRowModelType = function() {
        var rowModelType = this.rowModel.getType();
        var rowModelMatches = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        if (!rowModelMatches) {
          console.warn("ag-Grid: selectAllCheckbox is only available if using normal row model, you are using " + rowModelType);
        }
      };
      SelectAllFeature2.prototype.onCbSelectAll = function() {
        if (this.processingEventFromCheckbox) {
          return;
        }
        if (!this.cbSelectAllVisible) {
          return;
        }
        var value = this.cbSelectAll.getValue();
        if (value) {
          this.selectionController.selectAllRowNodes(this.filteredOnly);
        } else {
          this.selectionController.deselectAllRowNodes(this.filteredOnly);
        }
      };
      SelectAllFeature2.prototype.isCheckboxSelection = function() {
        var result = this.column.getColDef().headerCheckboxSelection;
        if (typeof result === "function") {
          var func = result;
          result = func({
            column: this.column,
            colDef: this.column.getColDef(),
            columnApi: this.columnApi,
            api: this.gridApi
          });
        }
        if (result) {
          if (this.gridOptionsWrapper.isRowModelServerSide()) {
            console.warn("headerCheckboxSelection is not supported for Server Side Row Model");
            return false;
          }
          if (this.gridOptionsWrapper.isRowModelInfinite()) {
            console.warn("headerCheckboxSelection is not supported for Infinite Row Model");
            return false;
          }
          if (this.gridOptionsWrapper.isRowModelViewport()) {
            console.warn("headerCheckboxSelection is not supported for Viewport Row Model");
            return false;
          }
          return true;
        }
        return false;
      };
      __decorate$L([
        Autowired("gridApi")
      ], SelectAllFeature2.prototype, "gridApi", void 0);
      __decorate$L([
        Autowired("columnApi")
      ], SelectAllFeature2.prototype, "columnApi", void 0);
      __decorate$L([
        Autowired("rowModel")
      ], SelectAllFeature2.prototype, "rowModel", void 0);
      __decorate$L([
        Autowired("selectionController")
      ], SelectAllFeature2.prototype, "selectionController", void 0);
      __decorate$L([
        Autowired("gridOptionsWrapper")
      ], SelectAllFeature2.prototype, "gridOptionsWrapper", void 0);
      __decorate$L([
        PostConstruct
      ], SelectAllFeature2.prototype, "postConstruct", null);
      return SelectAllFeature2;
    }(BeanStub);
    var __extends$Q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AbstractHeaderWrapper = function(_super) {
      __extends$Q(AbstractHeaderWrapper2, _super);
      function AbstractHeaderWrapper2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AbstractHeaderWrapper2.prototype.getColumn = function() {
        return this.column;
      };
      AbstractHeaderWrapper2.prototype.getPinned = function() {
        return this.pinned;
      };
      return AbstractHeaderWrapper2;
    }(ManagedFocusComponent);
    var __extends$R = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$M = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderWrapperComp = function(_super) {
      __extends$R(HeaderWrapperComp2, _super);
      function HeaderWrapperComp2(column, pinned) {
        var _this = _super.call(this, HeaderWrapperComp2.TEMPLATE) || this;
        _this.headerCompVersion = 0;
        _this.refreshFunctions = [];
        _this.column = column;
        _this.pinned = pinned;
        return _this;
      }
      HeaderWrapperComp2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        this.colDefVersion = this.columnController.getColDefVersion();
        this.updateState();
        this.appendHeaderComp();
        this.setupWidth();
        this.setupMovingCss();
        this.setupTooltip();
        this.setupResize();
        this.setupMenuClass();
        this.setupSortableClass();
        this.addColumnHoverListener();
        this.addActiveHeaderMouseListeners();
        this.createManagedBean(new HoverFeature([this.column], this.getGui()));
        this.addManagedListener(this.column, Column.EVENT_FILTER_ACTIVE_CHANGED, this.onFilterChanged.bind(this));
        this.onFilterChanged();
        this.createManagedBean(new SelectAllFeature(this.cbSelectAll, this.column));
        this.createManagedBean(new SetLeftFeature(this.column, this.getGui(), this.beans));
        this.addAttributes();
        CssClassApplier.addHeaderClassesFromColDef(this.column.getColDef(), this.getGui(), this.gridOptionsWrapper, this.column, null);
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));
      };
      HeaderWrapperComp2.prototype.onColumnValueChanged = function() {
        if (this.displayName !== this.calculateDisplayName()) {
          this.refresh();
        }
      };
      HeaderWrapperComp2.prototype.updateState = function() {
        var colDef = this.column.getColDef();
        this.sortable = colDef.sortable;
        this.displayName = this.calculateDisplayName();
        this.draggable = this.workOutDraggable();
      };
      HeaderWrapperComp2.prototype.calculateDisplayName = function() {
        return this.columnController.getDisplayNameForColumn(this.column, "header", true);
      };
      HeaderWrapperComp2.prototype.onNewColumnsLoaded = function() {
        var colDefVersionNow = this.columnController.getColDefVersion();
        if (colDefVersionNow != this.colDefVersion) {
          this.colDefVersion = colDefVersionNow;
          this.refresh();
        }
      };
      HeaderWrapperComp2.prototype.refresh = function() {
        this.updateState();
        var colDef = this.column.getColDef();
        var newHeaderCompConfigured = this.colDefHeaderComponent != colDef.headerComponent || this.colDefHeaderComponentFramework != colDef.headerComponentFramework;
        var headerCompRefreshed = newHeaderCompConfigured ? false : this.attemptHeaderCompRefresh();
        if (headerCompRefreshed) {
          var dragSourceIsMissing = this.draggable && !this.dragAndDropService;
          var dragSourceNeedsRemoving = !this.draggable && this.dragAndDropService;
          if (dragSourceIsMissing || dragSourceNeedsRemoving) {
            this.attachDraggingToHeaderComp();
          }
        } else {
          this.appendHeaderComp();
        }
        this.refreshFunctions.forEach(function(f) {
          return f();
        });
      };
      HeaderWrapperComp2.prototype.destroyHeaderComp = function() {
        if (this.headerComp) {
          this.getGui().removeChild(this.headerCompGui);
          this.headerComp = this.destroyBean(this.headerComp);
          this.headerCompGui = void 0;
        }
        this.removeMoveDragSource();
      };
      HeaderWrapperComp2.prototype.removeMoveDragSource = function() {
        if (this.moveDragSource) {
          this.dragAndDropService.removeDragSource(this.moveDragSource);
          this.moveDragSource = void 0;
        }
      };
      HeaderWrapperComp2.prototype.attemptHeaderCompRefresh = function() {
        if (!this.headerComp) {
          return true;
        }
        if (!this.headerComp.refresh) {
          return false;
        }
        var params = this.createParams();
        var finalParams = this.userComponentFactory.createFinalParams(this.getComponentHolder(), "headerComponent", params);
        var res = this.headerComp.refresh(finalParams);
        return res;
      };
      HeaderWrapperComp2.prototype.addActiveHeaderMouseListeners = function() {
        var _this = this;
        var listener = function(e) {
          return _this.setActiveHeader(e.type === "mouseenter");
        };
        this.addManagedListener(this.getGui(), "mouseenter", listener);
        this.addManagedListener(this.getGui(), "mouseleave", listener);
      };
      HeaderWrapperComp2.prototype.setActiveHeader = function(active) {
        addOrRemoveCssClass(this.getGui(), "ag-header-active", active);
      };
      HeaderWrapperComp2.prototype.onFocusIn = function(e) {
        if (!this.getGui().contains(e.relatedTarget)) {
          var headerRow = this.getParentComponent();
          this.focusController.setFocusedHeader(headerRow.getRowIndex(), this.getColumn());
        }
        this.setActiveHeader(true);
      };
      HeaderWrapperComp2.prototype.onFocusOut = function(e) {
        if (this.getGui().contains(e.relatedTarget)) {
          return;
        }
        this.setActiveHeader(false);
      };
      HeaderWrapperComp2.prototype.handleKeyDown = function(e) {
        var headerComp = this.headerComp;
        if (!headerComp) {
          return;
        }
        if (e.keyCode === KeyCode.SPACE) {
          var checkbox = this.cbSelectAll;
          if (checkbox.isDisplayed() && !checkbox.getGui().contains(document.activeElement)) {
            e.preventDefault();
            checkbox.setValue(!checkbox.getValue());
          }
        }
        if (e.keyCode === KeyCode.ENTER) {
          if (e.ctrlKey || e.metaKey) {
            if (this.menuEnabled && headerComp.showMenu) {
              e.preventDefault();
              headerComp.showMenu();
            }
          } else if (this.sortable) {
            var multiSort = e.shiftKey;
            this.sortController.progressSort(this.column, multiSort, "uiColumnSorted");
          }
        }
      };
      HeaderWrapperComp2.prototype.onTabKeyDown = function() {
      };
      HeaderWrapperComp2.prototype.getComponentHolder = function() {
        return this.column.getColDef();
      };
      HeaderWrapperComp2.prototype.addColumnHoverListener = function() {
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
        this.onColumnHover();
      };
      HeaderWrapperComp2.prototype.onColumnHover = function() {
        var isHovered = this.columnHoverService.isHovered(this.column);
        addOrRemoveCssClass(this.getGui(), "ag-column-hover", isHovered);
      };
      HeaderWrapperComp2.prototype.setupSortableClass = function() {
        var _this = this;
        var eGui = this.getGui();
        var updateSortableCssClass = function() {
          addOrRemoveCssClass(eGui, "ag-header-cell-sortable", _this.sortable);
        };
        var updateAriaSort = function() {
          if (_this.sortable) {
            setAriaSort(eGui, getAriaSortState(_this.column));
          } else {
            removeAriaSort(eGui);
          }
        };
        updateSortableCssClass();
        updateAriaSort();
        this.refreshFunctions.push(updateSortableCssClass);
        this.refreshFunctions.push(updateAriaSort);
        this.addManagedListener(this.column, Column.EVENT_SORT_CHANGED, updateAriaSort.bind(this));
      };
      HeaderWrapperComp2.prototype.onFilterChanged = function() {
        var filterPresent = this.column.isFilterActive();
        addOrRemoveCssClass(this.getGui(), "ag-header-cell-filtered", filterPresent);
      };
      HeaderWrapperComp2.prototype.appendHeaderComp = function() {
        this.headerCompVersion++;
        var colDef = this.column.getColDef();
        this.colDefHeaderComponent = colDef.headerComponent;
        this.colDefHeaderComponentFramework = colDef.headerComponentFramework;
        var params = this.createParams();
        var callback = this.afterHeaderCompCreated.bind(this, this.headerCompVersion);
        this.userComponentFactory.newHeaderComponent(params).then(callback);
      };
      HeaderWrapperComp2.prototype.createParams = function() {
        var _this = this;
        var colDef = this.column.getColDef();
        this.menuEnabled = this.menuFactory.isMenuEnabled(this.column) && !colDef.suppressMenu;
        var params = {
          column: this.column,
          displayName: this.displayName,
          enableSorting: colDef.sortable,
          enableMenu: this.menuEnabled,
          showColumnMenu: function(source) {
            _this.gridApi.showColumnMenuAfterButtonClick(_this.column, source);
          },
          progressSort: function(multiSort) {
            _this.sortController.progressSort(_this.column, !!multiSort, "uiColumnSorted");
          },
          setSort: function(sort, multiSort) {
            _this.sortController.setSortForColumn(_this.column, sort, !!multiSort, "uiColumnSorted");
          },
          api: this.gridApi,
          columnApi: this.columnApi,
          context: this.gridOptionsWrapper.getContext()
        };
        return params;
      };
      HeaderWrapperComp2.prototype.afterHeaderCompCreated = function(version, headerComp) {
        if (version != this.headerCompVersion || !this.isAlive()) {
          this.destroyBean(headerComp);
          return;
        }
        this.destroyHeaderComp();
        this.headerComp = headerComp;
        this.headerCompGui = headerComp.getGui();
        this.getGui().appendChild(this.headerCompGui);
        this.attachDraggingToHeaderComp();
      };
      HeaderWrapperComp2.prototype.onColumnMovingChanged = function() {
        if (this.column.isMoving()) {
          addCssClass(this.getGui(), "ag-header-cell-moving");
        } else {
          removeCssClass(this.getGui(), "ag-header-cell-moving");
        }
      };
      HeaderWrapperComp2.prototype.workOutDraggable = function() {
        var colDef = this.column.getColDef();
        var isSuppressMovableColumns = this.gridOptionsWrapper.isSuppressMovableColumns();
        var colCanMove = !isSuppressMovableColumns && !colDef.suppressMovable && !colDef.lockPosition;
        return colCanMove || colDef.enableRowGroup || colDef.enablePivot;
      };
      HeaderWrapperComp2.prototype.attachDraggingToHeaderComp = function() {
        var _this = this;
        this.removeMoveDragSource();
        if (!this.draggable) {
          return;
        }
        this.moveDragSource = {
          type: exports.DragSourceType.HeaderCell,
          eElement: this.headerCompGui,
          defaultIconName: DragAndDropService.ICON_HIDE,
          getDragItem: function() {
            return _this.createDragItem();
          },
          dragItemName: this.displayName,
          onDragStarted: function() {
            return _this.column.setMoving(true, "uiColumnMoved");
          },
          onDragStopped: function() {
            return _this.column.setMoving(false, "uiColumnMoved");
          }
        };
        this.dragAndDropService.addDragSource(this.moveDragSource, true);
      };
      HeaderWrapperComp2.prototype.createDragItem = function() {
        var visibleState = {};
        visibleState[this.column.getId()] = this.column.isVisible();
        return {
          columns: [this.column],
          visibleState
        };
      };
      HeaderWrapperComp2.prototype.setupResize = function() {
        var _this = this;
        var colDef = this.getComponentHolder();
        var destroyResizeFuncs = [];
        var canResize;
        var canAutosize;
        var addResize = function() {
          setDisplayed(_this.eResize, canResize);
          if (!canResize) {
            return;
          }
          var finishedWithResizeFunc = _this.horizontalResizeService.addResizeBar({
            eResizeBar: _this.eResize,
            onResizeStart: _this.onResizeStart.bind(_this),
            onResizing: _this.onResizing.bind(_this, false),
            onResizeEnd: _this.onResizing.bind(_this, true)
          });
          destroyResizeFuncs.push(finishedWithResizeFunc);
          if (canAutosize) {
            var skipHeaderOnAutoSize_1 = _this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
            var autoSizeColListener_1 = function() {
              _this.columnController.autoSizeColumn(_this.column, skipHeaderOnAutoSize_1, "uiColumnResized");
            };
            _this.eResize.addEventListener("dblclick", autoSizeColListener_1);
            var touchListener_1 = new TouchListener(_this.eResize);
            touchListener_1.addEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener_1);
            _this.addDestroyFunc(function() {
              _this.eResize.removeEventListener("dblclick", autoSizeColListener_1);
              touchListener_1.removeEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener_1);
              touchListener_1.destroy();
            });
          }
        };
        var removeResize = function() {
          destroyResizeFuncs.forEach(function(f) {
            return f();
          });
          destroyResizeFuncs.length = 0;
        };
        var refresh = function() {
          var resize = _this.column.isResizable();
          var autoSize = !_this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;
          var propertyChange = resize !== canResize || autoSize !== canAutosize;
          if (propertyChange) {
            canResize = resize;
            canAutosize = autoSize;
            removeResize();
            addResize();
          }
        };
        refresh();
        this.addDestroyFunc(removeResize);
        this.refreshFunctions.push(refresh);
      };
      HeaderWrapperComp2.prototype.onResizing = function(finished, resizeAmount) {
        var resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);
        var columnWidths = [{ key: this.column, newWidth: this.resizeStartWidth + resizeAmountNormalised }];
        this.columnController.setColumnWidths(columnWidths, this.resizeWithShiftKey, finished, "uiColumnDragged");
        if (finished) {
          removeCssClass(this.getGui(), "ag-column-resizing");
        }
      };
      HeaderWrapperComp2.prototype.onResizeStart = function(shiftKey) {
        this.resizeStartWidth = this.column.getActualWidth();
        this.resizeWithShiftKey = shiftKey;
        addCssClass(this.getGui(), "ag-column-resizing");
      };
      HeaderWrapperComp2.prototype.getTooltipParams = function() {
        var colDef = this.getComponentHolder();
        return {
          location: "header",
          colDef,
          column: this.getColumn(),
          value: this.getTooltipText()
        };
      };
      HeaderWrapperComp2.prototype.getTooltipText = function() {
        return this.getComponentHolder().headerTooltip;
      };
      HeaderWrapperComp2.prototype.setupTooltip = function() {
        var _this = this;
        var tooltipFeature;
        var tooltipText;
        var usingBrowserTooltips = this.gridOptionsWrapper.isEnableBrowserTooltips();
        var removeTooltip = function() {
          if (usingBrowserTooltips) {
            _this.getGui().removeAttribute("title");
          } else {
            if (tooltipFeature) {
              tooltipFeature = _this.destroyBean(tooltipFeature);
            }
          }
        };
        var addTooltip = function() {
          if (usingBrowserTooltips) {
            _this.getGui().setAttribute("title", tooltipText);
          } else {
            tooltipFeature = _this.createBean(new TooltipFeature(_this));
          }
        };
        var refresh = function() {
          var newTooltipText = _this.getTooltipText();
          if (tooltipText != newTooltipText) {
            if (tooltipText) {
              removeTooltip();
            }
            tooltipText = newTooltipText;
            if (tooltipText) {
              addTooltip();
            }
          }
        };
        refresh();
        this.addDestroyFunc(removeTooltip);
        this.refreshFunctions.push(refresh);
      };
      HeaderWrapperComp2.prototype.setupMovingCss = function() {
        this.addManagedListener(this.column, Column.EVENT_MOVING_CHANGED, this.onColumnMovingChanged.bind(this));
        this.onColumnMovingChanged();
      };
      HeaderWrapperComp2.prototype.addAttributes = function() {
        this.getGui().setAttribute("col-id", this.column.getColId());
      };
      HeaderWrapperComp2.prototype.setupWidth = function() {
        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
        this.onColumnWidthChanged();
      };
      HeaderWrapperComp2.prototype.setupMenuClass = function() {
        this.addManagedListener(this.column, Column.EVENT_MENU_VISIBLE_CHANGED, this.onMenuVisible.bind(this));
      };
      HeaderWrapperComp2.prototype.onMenuVisible = function() {
        this.addOrRemoveCssClass("ag-column-menu-visible", this.column.isMenuVisible());
      };
      HeaderWrapperComp2.prototype.onColumnWidthChanged = function() {
        this.getGui().style.width = this.column.getActualWidth() + "px";
      };
      HeaderWrapperComp2.prototype.normaliseResizeAmount = function(dragChange) {
        var result = dragChange;
        if (this.gridOptionsWrapper.isEnableRtl()) {
          if (this.pinned !== Constants.PINNED_LEFT) {
            result *= -1;
          }
        } else {
          if (this.pinned === Constants.PINNED_RIGHT) {
            result *= -1;
          }
        }
        return result;
      };
      HeaderWrapperComp2.TEMPLATE = '<div class="ag-header-cell" role="columnheader" unselectable="on" tabindex="-1">\n            <div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>\n            <ag-checkbox ref="cbSelectAll" class="ag-header-select-all" role="presentation"></ag-checkbox>\n        </div>';
      __decorate$M([
        Autowired("gridOptionsWrapper")
      ], HeaderWrapperComp2.prototype, "gridOptionsWrapper", void 0);
      __decorate$M([
        Autowired("dragAndDropService")
      ], HeaderWrapperComp2.prototype, "dragAndDropService", void 0);
      __decorate$M([
        Autowired("columnController")
      ], HeaderWrapperComp2.prototype, "columnController", void 0);
      __decorate$M([
        Autowired("horizontalResizeService")
      ], HeaderWrapperComp2.prototype, "horizontalResizeService", void 0);
      __decorate$M([
        Autowired("menuFactory")
      ], HeaderWrapperComp2.prototype, "menuFactory", void 0);
      __decorate$M([
        Autowired("gridApi")
      ], HeaderWrapperComp2.prototype, "gridApi", void 0);
      __decorate$M([
        Autowired("columnApi")
      ], HeaderWrapperComp2.prototype, "columnApi", void 0);
      __decorate$M([
        Autowired("sortController")
      ], HeaderWrapperComp2.prototype, "sortController", void 0);
      __decorate$M([
        Autowired("userComponentFactory")
      ], HeaderWrapperComp2.prototype, "userComponentFactory", void 0);
      __decorate$M([
        Autowired("columnHoverService")
      ], HeaderWrapperComp2.prototype, "columnHoverService", void 0);
      __decorate$M([
        Autowired("beans")
      ], HeaderWrapperComp2.prototype, "beans", void 0);
      __decorate$M([
        RefSelector("eResize")
      ], HeaderWrapperComp2.prototype, "eResize", void 0);
      __decorate$M([
        RefSelector("cbSelectAll")
      ], HeaderWrapperComp2.prototype, "cbSelectAll", void 0);
      __decorate$M([
        PreDestroy
      ], HeaderWrapperComp2.prototype, "destroyHeaderComp", null);
      return HeaderWrapperComp2;
    }(AbstractHeaderWrapper);
    var __extends$S = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$N = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderGroupWrapperComp = function(_super) {
      __extends$S(HeaderGroupWrapperComp2, _super);
      function HeaderGroupWrapperComp2(columnGroup, pinned) {
        var _this = _super.call(this, HeaderGroupWrapperComp2.TEMPLATE) || this;
        _this.removeChildListenersFuncs = [];
        _this.column = columnGroup;
        _this.pinned = pinned;
        return _this;
      }
      HeaderGroupWrapperComp2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        CssClassApplier.addHeaderClassesFromColDef(this.getComponentHolder(), this.getGui(), this.gridOptionsWrapper, null, this.column);
        var displayName = this.columnController.getDisplayNameForColumnGroup(this.column, "header");
        this.appendHeaderGroupComp(displayName);
        this.setupResize();
        this.addClasses();
        this.setupWidth();
        this.addAttributes();
        this.setupMovingCss();
        this.setupTooltip();
        this.setupExpandable();
        this.createManagedBean(new HoverFeature(this.column.getOriginalColumnGroup().getLeafColumns(), this.getGui()));
        this.createManagedBean(new SetLeftFeature(this.column, this.getGui(), this.beans));
      };
      HeaderGroupWrapperComp2.prototype.onFocusIn = function(e) {
        if (!this.getGui().contains(e.relatedTarget)) {
          var headerRow = this.getParentComponent();
          this.beans.focusController.setFocusedHeader(headerRow.getRowIndex(), this.getColumn());
        }
      };
      HeaderGroupWrapperComp2.prototype.handleKeyDown = function(e) {
        var activeEl = document.activeElement;
        var eGui = this.getGui();
        var wrapperHasFocus = activeEl === eGui;
        if (!this.expandable || !wrapperHasFocus) {
          return;
        }
        if (e.keyCode === KeyCode.ENTER) {
          var column = this.getColumn();
          var newExpandedValue = !column.isExpanded();
          this.columnController.setColumnGroupOpened(column.getOriginalColumnGroup(), newExpandedValue, "uiColumnExpanded");
        }
      };
      HeaderGroupWrapperComp2.prototype.onTabKeyDown = function() {
      };
      HeaderGroupWrapperComp2.prototype.setupExpandable = function() {
        var column = this.getColumn();
        var originalColumnGroup = column.getOriginalColumnGroup();
        this.refreshExpanded();
        this.addManagedListener(originalColumnGroup, OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));
        this.addManagedListener(originalColumnGroup, OriginalColumnGroup.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));
      };
      HeaderGroupWrapperComp2.prototype.refreshExpanded = function() {
        var column = this.getColumn();
        var eGui = this.getGui();
        var expandable = column.isExpandable();
        var expanded = column.isExpanded();
        this.expandable = expandable;
        if (!expandable) {
          eGui.removeAttribute("aria-expanded");
        } else {
          setAriaExpanded(eGui, expanded);
        }
      };
      HeaderGroupWrapperComp2.prototype.setupMovingCss = function() {
        var _this = this;
        var originalColumnGroup = this.column.getOriginalColumnGroup();
        var leafColumns = originalColumnGroup.getLeafColumns();
        leafColumns.forEach(function(col) {
          _this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, _this.onColumnMovingChanged.bind(_this));
        });
        this.onColumnMovingChanged();
      };
      HeaderGroupWrapperComp2.prototype.getComponentHolder = function() {
        return this.column.getColGroupDef();
      };
      HeaderGroupWrapperComp2.prototype.getTooltipText = function() {
        var colGroupDef = this.getComponentHolder();
        return colGroupDef && colGroupDef.headerTooltip;
      };
      HeaderGroupWrapperComp2.prototype.getTooltipParams = function() {
        return {
          location: "headerGroup",
          colDef: this.getComponentHolder(),
          column: this.getColumn(),
          value: this.getTooltipText()
        };
      };
      HeaderGroupWrapperComp2.prototype.setupTooltip = function() {
        var tooltipText = this.getTooltipText();
        if (tooltipText == null) {
          return;
        }
        if (this.gridOptionsWrapper.isEnableBrowserTooltips()) {
          this.getGui().setAttribute("title", tooltipText);
        } else {
          this.createManagedBean(new TooltipFeature(this));
        }
      };
      HeaderGroupWrapperComp2.prototype.onColumnMovingChanged = function() {
        addOrRemoveCssClass(this.getGui(), "ag-header-cell-moving", this.column.isMoving());
      };
      HeaderGroupWrapperComp2.prototype.addAttributes = function() {
        this.getGui().setAttribute("col-id", this.column.getUniqueId());
      };
      HeaderGroupWrapperComp2.prototype.appendHeaderGroupComp = function(displayName) {
        var _this = this;
        var params = {
          displayName,
          columnGroup: this.column,
          setExpanded: function(expanded) {
            _this.columnController.setColumnGroupOpened(_this.column.getOriginalColumnGroup(), expanded, "gridInitializing");
          },
          api: this.gridApi,
          columnApi: this.columnApi,
          context: this.gridOptionsWrapper.getContext()
        };
        if (!displayName) {
          var columnGroup = this.column;
          var leafCols = columnGroup.getLeafColumns();
          while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {
            columnGroup = columnGroup.getParent();
          }
          var colGroupDef = columnGroup.getColGroupDef();
          if (colGroupDef) {
            displayName = colGroupDef.headerName;
          }
          if (!displayName) {
            displayName = leafCols ? this.columnController.getDisplayNameForColumn(leafCols[0], "header", true) : "";
          }
        }
        var callback = this.afterHeaderCompCreated.bind(this, displayName);
        this.userComponentFactory.newHeaderGroupComponent(params).then(callback);
      };
      HeaderGroupWrapperComp2.prototype.afterHeaderCompCreated = function(displayName, headerGroupComp) {
        var _this = this;
        this.getGui().appendChild(headerGroupComp.getGui());
        this.addDestroyFunc(function() {
          _this.getContext().destroyBean(headerGroupComp);
        });
        this.setupMove(headerGroupComp.getGui(), displayName);
      };
      HeaderGroupWrapperComp2.prototype.addClasses = function() {
        var style = this.column.isPadding() ? "no" : "with";
        this.addCssClass("ag-header-group-cell-" + style + "-group");
      };
      HeaderGroupWrapperComp2.prototype.setupMove = function(eHeaderGroup, displayName) {
        var _this = this;
        if (!eHeaderGroup) {
          return;
        }
        if (this.isSuppressMoving()) {
          return;
        }
        var allLeafColumns = this.column.getOriginalColumnGroup().getLeafColumns();
        var dragSource = {
          type: exports.DragSourceType.HeaderCell,
          eElement: eHeaderGroup,
          defaultIconName: DragAndDropService.ICON_HIDE,
          dragItemName: displayName,
          getDragItem: this.getDragItemForGroup.bind(this),
          onDragStarted: function() {
            return allLeafColumns.forEach(function(col) {
              return col.setMoving(true, "uiColumnDragged");
            });
          },
          onDragStopped: function() {
            return allLeafColumns.forEach(function(col) {
              return col.setMoving(false, "uiColumnDragged");
            });
          }
        };
        this.dragAndDropService.addDragSource(dragSource, true);
        this.addDestroyFunc(function() {
          return _this.dragAndDropService.removeDragSource(dragSource);
        });
      };
      HeaderGroupWrapperComp2.prototype.getDragItemForGroup = function() {
        var allColumnsOriginalOrder = this.column.getOriginalColumnGroup().getLeafColumns();
        var visibleState = {};
        allColumnsOriginalOrder.forEach(function(column) {
          return visibleState[column.getId()] = column.isVisible();
        });
        var allColumnsCurrentOrder = [];
        this.columnController.getAllDisplayedColumns().forEach(function(column) {
          if (allColumnsOriginalOrder.indexOf(column) >= 0) {
            allColumnsCurrentOrder.push(column);
            removeFromArray(allColumnsOriginalOrder, column);
          }
        });
        allColumnsOriginalOrder.forEach(function(column) {
          return allColumnsCurrentOrder.push(column);
        });
        return {
          columns: allColumnsCurrentOrder,
          visibleState
        };
      };
      HeaderGroupWrapperComp2.prototype.isSuppressMoving = function() {
        var childSuppressesMoving = false;
        this.column.getLeafColumns().forEach(function(column) {
          if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {
            childSuppressesMoving = true;
          }
        });
        var result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();
        return result;
      };
      HeaderGroupWrapperComp2.prototype.setupWidth = function() {
        this.addListenersToChildrenColumns();
        this.addManagedListener(this.column, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));
        this.onWidthChanged();
        this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));
      };
      HeaderGroupWrapperComp2.prototype.onDisplayedChildrenChanged = function() {
        this.addListenersToChildrenColumns();
        this.onWidthChanged();
      };
      HeaderGroupWrapperComp2.prototype.addListenersToChildrenColumns = function() {
        var _this = this;
        this.removeListenersOnChildrenColumns();
        var widthChangedListener = this.onWidthChanged.bind(this);
        this.column.getLeafColumns().forEach(function(column) {
          column.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
          column.addEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
          _this.removeChildListenersFuncs.push(function() {
            column.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
            column.removeEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
          });
        });
      };
      HeaderGroupWrapperComp2.prototype.removeListenersOnChildrenColumns = function() {
        this.removeChildListenersFuncs.forEach(function(func) {
          return func();
        });
        this.removeChildListenersFuncs = [];
      };
      HeaderGroupWrapperComp2.prototype.onWidthChanged = function() {
        this.getGui().style.width = this.column.getActualWidth() + "px";
      };
      HeaderGroupWrapperComp2.prototype.setupResize = function() {
        var _this = this;
        this.eHeaderCellResize = this.getRefElement("agResize");
        if (!this.column.isResizable()) {
          removeFromParent(this.eHeaderCellResize);
          return;
        }
        var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
          eResizeBar: this.eHeaderCellResize,
          onResizeStart: this.onResizeStart.bind(this),
          onResizing: this.onResizing.bind(this, false),
          onResizeEnd: this.onResizing.bind(this, true)
        });
        this.addDestroyFunc(finishedWithResizeFunc);
        if (!this.gridOptionsWrapper.isSuppressAutoSize()) {
          var skipHeaderOnAutoSize_1 = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
          this.eHeaderCellResize.addEventListener("dblclick", function(event) {
            var keys2 = [];
            _this.column.getDisplayedLeafColumns().forEach(function(column) {
              if (!column.getColDef().suppressAutoSize) {
                keys2.push(column.getColId());
              }
            });
            if (keys2.length > 0) {
              _this.columnController.autoSizeColumns(keys2, skipHeaderOnAutoSize_1, "uiColumnResized");
            }
          });
        }
      };
      HeaderGroupWrapperComp2.prototype.onResizeStart = function(shiftKey) {
        var _this = this;
        var leafCols = this.column.getDisplayedLeafColumns();
        this.resizeCols = leafCols.filter(function(col) {
          return col.isResizable();
        });
        this.resizeStartWidth = 0;
        this.resizeCols.forEach(function(col) {
          return _this.resizeStartWidth += col.getActualWidth();
        });
        this.resizeRatios = [];
        this.resizeCols.forEach(function(col) {
          return _this.resizeRatios.push(col.getActualWidth() / _this.resizeStartWidth);
        });
        var takeFromGroup = null;
        if (shiftKey) {
          takeFromGroup = this.columnController.getDisplayedGroupAfter(this.column);
        }
        if (takeFromGroup) {
          var takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();
          this.resizeTakeFromCols = takeFromLeafCols.filter(function(col) {
            return col.isResizable();
          });
          this.resizeTakeFromStartWidth = 0;
          this.resizeTakeFromCols.forEach(function(col) {
            return _this.resizeTakeFromStartWidth += col.getActualWidth();
          });
          this.resizeTakeFromRatios = [];
          this.resizeTakeFromCols.forEach(function(col) {
            return _this.resizeTakeFromRatios.push(col.getActualWidth() / _this.resizeTakeFromStartWidth);
          });
        } else {
          this.resizeTakeFromCols = null;
          this.resizeTakeFromStartWidth = null;
          this.resizeTakeFromRatios = null;
        }
        addCssClass(this.getGui(), "ag-column-resizing");
      };
      HeaderGroupWrapperComp2.prototype.onResizing = function(finished, resizeAmount) {
        var resizeSets = [];
        var resizeAmountNormalised = this.normaliseDragChange(resizeAmount);
        resizeSets.push({
          columns: this.resizeCols,
          ratios: this.resizeRatios,
          width: this.resizeStartWidth + resizeAmountNormalised
        });
        if (this.resizeTakeFromCols) {
          resizeSets.push({
            columns: this.resizeTakeFromCols,
            ratios: this.resizeTakeFromRatios,
            width: this.resizeTakeFromStartWidth - resizeAmountNormalised
          });
        }
        this.columnController.resizeColumnSets(resizeSets, finished, "uiColumnDragged");
        if (finished) {
          removeCssClass(this.getGui(), "ag-column-resizing");
        }
      };
      HeaderGroupWrapperComp2.prototype.normaliseDragChange = function(dragChange) {
        var result = dragChange;
        if (this.gridOptionsWrapper.isEnableRtl()) {
          if (this.pinned !== Constants.PINNED_LEFT) {
            result *= -1;
          }
        } else if (this.pinned === Constants.PINNED_RIGHT) {
          result *= -1;
        }
        return result;
      };
      HeaderGroupWrapperComp2.TEMPLATE = '<div class="ag-header-group-cell" role="columnheader" tabindex="-1">\n            <div ref="agResize" class="ag-header-cell-resize" role="presentation"></div>\n        </div>';
      __decorate$N([
        Autowired("gridOptionsWrapper")
      ], HeaderGroupWrapperComp2.prototype, "gridOptionsWrapper", void 0);
      __decorate$N([
        Autowired("columnController")
      ], HeaderGroupWrapperComp2.prototype, "columnController", void 0);
      __decorate$N([
        Autowired("horizontalResizeService")
      ], HeaderGroupWrapperComp2.prototype, "horizontalResizeService", void 0);
      __decorate$N([
        Autowired("dragAndDropService")
      ], HeaderGroupWrapperComp2.prototype, "dragAndDropService", void 0);
      __decorate$N([
        Autowired("userComponentFactory")
      ], HeaderGroupWrapperComp2.prototype, "userComponentFactory", void 0);
      __decorate$N([
        Autowired("beans")
      ], HeaderGroupWrapperComp2.prototype, "beans", void 0);
      __decorate$N([
        Autowired("gridApi")
      ], HeaderGroupWrapperComp2.prototype, "gridApi", void 0);
      __decorate$N([
        Autowired("columnApi")
      ], HeaderGroupWrapperComp2.prototype, "columnApi", void 0);
      return HeaderGroupWrapperComp2;
    }(AbstractHeaderWrapper);
    var __extends$T = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$O = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ReadOnlyFloatingFilter = function(_super) {
      __extends$T(ReadOnlyFloatingFilter2, _super);
      function ReadOnlyFloatingFilter2() {
        return _super.call(this, '\n            <div class="ag-floating-filter-input" role="presentation">\n                <ag-input-text-field ref="eFloatingFilterText"></ag-input-text-field>\n            </div>') || this;
      }
      ReadOnlyFloatingFilter2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      ReadOnlyFloatingFilter2.prototype.init = function(params) {
        this.params = params;
        var displayName = this.columnController.getDisplayNameForColumn(params.column, "header", true);
        this.eFloatingFilterText.setDisabled(true).setInputAriaLabel(displayName + " Filter Input");
      };
      ReadOnlyFloatingFilter2.prototype.onParentModelChanged = function(parentModel) {
        var _this = this;
        if (!parentModel) {
          this.eFloatingFilterText.setValue("");
          return;
        }
        this.params.parentFilterInstance(function(filterInstance) {
          if (filterInstance.getModelAsString) {
            var modelAsString = filterInstance.getModelAsString(parentModel);
            _this.eFloatingFilterText.setValue(modelAsString);
          }
        });
      };
      __decorate$O([
        RefSelector("eFloatingFilterText")
      ], ReadOnlyFloatingFilter2.prototype, "eFloatingFilterText", void 0);
      __decorate$O([
        Autowired("columnController")
      ], ReadOnlyFloatingFilter2.prototype, "columnController", void 0);
      return ReadOnlyFloatingFilter2;
    }(Component);
    var FloatingFilterMapper = function() {
      function FloatingFilterMapper2() {
      }
      FloatingFilterMapper2.getFloatingFilterType = function(filterType) {
        return this.filterToFloatingFilterMapping[filterType];
      };
      FloatingFilterMapper2.filterToFloatingFilterMapping = {
        set: "agSetColumnFloatingFilter",
        agSetColumnFilter: "agSetColumnFloatingFilter",
        multi: "agMultiColumnFloatingFilter",
        agMultiColumnFilter: "agMultiColumnFloatingFilter",
        number: "agNumberColumnFloatingFilter",
        agNumberColumnFilter: "agNumberColumnFloatingFilter",
        date: "agDateColumnFloatingFilter",
        agDateColumnFilter: "agDateColumnFloatingFilter",
        text: "agTextColumnFloatingFilter",
        agTextColumnFilter: "agTextColumnFloatingFilter"
      };
      return FloatingFilterMapper2;
    }();
    var __extends$U = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$P = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FloatingFilterWrapper = function(_super) {
      __extends$U(FloatingFilterWrapper2, _super);
      function FloatingFilterWrapper2(column, pinned) {
        var _this = _super.call(this, FloatingFilterWrapper2.TEMPLATE) || this;
        _this.column = column;
        _this.pinned = pinned;
        return _this;
      }
      FloatingFilterWrapper2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        this.setupFloatingFilter();
        this.setupWidth();
        this.setupLeftPositioning();
        this.setupColumnHover();
        this.createManagedBean(new HoverFeature([this.column], this.getGui()));
        this.addManagedListener(this.eButtonShowMainFilter, "click", this.showParentFilter.bind(this));
      };
      FloatingFilterWrapper2.prototype.onTabKeyDown = function(e) {
        var activeEl = document.activeElement;
        var eGui = this.getGui();
        var wrapperHasFocus = activeEl === eGui;
        if (wrapperHasFocus) {
          return;
        }
        e.preventDefault();
        var nextFocusableEl = this.focusController.findNextFocusableElement(eGui, null, e.shiftKey);
        if (nextFocusableEl) {
          nextFocusableEl.focus();
        } else {
          eGui.focus();
        }
      };
      FloatingFilterWrapper2.prototype.handleKeyDown = function(e) {
        var activeEl = document.activeElement;
        var eGui = this.getGui();
        var wrapperHasFocus = activeEl === eGui;
        switch (e.keyCode) {
          case KeyCode.UP:
          case KeyCode.DOWN:
            if (!wrapperHasFocus) {
              e.preventDefault();
            }
          case KeyCode.LEFT:
          case KeyCode.RIGHT:
            if (wrapperHasFocus) {
              return;
            }
            e.stopPropagation();
          case KeyCode.ENTER:
            if (wrapperHasFocus) {
              if (this.focusController.focusInto(eGui)) {
                e.preventDefault();
              }
            }
            break;
          case KeyCode.ESCAPE:
            if (!wrapperHasFocus) {
              this.getGui().focus();
            }
        }
      };
      FloatingFilterWrapper2.prototype.onFocusIn = function(e) {
        var eGui = this.getGui();
        if (!eGui.contains(e.relatedTarget)) {
          var headerRow = this.getParentComponent();
          this.beans.focusController.setFocusedHeader(headerRow.getRowIndex(), this.getColumn());
        }
      };
      FloatingFilterWrapper2.prototype.setupFloatingFilter = function() {
        var _this = this;
        var colDef = this.column.getColDef();
        if (!colDef.filter || !colDef.floatingFilter) {
          return;
        }
        this.floatingFilterCompPromise = this.getFloatingFilterInstance();
        if (!this.floatingFilterCompPromise) {
          return;
        }
        this.floatingFilterCompPromise.then(function(compInstance) {
          if (compInstance) {
            _this.setupWithFloatingFilter(compInstance);
            _this.setupSyncWithFilter();
          }
        });
      };
      FloatingFilterWrapper2.prototype.setupLeftPositioning = function() {
        var setLeftFeature = new SetLeftFeature(this.column, this.getGui(), this.beans);
        this.createManagedBean(setLeftFeature);
      };
      FloatingFilterWrapper2.prototype.setupSyncWithFilter = function() {
        var _this = this;
        var syncWithFilter = function(filterChangedEvent) {
          _this.onParentModelChanged(_this.currentParentModel(), filterChangedEvent);
        };
        this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, syncWithFilter);
        if (this.filterManager.isFilterActive(this.column)) {
          syncWithFilter(null);
        }
      };
      FloatingFilterWrapper2.prototype.showParentFilter = function() {
        var eventSource = this.suppressFilterButton ? this.eFloatingFilterBody : this.eButtonShowMainFilter;
        this.menuFactory.showMenuAfterButtonClick(this.column, eventSource, "filterMenuTab", ["filterMenuTab"]);
      };
      FloatingFilterWrapper2.prototype.setupColumnHover = function() {
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
        this.onColumnHover();
      };
      FloatingFilterWrapper2.prototype.onColumnHover = function() {
        addOrRemoveCssClass(this.getGui(), "ag-column-hover", this.columnHoverService.isHovered(this.column));
      };
      FloatingFilterWrapper2.prototype.setupWidth = function() {
        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
        this.onColumnWidthChanged();
      };
      FloatingFilterWrapper2.prototype.onColumnWidthChanged = function() {
        this.getGui().style.width = this.column.getActualWidth() + "px";
      };
      FloatingFilterWrapper2.prototype.setupWithFloatingFilter = function(floatingFilterComp) {
        var _this = this;
        var disposeFunc = function() {
          _this.getContext().destroyBean(floatingFilterComp);
        };
        if (!this.isAlive()) {
          disposeFunc();
          return;
        }
        this.addDestroyFunc(disposeFunc);
        var floatingFilterCompUi = floatingFilterComp.getGui();
        addOrRemoveCssClass(this.eFloatingFilterBody, "ag-floating-filter-full-body", this.suppressFilterButton);
        addOrRemoveCssClass(this.eFloatingFilterBody, "ag-floating-filter-body", !this.suppressFilterButton);
        setDisplayed(this.eButtonWrapper, !this.suppressFilterButton);
        var eIcon = createIconNoSpan("filter", this.gridOptionsWrapper, this.column);
        this.eButtonShowMainFilter.appendChild(eIcon);
        this.eFloatingFilterBody.appendChild(floatingFilterCompUi);
        if (floatingFilterComp.afterGuiAttached) {
          floatingFilterComp.afterGuiAttached();
        }
      };
      FloatingFilterWrapper2.prototype.parentFilterInstance = function(callback) {
        this.getFilterComponent().then(callback);
      };
      FloatingFilterWrapper2.prototype.getFilterComponent = function(createIfDoesNotExist) {
        if (createIfDoesNotExist === void 0) {
          createIfDoesNotExist = true;
        }
        return this.filterManager.getFilterComponent(this.column, "NO_UI", createIfDoesNotExist);
      };
      FloatingFilterWrapper2.getDefaultFloatingFilterType = function(def) {
        if (def == null) {
          return null;
        }
        var defaultFloatingFilterType = null;
        if (typeof def.filter === "string") {
          defaultFloatingFilterType = FloatingFilterMapper.getFloatingFilterType(def.filter);
        } else if (def.filterFramework)
          ;
        else if (def.filter === true) {
          var setFilterModuleLoaded = ModuleRegistry.isRegistered(exports.ModuleNames.SetFilterModule);
          defaultFloatingFilterType = setFilterModuleLoaded ? "agSetColumnFloatingFilter" : "agTextColumnFloatingFilter";
        }
        return defaultFloatingFilterType;
      };
      FloatingFilterWrapper2.prototype.getFloatingFilterInstance = function() {
        var colDef = this.column.getColDef();
        var defaultFloatingFilterType = FloatingFilterWrapper2.getDefaultFloatingFilterType(colDef);
        var filterParams = this.filterManager.createFilterParams(this.column, colDef);
        var finalFilterParams = this.userComponentFactory.createFinalParams(colDef, "filter", filterParams);
        var params = {
          api: this.gridApi,
          column: this.column,
          filterParams: finalFilterParams,
          currentParentModel: this.currentParentModel.bind(this),
          parentFilterInstance: this.parentFilterInstance.bind(this),
          showParentFilter: this.showParentFilter.bind(this),
          onFloatingFilterChanged: this.onFloatingFilterChanged.bind(this),
          suppressFilterButton: false
        };
        this.suppressFilterButton = colDef.floatingFilterComponentParams ? !!colDef.floatingFilterComponentParams.suppressFilterButton : false;
        var promise = this.userComponentFactory.newFloatingFilterComponent(colDef, params, defaultFloatingFilterType);
        if (!promise) {
          var filterComponent = this.getFilterComponentPrototype(colDef);
          var getModelAsStringExists = filterComponent && filterComponent.prototype && filterComponent.prototype.getModelAsString;
          if (getModelAsStringExists) {
            var compInstance = this.userComponentFactory.createUserComponentFromConcreteClass(ReadOnlyFloatingFilter, params);
            promise = Promise2.resolve(compInstance);
          }
        }
        return promise;
      };
      FloatingFilterWrapper2.prototype.createDynamicParams = function() {
        return {
          column: this.column,
          colDef: this.column.getColDef(),
          api: this.gridApi,
          columnApi: this.columnApi
        };
      };
      FloatingFilterWrapper2.prototype.getFilterComponentPrototype = function(colDef) {
        var resolvedComponent = this.userComponentFactory.lookupComponentClassDef(colDef, "filter", this.createDynamicParams());
        return resolvedComponent ? resolvedComponent.component : null;
      };
      FloatingFilterWrapper2.prototype.currentParentModel = function() {
        var filterComponent = this.getFilterComponent(false);
        return filterComponent ? filterComponent.resolveNow(null, function(filter2) {
          return filter2.getModel();
        }) : null;
      };
      FloatingFilterWrapper2.prototype.onParentModelChanged = function(model, filterChangedEvent) {
        if (!this.floatingFilterCompPromise) {
          return;
        }
        this.floatingFilterCompPromise.then(function(comp) {
          return comp.onParentModelChanged(model, filterChangedEvent);
        });
      };
      FloatingFilterWrapper2.prototype.onFloatingFilterChanged = function() {
        console.warn("ag-Grid: since version 21.x, how floating filters are implemented has changed. Instead of calling params.onFloatingFilterChanged(), get a reference to the main filter via params.parentFilterInstance() and then set a value on the parent filter directly.");
      };
      FloatingFilterWrapper2.TEMPLATE = '<div class="ag-header-cell" role="columnheader" tabindex="-1">\n            <div class="ag-floating-filter-full-body" ref="eFloatingFilterBody" role="presentation"></div>\n            <div class="ag-floating-filter-button ag-hidden" ref="eButtonWrapper" role="presentation">\n                <button type="button" aria-label="Open Filter Menu" class="ag-floating-filter-button-button" ref="eButtonShowMainFilter" tabindex="-1"></button>\n            </div>\n        </div>';
      __decorate$P([
        Autowired("columnHoverService")
      ], FloatingFilterWrapper2.prototype, "columnHoverService", void 0);
      __decorate$P([
        Autowired("gridOptionsWrapper")
      ], FloatingFilterWrapper2.prototype, "gridOptionsWrapper", void 0);
      __decorate$P([
        Autowired("userComponentFactory")
      ], FloatingFilterWrapper2.prototype, "userComponentFactory", void 0);
      __decorate$P([
        Autowired("gridApi")
      ], FloatingFilterWrapper2.prototype, "gridApi", void 0);
      __decorate$P([
        Autowired("columnApi")
      ], FloatingFilterWrapper2.prototype, "columnApi", void 0);
      __decorate$P([
        Autowired("filterManager")
      ], FloatingFilterWrapper2.prototype, "filterManager", void 0);
      __decorate$P([
        Autowired("menuFactory")
      ], FloatingFilterWrapper2.prototype, "menuFactory", void 0);
      __decorate$P([
        Autowired("beans")
      ], FloatingFilterWrapper2.prototype, "beans", void 0);
      __decorate$P([
        RefSelector("eFloatingFilterBody")
      ], FloatingFilterWrapper2.prototype, "eFloatingFilterBody", void 0);
      __decorate$P([
        RefSelector("eButtonWrapper")
      ], FloatingFilterWrapper2.prototype, "eButtonWrapper", void 0);
      __decorate$P([
        RefSelector("eButtonShowMainFilter")
      ], FloatingFilterWrapper2.prototype, "eButtonShowMainFilter", void 0);
      return FloatingFilterWrapper2;
    }(AbstractHeaderWrapper);
    var __extends$V = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$Q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderRowType;
    (function(HeaderRowType2) {
      HeaderRowType2[HeaderRowType2["COLUMN_GROUP"] = 0] = "COLUMN_GROUP";
      HeaderRowType2[HeaderRowType2["COLUMN"] = 1] = "COLUMN";
      HeaderRowType2[HeaderRowType2["FLOATING_FILTER"] = 2] = "FLOATING_FILTER";
    })(HeaderRowType || (HeaderRowType = {}));
    var HeaderRowComp = function(_super) {
      __extends$V(HeaderRowComp2, _super);
      function HeaderRowComp2(dept, type, pinned) {
        var _this = _super.call(this, '<div class="ag-header-row" role="row"></div>') || this;
        _this.headerComps = {};
        _this.setRowIndex(dept);
        _this.type = type;
        _this.pinned = pinned;
        var niceClassName = HeaderRowType[type].toLowerCase().replace(/_/g, "-");
        _this.addCssClass("ag-header-row-" + niceClassName);
        if (isBrowserSafari()) {
          _this.getGui().style.transform = "translateZ(0)";
        }
        return _this;
      }
      HeaderRowComp2.prototype.forEachHeaderElement = function(callback) {
        var _this = this;
        Object.keys(this.headerComps).forEach(function(key) {
          callback(_this.headerComps[key]);
        });
      };
      HeaderRowComp2.prototype.setRowIndex = function(rowIndex) {
        this.dept = rowIndex;
        setAriaRowIndex(this.getGui(), rowIndex + 1);
      };
      HeaderRowComp2.prototype.getRowIndex = function() {
        return this.dept;
      };
      HeaderRowComp2.prototype.getType = function() {
        return this.type;
      };
      HeaderRowComp2.prototype.destroyAllChildComponents = function() {
        var idsOfAllChildren = Object.keys(this.headerComps);
        this.destroyChildComponents(idsOfAllChildren);
      };
      HeaderRowComp2.prototype.destroyChildComponents = function(idsToDestroy, keepFocused) {
        var _this = this;
        idsToDestroy.forEach(function(id) {
          var childHeaderWrapper = _this.headerComps[id];
          if (keepFocused && !childHeaderWrapper.getColumn().isMoving() && _this.focusController.isHeaderWrapperFocused(childHeaderWrapper)) {
            return;
          }
          _this.getGui().removeChild(childHeaderWrapper.getGui());
          _this.destroyBean(childHeaderWrapper);
          delete _this.headerComps[id];
        });
      };
      HeaderRowComp2.prototype.onRowHeightChanged = function() {
        var headerRowCount = this.columnController.getHeaderRowCount();
        var sizes = [];
        var numberOfFloating = 0;
        var groupHeight;
        var headerHeight;
        if (this.columnController.isPivotMode()) {
          groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();
          headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();
        } else {
          if (this.columnController.hasFloatingFilters()) {
            headerRowCount++;
            numberOfFloating = 1;
          }
          groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();
          headerHeight = this.gridOptionsWrapper.getHeaderHeight();
        }
        var numberOfNonGroups = 1 + numberOfFloating;
        var numberOfGroups = headerRowCount - numberOfNonGroups;
        for (var i = 0; i < numberOfGroups; i++) {
          sizes.push(groupHeight);
        }
        sizes.push(headerHeight);
        for (var i = 0; i < numberOfFloating; i++) {
          sizes.push(this.gridOptionsWrapper.getFloatingFiltersHeight());
        }
        var rowHeight = 0;
        for (var i = 0; i < this.dept; i++) {
          rowHeight += sizes[i];
        }
        this.getGui().style.top = rowHeight + "px";
        this.getGui().style.height = sizes[this.dept] + "px";
      };
      HeaderRowComp2.prototype.init = function() {
        this.onRowHeightChanged();
        this.onVirtualColumnsChanged();
        this.setWidth();
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
      };
      HeaderRowComp2.prototype.onColumnResized = function() {
        this.setWidth();
      };
      HeaderRowComp2.prototype.setWidth = function() {
        var width = this.getWidthForRow();
        this.getGui().style.width = width + "px";
      };
      HeaderRowComp2.prototype.getWidthForRow = function() {
        var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        if (printLayout) {
          var centerRow = missing(this.pinned);
          if (centerRow) {
            return this.columnController.getContainerWidth(Constants.PINNED_RIGHT) + this.columnController.getContainerWidth(Constants.PINNED_LEFT) + this.columnController.getContainerWidth(null);
          }
          return 0;
        }
        return this.columnController.getContainerWidth(this.pinned);
      };
      HeaderRowComp2.prototype.onDisplayedColumnsChanged = function() {
        this.onVirtualColumnsChanged();
        this.setWidth();
      };
      HeaderRowComp2.prototype.getItemsAtDepth = function() {
        var _this = this;
        var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        if (printLayout) {
          var centerContainer = missing(this.pinned);
          if (centerContainer) {
            var result_1 = [];
            [Constants.PINNED_LEFT, null, Constants.PINNED_RIGHT].forEach(function(pinned) {
              var items = _this.columnController.getVirtualHeaderGroupRow(pinned, _this.type == HeaderRowType.FLOATING_FILTER ? _this.dept - 1 : _this.dept);
              result_1 = result_1.concat(items);
            });
            return result_1;
          }
          return [];
        }
        return this.columnController.getVirtualHeaderGroupRow(this.pinned, this.type == HeaderRowType.FLOATING_FILTER ? this.dept - 1 : this.dept);
      };
      HeaderRowComp2.prototype.onVirtualColumnsChanged = function() {
        var _this = this;
        var compIdsToRemove = Object.keys(this.headerComps);
        var compIdsWanted = [];
        var itemsAtDepth = this.getItemsAtDepth();
        itemsAtDepth.forEach(function(child) {
          if (child.isEmptyGroup()) {
            return;
          }
          var idOfChild = child.getUniqueId();
          var eParentContainer = _this.getGui();
          var previousComp = _this.headerComps[idOfChild];
          var previousCompForOldColumn = previousComp && previousComp.getColumn() != child;
          if (previousCompForOldColumn) {
            _this.destroyChildComponents([idOfChild]);
            removeFromArray(compIdsToRemove, idOfChild);
            previousComp = void 0;
          }
          if (previousComp) {
            removeFromArray(compIdsToRemove, idOfChild);
          } else {
            var headerComp = _this.createHeaderComp(child);
            _this.headerComps[idOfChild] = headerComp;
            eParentContainer.appendChild(headerComp.getGui());
          }
          compIdsWanted.push(idOfChild);
        });
        this.destroyChildComponents(compIdsToRemove, true);
        var ensureDomOrder2 = this.gridOptionsWrapper.isEnsureDomOrder();
        if (ensureDomOrder2) {
          var correctChildOrder = compIdsWanted.map(function(id) {
            return _this.headerComps[id].getGui();
          });
          setDomChildOrder(this.getGui(), correctChildOrder);
        }
      };
      HeaderRowComp2.prototype.createHeaderComp = function(columnGroupChild) {
        var result;
        switch (this.type) {
          case HeaderRowType.COLUMN:
            result = new HeaderWrapperComp(columnGroupChild, this.pinned);
            break;
          case HeaderRowType.COLUMN_GROUP:
            result = new HeaderGroupWrapperComp(columnGroupChild, this.pinned);
            break;
          case HeaderRowType.FLOATING_FILTER:
            result = new FloatingFilterWrapper(columnGroupChild, this.pinned);
            break;
        }
        this.createBean(result);
        result.setParentComponent(this);
        return result;
      };
      HeaderRowComp2.prototype.getHeaderComps = function() {
        return this.headerComps;
      };
      __decorate$Q([
        Autowired("gridOptionsWrapper")
      ], HeaderRowComp2.prototype, "gridOptionsWrapper", void 0);
      __decorate$Q([
        Autowired("columnController")
      ], HeaderRowComp2.prototype, "columnController", void 0);
      __decorate$Q([
        Autowired("focusController")
      ], HeaderRowComp2.prototype, "focusController", void 0);
      __decorate$Q([
        PreDestroy
      ], HeaderRowComp2.prototype, "destroyAllChildComponents", null);
      __decorate$Q([
        PostConstruct
      ], HeaderRowComp2.prototype, "init", null);
      return HeaderRowComp2;
    }(Component);
    var __decorate$R = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var MoveColumnController = function() {
      function MoveColumnController2(pinned, eContainer) {
        this.needToMoveLeft = false;
        this.needToMoveRight = false;
        this.pinned = pinned;
        this.eContainer = eContainer;
        this.centerContainer = !exists(pinned);
      }
      MoveColumnController2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
      };
      MoveColumnController2.prototype.init = function() {
        this.logger = this.loggerFactory.create("MoveColumnController");
      };
      MoveColumnController2.prototype.getIconName = function() {
        return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;
      };
      MoveColumnController2.prototype.onDragEnter = function(draggingEvent) {
        var columns = draggingEvent.dragItem.columns;
        var dragCameFromToolPanel = draggingEvent.dragSource.type === exports.DragSourceType.ToolPanel;
        if (dragCameFromToolPanel) {
          this.setColumnsVisible(columns, true, "uiColumnDragged");
        } else {
          var visibleState_1 = draggingEvent.dragItem.visibleState;
          var visibleColumns = columns.filter(function(column) {
            return visibleState_1[column.getId()];
          });
          this.setColumnsVisible(visibleColumns, true, "uiColumnDragged");
        }
        this.setColumnsPinned(columns, this.pinned, "uiColumnDragged");
        this.onDragging(draggingEvent, true);
      };
      MoveColumnController2.prototype.onDragLeave = function(draggingEvent) {
        var hideColumnOnExit = !this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns() && !draggingEvent.fromNudge;
        if (hideColumnOnExit) {
          var dragItem = draggingEvent.dragSource.getDragItem();
          var columns = dragItem.columns;
          this.setColumnsVisible(columns, false, "uiColumnDragged");
        }
        this.ensureIntervalCleared();
      };
      MoveColumnController2.prototype.setColumnsVisible = function(columns, visible, source) {
        if (source === void 0) {
          source = "api";
        }
        if (columns) {
          var allowedCols = columns.filter(function(c) {
            return !c.getColDef().lockVisible;
          });
          this.columnController.setColumnsVisible(allowedCols, visible, source);
        }
      };
      MoveColumnController2.prototype.setColumnsPinned = function(columns, pinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (columns) {
          var allowedCols = columns.filter(function(c) {
            return !c.getColDef().lockPinned;
          });
          this.columnController.setColumnsPinned(allowedCols, pinned, source);
        }
      };
      MoveColumnController2.prototype.onDragStop = function() {
        this.ensureIntervalCleared();
      };
      MoveColumnController2.prototype.normaliseX = function(x) {
        if (this.gridOptionsWrapper.isEnableRtl()) {
          var clientWidth = this.eContainer.clientWidth;
          x = clientWidth - x;
        }
        if (this.centerContainer) {
          x += this.gridPanel.getCenterViewportScrollLeft();
        }
        return x;
      };
      MoveColumnController2.prototype.checkCenterForScrolling = function(xAdjustedForScroll) {
        if (this.centerContainer) {
          var firstVisiblePixel = this.gridPanel.getCenterViewportScrollLeft();
          var lastVisiblePixel = firstVisiblePixel + this.gridPanel.getCenterWidth();
          if (this.gridOptionsWrapper.isEnableRtl()) {
            this.needToMoveRight = xAdjustedForScroll < firstVisiblePixel + 50;
            this.needToMoveLeft = xAdjustedForScroll > lastVisiblePixel - 50;
          } else {
            this.needToMoveLeft = xAdjustedForScroll < firstVisiblePixel + 50;
            this.needToMoveRight = xAdjustedForScroll > lastVisiblePixel - 50;
          }
          if (this.needToMoveLeft || this.needToMoveRight) {
            this.ensureIntervalStarted();
          } else {
            this.ensureIntervalCleared();
          }
        }
      };
      MoveColumnController2.prototype.onDragging = function(draggingEvent, fromEnter) {
        var _this = this;
        if (fromEnter === void 0) {
          fromEnter = false;
        }
        this.lastDraggingEvent = draggingEvent;
        if (missing(draggingEvent.hDirection)) {
          return;
        }
        var mouseXNormalised = this.normaliseX(draggingEvent.x);
        if (!fromEnter) {
          this.checkCenterForScrolling(mouseXNormalised);
        }
        var hDirectionNormalised = this.normaliseDirection(draggingEvent.hDirection);
        var dragSourceType = draggingEvent.dragSource.type;
        var columnsToMove = draggingEvent.dragSource.getDragItem().columns;
        columnsToMove = columnsToMove.filter(function(col) {
          if (col.getColDef().lockPinned) {
            return col.getPinned() == _this.pinned;
          } else {
            return true;
          }
        });
        this.attemptMoveColumns(dragSourceType, columnsToMove, hDirectionNormalised, mouseXNormalised, fromEnter);
      };
      MoveColumnController2.prototype.normaliseDirection = function(hDirection) {
        if (this.gridOptionsWrapper.isEnableRtl()) {
          switch (hDirection) {
            case exports.HorizontalDirection.Left:
              return exports.HorizontalDirection.Right;
            case exports.HorizontalDirection.Right:
              return exports.HorizontalDirection.Left;
            default:
              console.error("ag-Grid: Unknown direction " + hDirection);
          }
        } else {
          return hDirection;
        }
      };
      MoveColumnController2.prototype.calculateOldIndex = function(movingCols) {
        var gridCols = this.columnController.getAllGridColumns();
        var indexes = sortNumerically(movingCols.map(function(col) {
          return gridCols.indexOf(col);
        }));
        var firstIndex = indexes[0];
        var lastIndex = last(indexes);
        var spread = lastIndex - firstIndex;
        var gapsExist = spread !== indexes.length - 1;
        return gapsExist ? null : firstIndex;
      };
      MoveColumnController2.prototype.attemptMoveColumns = function(dragSourceType, allMovingColumns, hDirection, mouseX, fromEnter) {
        var draggingLeft = hDirection === exports.HorizontalDirection.Left;
        var draggingRight = hDirection === exports.HorizontalDirection.Right;
        var allMovingColumnsOrdered = allMovingColumns.slice();
        this.columnController.sortColumnsLikeGridColumns(allMovingColumnsOrdered);
        var validMoves = this.calculateValidMoves(allMovingColumnsOrdered, draggingRight, mouseX);
        var oldIndex = this.calculateOldIndex(allMovingColumnsOrdered);
        if (validMoves.length === 0) {
          return;
        }
        var firstValidMove = validMoves[0];
        var constrainDirection = oldIndex !== null && !fromEnter;
        if (dragSourceType == exports.DragSourceType.HeaderCell) {
          constrainDirection = oldIndex !== null;
        }
        if (constrainDirection) {
          if (draggingLeft && firstValidMove >= oldIndex) {
            return;
          }
          if (draggingRight && firstValidMove <= oldIndex) {
            return;
          }
        }
        for (var i = 0; i < validMoves.length; i++) {
          var move = validMoves[i];
          if (!this.columnController.doesMovePassRules(allMovingColumnsOrdered, move)) {
            continue;
          }
          this.columnController.moveColumns(allMovingColumnsOrdered, move, "uiColumnDragged");
          return;
        }
      };
      MoveColumnController2.prototype.calculateValidMoves = function(movingCols, draggingRight, mouseX) {
        var isMoveBlocked = this.gridOptionsWrapper.isSuppressMovableColumns() || movingCols.some(function(col2) {
          return col2.getColDef().suppressMovable;
        });
        if (isMoveBlocked) {
          return [];
        }
        var allDisplayedCols = this.columnController.getDisplayedColumns(this.pinned);
        var allGridCols = this.columnController.getAllGridColumns();
        var movingDisplayedCols = allDisplayedCols.filter(function(col2) {
          return includes(movingCols, col2);
        });
        var otherDisplayedCols = allDisplayedCols.filter(function(col2) {
          return !includes(movingCols, col2);
        });
        var otherGridCols = allGridCols.filter(function(col2) {
          return !includes(movingCols, col2);
        });
        var displayIndex = 0;
        var availableWidth = mouseX;
        if (draggingRight) {
          var widthOfMovingDisplayedCols_1 = 0;
          movingDisplayedCols.forEach(function(col2) {
            return widthOfMovingDisplayedCols_1 += col2.getActualWidth();
          });
          availableWidth -= widthOfMovingDisplayedCols_1;
        }
        if (availableWidth > 0) {
          for (var i = 0; i < otherDisplayedCols.length; i++) {
            var col = otherDisplayedCols[i];
            availableWidth -= col.getActualWidth();
            if (availableWidth < 0) {
              break;
            }
            displayIndex++;
          }
          if (draggingRight) {
            displayIndex++;
          }
        }
        var firstValidMove;
        if (displayIndex > 0) {
          var leftColumn = otherDisplayedCols[displayIndex - 1];
          firstValidMove = otherGridCols.indexOf(leftColumn) + 1;
        } else {
          firstValidMove = otherGridCols.indexOf(otherDisplayedCols[0]);
          if (firstValidMove === -1) {
            firstValidMove = 0;
          }
        }
        var validMoves = [firstValidMove];
        var numberComparator = function(a, b) {
          return a - b;
        };
        if (draggingRight) {
          var pointer = firstValidMove + 1;
          var lastIndex = allGridCols.length - 1;
          while (pointer <= lastIndex) {
            validMoves.push(pointer);
            pointer++;
          }
          validMoves.sort(numberComparator);
        } else {
          var pointer = firstValidMove;
          var lastIndex = allGridCols.length - 1;
          var displacedCol = allGridCols[pointer];
          while (pointer <= lastIndex && this.isColumnHidden(allDisplayedCols, displacedCol)) {
            pointer++;
            validMoves.push(pointer);
            displacedCol = allGridCols[pointer];
          }
          pointer = firstValidMove - 1;
          var firstDisplayIndex = 0;
          while (pointer >= firstDisplayIndex) {
            validMoves.push(pointer);
            pointer--;
          }
          validMoves.sort(numberComparator).reverse();
        }
        return validMoves;
      };
      MoveColumnController2.prototype.isColumnHidden = function(displayedColumns, col) {
        return displayedColumns.indexOf(col) < 0;
      };
      MoveColumnController2.prototype.ensureIntervalStarted = function() {
        if (!this.movingIntervalId) {
          this.intervalCount = 0;
          this.failedMoveAttempts = 0;
          this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);
          if (this.needToMoveLeft) {
            this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_LEFT, true);
          } else {
            this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_RIGHT, true);
          }
        }
      };
      MoveColumnController2.prototype.ensureIntervalCleared = function() {
        if (this.moveInterval) {
          window.clearInterval(this.movingIntervalId);
          this.movingIntervalId = null;
          this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_MOVE);
        }
      };
      MoveColumnController2.prototype.moveInterval = function() {
        var pixelsToMove;
        this.intervalCount++;
        pixelsToMove = 10 + this.intervalCount * 5;
        if (pixelsToMove > 100) {
          pixelsToMove = 100;
        }
        var pixelsMoved;
        if (this.needToMoveLeft) {
          pixelsMoved = this.gridPanel.scrollHorizontally(-pixelsToMove);
        } else if (this.needToMoveRight) {
          pixelsMoved = this.gridPanel.scrollHorizontally(pixelsToMove);
        }
        if (pixelsMoved !== 0) {
          this.onDragging(this.lastDraggingEvent);
          this.failedMoveAttempts = 0;
        } else {
          this.failedMoveAttempts++;
          var columns = this.lastDraggingEvent.dragItem.columns;
          var columnsThatCanPin = columns.filter(function(c) {
            return !c.getColDef().lockPinned;
          });
          if (columnsThatCanPin.length > 0) {
            this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_PINNED);
            if (this.failedMoveAttempts > 7) {
              var pinType = this.needToMoveLeft ? Constants.PINNED_LEFT : Constants.PINNED_RIGHT;
              this.setColumnsPinned(columnsThatCanPin, pinType, "uiColumnDragged");
              this.dragAndDropService.nudge();
            }
          }
        }
      };
      __decorate$R([
        Autowired("loggerFactory")
      ], MoveColumnController2.prototype, "loggerFactory", void 0);
      __decorate$R([
        Autowired("columnController")
      ], MoveColumnController2.prototype, "columnController", void 0);
      __decorate$R([
        Autowired("dragAndDropService")
      ], MoveColumnController2.prototype, "dragAndDropService", void 0);
      __decorate$R([
        Autowired("gridOptionsWrapper")
      ], MoveColumnController2.prototype, "gridOptionsWrapper", void 0);
      __decorate$R([
        PostConstruct
      ], MoveColumnController2.prototype, "init", null);
      return MoveColumnController2;
    }();
    var __decorate$S = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var BodyDropPivotTarget = function() {
      function BodyDropPivotTarget2(pinned) {
        this.columnsToAggregate = [];
        this.columnsToGroup = [];
        this.columnsToPivot = [];
        this.pinned = pinned;
      }
      BodyDropPivotTarget2.prototype.onDragEnter = function(draggingEvent) {
        var _this = this;
        this.clearColumnsList();
        if (this.gridOptionsWrapper.isFunctionsReadOnly()) {
          return;
        }
        var dragColumns = draggingEvent.dragItem.columns;
        dragColumns.forEach(function(column) {
          if (!column.isPrimary()) {
            return;
          }
          if (column.isAnyFunctionActive()) {
            return;
          }
          if (column.isAllowValue()) {
            _this.columnsToAggregate.push(column);
          } else if (column.isAllowRowGroup()) {
            _this.columnsToGroup.push(column);
          } else if (column.isAllowPivot()) {
            _this.columnsToPivot.push(column);
          }
        });
      };
      BodyDropPivotTarget2.prototype.getIconName = function() {
        var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;
        if (totalColumns > 0) {
          return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;
        } else {
          return null;
        }
      };
      BodyDropPivotTarget2.prototype.onDragLeave = function(draggingEvent) {
        this.clearColumnsList();
      };
      BodyDropPivotTarget2.prototype.clearColumnsList = function() {
        this.columnsToAggregate.length = 0;
        this.columnsToGroup.length = 0;
        this.columnsToPivot.length = 0;
      };
      BodyDropPivotTarget2.prototype.onDragging = function(draggingEvent) {
      };
      BodyDropPivotTarget2.prototype.onDragStop = function(draggingEvent) {
        if (this.columnsToAggregate.length > 0) {
          this.columnController.addValueColumns(this.columnsToAggregate, "toolPanelDragAndDrop");
        }
        if (this.columnsToGroup.length > 0) {
          this.columnController.addRowGroupColumns(this.columnsToGroup, "toolPanelDragAndDrop");
        }
        if (this.columnsToPivot.length > 0) {
          this.columnController.addPivotColumns(this.columnsToPivot, "toolPanelDragAndDrop");
        }
      };
      __decorate$S([
        Autowired("columnController")
      ], BodyDropPivotTarget2.prototype, "columnController", void 0);
      __decorate$S([
        Autowired("gridOptionsWrapper")
      ], BodyDropPivotTarget2.prototype, "gridOptionsWrapper", void 0);
      return BodyDropPivotTarget2;
    }();
    var __extends$W = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$T = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DropType;
    (function(DropType2) {
      DropType2[DropType2["ColumnMove"] = 0] = "ColumnMove";
      DropType2[DropType2["Pivot"] = 1] = "Pivot";
    })(DropType || (DropType = {}));
    var BodyDropTarget = function(_super) {
      __extends$W(BodyDropTarget2, _super);
      function BodyDropTarget2(pinned, eContainer) {
        var _this = _super.call(this) || this;
        _this.dropListeners = {};
        _this.pinned = pinned;
        _this.eContainer = eContainer;
        return _this;
      }
      BodyDropTarget2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
        this.moveColumnController.registerGridComp(gridPanel);
        switch (this.pinned) {
          case Constants.PINNED_LEFT:
            this.eSecondaryContainers = this.gridPanel.getDropTargetLeftContainers();
            break;
          case Constants.PINNED_RIGHT:
            this.eSecondaryContainers = this.gridPanel.getDropTargetRightContainers();
            break;
          default:
            this.eSecondaryContainers = this.gridPanel.getDropTargetBodyContainers();
            break;
        }
      };
      BodyDropTarget2.prototype.isInterestedIn = function(type) {
        return type === exports.DragSourceType.HeaderCell || type === exports.DragSourceType.ToolPanel && this.gridOptionsWrapper.isAllowDragFromColumnsToolPanel();
      };
      BodyDropTarget2.prototype.getSecondaryContainers = function() {
        return this.eSecondaryContainers;
      };
      BodyDropTarget2.prototype.getContainer = function() {
        return this.eContainer;
      };
      BodyDropTarget2.prototype.init = function() {
        this.moveColumnController = this.createBean(new MoveColumnController(this.pinned, this.eContainer));
        var bodyDropPivotTarget = new BodyDropPivotTarget(this.pinned);
        this.createBean(bodyDropPivotTarget);
        this.dropListeners[DropType.ColumnMove] = this.moveColumnController;
        this.dropListeners[DropType.Pivot] = bodyDropPivotTarget;
        this.dragAndDropService.addDropTarget(this);
      };
      BodyDropTarget2.prototype.getIconName = function() {
        return this.currentDropListener.getIconName();
      };
      BodyDropTarget2.prototype.getDropType = function(draggingEvent) {
        if (this.columnController.isPivotMode()) {
          if (draggingEvent.dragSource.type === exports.DragSourceType.ToolPanel) {
            return DropType.Pivot;
          }
          return DropType.ColumnMove;
        }
        return DropType.ColumnMove;
      };
      BodyDropTarget2.prototype.onDragEnter = function(draggingEvent) {
        var dropType = this.getDropType(draggingEvent);
        this.currentDropListener = this.dropListeners[dropType];
        this.currentDropListener.onDragEnter(draggingEvent);
      };
      BodyDropTarget2.prototype.onDragLeave = function(params) {
        this.currentDropListener.onDragLeave(params);
      };
      BodyDropTarget2.prototype.onDragging = function(params) {
        this.currentDropListener.onDragging(params);
      };
      BodyDropTarget2.prototype.onDragStop = function(params) {
        this.currentDropListener.onDragStop(params);
      };
      __decorate$T([
        Autowired("dragAndDropService")
      ], BodyDropTarget2.prototype, "dragAndDropService", void 0);
      __decorate$T([
        Autowired("columnController")
      ], BodyDropTarget2.prototype, "columnController", void 0);
      __decorate$T([
        Autowired("gridOptionsWrapper")
      ], BodyDropTarget2.prototype, "gridOptionsWrapper", void 0);
      __decorate$T([
        PostConstruct
      ], BodyDropTarget2.prototype, "init", null);
      return BodyDropTarget2;
    }(BeanStub);
    var __extends$X = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$U = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderContainer = function(_super) {
      __extends$X(HeaderContainer2, _super);
      function HeaderContainer2(eContainer, eViewport, pinned) {
        var _this = _super.call(this) || this;
        _this.groupsRowComps = [];
        _this.eContainer = eContainer;
        _this.pinned = pinned;
        _this.eViewport = eViewport;
        return _this;
      }
      HeaderContainer2.prototype.forEachHeaderElement = function(callback) {
        if (this.groupsRowComps) {
          this.groupsRowComps.forEach(function(c) {
            return c.forEachHeaderElement(callback);
          });
        }
        if (this.columnsRowComp) {
          this.columnsRowComp.forEachHeaderElement(callback);
        }
        if (this.filtersRowComp) {
          this.columnsRowComp.forEachHeaderElement(callback);
        }
      };
      HeaderContainer2.prototype.init = function() {
        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));
      };
      HeaderContainer2.prototype.onColumnResized = function() {
        this.setWidthOfPinnedContainer();
      };
      HeaderContainer2.prototype.onDisplayedColumnsChanged = function() {
        this.setWidthOfPinnedContainer();
      };
      HeaderContainer2.prototype.onScrollVisibilityChanged = function() {
        this.setWidthOfPinnedContainer();
      };
      HeaderContainer2.prototype.onScrollbarWidthChanged = function() {
        this.setWidthOfPinnedContainer();
      };
      HeaderContainer2.prototype.setWidthOfPinnedContainer = function() {
        var pinningLeft = this.pinned === Constants.PINNED_LEFT;
        var pinningRight = this.pinned === Constants.PINNED_RIGHT;
        var controller = this.columnController;
        var isRtl = this.gridOptionsWrapper.isEnableRtl();
        var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
        if (pinningLeft || pinningRight) {
          var width = controller[pinningLeft ? "getPinnedLeftContainerWidth" : "getPinnedRightContainerWidth"]();
          var addPaddingForScrollbar = this.scrollVisibleService.isVerticalScrollShowing() && (isRtl && pinningLeft || !isRtl && pinningRight);
          if (addPaddingForScrollbar) {
            width += scrollbarWidth;
          }
          setFixedWidth(this.eContainer, width);
        }
      };
      HeaderContainer2.prototype.getRowComps = function() {
        var res = [];
        if (this.groupsRowComps) {
          res = res.concat(this.groupsRowComps);
        }
        if (this.columnsRowComp) {
          res.push(this.columnsRowComp);
        }
        if (this.filtersRowComp) {
          res.push(this.filtersRowComp);
        }
        return res;
      };
      HeaderContainer2.prototype.onGridColumnsChanged = function() {
        this.refresh(true);
      };
      HeaderContainer2.prototype.refresh = function(keepColumns) {
        if (keepColumns === void 0) {
          keepColumns = false;
        }
        this.refreshRowComps(keepColumns);
      };
      HeaderContainer2.prototype.setupDragAndDrop = function(gridComp) {
        var dropContainer = this.eViewport ? this.eViewport : this.eContainer;
        var bodyDropTarget = new BodyDropTarget(this.pinned, dropContainer);
        this.createManagedBean(bodyDropTarget);
        bodyDropTarget.registerGridComp(gridComp);
      };
      HeaderContainer2.prototype.destroyRowComps = function(keepColumns) {
        if (keepColumns === void 0) {
          keepColumns = false;
        }
        this.groupsRowComps.forEach(this.destroyRowComp.bind(this));
        this.groupsRowComps = [];
        this.destroyRowComp(this.filtersRowComp);
        this.filtersRowComp = void 0;
        if (!keepColumns) {
          this.destroyRowComp(this.columnsRowComp);
          this.columnsRowComp = void 0;
        }
      };
      HeaderContainer2.prototype.destroyRowComp = function(rowComp) {
        if (rowComp) {
          this.destroyBean(rowComp);
          this.eContainer.removeChild(rowComp.getGui());
        }
      };
      HeaderContainer2.prototype.refreshRowComps = function(keepColumns) {
        var _this = this;
        if (keepColumns === void 0) {
          keepColumns = false;
        }
        var sequence = new NumberSequence();
        var refreshColumnGroups = function() {
          var groupRowCount = _this.columnController.getHeaderRowCount() - 1;
          _this.groupsRowComps.forEach(_this.destroyRowComp.bind(_this));
          _this.groupsRowComps = [];
          for (var i = 0; i < groupRowCount; i++) {
            var rowComp = _this.createBean(new HeaderRowComp(sequence.next(), HeaderRowType.COLUMN_GROUP, _this.pinned));
            _this.groupsRowComps.push(rowComp);
          }
        };
        var refreshColumns = function() {
          var rowIndex = sequence.next();
          if (_this.columnsRowComp) {
            var rowIndexMismatch = _this.columnsRowComp.getRowIndex() !== rowIndex;
            if (!keepColumns || rowIndexMismatch) {
              _this.destroyRowComp(_this.columnsRowComp);
              _this.columnsRowComp = void 0;
            }
          }
          if (!_this.columnsRowComp) {
            _this.columnsRowComp = _this.createBean(new HeaderRowComp(rowIndex, HeaderRowType.COLUMN, _this.pinned));
          }
        };
        var refreshFilters = function() {
          _this.destroyRowComp(_this.filtersRowComp);
          _this.filtersRowComp = void 0;
          var includeFloatingFilter = !_this.columnController.isPivotMode() && _this.columnController.hasFloatingFilters();
          if (includeFloatingFilter) {
            _this.filtersRowComp = _this.createBean(new HeaderRowComp(sequence.next(), HeaderRowType.FLOATING_FILTER, _this.pinned));
          }
        };
        refreshColumnGroups();
        refreshColumns();
        refreshFilters();
        this.getRowComps().forEach(function(rowComp) {
          return _this.eContainer.appendChild(rowComp.getGui());
        });
      };
      __decorate$U([
        Autowired("gridOptionsWrapper")
      ], HeaderContainer2.prototype, "gridOptionsWrapper", void 0);
      __decorate$U([
        Autowired("columnController")
      ], HeaderContainer2.prototype, "columnController", void 0);
      __decorate$U([
        Autowired("scrollVisibleService")
      ], HeaderContainer2.prototype, "scrollVisibleService", void 0);
      __decorate$U([
        PostConstruct
      ], HeaderContainer2.prototype, "init", null);
      __decorate$U([
        PreDestroy
      ], HeaderContainer2.prototype, "destroyRowComps", null);
      return HeaderContainer2;
    }(BeanStub);
    var __extends$Y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$V = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(HeaderNavigationDirection) {
      HeaderNavigationDirection[HeaderNavigationDirection["UP"] = 0] = "UP";
      HeaderNavigationDirection[HeaderNavigationDirection["DOWN"] = 1] = "DOWN";
      HeaderNavigationDirection[HeaderNavigationDirection["LEFT"] = 2] = "LEFT";
      HeaderNavigationDirection[HeaderNavigationDirection["RIGHT"] = 3] = "RIGHT";
    })(exports.HeaderNavigationDirection || (exports.HeaderNavigationDirection = {}));
    var HeaderNavigationService = function(_super) {
      __extends$Y(HeaderNavigationService2, _super);
      function HeaderNavigationService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      HeaderNavigationService2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
      };
      HeaderNavigationService2.prototype.registerHeaderRoot = function(headerRoot) {
        this.headerRoot = headerRoot;
      };
      HeaderNavigationService2.prototype.getHeaderRowCount = function() {
        var headerContainers = this.headerRoot.getHeaderContainers();
        return headerContainers.size === 0 ? 0 : this.getHeaderContainer().getRowComps().length;
      };
      HeaderNavigationService2.prototype.getHeaderRowType = function(idx) {
        if (this.getHeaderRowCount()) {
          return this.getHeaderContainer().getRowComps()[idx].getType();
        }
      };
      HeaderNavigationService2.prototype.getHeaderContainer = function(position) {
        if (position === void 0) {
          position = "center";
        }
        if (position === null) {
          position = "center";
        }
        return this.headerRoot.getHeaderContainers().get(position);
      };
      HeaderNavigationService2.prototype.navigateVertically = function(direction, fromHeader, event) {
        if (!fromHeader) {
          fromHeader = this.focusController.getFocusedHeader();
        }
        if (!fromHeader) {
          return false;
        }
        var headerRowIndex = fromHeader.headerRowIndex, column = fromHeader.column;
        var rowLen = this.getHeaderRowCount();
        var isUp = direction === exports.HeaderNavigationDirection.UP;
        var nextRow = isUp ? headerRowIndex - 1 : headerRowIndex + 1;
        var nextFocusColumn;
        var skipColumn = false;
        if (nextRow < 0) {
          nextRow = 0;
          nextFocusColumn = column;
          skipColumn = true;
        }
        if (nextRow >= rowLen) {
          nextRow = -1;
        }
        var currentRowType = this.getHeaderRowType(headerRowIndex);
        if (!skipColumn) {
          if (currentRowType === HeaderRowType.COLUMN_GROUP) {
            var currentColumn = column;
            nextFocusColumn = isUp ? column.getParent() : currentColumn.getDisplayedChildren()[0];
          } else if (currentRowType === HeaderRowType.FLOATING_FILTER) {
            nextFocusColumn = column;
          } else {
            var currentColumn = column;
            nextFocusColumn = isUp ? currentColumn.getParent() : currentColumn;
          }
          if (!nextFocusColumn) {
            return false;
          }
        }
        return this.focusController.focusHeaderPosition({ headerRowIndex: nextRow, column: nextFocusColumn }, void 0, false, true, event);
      };
      HeaderNavigationService2.prototype.navigateHorizontally = function(direction, fromTab, event) {
        if (fromTab === void 0) {
          fromTab = false;
        }
        var focusedHeader = this.focusController.getFocusedHeader();
        var isLeft = direction === exports.HeaderNavigationDirection.LEFT;
        var isRtl = this.gridOptionsWrapper.isEnableRtl();
        var nextHeader;
        var normalisedDirection;
        if (isLeft !== isRtl) {
          normalisedDirection = "Before";
          nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);
        } else {
          normalisedDirection = "After";
          nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);
        }
        if (nextHeader) {
          return this.focusController.focusHeaderPosition(nextHeader, normalisedDirection, fromTab, true, event);
        }
        if (!fromTab) {
          return true;
        }
        return this.focusNextHeaderRow(focusedHeader, normalisedDirection, event);
      };
      HeaderNavigationService2.prototype.focusNextHeaderRow = function(focusedHeader, direction, event) {
        var currentIndex = focusedHeader.headerRowIndex;
        var nextPosition;
        var nextRowIndex;
        if (direction === "Before") {
          if (currentIndex > 0) {
            nextRowIndex = currentIndex - 1;
            nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, "end");
          }
        } else {
          nextRowIndex = currentIndex + 1;
          nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, "start");
        }
        return this.focusController.focusHeaderPosition(nextPosition, direction, true, true, event);
      };
      HeaderNavigationService2.prototype.scrollToColumn = function(column, direction) {
        if (direction === void 0) {
          direction = "After";
        }
        if (column.getPinned()) {
          return;
        }
        var columnToScrollTo;
        if (column instanceof ColumnGroup) {
          var columns = column.getDisplayedLeafColumns();
          columnToScrollTo = direction === "Before" ? last(columns) : columns[0];
        } else {
          columnToScrollTo = column;
        }
        this.gridPanel.ensureColumnVisible(columnToScrollTo);
        this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter();
        this.animationFrameService.flushAllFrames();
      };
      __decorate$V([
        Autowired("gridOptionsWrapper")
      ], HeaderNavigationService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$V([
        Autowired("focusController")
      ], HeaderNavigationService2.prototype, "focusController", void 0);
      __decorate$V([
        Autowired("headerPositionUtils")
      ], HeaderNavigationService2.prototype, "headerPositionUtils", void 0);
      __decorate$V([
        Autowired("animationFrameService")
      ], HeaderNavigationService2.prototype, "animationFrameService", void 0);
      HeaderNavigationService2 = __decorate$V([
        Bean("headerNavigationService")
      ], HeaderNavigationService2);
      return HeaderNavigationService2;
    }(BeanStub);
    var KeyName = function() {
      function KeyName2() {
      }
      KeyName2.BACKSPACE = "Backspace";
      KeyName2.TAB = "Tab";
      KeyName2.ENTER = "Enter";
      KeyName2.SHIFT = "Shift";
      KeyName2.ESCAPE = "Escape";
      KeyName2.SPACE = " ";
      KeyName2.LEFT = "ArrowLeft";
      KeyName2.UP = "ArrowUp";
      KeyName2.RIGHT = "ArrowRight";
      KeyName2.DOWN = "ArrowDown";
      KeyName2.DELETE = "Delete";
      KeyName2.NUM_PAD_DELETE = "Del";
      KeyName2.A = "a";
      KeyName2.C = "c";
      KeyName2.V = "v";
      KeyName2.D = "d";
      KeyName2.Z = "z";
      KeyName2.Y = "y";
      KeyName2.F2 = "F2";
      KeyName2.PAGE_UP = "PageUp";
      KeyName2.PAGE_DOWN = "PageDown";
      KeyName2.PAGE_HOME = "Home";
      KeyName2.PAGE_END = "End";
      return KeyName2;
    }();
    var __extends$Z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$W = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderRootComp = function(_super) {
      __extends$Z(HeaderRootComp2, _super);
      function HeaderRootComp2() {
        var _this = _super.call(this, HeaderRootComp2.TEMPLATE) || this;
        _this.headerContainers = /* @__PURE__ */ new Map();
        return _this;
      }
      HeaderRootComp2.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        this.printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        this.gridApi.registerHeaderRootComp(this);
        this.autoWidthCalculator.registerHeaderRootComp(this);
        this.registerHeaderContainer(new HeaderContainer(this.eHeaderContainer, this.eHeaderViewport, null), "center");
        this.registerHeaderContainer(new HeaderContainer(this.ePinnedLeftHeader, null, Constants.PINNED_LEFT), "left");
        this.registerHeaderContainer(new HeaderContainer(this.ePinnedRightHeader, null, Constants.PINNED_RIGHT), "right");
        this.headerContainers.forEach(function(container) {
          return _this.createManagedBean(container);
        });
        this.headerNavigationService.registerHeaderRoot(this);
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
        this.onPivotModeChanged();
        this.addPreventHeaderScroll();
        if (this.columnController.isReady()) {
          this.refreshHeader();
        }
      };
      HeaderRootComp2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
        this.headerContainers.forEach(function(c) {
          return c.setupDragAndDrop(gridPanel);
        });
      };
      HeaderRootComp2.prototype.registerHeaderContainer = function(headerContainer, type) {
        this.headerContainers.set(type, headerContainer);
      };
      HeaderRootComp2.prototype.onTabKeyDown = function(e) {
        var isRtl = this.gridOptionsWrapper.isEnableRtl();
        var direction = e.shiftKey !== isRtl ? exports.HeaderNavigationDirection.LEFT : exports.HeaderNavigationDirection.RIGHT;
        var _a = this.focusController.getFocusedHeader(), headerRowIndex = _a.headerRowIndex, column = _a.column;
        if (isUserSuppressingHeaderKeyboardEvent(this.gridOptionsWrapper, e, headerRowIndex, column)) {
          return;
        }
        if (this.headerNavigationService.navigateHorizontally(direction, true, e) || this.focusController.focusNextGridCoreContainer(e.shiftKey)) {
          e.preventDefault();
        }
      };
      HeaderRootComp2.prototype.handleKeyDown = function(e) {
        var direction;
        var _a = this.focusController.getFocusedHeader(), headerRowIndex = _a.headerRowIndex, column = _a.column;
        if (isUserSuppressingHeaderKeyboardEvent(this.gridOptionsWrapper, e, headerRowIndex, column)) {
          return;
        }
        switch (e.key) {
          case KeyName.LEFT:
            direction = exports.HeaderNavigationDirection.LEFT;
          case KeyName.RIGHT:
            if (!exists(direction)) {
              direction = exports.HeaderNavigationDirection.RIGHT;
            }
            this.headerNavigationService.navigateHorizontally(direction, false, e);
            break;
          case KeyName.UP:
            direction = exports.HeaderNavigationDirection.UP;
          case KeyName.DOWN:
            if (!exists(direction)) {
              direction = exports.HeaderNavigationDirection.DOWN;
            }
            if (this.headerNavigationService.navigateVertically(direction, null, e)) {
              e.preventDefault();
            }
            break;
          default:
            return;
        }
      };
      HeaderRootComp2.prototype.onFocusOut = function(e) {
        var relatedTarget = e.relatedTarget;
        var eGui = this.getGui();
        if (!relatedTarget && eGui.contains(document.activeElement)) {
          return;
        }
        if (!eGui.contains(relatedTarget)) {
          this.focusController.clearFocusedHeader();
        }
      };
      HeaderRootComp2.prototype.onDomLayoutChanged = function() {
        var newValue = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        if (this.printLayout !== newValue) {
          this.printLayout = newValue;
          this.refreshHeader();
        }
      };
      HeaderRootComp2.prototype.setHorizontalScroll = function(offset) {
        this.eHeaderContainer.style.transform = "translateX(" + offset + "px)";
      };
      HeaderRootComp2.prototype.forEachHeaderElement = function(callback) {
        this.headerContainers.forEach(function(childContainer) {
          return childContainer.forEachHeaderElement(callback);
        });
      };
      HeaderRootComp2.prototype.refreshHeader = function() {
        this.headerContainers.forEach(function(container) {
          return container.refresh();
        });
      };
      HeaderRootComp2.prototype.onPivotModeChanged = function() {
        var pivotMode = this.columnController.isPivotMode();
        addOrRemoveCssClass(this.getGui(), "ag-pivot-on", pivotMode);
        addOrRemoveCssClass(this.getGui(), "ag-pivot-off", !pivotMode);
      };
      HeaderRootComp2.prototype.setHeight = function(height) {
        var px = height + 1 + "px";
        this.getGui().style.height = px;
        this.getGui().style.minHeight = px;
      };
      HeaderRootComp2.prototype.addPreventHeaderScroll = function() {
        var _this = this;
        this.addManagedListener(this.eHeaderViewport, "scroll", function() {
          var scrollLeft = _this.eHeaderViewport.scrollLeft;
          if (scrollLeft !== 0) {
            _this.gridPanel.scrollHorizontally(scrollLeft);
            _this.eHeaderViewport.scrollLeft = 0;
          }
        });
      };
      HeaderRootComp2.prototype.getHeaderContainers = function() {
        return this.headerContainers;
      };
      HeaderRootComp2.prototype.setHeaderContainerWidth = function(width) {
        this.eHeaderContainer.style.width = width + "px";
      };
      HeaderRootComp2.prototype.setLeftVisible = function(visible) {
        setDisplayed(this.ePinnedLeftHeader, visible);
      };
      HeaderRootComp2.prototype.setRightVisible = function(visible) {
        setDisplayed(this.ePinnedRightHeader, visible);
      };
      HeaderRootComp2.TEMPLATE = '<div class="ag-header" role="presentation">\n            <div class="ag-pinned-left-header" ref="ePinnedLeftHeader" role="presentation"></div>\n            <div class="ag-header-viewport" ref="eHeaderViewport" role="presentation">\n                <div class="ag-header-container" ref="eHeaderContainer" role="rowgroup"></div>\n            </div>\n            <div class="ag-pinned-right-header" ref="ePinnedRightHeader" role="presentation"></div>\n        </div>';
      __decorate$W([
        RefSelector("ePinnedLeftHeader")
      ], HeaderRootComp2.prototype, "ePinnedLeftHeader", void 0);
      __decorate$W([
        RefSelector("ePinnedRightHeader")
      ], HeaderRootComp2.prototype, "ePinnedRightHeader", void 0);
      __decorate$W([
        RefSelector("eHeaderContainer")
      ], HeaderRootComp2.prototype, "eHeaderContainer", void 0);
      __decorate$W([
        RefSelector("eHeaderViewport")
      ], HeaderRootComp2.prototype, "eHeaderViewport", void 0);
      __decorate$W([
        Autowired("gridOptionsWrapper")
      ], HeaderRootComp2.prototype, "gridOptionsWrapper", void 0);
      __decorate$W([
        Autowired("columnController")
      ], HeaderRootComp2.prototype, "columnController", void 0);
      __decorate$W([
        Autowired("gridApi")
      ], HeaderRootComp2.prototype, "gridApi", void 0);
      __decorate$W([
        Autowired("autoWidthCalculator")
      ], HeaderRootComp2.prototype, "autoWidthCalculator", void 0);
      __decorate$W([
        Autowired("headerNavigationService")
      ], HeaderRootComp2.prototype, "headerNavigationService", void 0);
      return HeaderRootComp2;
    }(ManagedFocusComponent);
    var __extends$_ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$4 = function() {
      __assign$4 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$4.apply(this, arguments);
    };
    var __decorate$X = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FilterManager = function(_super) {
      __extends$_(FilterManager2, _super);
      function FilterManager2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.allAdvancedFilters = /* @__PURE__ */ new Map();
        _this.activeAdvancedFilters = [];
        _this.quickFilter = null;
        _this.quickFilterParts = null;
        _this.processingFilterChange = false;
        return _this;
      }
      FilterManager_1 = FilterManager2;
      FilterManager2.prototype.init = function() {
        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.onNewRowsLoaded.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
        this.quickFilter = this.parseQuickFilter(this.gridOptionsWrapper.getQuickFilterText());
        this.setQuickFilterParts();
        this.allowShowChangeAfterFilter = this.gridOptionsWrapper.isAllowShowChangeAfterFilter();
        this.checkExternalFilter();
      };
      FilterManager2.prototype.setQuickFilterParts = function() {
        this.quickFilterParts = this.quickFilter ? this.quickFilter.split(" ") : null;
      };
      FilterManager2.prototype.setFilterModel = function(model) {
        var _this = this;
        var allPromises = [];
        if (model) {
          var modelKeys_1 = convertToSet(Object.keys(model));
          this.allAdvancedFilters.forEach(function(filterWrapper, colId) {
            var newModel = model[colId];
            allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, newModel));
            modelKeys_1.delete(colId);
          });
          modelKeys_1.forEach(function(colId) {
            var column = _this.columnController.getPrimaryColumn(colId);
            if (!column) {
              console.warn("Warning ag-grid setFilterModel - no column found for colId " + colId);
              return;
            }
            var filterWrapper = _this.getOrCreateFilterWrapper(column, "NO_UI");
            allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, model[colId]));
          });
        } else {
          this.allAdvancedFilters.forEach(function(filterWrapper) {
            allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, null));
          });
        }
        Promise2.all(allPromises).then(function() {
          return _this.onFilterChanged();
        });
      };
      FilterManager2.prototype.setModelOnFilterWrapper = function(filterPromise, newModel) {
        return new Promise2(function(resolve) {
          filterPromise.then(function(filter2) {
            if (typeof filter2.setModel !== "function") {
              console.warn("Warning ag-grid - filter missing setModel method, which is needed for setFilterModel");
              resolve();
            }
            (filter2.setModel(newModel) || Promise2.resolve()).then(function() {
              return resolve();
            });
          });
        });
      };
      FilterManager2.prototype.getFilterModel = function() {
        var result = {};
        this.allAdvancedFilters.forEach(function(filterWrapper, key) {
          var filterPromise = filterWrapper.filterPromise;
          var filter2 = filterPromise.resolveNow(null, function(filter3) {
            return filter3;
          });
          if (filter2 == null) {
            return null;
          }
          if (typeof filter2.getModel !== "function") {
            console.warn("Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel");
            return;
          }
          var model = filter2.getModel();
          if (exists(model)) {
            result[key] = model;
          }
        });
        return result;
      };
      FilterManager2.prototype.isAdvancedFilterPresent = function() {
        return this.activeAdvancedFilters.length > 0;
      };
      FilterManager2.prototype.updateActiveFilters = function() {
        var _this = this;
        this.activeAdvancedFilters.length = 0;
        this.allAdvancedFilters.forEach(function(filterWrapper) {
          if (filterWrapper.filterPromise.resolveNow(false, function(filter2) {
            return filter2.isFilterActive();
          })) {
            _this.activeAdvancedFilters.push(filterWrapper.filterPromise.resolveNow(null, function(filter2) {
              return filter2;
            }));
          }
        });
      };
      FilterManager2.prototype.updateFilterFlagInColumns = function(source, additionalEventAttributes) {
        this.allAdvancedFilters.forEach(function(filterWrapper) {
          var isFilterActive = filterWrapper.filterPromise.resolveNow(false, function(filter2) {
            return filter2.isFilterActive();
          });
          filterWrapper.column.setFilterActive(isFilterActive, source, additionalEventAttributes);
        });
      };
      FilterManager2.prototype.isAnyFilterPresent = function() {
        return this.isQuickFilterPresent() || this.isAdvancedFilterPresent() || this.externalFilterPresent;
      };
      FilterManager2.prototype.doAdvancedFiltersPass = function(node, filterToSkip) {
        var data = node.data;
        for (var i = 0; i < this.activeAdvancedFilters.length; i++) {
          var filter2 = this.activeAdvancedFilters[i];
          if (filter2 == null || filter2 === filterToSkip) {
            continue;
          }
          if (typeof filter2.doesFilterPass !== "function") {
            throw new Error("Filter is missing method doesFilterPass");
          }
          if (!filter2.doesFilterPass({ node, data })) {
            return false;
          }
        }
        return true;
      };
      FilterManager2.prototype.parseQuickFilter = function(newFilter) {
        if (!exists(newFilter)) {
          return null;
        }
        if (!this.gridOptionsWrapper.isRowModelDefault()) {
          console.warn("ag-grid: quick filtering only works with the Client-Side Row Model");
          return null;
        }
        return newFilter.toUpperCase();
      };
      FilterManager2.prototype.setQuickFilter = function(newFilter) {
        var parsedFilter = this.parseQuickFilter(newFilter);
        if (this.quickFilter !== parsedFilter) {
          this.quickFilter = parsedFilter;
          this.setQuickFilterParts();
          this.onFilterChanged();
        }
      };
      FilterManager2.prototype.checkExternalFilter = function() {
        this.externalFilterPresent = this.gridOptionsWrapper.isExternalFilterPresent();
      };
      FilterManager2.prototype.onFilterChanged = function(filterInstance, additionalEventAttributes) {
        this.updateActiveFilters();
        this.updateFilterFlagInColumns("filterChanged", additionalEventAttributes);
        this.checkExternalFilter();
        this.allAdvancedFilters.forEach(function(filterWrapper) {
          filterWrapper.filterPromise.then(function(filter2) {
            if (filter2 !== filterInstance && filter2.onAnyFilterChanged) {
              filter2.onAnyFilterChanged();
            }
          });
        });
        var filterChangedEvent = {
          type: Events.EVENT_FILTER_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        if (additionalEventAttributes) {
          mergeDeep(filterChangedEvent, additionalEventAttributes);
        }
        this.processingFilterChange = true;
        this.eventService.dispatchEvent(filterChangedEvent);
        this.processingFilterChange = false;
      };
      FilterManager2.prototype.isSuppressFlashingCellsBecauseFiltering = function() {
        return !this.allowShowChangeAfterFilter && this.processingFilterChange;
      };
      FilterManager2.prototype.isQuickFilterPresent = function() {
        return this.quickFilter !== null;
      };
      FilterManager2.prototype.doesRowPassOtherFilters = function(filterToSkip, node) {
        return this.doesRowPassFilter(node, filterToSkip);
      };
      FilterManager2.prototype.doesRowPassQuickFilterNoCache = function(node, filterPart) {
        var _this = this;
        var columns = this.columnController.getAllColumnsForQuickFilter();
        return some(columns, function(column) {
          var part = _this.getQuickFilterTextForColumn(column, node);
          return exists(part) && part.indexOf(filterPart) >= 0;
        });
      };
      FilterManager2.prototype.doesRowPassQuickFilterCache = function(node, filterPart) {
        if (!node.quickFilterAggregateText) {
          this.aggregateRowForQuickFilter(node);
        }
        return node.quickFilterAggregateText.indexOf(filterPart) >= 0;
      };
      FilterManager2.prototype.doesRowPassQuickFilter = function(node) {
        var _this = this;
        var usingCache = this.gridOptionsWrapper.isCacheQuickFilter();
        return every(this.quickFilterParts, function(part) {
          return usingCache ? _this.doesRowPassQuickFilterCache(node, part) : _this.doesRowPassQuickFilterNoCache(node, part);
        });
      };
      FilterManager2.prototype.doesRowPassFilter = function(node, filterToSkip) {
        if (this.isQuickFilterPresent() && !this.doesRowPassQuickFilter(node)) {
          return false;
        }
        if (this.externalFilterPresent && !this.gridOptionsWrapper.doesExternalFilterPass(node)) {
          return false;
        }
        if (this.isAdvancedFilterPresent() && !this.doAdvancedFiltersPass(node, filterToSkip)) {
          return false;
        }
        return true;
      };
      FilterManager2.prototype.getQuickFilterTextForColumn = function(column, node) {
        var value = this.valueService.getValue(column, node, true);
        var colDef = column.getColDef();
        if (colDef.getQuickFilterText) {
          var params = {
            value,
            node,
            data: node.data,
            column,
            colDef,
            context: this.gridOptionsWrapper.getContext()
          };
          value = colDef.getQuickFilterText(params);
        }
        return exists(value) ? value.toString().toUpperCase() : null;
      };
      FilterManager2.prototype.aggregateRowForQuickFilter = function(node) {
        var _this = this;
        var stringParts = [];
        var columns = this.columnController.getAllColumnsForQuickFilter();
        forEach(columns, function(column) {
          var part = _this.getQuickFilterTextForColumn(column, node);
          if (exists(part)) {
            stringParts.push(part);
          }
        });
        node.quickFilterAggregateText = stringParts.join(FilterManager_1.QUICK_FILTER_SEPARATOR);
      };
      FilterManager2.prototype.onNewRowsLoaded = function(source) {
        this.allAdvancedFilters.forEach(function(filterWrapper) {
          filterWrapper.filterPromise.then(function(filter2) {
            if (filter2.onNewRowsLoaded) {
              filter2.onNewRowsLoaded();
            }
          });
        });
        this.updateFilterFlagInColumns(source);
        this.updateActiveFilters();
      };
      FilterManager2.prototype.createValueGetter = function(column) {
        var _this = this;
        return function(node) {
          return _this.valueService.getValue(column, node, true);
        };
      };
      FilterManager2.prototype.getFilterComponent = function(column, source, createIfDoesNotExist) {
        if (createIfDoesNotExist === void 0) {
          createIfDoesNotExist = true;
        }
        if (createIfDoesNotExist) {
          return this.getOrCreateFilterWrapper(column, source).filterPromise;
        }
        var filterWrapper = this.cachedFilter(column);
        return filterWrapper ? filterWrapper.filterPromise : null;
      };
      FilterManager2.prototype.isFilterActive = function(column) {
        var filterWrapper = this.cachedFilter(column);
        return filterWrapper && filterWrapper.filterPromise.resolveNow(false, function(filter2) {
          return filter2.isFilterActive();
        });
      };
      FilterManager2.prototype.getOrCreateFilterWrapper = function(column, source) {
        var filterWrapper = this.cachedFilter(column);
        if (!filterWrapper) {
          filterWrapper = this.createFilterWrapper(column, source);
          this.allAdvancedFilters.set(column.getColId(), filterWrapper);
        } else if (source !== "NO_UI") {
          this.putIntoGui(filterWrapper, source);
        }
        return filterWrapper;
      };
      FilterManager2.prototype.cachedFilter = function(column) {
        return this.allAdvancedFilters.get(column.getColId());
      };
      FilterManager2.prototype.createFilterInstance = function(column, $scope) {
        var _this = this;
        var defaultFilter = ModuleRegistry.isRegistered(exports.ModuleNames.SetFilterModule) ? "agSetColumnFilter" : "agTextColumnFilter";
        var colDef = column.getColDef();
        var filterInstance;
        var params = __assign$4(__assign$4({}, this.createFilterParams(column, colDef, $scope)), { filterModifiedCallback: function() {
          var event = {
            type: Events.EVENT_FILTER_MODIFIED,
            api: _this.gridApi,
            columnApi: _this.columnApi,
            column,
            filterInstance
          };
          _this.eventService.dispatchEvent(event);
        }, filterChangedCallback: function(additionalEventAttributes) {
          return _this.onFilterChanged(filterInstance, additionalEventAttributes);
        }, doesRowPassOtherFilter: function(node) {
          return _this.doesRowPassOtherFilters(filterInstance, node);
        } });
        var res = this.userComponentFactory.newFilterComponent(colDef, params, defaultFilter);
        if (res) {
          res.then(function(r) {
            return filterInstance = r;
          });
        }
        return res;
      };
      FilterManager2.prototype.createFilterParams = function(column, colDef, $scope) {
        if ($scope === void 0) {
          $scope = null;
        }
        var params = {
          api: this.gridOptionsWrapper.getApi(),
          column,
          colDef: cloneObject(colDef),
          rowModel: this.rowModel,
          filterChangedCallback: null,
          filterModifiedCallback: null,
          valueGetter: this.createValueGetter(column),
          context: this.gridOptionsWrapper.getContext(),
          doesRowPassOtherFilter: null
        };
        if ($scope) {
          params.$scope = $scope;
        }
        return params;
      };
      FilterManager2.prototype.createFilterWrapper = function(column, source) {
        var filterWrapper = {
          column,
          filterPromise: null,
          scope: null,
          compiledElement: null,
          guiPromise: Promise2.resolve(null)
        };
        filterWrapper.scope = this.gridOptionsWrapper.isAngularCompileFilters() ? this.$scope.$new() : null;
        filterWrapper.filterPromise = this.createFilterInstance(column, filterWrapper.scope);
        if (filterWrapper.filterPromise) {
          this.putIntoGui(filterWrapper, source);
        }
        return filterWrapper;
      };
      FilterManager2.prototype.putIntoGui = function(filterWrapper, source) {
        var _this = this;
        var eFilterGui = document.createElement("div");
        eFilterGui.className = "ag-filter";
        filterWrapper.guiPromise = new Promise2(function(resolve) {
          filterWrapper.filterPromise.then(function(filter2) {
            var guiFromFilter = filter2.getGui();
            if (!exists(guiFromFilter)) {
              console.warn("getGui method from filter returned " + guiFromFilter + ", it should be a DOM element or an HTML template string.");
            }
            if (typeof guiFromFilter === "string") {
              guiFromFilter = loadTemplate(guiFromFilter);
            }
            eFilterGui.appendChild(guiFromFilter);
            if (filterWrapper.scope) {
              var compiledElement = _this.$compile(eFilterGui)(filterWrapper.scope);
              filterWrapper.compiledElement = compiledElement;
              window.setTimeout(function() {
                return filterWrapper.scope.$apply();
              }, 0);
            }
            resolve(eFilterGui);
            _this.eventService.dispatchEvent({
              type: Events.EVENT_FILTER_OPENED,
              column: filterWrapper.column,
              source,
              eGui: eFilterGui,
              api: _this.gridApi,
              columnApi: _this.columnApi
            });
          });
        });
      };
      FilterManager2.prototype.onNewColumnsLoaded = function() {
        var _this = this;
        var atLeastOneFilterGone = false;
        this.allAdvancedFilters.forEach(function(filterWrapper) {
          var oldColumn = !_this.columnController.getPrimaryColumn(filterWrapper.column);
          if (oldColumn) {
            atLeastOneFilterGone = true;
            _this.disposeFilterWrapper(filterWrapper, "filterDestroyed");
          }
        });
        if (atLeastOneFilterGone) {
          this.onFilterChanged();
        }
      };
      FilterManager2.prototype.destroyFilter = function(column, source) {
        if (source === void 0) {
          source = "api";
        }
        var filterWrapper = this.allAdvancedFilters.get(column.getColId());
        if (filterWrapper) {
          this.disposeFilterWrapper(filterWrapper, source);
          this.onFilterChanged();
        }
      };
      FilterManager2.prototype.disposeFilterWrapper = function(filterWrapper, source) {
        var _this = this;
        filterWrapper.filterPromise.then(function(filter2) {
          (filter2.setModel(null) || Promise2.resolve()).then(function() {
            _this.getContext().destroyBean(filter2);
            filterWrapper.column.setFilterActive(false, source);
            if (filterWrapper.scope) {
              if (filterWrapper.compiledElement) {
                filterWrapper.compiledElement.remove();
              }
              filterWrapper.scope.$destroy();
            }
            _this.allAdvancedFilters.delete(filterWrapper.column.getColId());
          });
        });
      };
      FilterManager2.prototype.destroy = function() {
        var _this = this;
        _super.prototype.destroy.call(this);
        this.allAdvancedFilters.forEach(function(filterWrapper) {
          return _this.disposeFilterWrapper(filterWrapper, "filterDestroyed");
        });
      };
      var FilterManager_1;
      FilterManager2.QUICK_FILTER_SEPARATOR = "\n";
      __decorate$X([
        Autowired("$compile")
      ], FilterManager2.prototype, "$compile", void 0);
      __decorate$X([
        Autowired("$scope")
      ], FilterManager2.prototype, "$scope", void 0);
      __decorate$X([
        Autowired("gridOptionsWrapper")
      ], FilterManager2.prototype, "gridOptionsWrapper", void 0);
      __decorate$X([
        Autowired("valueService")
      ], FilterManager2.prototype, "valueService", void 0);
      __decorate$X([
        Autowired("columnController")
      ], FilterManager2.prototype, "columnController", void 0);
      __decorate$X([
        Autowired("rowModel")
      ], FilterManager2.prototype, "rowModel", void 0);
      __decorate$X([
        Autowired("columnApi")
      ], FilterManager2.prototype, "columnApi", void 0);
      __decorate$X([
        Autowired("gridApi")
      ], FilterManager2.prototype, "gridApi", void 0);
      __decorate$X([
        Autowired("userComponentFactory")
      ], FilterManager2.prototype, "userComponentFactory", void 0);
      __decorate$X([
        PostConstruct
      ], FilterManager2.prototype, "init", null);
      __decorate$X([
        PreDestroy
      ], FilterManager2.prototype, "destroy", null);
      FilterManager2 = FilterManager_1 = __decorate$X([
        Bean("filterManager")
      ], FilterManager2);
      return FilterManager2;
    }(BeanStub);
    var __extends$$ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$Y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ValueService = function(_super) {
      __extends$$(ValueService2, _super);
      function ValueService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.initialised = false;
        return _this;
      }
      ValueService2.prototype.init = function() {
        this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();
        this.initialised = true;
      };
      ValueService2.prototype.getValue = function(column, rowNode, forFilter, ignoreAggData) {
        if (forFilter === void 0) {
          forFilter = false;
        }
        if (ignoreAggData === void 0) {
          ignoreAggData = false;
        }
        if (!this.initialised) {
          this.init();
        }
        if (!rowNode) {
          return;
        }
        var colDef = column.getColDef();
        var field = colDef.field;
        var colId = column.getId();
        var data = rowNode.data;
        var result;
        var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== void 0;
        var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== void 0;
        if (forFilter && colDef.filterValueGetter) {
          result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);
        } else if (this.gridOptionsWrapper.isTreeData() && aggDataExists) {
          result = rowNode.aggData[colId];
        } else if (this.gridOptionsWrapper.isTreeData() && colDef.valueGetter) {
          result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
        } else if (this.gridOptionsWrapper.isTreeData() && (field && data)) {
          result = getValueUsingField(data, field, column.isFieldContainsDots());
        } else if (groupDataExists) {
          result = rowNode.groupData[colId];
        } else if (aggDataExists) {
          result = rowNode.aggData[colId];
        } else if (colDef.valueGetter) {
          result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
        } else if (field && data) {
          result = getValueUsingField(data, field, column.isFieldContainsDots());
        }
        if (this.cellExpressions && typeof result === "string" && result.indexOf("=") === 0) {
          var cellValueGetter = result.substring(1);
          result = this.executeValueGetter(cellValueGetter, data, column, rowNode);
        }
        return result;
      };
      ValueService2.prototype.setValue = function(rowNode, colKey, newValue, eventSource) {
        var column = this.columnController.getPrimaryColumn(colKey);
        if (!rowNode || !column) {
          return;
        }
        if (missing(rowNode.data)) {
          rowNode.data = {};
        }
        var _a = column.getColDef(), field = _a.field, newValueHandler = _a.newValueHandler, valueSetter = _a.valueSetter;
        if (missing(field) && missing(newValueHandler) && missing(valueSetter)) {
          console.warn("ag-Grid: you need either field or valueSetter set on colDef for editing to work");
          return;
        }
        var params = {
          node: rowNode,
          data: rowNode.data,
          oldValue: this.getValue(column, rowNode),
          newValue,
          colDef: column.getColDef(),
          column,
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext()
        };
        params.newValue = newValue;
        var valueWasDifferent;
        if (newValueHandler && exists(newValueHandler)) {
          valueWasDifferent = newValueHandler(params);
        } else if (exists(valueSetter)) {
          valueWasDifferent = this.expressionService.evaluate(valueSetter, params);
        } else {
          valueWasDifferent = this.setValueUsingField(rowNode.data, field, newValue, column.isFieldContainsDots());
        }
        if (valueWasDifferent === void 0) {
          valueWasDifferent = true;
        }
        if (!valueWasDifferent) {
          return;
        }
        rowNode.resetQuickFilterAggregateText();
        this.valueCache.onDataChanged();
        params.newValue = this.getValue(column, rowNode);
        var onCellValueChanged = column.getColDef().onCellValueChanged;
        if (typeof onCellValueChanged === "function") {
          setTimeout(function() {
            return onCellValueChanged(params);
          }, 0);
        }
        var event = {
          type: Events.EVENT_CELL_VALUE_CHANGED,
          event: null,
          rowIndex: rowNode.rowIndex,
          rowPinned: rowNode.rowPinned,
          column: params.column,
          api: params.api,
          colDef: params.colDef,
          columnApi: params.columnApi,
          context: params.context,
          data: rowNode.data,
          node: rowNode,
          oldValue: params.oldValue,
          newValue: params.newValue,
          value: params.newValue,
          source: eventSource
        };
        this.eventService.dispatchEvent(event);
      };
      ValueService2.prototype.setValueUsingField = function(data, field, newValue, isFieldContainsDots) {
        if (!field) {
          return false;
        }
        var valuesAreSame = false;
        if (!isFieldContainsDots) {
          data[field] = newValue;
        } else {
          var fieldPieces = field.split(".");
          var currentObject = data;
          while (fieldPieces.length > 0 && currentObject) {
            var fieldPiece = fieldPieces.shift();
            if (fieldPieces.length === 0) {
              currentObject[fieldPiece] = newValue;
            } else {
              currentObject = currentObject[fieldPiece];
            }
          }
        }
        return !valuesAreSame;
      };
      ValueService2.prototype.executeFilterValueGetter = function(valueGetter, data, column, rowNode) {
        var params = {
          data,
          node: rowNode,
          column,
          colDef: column.getColDef(),
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext(),
          getValue: this.getValueCallback.bind(this, rowNode)
        };
        return this.expressionService.evaluate(valueGetter, params);
      };
      ValueService2.prototype.executeValueGetter = function(valueGetter, data, column, rowNode) {
        var colId = column.getId();
        var valueFromCache = this.valueCache.getValue(rowNode, colId);
        if (valueFromCache !== void 0) {
          return valueFromCache;
        }
        var params = {
          data,
          node: rowNode,
          column,
          colDef: column.getColDef(),
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          context: this.gridOptionsWrapper.getContext(),
          getValue: this.getValueCallback.bind(this, rowNode)
        };
        var result = this.expressionService.evaluate(valueGetter, params);
        this.valueCache.setValue(rowNode, colId, result);
        return result;
      };
      ValueService2.prototype.getValueCallback = function(node, field) {
        var otherColumn = this.columnController.getPrimaryColumn(field);
        if (otherColumn) {
          return this.getValue(otherColumn, node);
        }
        return null;
      };
      ValueService2.prototype.getKeyForNode = function(col, rowNode) {
        var value = this.getValue(col, rowNode);
        var keyCreator = col.getColDef().keyCreator;
        var result = keyCreator ? keyCreator({ value }) : value;
        if (typeof result === "string" || result == null) {
          return result;
        }
        result = String(result);
        if (result === "[object Object]") {
          doOnce(function() {
            console.warn("ag-Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se ag-Grid docs) or b) to toString() on the object to return a key");
          }, "getKeyForNode - warn about [object,object]");
        }
        return result;
      };
      __decorate$Y([
        Autowired("gridOptionsWrapper")
      ], ValueService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$Y([
        Autowired("expressionService")
      ], ValueService2.prototype, "expressionService", void 0);
      __decorate$Y([
        Autowired("columnController")
      ], ValueService2.prototype, "columnController", void 0);
      __decorate$Y([
        Autowired("valueCache")
      ], ValueService2.prototype, "valueCache", void 0);
      __decorate$Y([
        PostConstruct
      ], ValueService2.prototype, "init", null);
      ValueService2 = __decorate$Y([
        Bean("valueService")
      ], ValueService2);
      return ValueService2;
    }(BeanStub);
    var __decorate$Z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RowContainerComponent = function() {
      function RowContainerComponent2(params) {
        this.childCount = 0;
        this.rowTemplatesToAdd = [];
        this.afterGuiAttachedCallbacks = [];
        this.lastMadeVisibleTime = 0;
        this.eContainer = params.eContainer;
        this.eViewport = params.eViewport;
        if (params.eWrapper) {
          this.eWrapper = params.eWrapper;
        }
        this.hideWhenNoChildren = params.hideWhenNoChildren;
      }
      RowContainerComponent2.prototype.setVerticalScrollPosition = function(verticalScrollPosition) {
        this.scrollTop = verticalScrollPosition;
      };
      RowContainerComponent2.prototype.postConstruct = function() {
        this.checkDomOrder();
        this.checkVisibility();
        this.gridOptionsWrapper.addEventListener(GridOptionsWrapper.PROP_DOM_LAYOUT, this.checkDomOrder.bind(this));
      };
      RowContainerComponent2.prototype.checkDomOrder = function() {
        this.domOrder = this.gridOptionsWrapper.isEnsureDomOrder();
      };
      RowContainerComponent2.prototype.getRowElement = function(compId) {
        return this.eContainer.querySelector('[comp-id="' + compId + '"]');
      };
      RowContainerComponent2.prototype.setHeight = function(height) {
        if (height == null) {
          this.eContainer.style.height = "";
          return;
        }
        this.eContainer.style.height = height + "px";
        if (this.eWrapper) {
          this.eWrapper.style.height = height + "px";
        }
      };
      RowContainerComponent2.prototype.flushRowTemplates = function() {
        if (this.rowTemplatesToAdd.length !== 0) {
          var htmlToAdd = this.rowTemplatesToAdd.join("");
          appendHtml(this.eContainer, htmlToAdd);
          this.rowTemplatesToAdd.length = 0;
        }
        this.afterGuiAttachedCallbacks.forEach(function(func) {
          return func();
        });
        this.afterGuiAttachedCallbacks.length = 0;
        this.lastPlacedElement = null;
      };
      RowContainerComponent2.prototype.appendRowTemplate = function(rowTemplate, callback) {
        if (this.domOrder) {
          this.lastPlacedElement = insertTemplateWithDomOrder(this.eContainer, rowTemplate, this.lastPlacedElement);
        } else {
          this.rowTemplatesToAdd.push(rowTemplate);
        }
        this.afterGuiAttachedCallbacks.push(callback);
        this.childCount++;
        this.checkVisibility();
      };
      RowContainerComponent2.prototype.ensureDomOrder = function(eRow) {
        if (this.domOrder) {
          ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);
          this.lastPlacedElement = eRow;
        }
      };
      RowContainerComponent2.prototype.removeRowElement = function(eRow) {
        this.eContainer.removeChild(eRow);
        this.childCount--;
        this.checkVisibility();
      };
      RowContainerComponent2.prototype.checkVisibility = function() {
        if (!this.hideWhenNoChildren) {
          return;
        }
        var eGui = this.eViewport ? this.eViewport : this.eContainer;
        var visible = this.childCount > 0;
        if (this.visible !== visible) {
          this.visible = visible;
          this.lastMadeVisibleTime = new Date().getTime();
          setDisplayed(eGui, visible);
          if (visible && this.eViewport) {
            this.eViewport.scrollTop = this.scrollTop;
          }
        }
      };
      RowContainerComponent2.prototype.isMadeVisibleRecently = function() {
        var now = new Date().getTime();
        var millisSinceVisible = now - this.lastMadeVisibleTime;
        return millisSinceVisible < 500;
      };
      __decorate$Z([
        Autowired("gridOptionsWrapper")
      ], RowContainerComponent2.prototype, "gridOptionsWrapper", void 0);
      __decorate$Z([
        PostConstruct
      ], RowContainerComponent2.prototype, "postConstruct", null);
      return RowContainerComponent2;
    }();
    var __extends$10 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$5 = function() {
      __assign$5 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$5.apply(this, arguments);
    };
    var __decorate$_ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __spreadArrays$4 = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var RowDragFeature = function(_super) {
      __extends$10(RowDragFeature2, _super);
      function RowDragFeature2(eContainer, gridPanel) {
        var _this = _super.call(this) || this;
        _this.isMultiRowDrag = false;
        _this.isGridSorted = false;
        _this.isGridFiltered = false;
        _this.isRowGroupActive = false;
        _this.eContainer = eContainer;
        _this.gridPanel = gridPanel;
        return _this;
      }
      RowDragFeature2.prototype.postConstruct = function() {
        if (this.gridOptionsWrapper.isRowModelDefault()) {
          this.clientSideRowModel = this.rowModel;
        }
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));
        this.onSortChanged();
        this.onFilterChanged();
        this.onRowGroupChanged();
      };
      RowDragFeature2.prototype.onSortChanged = function() {
        this.isGridSorted = this.sortController.isSortActive();
      };
      RowDragFeature2.prototype.onFilterChanged = function() {
        this.isGridFiltered = this.filterManager.isAnyFilterPresent();
      };
      RowDragFeature2.prototype.onRowGroupChanged = function() {
        var rowGroups = this.columnController.getRowGroupColumns();
        this.isRowGroupActive = !missingOrEmpty(rowGroups);
      };
      RowDragFeature2.prototype.getContainer = function() {
        return this.eContainer;
      };
      RowDragFeature2.prototype.isInterestedIn = function(type) {
        return type === exports.DragSourceType.RowDrag;
      };
      RowDragFeature2.prototype.getIconName = function() {
        var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
        if (managedDrag && this.shouldPreventRowMove()) {
          return DragAndDropService.ICON_NOT_ALLOWED;
        }
        return DragAndDropService.ICON_MOVE;
      };
      RowDragFeature2.prototype.shouldPreventRowMove = function() {
        return this.isGridSorted || this.isGridFiltered || this.isRowGroupActive;
      };
      RowDragFeature2.prototype.getRowNodes = function(draggingEvent) {
        if (!this.isFromThisGrid(draggingEvent)) {
          return draggingEvent.dragItem.rowNodes;
        }
        var enableMultiRowDragging = this.gridOptionsWrapper.isEnableMultiRowDragging();
        var selectedNodes = this.selectionController.getSelectedNodes();
        var currentNode = draggingEvent.dragItem.rowNode;
        if (enableMultiRowDragging && selectedNodes.indexOf(currentNode) !== -1) {
          this.isMultiRowDrag = true;
          return __spreadArrays$4(selectedNodes);
        }
        this.isMultiRowDrag = false;
        return [currentNode];
      };
      RowDragFeature2.prototype.onDragEnter = function(draggingEvent) {
        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_ENTER, draggingEvent);
        this.getRowNodes(draggingEvent).forEach(function(rowNode) {
          rowNode.setDragging(true);
        });
        this.onEnterOrDragging(draggingEvent);
      };
      RowDragFeature2.prototype.onDragging = function(draggingEvent) {
        this.onEnterOrDragging(draggingEvent);
      };
      RowDragFeature2.prototype.isFromThisGrid = function(draggingEvent) {
        var dragSourceDomDataKey = draggingEvent.dragSource.dragSourceDomDataKey;
        return dragSourceDomDataKey === this.gridOptionsWrapper.getDomDataKey();
      };
      RowDragFeature2.prototype.isDropZoneWithinThisGrid = function(draggingEvent) {
        var gridGui = this.gridPanel.getGui();
        var dropZoneTarget = draggingEvent.dropZoneTarget;
        return !gridGui.contains(dropZoneTarget);
      };
      RowDragFeature2.prototype.onEnterOrDragging = function(draggingEvent) {
        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_MOVE, draggingEvent);
        this.lastDraggingEvent = draggingEvent;
        var pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
        var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
        if (managedDrag) {
          this.doManagedDrag(draggingEvent, pixel);
        }
        this.checkCenterForScrolling(pixel);
      };
      RowDragFeature2.prototype.doManagedDrag = function(draggingEvent, pixel) {
        var _this = this;
        var rowNodes;
        var isFromThisGrid = this.isFromThisGrid(draggingEvent);
        if (isFromThisGrid) {
          rowNodes = [draggingEvent.dragItem.rowNode];
          if (this.isMultiRowDrag) {
            rowNodes = __spreadArrays$4(this.selectionController.getSelectedNodes()).sort(function(a, b) {
              return _this.getRowIndexNumber(a) - _this.getRowIndexNumber(b);
            });
          }
          draggingEvent.dragItem.rowNodes = rowNodes;
        } else {
          rowNodes = draggingEvent.dragItem.rowNodes;
        }
        var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
        if (managedDrag && this.shouldPreventRowMove()) {
          return;
        }
        if (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !isFromThisGrid) {
          if (!this.isDropZoneWithinThisGrid(draggingEvent)) {
            this.clientSideRowModel.highlightRowAtPixel(rowNodes[0], pixel);
          }
        } else {
          this.moveRows(rowNodes, pixel);
        }
      };
      RowDragFeature2.prototype.getRowIndexNumber = function(rowNode) {
        return parseInt(last(rowNode.getRowIndexString().split("-")), 10);
      };
      RowDragFeature2.prototype.moveRowAndClearHighlight = function(draggingEvent) {
        var _this = this;
        var lastHighlightedRowNode = this.clientSideRowModel.getLastHighlightedRowNode();
        var isBelow = lastHighlightedRowNode && lastHighlightedRowNode.highlighted === "below";
        var pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
        var rowNodes = draggingEvent.dragItem.rowNodes;
        var increment = isBelow ? 1 : 0;
        if (this.isFromThisGrid(draggingEvent)) {
          rowNodes.forEach(function(rowNode) {
            if (rowNode.rowTop < pixel) {
              increment -= 1;
            }
          });
          this.moveRows(rowNodes, pixel, increment);
        } else {
          var getRowNodeId_1 = this.gridOptionsWrapper.getRowNodeIdFunc();
          var addIndex = this.clientSideRowModel.getRowIndexAtPixel(pixel) + 1;
          if (this.clientSideRowModel.getHighlightPosition(pixel) === "above") {
            addIndex--;
          }
          this.clientSideRowModel.updateRowData({
            add: rowNodes.map(function(node) {
              return node.data;
            }).filter(function(data) {
              return !_this.clientSideRowModel.getRowNode(getRowNodeId_1 ? getRowNodeId_1(data) : data.id);
            }),
            addIndex
          });
        }
        this.clearRowHighlight();
      };
      RowDragFeature2.prototype.clearRowHighlight = function() {
        this.clientSideRowModel.highlightRowAtPixel(null);
      };
      RowDragFeature2.prototype.moveRows = function(rowNodes, pixel, increment) {
        if (increment === void 0) {
          increment = 0;
        }
        var rowWasMoved = this.clientSideRowModel.ensureRowsAtPixel(rowNodes, pixel, increment);
        if (rowWasMoved) {
          this.focusController.clearFocusedCell();
          if (this.rangeController) {
            this.rangeController.removeAllCellRanges();
          }
        }
      };
      RowDragFeature2.prototype.checkCenterForScrolling = function(pixel) {
        var pixelRange = this.gridPanel.getVScrollPosition();
        this.needToMoveUp = pixel < pixelRange.top + 50;
        this.needToMoveDown = pixel > pixelRange.bottom - 50;
        if (this.needToMoveUp || this.needToMoveDown) {
          this.ensureIntervalStarted();
        } else {
          this.ensureIntervalCleared();
        }
      };
      RowDragFeature2.prototype.ensureIntervalStarted = function() {
        if (this.movingIntervalId) {
          return;
        }
        this.intervalCount = 0;
        this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);
      };
      RowDragFeature2.prototype.ensureIntervalCleared = function() {
        if (!this.moveInterval) {
          return;
        }
        window.clearInterval(this.movingIntervalId);
        this.movingIntervalId = null;
      };
      RowDragFeature2.prototype.moveInterval = function() {
        var pixelsToMove;
        this.intervalCount++;
        pixelsToMove = 10 + this.intervalCount * 5;
        if (pixelsToMove > 100) {
          pixelsToMove = 100;
        }
        var pixelsMoved;
        if (this.needToMoveDown) {
          pixelsMoved = this.gridPanel.scrollVertically(pixelsToMove);
        } else if (this.needToMoveUp) {
          pixelsMoved = this.gridPanel.scrollVertically(-pixelsToMove);
        }
        if (pixelsMoved !== 0) {
          this.onDragging(this.lastDraggingEvent);
        }
      };
      RowDragFeature2.prototype.addRowDropZone = function(params) {
        var _this = this;
        if (!params.getContainer()) {
          doOnce(function() {
            return console.warn("ag-Grid: addRowDropZone - A container target needs to be provided");
          }, "add-drop-zone-empty-target");
          return;
        }
        if (this.dragAndDropService.findExternalZone(params)) {
          console.warn("ag-Grid: addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.");
          return;
        }
        var processedParams = {
          getContainer: params.getContainer
        };
        if (params.fromGrid) {
          params.fromGrid = void 0;
          processedParams = params;
        } else {
          if (params.onDragEnter) {
            processedParams.onDragEnter = function(e) {
              params.onDragEnter(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));
            };
          }
          if (params.onDragLeave) {
            processedParams.onDragLeave = function(e) {
              params.onDragLeave(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));
            };
          }
          if (params.onDragging) {
            processedParams.onDragging = function(e) {
              params.onDragging(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));
            };
          }
          if (params.onDragStop) {
            processedParams.onDragStop = function(e) {
              params.onDragStop(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));
            };
          }
        }
        this.dragAndDropService.addDropTarget(__assign$5({ isInterestedIn: function(type) {
          return type === exports.DragSourceType.RowDrag;
        }, getIconName: function() {
          return DragAndDropService.ICON_MOVE;
        }, external: true }, processedParams));
      };
      RowDragFeature2.prototype.getRowDropZone = function(events) {
        var _this = this;
        var getContainer = this.getContainer.bind(this);
        var onDragEnter = this.onDragEnter.bind(this);
        var onDragLeave = this.onDragLeave.bind(this);
        var onDragging = this.onDragging.bind(this);
        var onDragStop = this.onDragStop.bind(this);
        if (!events) {
          return { getContainer, onDragEnter, onDragLeave, onDragging, onDragStop, fromGrid: true };
        }
        return {
          getContainer,
          onDragEnter: events.onDragEnter ? function(e) {
            onDragEnter(e);
            events.onDragEnter(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));
          } : onDragEnter,
          onDragLeave: events.onDragLeave ? function(e) {
            onDragLeave(e);
            events.onDragLeave(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));
          } : onDragLeave,
          onDragging: events.onDragging ? function(e) {
            onDragging(e);
            events.onDragging(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));
          } : onDragging,
          onDragStop: events.onDragStop ? function(e) {
            onDragStop(e);
            events.onDragStop(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));
          } : onDragStop,
          fromGrid: true
        };
      };
      RowDragFeature2.prototype.draggingToRowDragEvent = function(type, draggingEvent) {
        var yNormalised = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
        var mouseIsPastLastRow = yNormalised > this.rowModel.getCurrentPageHeight();
        var overIndex = -1;
        var overNode = null;
        if (!mouseIsPastLastRow) {
          overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);
          overNode = this.rowModel.getRow(overIndex);
        }
        var vDirectionString;
        switch (draggingEvent.vDirection) {
          case exports.VerticalDirection.Down:
            vDirectionString = "down";
            break;
          case exports.VerticalDirection.Up:
            vDirectionString = "up";
            break;
          default:
            vDirectionString = null;
            break;
        }
        var event = {
          type,
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          event: draggingEvent.event,
          node: draggingEvent.dragItem.rowNode,
          nodes: draggingEvent.dragItem.rowNodes,
          overIndex,
          overNode,
          y: yNormalised,
          vDirection: vDirectionString
        };
        return event;
      };
      RowDragFeature2.prototype.dispatchGridEvent = function(type, draggingEvent) {
        var event = this.draggingToRowDragEvent(type, draggingEvent);
        this.eventService.dispatchEvent(event);
      };
      RowDragFeature2.prototype.onDragLeave = function(draggingEvent) {
        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);
        this.stopDragging(draggingEvent);
        if (this.gridOptionsWrapper.isRowDragManaged()) {
          this.clearRowHighlight();
        }
        if (this.isFromThisGrid(draggingEvent)) {
          this.isMultiRowDrag = false;
        }
      };
      RowDragFeature2.prototype.onDragStop = function(draggingEvent) {
        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_END, draggingEvent);
        this.stopDragging(draggingEvent);
        if (this.gridOptionsWrapper.isRowDragManaged() && (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !this.isFromThisGrid(draggingEvent)) && !this.isDropZoneWithinThisGrid(draggingEvent)) {
          this.moveRowAndClearHighlight(draggingEvent);
        }
      };
      RowDragFeature2.prototype.stopDragging = function(draggingEvent) {
        this.ensureIntervalCleared();
        this.getRowNodes(draggingEvent).forEach(function(rowNode) {
          rowNode.setDragging(false);
        });
      };
      __decorate$_([
        Autowired("dragAndDropService")
      ], RowDragFeature2.prototype, "dragAndDropService", void 0);
      __decorate$_([
        Autowired("rowModel")
      ], RowDragFeature2.prototype, "rowModel", void 0);
      __decorate$_([
        Autowired("columnController")
      ], RowDragFeature2.prototype, "columnController", void 0);
      __decorate$_([
        Autowired("focusController")
      ], RowDragFeature2.prototype, "focusController", void 0);
      __decorate$_([
        Autowired("sortController")
      ], RowDragFeature2.prototype, "sortController", void 0);
      __decorate$_([
        Autowired("filterManager")
      ], RowDragFeature2.prototype, "filterManager", void 0);
      __decorate$_([
        Autowired("gridOptionsWrapper")
      ], RowDragFeature2.prototype, "gridOptionsWrapper", void 0);
      __decorate$_([
        Autowired("selectionController")
      ], RowDragFeature2.prototype, "selectionController", void 0);
      __decorate$_([
        Optional("rangeController")
      ], RowDragFeature2.prototype, "rangeController", void 0);
      __decorate$_([
        Autowired("mouseEventService")
      ], RowDragFeature2.prototype, "mouseEventService", void 0);
      __decorate$_([
        PostConstruct
      ], RowDragFeature2.prototype, "postConstruct", null);
      return RowDragFeature2;
    }(BeanStub);
    var __extends$11 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$$ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GRID_PANEL_NORMAL_TEMPLATE = '<div class="ag-root ag-unselectable" role="grid" unselectable="on">\n        <ag-header-root ref="headerRoot" unselectable="on"></ag-header-root>\n        <div class="ag-floating-top" ref="eTop" role="presentation" unselectable="on">\n            <div class="ag-pinned-left-floating-top" ref="eLeftTop" role="presentation" unselectable="on"></div>\n            <div class="ag-floating-top-viewport" ref="eTopViewport" role="presentation" unselectable="on">\n                <div class="ag-floating-top-container" ref="eTopContainer" role="presentation" unselectable="on"></div>\n            </div>\n            <div class="ag-pinned-right-floating-top" ref="eRightTop" role="presentation" unselectable="on"></div>\n            <div class="ag-floating-top-full-width-container" ref="eTopFullWidthContainer" role="presentation" unselectable="on"></div>\n        </div>\n        <div class="ag-body-viewport" ref="eBodyViewport" role="presentation">\n            <div class="ag-pinned-left-cols-container" ref="eLeftContainer" role="presentation" unselectable="on"></div>\n            <div class="ag-center-cols-clipper" ref="eCenterColsClipper" role="presentation" unselectable="on">\n                <div class="ag-center-cols-viewport" ref="eCenterViewport" role="presentation">\n                    <div class="ag-center-cols-container" ref="eCenterContainer" role="rowgroup" unselectable="on"></div>\n                </div>\n            </div>\n            <div class="ag-pinned-right-cols-container" ref="eRightContainer" role="presentation" unselectable="on"></div>\n            <div class="ag-full-width-container" ref="eFullWidthContainer" role="presentation" unselectable="on"></div>\n        </div>\n        <div class="ag-floating-bottom" ref="eBottom" role="presentation" unselectable="on">\n            <div class="ag-pinned-left-floating-bottom" ref="eLeftBottom" role="presentation" unselectable="on"></div>\n            <div class="ag-floating-bottom-viewport" ref="eBottomViewport" role="presentation" unselectable="on">\n                <div class="ag-floating-bottom-container" ref="eBottomContainer" role="presentation" unselectable="on"></div>\n            </div>\n            <div class="ag-pinned-right-floating-bottom" ref="eRightBottom" role="presentation" unselectable="on"></div>\n            <div class="ag-floating-bottom-full-width-container" ref="eBottomFullWidthContainer" role="presentation" unselectable="on"></div>\n        </div>\n        <div class="ag-body-horizontal-scroll" ref="eHorizontalScrollBody" aria-hidden="true">\n            <div class="ag-horizontal-left-spacer" ref="eHorizontalLeftSpacer"></div>\n            <div class="ag-body-horizontal-scroll-viewport" ref="eBodyHorizontalScrollViewport">\n                <div class="ag-body-horizontal-scroll-container" ref="eBodyHorizontalScrollContainer"></div>\n            </div>\n            <div class="ag-horizontal-right-spacer" ref="eHorizontalRightSpacer"></div>\n        </div>\n        <ag-overlay-wrapper ref="overlayWrapper"></ag-overlay-wrapper>\n    </div>';
    var GridPanel = function(_super) {
      __extends$11(GridPanel2, _super);
      function GridPanel2() {
        var _this = _super.call(this, GRID_PANEL_NORMAL_TEMPLATE) || this;
        _this.scrollLeft = -1;
        _this.scrollTop = -1;
        _this.resetLastHorizontalScrollElementDebounced = debounce(_this.resetLastHorizontalScrollElement.bind(_this), 500);
        return _this;
      }
      GridPanel2.prototype.getVScrollPosition = function() {
        var result = {
          top: this.eBodyViewport.scrollTop,
          bottom: this.eBodyViewport.scrollTop + this.eBodyViewport.offsetHeight
        };
        return result;
      };
      GridPanel2.prototype.getHScrollPosition = function() {
        var result = {
          left: this.eCenterViewport.scrollLeft,
          right: this.eCenterViewport.scrollLeft + this.eCenterViewport.offsetWidth
        };
        return result;
      };
      GridPanel2.prototype.onRowDataChanged = function() {
        this.showOrHideOverlay();
      };
      GridPanel2.prototype.showOrHideOverlay = function() {
        var isEmpty = this.paginationProxy.isEmpty();
        var isSuppressNoRowsOverlay = this.gridOptionsWrapper.isSuppressNoRowsOverlay();
        var method = isEmpty && !isSuppressNoRowsOverlay ? "showNoRowsOverlay" : "hideOverlay";
        this[method]();
      };
      GridPanel2.prototype.onNewColumnsLoaded = function() {
        if (this.columnController.isReady() && !this.paginationProxy.isEmpty()) {
          this.hideOverlay();
        }
      };
      GridPanel2.prototype.init = function() {
        var _this = this;
        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
        this.printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        this.gridOptionsWrapper.addLayoutElement(this.getGui());
        this.gridOptionsWrapper.addLayoutElement(this.eBodyViewport);
        this.suppressScrollOnFloatingRow();
        this.setupRowAnimationCssClass();
        this.buildRowContainerComponents();
        this.addEventListeners();
        this.addDragListeners();
        this.addScrollListener();
        if (this.gridOptionsWrapper.isRowModelDefault() && !this.gridOptionsWrapper.getRowData()) {
          this.showLoadingOverlay();
        }
        this.setCellTextSelection(this.gridOptionsWrapper.isEnableCellTextSelect());
        this.setPinnedContainerSize();
        this.setHeaderAndFloatingHeights();
        this.disableBrowserDragging();
        this.addMouseListeners();
        this.addPreventScrollWhileDragging();
        this.addKeyboardEvents();
        this.addBodyViewportListener();
        this.addStopEditingWhenGridLosesFocus();
        this.mockContextMenuForIPad();
        this.addRowDragListener();
        if (this.$scope) {
          this.addAngularApplyCheck();
        }
        this.onDisplayedColumnsWidthChanged();
        this.gridApi.registerGridComp(this);
        this.alignedGridsService.registerGridComp(this);
        this.headerRootComp.registerGridComp(this);
        this.navigationService.registerGridComp(this);
        this.headerNavigationService.registerGridComp(this);
        this.heightScaler.registerGridComp(this);
        this.autoHeightCalculator.registerGridComp(this);
        this.columnAnimationService.registerGridComp(this);
        this.autoWidthCalculator.registerGridComp(this);
        this.paginationAutoPageSizeService.registerGridComp(this);
        this.mouseEventService.registerGridComp(this);
        this.beans.registerGridComp(this);
        this.rowRenderer.registerGridComp(this);
        if (this.contextMenuFactory) {
          this.contextMenuFactory.registerGridComp(this);
        }
        if (this.menuFactory) {
          this.menuFactory.registerGridComp(this);
        }
        if (this.rangeController || this.gridOptionsWrapper.isRowSelectionMulti()) {
          setAriaMultiSelectable(this.getGui(), true);
          if (this.rangeController) {
            this.rangeController.registerGridComp(this);
          }
        }
        [this.eCenterViewport, this.eBodyViewport].forEach(function(viewport) {
          var unsubscribeFromResize = _this.resizeObserverService.observeResize(viewport, _this.onCenterViewportResized.bind(_this));
          _this.addDestroyFunc(function() {
            return unsubscribeFromResize();
          });
        });
        [this.eTop, this.eBodyViewport, this.eBottom].forEach(function(element) {
          _this.addManagedListener(element, "focusin", function() {
            addCssClass(element, "ag-has-focus");
          });
          _this.addManagedListener(element, "focusout", function(e) {
            if (!element.contains(e.relatedTarget)) {
              removeCssClass(element, "ag-has-focus");
            }
          });
        });
      };
      GridPanel2.prototype.onDomLayoutChanged = function() {
        var newPrintLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
        if (this.printLayout !== newPrintLayout) {
          this.printLayout = newPrintLayout;
          this.setWidthsOfContainers();
          this.setPinnedContainerSize();
        }
      };
      GridPanel2.prototype.onCenterViewportResized = function() {
        if (isVisible(this.eCenterViewport)) {
          this.checkViewportAndScrolls();
          var newWidth = this.getCenterWidth();
          if (newWidth !== this.centerWidth) {
            this.centerWidth = newWidth;
            this.columnController.refreshFlexedColumns({ viewportWidth: this.centerWidth, updateBodyWidths: true, fireResizedEvent: true });
          }
        } else {
          this.bodyHeight = 0;
        }
      };
      GridPanel2.prototype.setColumnMovingCss = function(moving) {
        this.addOrRemoveCssClass("ag-column-moving", moving);
      };
      GridPanel2.prototype.setCellTextSelection = function(selectable) {
        if (selectable === void 0) {
          selectable = false;
        }
        [this.eTop, this.eBodyViewport, this.eBottom].forEach(function(ct) {
          return addOrRemoveCssClass(ct, "ag-selectable", selectable);
        });
      };
      GridPanel2.prototype.addRowDragListener = function() {
        this.rowDragFeature = this.createManagedBean(new RowDragFeature(this.eBodyViewport, this));
        this.dragAndDropService.addDropTarget(this.rowDragFeature);
      };
      GridPanel2.prototype.getRowDragFeature = function() {
        return this.rowDragFeature;
      };
      GridPanel2.prototype.addStopEditingWhenGridLosesFocus = function() {
        var _this = this;
        if (!this.gridOptionsWrapper.isStopEditingWhenGridLosesFocus()) {
          return;
        }
        var viewports = [this.eBodyViewport, this.eBottom, this.eTop];
        var focusOutListener = function(event) {
          var elementWithFocus = event.relatedTarget;
          if (getTabIndex(elementWithFocus) === null) {
            _this.rowRenderer.stopEditing();
            return;
          }
          var clickInsideGrid = viewports.some(function(viewport) {
            return viewport.contains(elementWithFocus);
          });
          if (!clickInsideGrid) {
            var popupService = _this.popupService;
            clickInsideGrid = popupService.getActivePopups().some(function(popup) {
              return popup.contains(elementWithFocus);
            }) || popupService.isElementWithinCustomPopup(elementWithFocus);
          }
          if (!clickInsideGrid) {
            _this.rowRenderer.stopEditing();
          }
        };
        viewports.forEach(function(viewport) {
          return _this.addManagedListener(viewport, "focusout", focusOutListener);
        });
      };
      GridPanel2.prototype.addAngularApplyCheck = function() {
        var _this = this;
        var applyTriggered = false;
        var listener = function() {
          if (applyTriggered) {
            return;
          }
          applyTriggered = true;
          window.setTimeout(function() {
            applyTriggered = false;
            _this.$scope.$apply();
          }, 0);
        };
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, listener);
      };
      GridPanel2.prototype.disableBrowserDragging = function() {
        this.addGuiEventListener("dragstart", function(event) {
          if (event.target instanceof HTMLImageElement) {
            event.preventDefault();
            return false;
          }
        });
      };
      GridPanel2.prototype.addEventListeners = function() {
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.setHeaderAndFloatingHeights.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.onRowDataChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATED, this.onRowDataChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_HEADER_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.setHeaderAndFloatingHeights.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
      };
      GridPanel2.prototype.addDragListeners = function() {
        var _this = this;
        if (!this.gridOptionsWrapper.isEnableRangeSelection() || missing(this.rangeController)) {
          return;
        }
        var containers = [
          this.eLeftContainer,
          this.eRightContainer,
          this.eCenterContainer,
          this.eTop,
          this.eBottom
        ];
        containers.forEach(function(container) {
          var params = {
            eElement: container,
            onDragStart: _this.rangeController.onDragStart.bind(_this.rangeController),
            onDragStop: _this.rangeController.onDragStop.bind(_this.rangeController),
            onDragging: _this.rangeController.onDragging.bind(_this.rangeController)
          };
          _this.dragService.addDragSource(params);
          _this.addDestroyFunc(function() {
            return _this.dragService.removeDragSource(params);
          });
        });
      };
      GridPanel2.prototype.addMouseListeners = function() {
        var _this = this;
        var eventNames = ["dblclick", "contextmenu", "mouseover", "mouseout", "click", "mousedown"];
        eventNames.forEach(function(eventName) {
          var listener = _this.processMouseEvent.bind(_this, eventName);
          _this.eAllCellContainers.forEach(function(container) {
            return _this.addManagedListener(container, eventName, listener);
          });
        });
      };
      GridPanel2.prototype.addPreventScrollWhileDragging = function() {
        var _this = this;
        var preventScroll = function(e) {
          if (_this.dragService.isDragging()) {
            if (e.cancelable) {
              e.preventDefault();
            }
          }
        };
        this.eAllCellContainers.forEach(function(container) {
          container.addEventListener("touchmove", preventScroll, { passive: false });
        });
        this.addDestroyFunc(function() {
          _this.eAllCellContainers.forEach(function(container) {
            container.removeEventListener("touchmove", preventScroll);
          });
        });
      };
      GridPanel2.prototype.addKeyboardEvents = function() {
        var _this = this;
        var eventNames = ["keydown", "keypress"];
        eventNames.forEach(function(eventName) {
          var listener = _this.processKeyboardEvent.bind(_this, eventName);
          _this.eAllCellContainers.forEach(function(container) {
            _this.addManagedListener(container, eventName, listener);
          });
        });
      };
      GridPanel2.prototype.addBodyViewportListener = function() {
        var _this = this;
        var listener = function(mouseEvent) {
          var target = getTarget(mouseEvent);
          if (target === _this.eBodyViewport || target === _this.eCenterViewport) {
            _this.onContextMenu(mouseEvent, null, null, null, null);
            _this.preventDefaultOnContextMenu(mouseEvent);
          }
        };
        this.addManagedListener(this.eBodyViewport, "contextmenu", listener);
      };
      GridPanel2.prototype.getBodyClientRect = function() {
        if (!this.eBodyViewport) {
          return;
        }
        return this.eBodyViewport.getBoundingClientRect();
      };
      GridPanel2.prototype.getRowForEvent = function(event) {
        var sourceElement = getTarget(event);
        while (sourceElement) {
          var renderedRow = this.gridOptionsWrapper.getDomData(sourceElement, RowComp.DOM_DATA_KEY_RENDERED_ROW);
          if (renderedRow) {
            return renderedRow;
          }
          sourceElement = sourceElement.parentElement;
        }
        return null;
      };
      GridPanel2.prototype.processKeyboardEvent = function(eventName, keyboardEvent) {
        var cellComp = getCellCompForEvent(this.gridOptionsWrapper, keyboardEvent);
        if (!cellComp || keyboardEvent.defaultPrevented) {
          return;
        }
        var rowNode = cellComp.getRenderedRow().getRowNode();
        var column = cellComp.getColumn();
        var editing = cellComp.isEditing();
        var gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, keyboardEvent, rowNode, column, editing);
        if (gridProcessingAllowed) {
          switch (eventName) {
            case "keydown":
              var wasScrollKey = !editing && this.navigationService.handlePageScrollingKey(keyboardEvent);
              if (!wasScrollKey) {
                cellComp.onKeyDown(keyboardEvent);
              }
              this.doGridOperations(keyboardEvent, cellComp);
              break;
            case "keypress":
              cellComp.onKeyPress(keyboardEvent);
              break;
          }
        }
        if (eventName === "keydown") {
          var cellKeyDownEvent = cellComp.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_DOWN);
          this.eventService.dispatchEvent(cellKeyDownEvent);
        }
        if (eventName === "keypress") {
          var cellKeyPressEvent = cellComp.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_PRESS);
          this.eventService.dispatchEvent(cellKeyPressEvent);
        }
      };
      GridPanel2.prototype.doGridOperations = function(keyboardEvent, cellComp) {
        if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) {
          return;
        }
        if (cellComp.isEditing()) {
          return;
        }
        if (!this.mouseEventService.isEventFromThisGrid(keyboardEvent)) {
          return;
        }
        switch (keyboardEvent.which) {
          case KeyCode.A:
            return this.onCtrlAndA(keyboardEvent);
          case KeyCode.C:
            return this.onCtrlAndC(keyboardEvent);
          case KeyCode.V:
            return this.onCtrlAndV();
          case KeyCode.D:
            return this.onCtrlAndD(keyboardEvent);
          case KeyCode.Z:
            return keyboardEvent.shiftKey ? this.undoRedoService.redo() : this.undoRedoService.undo();
          case KeyCode.Y:
            return this.undoRedoService.redo();
        }
      };
      GridPanel2.prototype.scrollToTop = function() {
        this.eBodyViewport.scrollTop = 0;
      };
      GridPanel2.prototype.processMouseEvent = function(eventName, mouseEvent) {
        if (!this.mouseEventService.isEventFromThisGrid(mouseEvent) || isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        var rowComp = this.getRowForEvent(mouseEvent);
        var cellComp = this.mouseEventService.getRenderedCellForEvent(mouseEvent);
        if (eventName === "contextmenu") {
          this.preventDefaultOnContextMenu(mouseEvent);
          this.handleContextMenuMouseEvent(mouseEvent, null, rowComp, cellComp);
        } else {
          if (cellComp) {
            cellComp.onMouseEvent(eventName, mouseEvent);
          }
          if (rowComp) {
            rowComp.onMouseEvent(eventName, mouseEvent);
          }
        }
      };
      GridPanel2.prototype.mockContextMenuForIPad = function() {
        var _this = this;
        if (!isIOSUserAgent()) {
          return;
        }
        this.eAllCellContainers.forEach(function(container) {
          var touchListener = new TouchListener(container);
          var longTapListener = function(event) {
            var rowComp = _this.getRowForEvent(event.touchEvent);
            var cellComp = _this.mouseEventService.getRenderedCellForEvent(event.touchEvent);
            _this.handleContextMenuMouseEvent(null, event.touchEvent, rowComp, cellComp);
          };
          _this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);
          _this.addDestroyFunc(function() {
            return touchListener.destroy();
          });
        });
      };
      GridPanel2.prototype.handleContextMenuMouseEvent = function(mouseEvent, touchEvent, rowComp, cellComp) {
        var rowNode = rowComp ? rowComp.getRowNode() : null;
        var column = cellComp ? cellComp.getColumn() : null;
        var value = null;
        if (column) {
          var event_1 = mouseEvent ? mouseEvent : touchEvent;
          cellComp.dispatchCellContextMenuEvent(event_1);
          value = this.valueService.getValue(column, rowNode);
        }
        this.onContextMenu(mouseEvent, touchEvent, rowNode, column, value);
      };
      GridPanel2.prototype.onContextMenu = function(mouseEvent, touchEvent, rowNode, column, value) {
        if (!this.gridOptionsWrapper.isAllowContextMenuWithControlKey()) {
          if (mouseEvent && (mouseEvent.ctrlKey || mouseEvent.metaKey)) {
            return;
          }
        }
        if (this.contextMenuFactory && !this.gridOptionsWrapper.isSuppressContextMenu()) {
          var eventOrTouch = mouseEvent ? mouseEvent : touchEvent.touches[0];
          if (this.contextMenuFactory.showMenu(rowNode, column, value, eventOrTouch)) {
            var event_2 = mouseEvent ? mouseEvent : touchEvent;
            event_2.preventDefault();
          }
        }
      };
      GridPanel2.prototype.preventDefaultOnContextMenu = function(mouseEvent) {
        var gridOptionsWrapper = this.gridOptionsWrapper;
        var which = mouseEvent.which;
        if (gridOptionsWrapper.isPreventDefaultOnContextMenu() || gridOptionsWrapper.isSuppressMiddleClickScrolls() && which === 2) {
          mouseEvent.preventDefault();
        }
      };
      GridPanel2.prototype.onCtrlAndA = function(event) {
        var _a = this, pinnedRowModel = _a.pinnedRowModel, paginationProxy = _a.paginationProxy, rangeController = _a.rangeController;
        var PINNED_BOTTOM = Constants.PINNED_BOTTOM, PINNED_TOP = Constants.PINNED_TOP;
        if (rangeController && paginationProxy.isRowsToRender()) {
          var _b = [
            pinnedRowModel.isEmpty(PINNED_TOP),
            pinnedRowModel.isEmpty(PINNED_BOTTOM)
          ], isEmptyPinnedTop = _b[0], isEmptyPinnedBottom = _b[1];
          var floatingStart = isEmptyPinnedTop ? null : PINNED_TOP;
          var floatingEnd = void 0;
          var rowEnd = void 0;
          if (isEmptyPinnedBottom) {
            floatingEnd = null;
            rowEnd = this.paginationProxy.getRowCount() - 1;
          } else {
            floatingEnd = PINNED_BOTTOM;
            rowEnd = pinnedRowModel.getPinnedBottomRowData().length - 1;
          }
          var allDisplayedColumns = this.columnController.getAllDisplayedColumns();
          if (missingOrEmpty(allDisplayedColumns)) {
            return;
          }
          rangeController.setCellRange({
            rowStartIndex: 0,
            rowStartPinned: floatingStart,
            rowEndIndex: rowEnd,
            rowEndPinned: floatingEnd,
            columnStart: allDisplayedColumns[0],
            columnEnd: last(allDisplayedColumns)
          });
        }
        event.preventDefault();
      };
      GridPanel2.prototype.onCtrlAndC = function(event) {
        if (!this.clipboardService || this.gridOptionsWrapper.isEnableCellTextSelection()) {
          return;
        }
        this.clipboardService.copyToClipboard();
        event.preventDefault();
      };
      GridPanel2.prototype.onCtrlAndV = function() {
        if (ModuleRegistry.isRegistered(exports.ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {
          this.clipboardService.pasteFromClipboard();
        }
      };
      GridPanel2.prototype.onCtrlAndD = function(event) {
        if (ModuleRegistry.isRegistered(exports.ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {
          this.clipboardService.copyRangeDown();
        }
        event.preventDefault();
      };
      GridPanel2.prototype.ensureIndexVisible = function(index, position) {
        if (this.printLayout) {
          return;
        }
        var rowCount = this.paginationProxy.getRowCount();
        if (typeof index !== "number" || index < 0 || index >= rowCount) {
          console.warn("invalid row index for ensureIndexVisible: " + index);
          return;
        }
        var isPaging = this.gridOptionsWrapper.isPagination();
        var paginationPanelEnabled = isPaging && !this.gridOptionsWrapper.isSuppressPaginationPanel();
        if (!paginationPanelEnabled) {
          this.paginationProxy.goToPageWithIndex(index);
        }
        var rowNode = this.paginationProxy.getRow(index);
        var rowGotShiftedDuringOperation;
        do {
          var startingRowTop = rowNode.rowTop;
          var startingRowHeight = rowNode.rowHeight;
          var paginationOffset = this.paginationProxy.getPixelOffset();
          var rowTopPixel = rowNode.rowTop - paginationOffset;
          var rowBottomPixel = rowTopPixel + rowNode.rowHeight;
          var scrollPosition = this.getVScrollPosition();
          var heightOffset = this.heightScaler.getOffset();
          var vScrollTop = scrollPosition.top + heightOffset;
          var vScrollBottom = scrollPosition.bottom + heightOffset;
          var viewportHeight = vScrollBottom - vScrollTop;
          var pxTop = this.heightScaler.getScrollPositionForPixel(rowTopPixel);
          var pxBottom = this.heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight);
          var pxMiddle = Math.min((pxTop + pxBottom) / 2, rowTopPixel);
          var rowBelowViewport = vScrollTop > rowTopPixel;
          var rowAboveViewport = vScrollBottom < rowBottomPixel;
          var newScrollPosition = null;
          if (position === "top") {
            newScrollPosition = pxTop;
          } else if (position === "bottom") {
            newScrollPosition = pxBottom;
          } else if (position === "middle") {
            newScrollPosition = pxMiddle;
          } else if (rowBelowViewport) {
            newScrollPosition = pxTop;
          } else if (rowAboveViewport) {
            newScrollPosition = pxBottom;
          }
          if (newScrollPosition !== null) {
            this.eBodyViewport.scrollTop = newScrollPosition;
            this.rowRenderer.redrawAfterScroll();
          }
          rowGotShiftedDuringOperation = startingRowTop !== rowNode.rowTop || startingRowHeight !== rowNode.rowHeight;
        } while (rowGotShiftedDuringOperation);
        this.animationFrameService.flushAllFrames();
      };
      GridPanel2.prototype.getCenterWidth = function() {
        return this.eCenterViewport.clientWidth;
      };
      GridPanel2.prototype.isVerticalScrollShowing = function() {
        var isAlwaysShowVerticalScroll = this.gridOptionsWrapper.isAlwaysShowVerticalScroll();
        addOrRemoveCssClass(this.eBodyViewport, "ag-force-vertical-scroll", isAlwaysShowVerticalScroll);
        return isAlwaysShowVerticalScroll || isVerticalScrollShowing(this.eBodyViewport);
      };
      GridPanel2.prototype.isHorizontalScrollShowing = function() {
        return isHorizontalScrollShowing(this.eCenterViewport);
      };
      GridPanel2.prototype.onScrollbarWidthChanged = function() {
        this.checkViewportAndScrolls();
      };
      GridPanel2.prototype.checkViewportAndScrolls = function() {
        this.updateScrollVisibleService();
        this.checkBodyHeight();
        this.onHorizontalViewportChanged();
        this.setPinnedContainerSize();
        if (this.scrollLeft !== this.getCenterViewportScrollLeft()) {
          this.onBodyHorizontalScroll(this.eCenterViewport);
        }
      };
      GridPanel2.prototype.updateScrollVisibleService = function() {
        this.updateScrollVisibleServiceImpl();
        setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);
      };
      GridPanel2.prototype.updateScrollVisibleServiceImpl = function() {
        var params = {
          horizontalScrollShowing: false,
          verticalScrollShowing: false
        };
        params.verticalScrollShowing = this.isVerticalScrollShowing();
        params.horizontalScrollShowing = this.isHorizontalScrollShowing();
        this.scrollVisibleService.setScrollsVisible(params);
        this.setHorizontalScrollVisible(params.horizontalScrollShowing);
        this.setVerticalScrollPaddingVisible(params.verticalScrollShowing);
      };
      GridPanel2.prototype.setHorizontalScrollVisible = function(visible) {
        var isSuppressHorizontalScroll = this.gridOptionsWrapper.isSuppressHorizontalScroll();
        var scrollbarWidth = visible ? this.gridOptionsWrapper.getScrollbarWidth() || 0 : 0;
        var scrollContainerSize = !isSuppressHorizontalScroll ? scrollbarWidth : 0;
        var addIEPadding = isBrowserIE() && visible;
        this.eCenterViewport.style.height = "calc(100% + " + scrollbarWidth + "px)";
        setFixedHeight(this.eHorizontalScrollBody, scrollContainerSize);
        setFixedHeight(this.eBodyHorizontalScrollViewport, scrollContainerSize + (addIEPadding ? 1 : 0));
        setFixedHeight(this.eBodyHorizontalScrollContainer, scrollContainerSize);
      };
      GridPanel2.prototype.setVerticalScrollPaddingVisible = function(show) {
        var scroller = show ? "scroll" : "hidden";
        this.eTop.style.overflowY = this.eBottom.style.overflowY = scroller;
        this.setFakeHScrollSpacerWidths();
      };
      GridPanel2.prototype.updateRowCount = function() {
        var headerCount = this.headerNavigationService.getHeaderRowCount();
        var modelType = this.paginationProxy.getType();
        var rowCount = -1;
        if (modelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
          rowCount = 0;
          this.paginationProxy.forEachNode(function(node) {
            if (!node.group) {
              rowCount++;
            }
          });
        }
        var total = rowCount === -1 ? -1 : headerCount + rowCount;
        setAriaRowCount(this.getGui(), total);
      };
      GridPanel2.prototype.updateColumnCount = function() {
        var columns = this.columnController.getAllGridColumns();
        setAriaColCount(this.getGui(), columns.length);
      };
      GridPanel2.prototype.ensureColumnVisible = function(key) {
        var column = this.columnController.getGridColumn(key);
        if (!column) {
          return;
        }
        if (column.isPinned()) {
          console.warn("calling ensureIndexVisible on a " + column.getPinned() + " pinned column doesn't make sense for column " + column.getColId());
          return;
        }
        if (!this.columnController.isColumnDisplayed(column)) {
          console.warn("column is not currently visible");
          return;
        }
        var colLeftPixel = column.getLeft();
        var colRightPixel = colLeftPixel + column.getActualWidth();
        var viewportWidth = this.eCenterViewport.clientWidth;
        var scrollPosition = this.getCenterViewportScrollLeft();
        var bodyWidth = this.columnController.getBodyContainerWidth();
        var viewportLeftPixel;
        var viewportRightPixel;
        if (this.enableRtl) {
          viewportLeftPixel = bodyWidth - scrollPosition - viewportWidth;
          viewportRightPixel = bodyWidth - scrollPosition;
        } else {
          viewportLeftPixel = scrollPosition;
          viewportRightPixel = viewportWidth + scrollPosition;
        }
        var viewportScrolledPastCol = viewportLeftPixel > colLeftPixel;
        var viewportScrolledBeforeCol = viewportRightPixel < colRightPixel;
        var colToSmallForViewport = viewportWidth < column.getActualWidth();
        var alignColToLeft = viewportScrolledPastCol || colToSmallForViewport;
        var alignColToRight = viewportScrolledBeforeCol;
        var newScrollPosition = this.getCenterViewportScrollLeft();
        if (alignColToLeft || alignColToRight) {
          if (this.enableRtl) {
            newScrollPosition = alignColToLeft ? bodyWidth - viewportWidth - colLeftPixel : bodyWidth - colRightPixel;
          } else {
            newScrollPosition = alignColToLeft ? colLeftPixel : colRightPixel - viewportWidth;
          }
          this.setCenterViewportScrollLeft(newScrollPosition);
        }
        this.onHorizontalViewportChanged();
        this.animationFrameService.flushAllFrames();
      };
      GridPanel2.prototype.showLoadingOverlay = function() {
        if (!this.gridOptionsWrapper.isSuppressLoadingOverlay()) {
          this.overlayWrapper.showLoadingOverlay();
        }
      };
      GridPanel2.prototype.showNoRowsOverlay = function() {
        if (!this.gridOptionsWrapper.isSuppressNoRowsOverlay()) {
          this.overlayWrapper.showNoRowsOverlay();
        }
      };
      GridPanel2.prototype.hideOverlay = function() {
        this.overlayWrapper.hideOverlay();
      };
      GridPanel2.prototype.sizeColumnsToFit = function(nextTimeout) {
        var _this = this;
        var availableWidth = this.eBodyViewport.clientWidth;
        if (availableWidth > 0) {
          this.columnController.sizeColumnsToFit(availableWidth, "sizeColumnsToFit");
          return;
        }
        if (nextTimeout === void 0) {
          window.setTimeout(function() {
            _this.sizeColumnsToFit(100);
          }, 0);
        } else if (nextTimeout === 100) {
          window.setTimeout(function() {
            _this.sizeColumnsToFit(500);
          }, 100);
        } else if (nextTimeout === 500) {
          window.setTimeout(function() {
            _this.sizeColumnsToFit(-1);
          }, 500);
        } else {
          console.warn("ag-Grid: tried to call sizeColumnsToFit() but the grid is coming back with zero width, maybe the grid is not visible yet on the screen?");
        }
      };
      GridPanel2.prototype.getCenterContainer = function() {
        return this.eCenterContainer;
      };
      GridPanel2.prototype.getDropTargetBodyContainers = function() {
        return [this.eBodyViewport, this.eTopViewport, this.eBottomViewport];
      };
      GridPanel2.prototype.getDropTargetLeftContainers = function() {
        return [this.eLeftContainer, this.eLeftBottom, this.eLeftTop];
      };
      GridPanel2.prototype.getDropTargetRightContainers = function() {
        return [this.eRightContainer, this.eRightBottom, this.eRightTop];
      };
      GridPanel2.prototype.buildRowContainerComponents = function() {
        var _this = this;
        this.eAllCellContainers = [
          this.eLeftContainer,
          this.eRightContainer,
          this.eCenterContainer,
          this.eTop,
          this.eBottom,
          this.eFullWidthContainer
        ];
        this.rowContainerComponents = {
          body: new RowContainerComponent({
            eContainer: this.eCenterContainer,
            eWrapper: this.eCenterColsClipper,
            eViewport: this.eBodyViewport
          }),
          fullWidth: new RowContainerComponent({
            eContainer: this.eFullWidthContainer
          }),
          pinnedLeft: new RowContainerComponent({ eContainer: this.eLeftContainer }),
          pinnedRight: new RowContainerComponent({ eContainer: this.eRightContainer }),
          floatingTop: new RowContainerComponent({ eContainer: this.eTopContainer }),
          floatingTopPinnedLeft: new RowContainerComponent({ eContainer: this.eLeftTop }),
          floatingTopPinnedRight: new RowContainerComponent({ eContainer: this.eRightTop }),
          floatingTopFullWidth: new RowContainerComponent({
            eContainer: this.eTopFullWidthContainer,
            hideWhenNoChildren: true
          }),
          floatingBottom: new RowContainerComponent({ eContainer: this.eBottomContainer }),
          floatingBottomPinnedLeft: new RowContainerComponent({ eContainer: this.eLeftBottom }),
          floatingBottomPinnedRight: new RowContainerComponent({ eContainer: this.eRightBottom }),
          floatingBottomFullWidth: new RowContainerComponent({
            eContainer: this.eBottomFullWidthContainer,
            hideWhenNoChildren: true
          })
        };
        iterateObject(this.rowContainerComponents, function(key, container) {
          if (container) {
            _this.getContext().createBean(container);
          }
        });
      };
      GridPanel2.prototype.setupRowAnimationCssClass = function() {
        var _this = this;
        var listener = function() {
          var animateRows = _this.gridOptionsWrapper.isAnimateRows() && !_this.heightScaler.isScaling();
          addOrRemoveCssClass(_this.eBodyViewport, "ag-row-animation", animateRows);
          addOrRemoveCssClass(_this.eBodyViewport, "ag-row-no-animation", !animateRows);
        };
        listener();
        this.addManagedListener(this.eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, listener);
      };
      GridPanel2.prototype.suppressScrollOnFloatingRow = function() {
        var _this = this;
        var resetTopScroll = function() {
          return _this.eTopViewport.scrollLeft = 0;
        };
        var resetBottomScroll = function() {
          return _this.eTopViewport.scrollLeft = 0;
        };
        this.addManagedListener(this.eTopViewport, "scroll", resetTopScroll);
        this.addManagedListener(this.eBottomViewport, "scroll", resetBottomScroll);
      };
      GridPanel2.prototype.getRowContainers = function() {
        return this.rowContainerComponents;
      };
      GridPanel2.prototype.getFloatingTopBottom = function() {
        return [this.eTop, this.eBottom];
      };
      GridPanel2.prototype.onDisplayedColumnsChanged = function() {
        this.setPinnedContainerSize();
        this.setHeaderAndFloatingHeights();
        this.onHorizontalViewportChanged();
        this.updateScrollVisibleService();
        this.updateColumnCount();
      };
      GridPanel2.prototype.onDisplayedColumnsWidthChanged = function() {
        this.setWidthsOfContainers();
        this.onHorizontalViewportChanged();
        this.updateScrollVisibleService();
        if (this.enableRtl) {
          this.horizontallyScrollHeaderCenterAndFloatingCenter();
        }
      };
      GridPanel2.prototype.setWidthsOfContainers = function() {
        this.setCenterWidth();
        this.setPinnedContainerSize();
      };
      GridPanel2.prototype.setCenterWidth = function() {
        var _a = this, headerRootComp = _a.headerRootComp, columnController = _a.columnController;
        var width = columnController.getBodyContainerWidth();
        if (this.printLayout) {
          var pinnedContainerWidths = columnController.getPinnedLeftContainerWidth() + columnController.getPinnedRightContainerWidth();
          width += pinnedContainerWidths;
        }
        headerRootComp.setHeaderContainerWidth(width);
        var widthPx = width + "px";
        this.eCenterContainer.style.width = widthPx;
        this.eBottomContainer.style.width = widthPx;
        this.eTopContainer.style.width = widthPx;
        if (!this.printLayout) {
          this.eBodyHorizontalScrollContainer.style.width = widthPx;
        }
      };
      GridPanel2.prototype.setPinnedLeftWidth = function() {
        var _this = this;
        var oldPinning = this.pinningLeft;
        var widthOfCols = this.columnController.getPinnedLeftContainerWidth();
        var newPinning = this.pinningLeft = !this.printLayout && widthOfCols > 0;
        var containers = [this.eLeftContainer, this.eLeftTop, this.eLeftBottom];
        if (oldPinning !== newPinning) {
          this.headerRootComp.setLeftVisible(newPinning);
        }
        containers.forEach(function(e) {
          return setDisplayed(e, _this.pinningLeft);
        });
        if (newPinning) {
          containers.forEach(function(ct) {
            return setFixedWidth(ct, widthOfCols);
          });
        }
      };
      GridPanel2.prototype.setPinnedRightWidth = function() {
        var oldPinning = this.pinningRight;
        var widthOfCols = this.columnController.getPinnedRightContainerWidth();
        var newPinning = this.pinningRight = !this.printLayout && widthOfCols > 0;
        var containers = [this.eRightContainer, this.eRightTop, this.eRightBottom];
        if (oldPinning !== newPinning) {
          this.headerRootComp.setRightVisible(newPinning);
        }
        containers.forEach(function(ct) {
          return setDisplayed(ct, newPinning);
        });
        if (newPinning) {
          containers.forEach(function(ct) {
            return setFixedWidth(ct, widthOfCols);
          });
        }
      };
      GridPanel2.prototype.setPinnedContainerSize = function() {
        this.setPinnedLeftWidth();
        this.setPinnedRightWidth();
        this.setFakeHScrollSpacerWidths();
      };
      GridPanel2.prototype.setFakeHScrollSpacerWidths = function() {
        var rightSpacing = this.columnController.getPinnedRightContainerWidth();
        var scrollOnRight = !this.enableRtl && this.isVerticalScrollShowing();
        var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
        if (scrollOnRight) {
          rightSpacing += scrollbarWidth;
        }
        setFixedWidth(this.eHorizontalRightSpacer, rightSpacing);
        addOrRemoveCssClass(this.eHorizontalRightSpacer, "ag-scroller-corner", rightSpacing <= scrollbarWidth);
        var leftSpacing = this.columnController.getPinnedLeftContainerWidth();
        var scrollOnLeft = this.enableRtl && this.isVerticalScrollShowing();
        if (scrollOnLeft) {
          leftSpacing += scrollbarWidth;
        }
        setFixedWidth(this.eHorizontalLeftSpacer, leftSpacing);
        addOrRemoveCssClass(this.eHorizontalLeftSpacer, "ag-scroller-corner", leftSpacing <= scrollbarWidth);
      };
      GridPanel2.prototype.checkBodyHeight = function() {
        var bodyHeight = this.eBodyViewport.clientHeight;
        if (this.bodyHeight !== bodyHeight) {
          this.bodyHeight = bodyHeight;
          var event_3 = {
            type: Events.EVENT_BODY_HEIGHT_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event_3);
        }
      };
      GridPanel2.prototype.setHeaderAndFloatingHeights = function() {
        var _a = this, columnController = _a.columnController, gridOptionsWrapper = _a.gridOptionsWrapper, pinnedRowModel = _a.pinnedRowModel, eTop = _a.eTop, eBottom = _a.eBottom;
        var numberOfFloating = 0;
        var headerRowCount = columnController.getHeaderRowCount();
        var totalHeaderHeight;
        var groupHeight;
        var headerHeight;
        if (columnController.isPivotMode()) {
          groupHeight = gridOptionsWrapper.getPivotGroupHeaderHeight();
          headerHeight = gridOptionsWrapper.getPivotHeaderHeight();
        } else {
          var hasFloatingFilters = columnController.hasFloatingFilters();
          if (hasFloatingFilters) {
            headerRowCount++;
            numberOfFloating = 1;
          }
          groupHeight = gridOptionsWrapper.getGroupHeaderHeight();
          headerHeight = gridOptionsWrapper.getHeaderHeight();
        }
        var numberOfNonGroups = 1 + numberOfFloating;
        var numberOfGroups = headerRowCount - numberOfNonGroups;
        totalHeaderHeight = numberOfFloating * gridOptionsWrapper.getFloatingFiltersHeight();
        totalHeaderHeight += numberOfGroups * groupHeight;
        totalHeaderHeight += headerHeight;
        this.headerRootComp.setHeight(totalHeaderHeight);
        var floatingTopHeight = pinnedRowModel.getPinnedTopTotalHeight();
        if (floatingTopHeight) {
          floatingTopHeight += 1;
        }
        var floatingBottomHeight = pinnedRowModel.getPinnedBottomTotalHeight();
        if (floatingBottomHeight) {
          floatingBottomHeight += 1;
        }
        var floatingTopHeightString = floatingTopHeight + "px";
        var floatingBottomHeightString = floatingBottomHeight + "px";
        eTop.style.minHeight = floatingTopHeightString;
        eTop.style.height = floatingTopHeightString;
        eTop.style.display = floatingTopHeight ? "inherit" : "none";
        eBottom.style.minHeight = floatingBottomHeightString;
        eBottom.style.height = floatingBottomHeightString;
        eBottom.style.display = floatingBottomHeight ? "inherit" : "none";
        this.checkBodyHeight();
      };
      GridPanel2.prototype.getBodyHeight = function() {
        return this.bodyHeight;
      };
      GridPanel2.prototype.setHorizontalScrollPosition = function(hScrollPosition) {
        var minScrollLeft = 0;
        var maxScrollLeft = this.eCenterViewport.scrollWidth - this.eCenterViewport.clientWidth;
        if (this.shouldBlockScrollUpdate("horizontal", hScrollPosition)) {
          hScrollPosition = Math.min(Math.max(hScrollPosition, minScrollLeft), maxScrollLeft);
        }
        this.eCenterViewport.scrollLeft = hScrollPosition;
        this.doHorizontalScroll(hScrollPosition);
      };
      GridPanel2.prototype.setVerticalScrollPosition = function(vScrollPosition) {
        this.eBodyViewport.scrollTop = vScrollPosition;
      };
      GridPanel2.prototype.scrollHorizontally = function(pixels) {
        var oldScrollPosition = this.eCenterViewport.scrollLeft;
        this.setHorizontalScrollPosition(oldScrollPosition + pixels);
        return this.eCenterViewport.scrollLeft - oldScrollPosition;
      };
      GridPanel2.prototype.scrollVertically = function(pixels) {
        var oldScrollPosition = this.eBodyViewport.scrollTop;
        this.setVerticalScrollPosition(oldScrollPosition + pixels);
        return this.eBodyViewport.scrollTop - oldScrollPosition;
      };
      GridPanel2.prototype.addScrollListener = function() {
        this.addManagedListener(this.eCenterViewport, "scroll", this.onCenterViewportScroll.bind(this));
        this.addManagedListener(this.eBodyHorizontalScrollViewport, "scroll", this.onFakeHorizontalScroll.bind(this));
        var onVerticalScroll = this.gridOptionsWrapper.isDebounceVerticalScrollbar() ? debounce(this.onVerticalScroll.bind(this), 100) : this.onVerticalScroll.bind(this);
        this.addManagedListener(this.eBodyViewport, "scroll", onVerticalScroll);
      };
      GridPanel2.prototype.onVerticalScroll = function() {
        var scrollTop = this.eBodyViewport.scrollTop;
        if (this.shouldBlockScrollUpdate("vertical", scrollTop, true)) {
          return;
        }
        this.animationFrameService.setScrollTop(scrollTop);
        this.scrollTop = scrollTop;
        this.redrawRowsAfterScroll();
      };
      GridPanel2.prototype.shouldBlockScrollUpdate = function(direction, scrollTo, touchOnly) {
        if (touchOnly === void 0) {
          touchOnly = false;
        }
        if (touchOnly && !isIOSUserAgent) {
          return false;
        }
        if (direction === "vertical") {
          var _a = this.eBodyViewport, clientHeight = _a.clientHeight, scrollHeight = _a.scrollHeight;
          if (scrollTo < 0 || scrollTo + clientHeight > scrollHeight) {
            return true;
          }
        }
        if (direction === "horizontal") {
          var _b = this.eCenterViewport, clientWidth = _b.clientWidth, scrollWidth = _b.scrollWidth;
          if (this.enableRtl && isRtlNegativeScroll()) {
            if (scrollTo > 0) {
              return true;
            }
          } else if (scrollTo < 0) {
            return true;
          }
          if (Math.abs(scrollTo) + clientWidth > scrollWidth) {
            return true;
          }
        }
        return false;
      };
      GridPanel2.prototype.isControllingScroll = function(eDiv) {
        if (!this.lastHorizontalScrollElement) {
          this.lastHorizontalScrollElement = eDiv;
          return true;
        }
        return eDiv === this.lastHorizontalScrollElement;
      };
      GridPanel2.prototype.onFakeHorizontalScroll = function() {
        if (!this.isControllingScroll(this.eBodyHorizontalScrollViewport)) {
          return;
        }
        this.onBodyHorizontalScroll(this.eBodyHorizontalScrollViewport);
      };
      GridPanel2.prototype.onCenterViewportScroll = function() {
        if (!this.isControllingScroll(this.eCenterViewport)) {
          return;
        }
        this.onBodyHorizontalScroll(this.eCenterViewport);
      };
      GridPanel2.prototype.onBodyHorizontalScroll = function(eSource) {
        var scrollLeft = this.eCenterViewport.scrollLeft;
        if (this.shouldBlockScrollUpdate("horizontal", scrollLeft, true)) {
          return;
        }
        this.doHorizontalScroll(Math.floor(getScrollLeft(eSource, this.enableRtl)));
        this.resetLastHorizontalScrollElementDebounced();
      };
      GridPanel2.prototype.resetLastHorizontalScrollElement = function() {
        this.lastHorizontalScrollElement = null;
      };
      GridPanel2.prototype.doHorizontalScroll = function(scrollLeft) {
        this.scrollLeft = scrollLeft;
        var event = {
          type: Events.EVENT_BODY_SCROLL,
          api: this.gridApi,
          columnApi: this.columnApi,
          direction: "horizontal",
          left: this.scrollLeft,
          top: this.scrollTop
        };
        this.eventService.dispatchEvent(event);
        this.horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft);
        this.onHorizontalViewportChanged();
      };
      GridPanel2.prototype.redrawRowsAfterScroll = function() {
        var event = {
          type: Events.EVENT_BODY_SCROLL,
          direction: "vertical",
          api: this.gridApi,
          columnApi: this.columnApi,
          left: this.scrollLeft,
          top: this.scrollTop
        };
        this.eventService.dispatchEvent(event);
      };
      GridPanel2.prototype.onHorizontalViewportChanged = function() {
        var scrollWidth = this.eCenterViewport.clientWidth;
        var scrollPosition = this.getCenterViewportScrollLeft();
        this.columnController.setVirtualViewportPosition(scrollWidth, scrollPosition);
      };
      GridPanel2.prototype.getCenterViewportScrollLeft = function() {
        return getScrollLeft(this.eCenterViewport, this.enableRtl);
      };
      GridPanel2.prototype.setCenterViewportScrollLeft = function(value) {
        setScrollLeft(this.eCenterViewport, value, this.enableRtl);
      };
      GridPanel2.prototype.horizontallyScrollHeaderCenterAndFloatingCenter = function(scrollLeft) {
        if (scrollLeft === void 0) {
          scrollLeft = this.getCenterViewportScrollLeft();
        }
        var offset = this.enableRtl ? scrollLeft : -scrollLeft;
        this.headerRootComp.setHorizontalScroll(offset);
        this.eBottomContainer.style.transform = "translateX(" + offset + "px)";
        this.eTopContainer.style.transform = "translateX(" + offset + "px)";
        var partner = this.lastHorizontalScrollElement === this.eCenterViewport ? this.eBodyHorizontalScrollViewport : this.eCenterViewport;
        setScrollLeft(partner, scrollLeft, this.enableRtl);
      };
      GridPanel2.prototype.addScrollEventListener = function(listener) {
        this.eBodyViewport.addEventListener("scroll", listener);
      };
      GridPanel2.prototype.removeScrollEventListener = function(listener) {
        this.eBodyViewport.removeEventListener("scroll", listener);
      };
      __decorate$$([
        Autowired("alignedGridsService")
      ], GridPanel2.prototype, "alignedGridsService", void 0);
      __decorate$$([
        Autowired("gridOptionsWrapper")
      ], GridPanel2.prototype, "gridOptionsWrapper", void 0);
      __decorate$$([
        Autowired("rowRenderer")
      ], GridPanel2.prototype, "rowRenderer", void 0);
      __decorate$$([
        Autowired("pinnedRowModel")
      ], GridPanel2.prototype, "pinnedRowModel", void 0);
      __decorate$$([
        Autowired("animationFrameService")
      ], GridPanel2.prototype, "animationFrameService", void 0);
      __decorate$$([
        Autowired("navigationService")
      ], GridPanel2.prototype, "navigationService", void 0);
      __decorate$$([
        Autowired("autoHeightCalculator")
      ], GridPanel2.prototype, "autoHeightCalculator", void 0);
      __decorate$$([
        Autowired("columnAnimationService")
      ], GridPanel2.prototype, "columnAnimationService", void 0);
      __decorate$$([
        Autowired("autoWidthCalculator")
      ], GridPanel2.prototype, "autoWidthCalculator", void 0);
      __decorate$$([
        Autowired("paginationAutoPageSizeService")
      ], GridPanel2.prototype, "paginationAutoPageSizeService", void 0);
      __decorate$$([
        Autowired("beans")
      ], GridPanel2.prototype, "beans", void 0);
      __decorate$$([
        Autowired("paginationProxy")
      ], GridPanel2.prototype, "paginationProxy", void 0);
      __decorate$$([
        Autowired("columnApi")
      ], GridPanel2.prototype, "columnApi", void 0);
      __decorate$$([
        Autowired("gridApi")
      ], GridPanel2.prototype, "gridApi", void 0);
      __decorate$$([
        Autowired("dragService")
      ], GridPanel2.prototype, "dragService", void 0);
      __decorate$$([
        Autowired("mouseEventService")
      ], GridPanel2.prototype, "mouseEventService", void 0);
      __decorate$$([
        Autowired("$scope")
      ], GridPanel2.prototype, "$scope", void 0);
      __decorate$$([
        Autowired("scrollVisibleService")
      ], GridPanel2.prototype, "scrollVisibleService", void 0);
      __decorate$$([
        Autowired("valueService")
      ], GridPanel2.prototype, "valueService", void 0);
      __decorate$$([
        Autowired("dragAndDropService")
      ], GridPanel2.prototype, "dragAndDropService", void 0);
      __decorate$$([
        Autowired("maxDivHeightScaler")
      ], GridPanel2.prototype, "heightScaler", void 0);
      __decorate$$([
        Autowired("resizeObserverService")
      ], GridPanel2.prototype, "resizeObserverService", void 0);
      __decorate$$([
        Autowired("undoRedoService")
      ], GridPanel2.prototype, "undoRedoService", void 0);
      __decorate$$([
        Autowired("columnController")
      ], GridPanel2.prototype, "columnController", void 0);
      __decorate$$([
        Autowired("headerNavigationService")
      ], GridPanel2.prototype, "headerNavigationService", void 0);
      __decorate$$([
        Autowired("popupService")
      ], GridPanel2.prototype, "popupService", void 0);
      __decorate$$([
        Optional("rangeController")
      ], GridPanel2.prototype, "rangeController", void 0);
      __decorate$$([
        Optional("contextMenuFactory")
      ], GridPanel2.prototype, "contextMenuFactory", void 0);
      __decorate$$([
        Optional("menuFactory")
      ], GridPanel2.prototype, "menuFactory", void 0);
      __decorate$$([
        Optional("clipboardService")
      ], GridPanel2.prototype, "clipboardService", void 0);
      __decorate$$([
        RefSelector("eBodyViewport")
      ], GridPanel2.prototype, "eBodyViewport", void 0);
      __decorate$$([
        RefSelector("eCenterContainer")
      ], GridPanel2.prototype, "eCenterContainer", void 0);
      __decorate$$([
        RefSelector("eCenterViewport")
      ], GridPanel2.prototype, "eCenterViewport", void 0);
      __decorate$$([
        RefSelector("eLeftContainer")
      ], GridPanel2.prototype, "eLeftContainer", void 0);
      __decorate$$([
        RefSelector("eRightContainer")
      ], GridPanel2.prototype, "eRightContainer", void 0);
      __decorate$$([
        RefSelector("eCenterColsClipper")
      ], GridPanel2.prototype, "eCenterColsClipper", void 0);
      __decorate$$([
        RefSelector("eHorizontalScrollBody")
      ], GridPanel2.prototype, "eHorizontalScrollBody", void 0);
      __decorate$$([
        RefSelector("eHorizontalLeftSpacer")
      ], GridPanel2.prototype, "eHorizontalLeftSpacer", void 0);
      __decorate$$([
        RefSelector("eHorizontalRightSpacer")
      ], GridPanel2.prototype, "eHorizontalRightSpacer", void 0);
      __decorate$$([
        RefSelector("eBodyHorizontalScrollViewport")
      ], GridPanel2.prototype, "eBodyHorizontalScrollViewport", void 0);
      __decorate$$([
        RefSelector("eBodyHorizontalScrollContainer")
      ], GridPanel2.prototype, "eBodyHorizontalScrollContainer", void 0);
      __decorate$$([
        RefSelector("eFullWidthContainer")
      ], GridPanel2.prototype, "eFullWidthContainer", void 0);
      __decorate$$([
        RefSelector("eTop")
      ], GridPanel2.prototype, "eTop", void 0);
      __decorate$$([
        RefSelector("eLeftTop")
      ], GridPanel2.prototype, "eLeftTop", void 0);
      __decorate$$([
        RefSelector("eRightTop")
      ], GridPanel2.prototype, "eRightTop", void 0);
      __decorate$$([
        RefSelector("eTopContainer")
      ], GridPanel2.prototype, "eTopContainer", void 0);
      __decorate$$([
        RefSelector("eTopViewport")
      ], GridPanel2.prototype, "eTopViewport", void 0);
      __decorate$$([
        RefSelector("eTopFullWidthContainer")
      ], GridPanel2.prototype, "eTopFullWidthContainer", void 0);
      __decorate$$([
        RefSelector("eBottom")
      ], GridPanel2.prototype, "eBottom", void 0);
      __decorate$$([
        RefSelector("eLeftBottom")
      ], GridPanel2.prototype, "eLeftBottom", void 0);
      __decorate$$([
        RefSelector("eRightBottom")
      ], GridPanel2.prototype, "eRightBottom", void 0);
      __decorate$$([
        RefSelector("eBottomContainer")
      ], GridPanel2.prototype, "eBottomContainer", void 0);
      __decorate$$([
        RefSelector("eBottomViewport")
      ], GridPanel2.prototype, "eBottomViewport", void 0);
      __decorate$$([
        RefSelector("eBottomFullWidthContainer")
      ], GridPanel2.prototype, "eBottomFullWidthContainer", void 0);
      __decorate$$([
        RefSelector("headerRoot")
      ], GridPanel2.prototype, "headerRootComp", void 0);
      __decorate$$([
        RefSelector("overlayWrapper")
      ], GridPanel2.prototype, "overlayWrapper", void 0);
      __decorate$$([
        PostConstruct
      ], GridPanel2.prototype, "init", null);
      return GridPanel2;
    }(Component);
    var __decorate$10 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GridApi = function() {
      function GridApi2() {
        this.detailGridInfoMap = {};
        this.destroyCalled = false;
      }
      GridApi2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
      };
      GridApi2.prototype.registerGridCore = function(gridCore) {
        this.gridCore = gridCore;
      };
      GridApi2.prototype.registerHeaderRootComp = function(headerRootComp) {
        this.headerRootComp = headerRootComp;
      };
      GridApi2.prototype.init = function() {
        switch (this.rowModel.getType()) {
          case Constants.ROW_MODEL_TYPE_CLIENT_SIDE:
            this.clientSideRowModel = this.rowModel;
            break;
          case Constants.ROW_MODEL_TYPE_INFINITE:
            this.infiniteRowModel = this.rowModel;
            break;
          case Constants.ROW_MODEL_TYPE_SERVER_SIDE:
            this.serverSideRowModel = this.rowModel;
            break;
        }
      };
      GridApi2.prototype.__getAlignedGridService = function() {
        return this.alignedGridsService;
      };
      GridApi2.prototype.addDetailGridInfo = function(id, gridInfo) {
        this.detailGridInfoMap[id] = gridInfo;
      };
      GridApi2.prototype.removeDetailGridInfo = function(id) {
        this.detailGridInfoMap[id] = void 0;
      };
      GridApi2.prototype.getDetailGridInfo = function(id) {
        return this.detailGridInfoMap[id];
      };
      GridApi2.prototype.forEachDetailGridInfo = function(callback) {
        var index = 0;
        iterateObject(this.detailGridInfoMap, function(id, gridInfo) {
          if (exists(gridInfo)) {
            callback(gridInfo, index);
            index++;
          }
        });
      };
      GridApi2.prototype.getDataAsCsv = function(params) {
        if (ModuleRegistry.assertRegistered(exports.ModuleNames.CsvExportModule, "api.getDataAsCsv")) {
          return this.csvCreator.getDataAsCsv(params);
        }
      };
      GridApi2.prototype.exportDataAsCsv = function(params) {
        if (ModuleRegistry.assertRegistered(exports.ModuleNames.CsvExportModule, "api.exportDataAsCSv")) {
          this.csvCreator.exportDataAsCsv(params);
        }
      };
      GridApi2.prototype.getDataAsExcel = function(params) {
        if (ModuleRegistry.assertRegistered(exports.ModuleNames.ExcelExportModule, "api.getDataAsExcel")) {
          return this.excelCreator.getDataAsExcelXml(params);
        }
      };
      GridApi2.prototype.exportDataAsExcel = function(params) {
        if (ModuleRegistry.assertRegistered(exports.ModuleNames.ExcelExportModule, "api.exportDataAsExcel")) {
          this.excelCreator.exportDataAsExcel(params);
        }
      };
      GridApi2.prototype.setEnterpriseDatasource = function(datasource) {
        console.warn("ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()");
        this.setServerSideDatasource(datasource);
      };
      GridApi2.prototype.setServerSideDatasource = function(datasource) {
        if (this.gridOptionsWrapper.isRowModelServerSide()) {
          this.rowModel.setDatasource(datasource);
        } else {
          console.warn("ag-Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '" + Constants.ROW_MODEL_TYPE_SERVER_SIDE + "'");
        }
      };
      GridApi2.prototype.setDatasource = function(datasource) {
        if (this.gridOptionsWrapper.isRowModelInfinite()) {
          this.rowModel.setDatasource(datasource);
        } else {
          console.warn("ag-Grid: you can only use a datasource when gridOptions.rowModelType is '" + Constants.ROW_MODEL_TYPE_INFINITE + "'");
        }
      };
      GridApi2.prototype.setViewportDatasource = function(viewportDatasource) {
        if (this.gridOptionsWrapper.isRowModelViewport()) {
          this.rowModel.setViewportDatasource(viewportDatasource);
        } else {
          console.warn("ag-Grid: you can only use a viewport datasource when gridOptions.rowModelType is '" + Constants.ROW_MODEL_TYPE_VIEWPORT + "'");
        }
      };
      GridApi2.prototype.setRowData = function(rowData) {
        if (this.gridOptionsWrapper.isRowModelDefault()) {
          if (this.gridOptionsWrapper.isImmutableData()) {
            var transactionAndMap = this.immutableService.createTransactionForRowData(rowData);
            if (!transactionAndMap) {
              return;
            }
            var transaction = transactionAndMap[0], orderIdMap = transactionAndMap[1];
            var nodeTransaction = this.clientSideRowModel.updateRowData(transaction, orderIdMap);
            this.rowRenderer.refreshFullWidthRows(nodeTransaction.update);
          } else {
            this.selectionController.reset();
            this.clientSideRowModel.setRowData(rowData);
          }
        } else {
          console.warn("cannot call setRowData unless using normal row model");
        }
      };
      GridApi2.prototype.setFloatingTopRowData = function(rows) {
        console.warn("ag-Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()");
        this.setPinnedTopRowData(rows);
      };
      GridApi2.prototype.setFloatingBottomRowData = function(rows) {
        console.warn("ag-Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()");
        this.setPinnedBottomRowData(rows);
      };
      GridApi2.prototype.getFloatingTopRowCount = function() {
        console.warn("ag-Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()");
        return this.getPinnedTopRowCount();
      };
      GridApi2.prototype.getFloatingBottomRowCount = function() {
        console.warn("ag-Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()");
        return this.getPinnedBottomRowCount();
      };
      GridApi2.prototype.getFloatingTopRow = function(index) {
        console.warn("ag-Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()");
        return this.getPinnedTopRow(index);
      };
      GridApi2.prototype.getFloatingBottomRow = function(index) {
        console.warn("ag-Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()");
        return this.getPinnedBottomRow(index);
      };
      GridApi2.prototype.setPinnedTopRowData = function(rows) {
        this.pinnedRowModel.setPinnedTopRowData(rows);
      };
      GridApi2.prototype.setPinnedBottomRowData = function(rows) {
        this.pinnedRowModel.setPinnedBottomRowData(rows);
      };
      GridApi2.prototype.getPinnedTopRowCount = function() {
        return this.pinnedRowModel.getPinnedTopRowCount();
      };
      GridApi2.prototype.getPinnedBottomRowCount = function() {
        return this.pinnedRowModel.getPinnedBottomRowCount();
      };
      GridApi2.prototype.getPinnedTopRow = function(index) {
        return this.pinnedRowModel.getPinnedTopRow(index);
      };
      GridApi2.prototype.getPinnedBottomRow = function(index) {
        return this.pinnedRowModel.getPinnedBottomRow(index);
      };
      GridApi2.prototype.setColumnDefs = function(colDefs, source) {
        if (source === void 0) {
          source = "api";
        }
        this.columnController.setColumnDefs(colDefs, source);
      };
      GridApi2.prototype.setAutoGroupColumnDef = function(colDef, source) {
        this.gridOptionsWrapper.setProperty("autoGroupColumnDef", colDef, true);
      };
      GridApi2.prototype.expireValueCache = function() {
        this.valueCache.expire();
      };
      GridApi2.prototype.getVerticalPixelRange = function() {
        return this.gridPanel.getVScrollPosition();
      };
      GridApi2.prototype.getHorizontalPixelRange = function() {
        return this.gridPanel.getHScrollPosition();
      };
      GridApi2.prototype.setAlwaysShowVerticalScroll = function(show) {
        this.gridOptionsWrapper.setProperty("alwaysShowVerticalScroll", show);
      };
      GridApi2.prototype.refreshToolPanel = function() {
        this.gridCore.refreshSideBar();
      };
      GridApi2.prototype.refreshCells = function(params) {
        if (params === void 0) {
          params = {};
        }
        if (Array.isArray(params)) {
          console.warn("since ag-Grid v11.1, refreshCells() now takes parameters, please see the documentation.");
          return;
        }
        this.rowRenderer.refreshCells(params);
      };
      GridApi2.prototype.flashCells = function(params) {
        if (params === void 0) {
          params = {};
        }
        this.rowRenderer.flashCells(params);
      };
      GridApi2.prototype.redrawRows = function(params) {
        if (params === void 0) {
          params = {};
        }
        if (params && params.rowNodes) {
          this.rowRenderer.redrawRows(params.rowNodes);
        } else {
          this.rowRenderer.redrawAfterModelUpdate();
        }
      };
      GridApi2.prototype.timeFullRedraw = function(count) {
        if (count === void 0) {
          count = 1;
        }
        var iterationCount = 0;
        var totalProcessing = 0;
        var totalReflow = 0;
        var that = this;
        doOneIteration();
        function doOneIteration() {
          var start = new Date().getTime();
          that.rowRenderer.redrawAfterModelUpdate();
          var endProcessing = new Date().getTime();
          window.setTimeout(function() {
            var endReflow = new Date().getTime();
            var durationProcessing = endProcessing - start;
            var durationReflow = endReflow - endProcessing;
            console.log("duration:  processing = " + durationProcessing + "ms, reflow = " + durationReflow + "ms");
            iterationCount++;
            totalProcessing += durationProcessing;
            totalReflow += durationReflow;
            if (iterationCount < count) {
              window.setTimeout(doOneIteration, 1e3);
            } else {
              finish();
            }
          }, 0);
        }
        function finish() {
          console.log("tests complete. iteration count = " + iterationCount);
          console.log("average processing = " + totalProcessing / iterationCount + "ms");
          console.log("average reflow = " + totalReflow / iterationCount + "ms");
        }
      };
      GridApi2.prototype.refreshView = function() {
        console.warn("ag-Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead");
        this.redrawRows();
      };
      GridApi2.prototype.refreshRows = function(rowNodes) {
        console.warn("since ag-Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead");
        this.refreshCells({ rowNodes });
      };
      GridApi2.prototype.rowDataChanged = function(rows) {
        console.warn("ag-Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node");
        this.redrawRows();
      };
      GridApi2.prototype.softRefreshView = function() {
        console.error("ag-Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.");
      };
      GridApi2.prototype.refreshGroupRows = function() {
        console.warn("ag-Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should not be necessary to only refresh the group rows.");
        this.refreshCells();
      };
      GridApi2.prototype.setFunctionsReadOnly = function(readOnly) {
        this.gridOptionsWrapper.setProperty("functionsReadOnly", readOnly);
      };
      GridApi2.prototype.refreshHeader = function() {
        this.headerRootComp.refreshHeader();
        this.gridPanel.setHeaderAndFloatingHeights();
      };
      GridApi2.prototype.isAnyFilterPresent = function() {
        return this.filterManager.isAnyFilterPresent();
      };
      GridApi2.prototype.isAdvancedFilterPresent = function() {
        console.warn("ag-Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()");
        return this.isColumnFilterPresent();
      };
      GridApi2.prototype.isColumnFilterPresent = function() {
        return this.filterManager.isAdvancedFilterPresent();
      };
      GridApi2.prototype.isQuickFilterPresent = function() {
        return this.filterManager.isQuickFilterPresent();
      };
      GridApi2.prototype.getModel = function() {
        return this.rowModel;
      };
      GridApi2.prototype.setRowNodeExpanded = function(rowNode, expanded) {
        if (rowNode) {
          rowNode.setExpanded(expanded);
        }
      };
      GridApi2.prototype.onGroupExpandedOrCollapsed = function(deprecated_refreshFromIndex) {
        if (missing(this.clientSideRowModel)) {
          console.warn("ag-Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model");
        }
        if (exists(deprecated_refreshFromIndex)) {
          console.warn("ag-Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows");
        }
        this.clientSideRowModel.refreshModel({ step: Constants.STEP_MAP });
      };
      GridApi2.prototype.refreshInMemoryRowModel = function(step) {
        console.warn("ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()");
        this.refreshClientSideRowModel(step);
      };
      GridApi2.prototype.refreshClientSideRowModel = function(step) {
        if (missing(this.clientSideRowModel)) {
          console.warn("cannot call refreshClientSideRowModel unless using normal row model");
        }
        var paramsStep = Constants.STEP_EVERYTHING;
        var stepsMapped = {
          group: Constants.STEP_EVERYTHING,
          filter: Constants.STEP_FILTER,
          map: Constants.STEP_MAP,
          aggregate: Constants.STEP_AGGREGATE,
          sort: Constants.STEP_SORT,
          pivot: Constants.STEP_PIVOT
        };
        if (exists(step)) {
          paramsStep = stepsMapped[step];
        }
        if (missing(paramsStep)) {
          console.error("ag-Grid: invalid step " + step + ", available steps are " + Object.keys(stepsMapped).join(", "));
          return;
        }
        var modelParams = {
          step: paramsStep,
          keepRenderedRows: true,
          animate: true,
          keepEditingRows: true
        };
        this.clientSideRowModel.refreshModel(modelParams);
      };
      GridApi2.prototype.isAnimationFrameQueueEmpty = function() {
        return this.animationFrameService.isQueueEmpty();
      };
      GridApi2.prototype.getRowNode = function(id) {
        return this.rowModel.getRowNode(id);
      };
      GridApi2.prototype.getSizesForCurrentTheme = function() {
        return {
          rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
          headerHeight: this.gridOptionsWrapper.getHeaderHeight()
        };
      };
      GridApi2.prototype.expandAll = function() {
        if (missing(this.clientSideRowModel)) {
          console.warn("ag-Grid: cannot call expandAll unless using normal row model");
          return;
        }
        this.clientSideRowModel.expandOrCollapseAll(true);
      };
      GridApi2.prototype.collapseAll = function() {
        if (missing(this.clientSideRowModel)) {
          console.warn("ag-Grid: cannot call collapseAll unless using normal row model");
          return;
        }
        this.clientSideRowModel.expandOrCollapseAll(false);
      };
      GridApi2.prototype.getToolPanelInstance = function(id) {
        return this.gridCore.getToolPanelInstance(id);
      };
      GridApi2.prototype.addVirtualRowListener = function(eventName, rowIndex, callback) {
        if (typeof eventName !== "string") {
          console.warn("ag-Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.");
        }
        this.addRenderedRowListener(eventName, rowIndex, callback);
      };
      GridApi2.prototype.addRenderedRowListener = function(eventName, rowIndex, callback) {
        if (eventName === "virtualRowSelected") {
          console.warn("ag-Grid: event virtualRowSelected is deprecated, to register for individual row\n                selection events, add a listener directly to the row node.");
        }
        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);
      };
      GridApi2.prototype.setQuickFilter = function(newFilter) {
        this.filterManager.setQuickFilter(newFilter);
      };
      GridApi2.prototype.selectIndex = function(index, tryMulti, suppressEvents) {
        console.warn("ag-Grid: do not use api for selection, call node.setSelected(value) instead");
        if (suppressEvents) {
          console.warn("ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
        }
        this.selectionController.selectIndex(index, tryMulti);
      };
      GridApi2.prototype.deselectIndex = function(index, suppressEvents) {
        if (suppressEvents === void 0) {
          suppressEvents = false;
        }
        console.warn("ag-Grid: do not use api for selection, call node.setSelected(value) instead");
        if (suppressEvents) {
          console.warn("ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
        }
        this.selectionController.deselectIndex(index);
      };
      GridApi2.prototype.selectNode = function(node, tryMulti, suppressEvents) {
        if (tryMulti === void 0) {
          tryMulti = false;
        }
        if (suppressEvents === void 0) {
          suppressEvents = false;
        }
        console.warn("ag-Grid: API for selection is deprecated, call node.setSelected(value) instead");
        if (suppressEvents) {
          console.warn("ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
        }
        node.setSelectedParams({ newValue: true, clearSelection: !tryMulti });
      };
      GridApi2.prototype.deselectNode = function(node, suppressEvents) {
        if (suppressEvents === void 0) {
          suppressEvents = false;
        }
        console.warn("ag-Grid: API for selection is deprecated, call node.setSelected(value) instead");
        if (suppressEvents) {
          console.warn("ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
        }
        node.setSelectedParams({ newValue: false });
      };
      GridApi2.prototype.selectAll = function() {
        this.selectionController.selectAllRowNodes();
      };
      GridApi2.prototype.deselectAll = function() {
        this.selectionController.deselectAllRowNodes();
      };
      GridApi2.prototype.selectAllFiltered = function() {
        this.selectionController.selectAllRowNodes(true);
      };
      GridApi2.prototype.deselectAllFiltered = function() {
        this.selectionController.deselectAllRowNodes(true);
      };
      GridApi2.prototype.recomputeAggregates = function() {
        if (missing(this.clientSideRowModel)) {
          console.warn("cannot call recomputeAggregates unless using normal row model");
        }
        console.warn("recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead");
        this.clientSideRowModel.refreshModel({ step: Constants.STEP_AGGREGATE });
      };
      GridApi2.prototype.sizeColumnsToFit = function() {
        this.gridPanel.sizeColumnsToFit();
      };
      GridApi2.prototype.showLoadingOverlay = function() {
        this.gridPanel.showLoadingOverlay();
      };
      GridApi2.prototype.showNoRowsOverlay = function() {
        this.gridPanel.showNoRowsOverlay();
      };
      GridApi2.prototype.hideOverlay = function() {
        this.gridPanel.hideOverlay();
      };
      GridApi2.prototype.isNodeSelected = function(node) {
        console.warn("ag-Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead");
        return node.isSelected();
      };
      GridApi2.prototype.getSelectedNodesById = function() {
        console.error("ag-Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead");
        return null;
      };
      GridApi2.prototype.getSelectedNodes = function() {
        return this.selectionController.getSelectedNodes();
      };
      GridApi2.prototype.getSelectedRows = function() {
        return this.selectionController.getSelectedRows();
      };
      GridApi2.prototype.getBestCostNodeSelection = function() {
        return this.selectionController.getBestCostNodeSelection();
      };
      GridApi2.prototype.getRenderedNodes = function() {
        return this.rowRenderer.getRenderedNodes();
      };
      GridApi2.prototype.ensureColIndexVisible = function(index) {
        console.warn("ag-Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.");
      };
      GridApi2.prototype.ensureColumnVisible = function(key) {
        this.gridPanel.ensureColumnVisible(key);
      };
      GridApi2.prototype.ensureIndexVisible = function(index, position) {
        this.gridPanel.ensureIndexVisible(index, position);
      };
      GridApi2.prototype.ensureNodeVisible = function(comparator, position) {
        this.gridCore.ensureNodeVisible(comparator, position);
      };
      GridApi2.prototype.forEachLeafNode = function(callback) {
        if (missing(this.clientSideRowModel)) {
          console.warn("cannot call forEachNode unless using normal row model");
        }
        this.clientSideRowModel.forEachLeafNode(callback);
      };
      GridApi2.prototype.forEachNode = function(callback) {
        this.rowModel.forEachNode(callback);
      };
      GridApi2.prototype.forEachNodeAfterFilter = function(callback) {
        if (missing(this.clientSideRowModel)) {
          console.warn("cannot call forEachNodeAfterFilter unless using normal row model");
        }
        this.clientSideRowModel.forEachNodeAfterFilter(callback);
      };
      GridApi2.prototype.forEachNodeAfterFilterAndSort = function(callback) {
        if (missing(this.clientSideRowModel)) {
          console.warn("cannot call forEachNodeAfterFilterAndSort unless using normal row model");
        }
        this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);
      };
      GridApi2.prototype.getFilterApiForColDef = function(colDef) {
        console.warn("ag-grid API method getFilterApiForColDef deprecated, use getFilterInstance instead");
        return this.getFilterInstance(colDef);
      };
      GridApi2.prototype.getFilterInstance = function(key, callback) {
        var column = this.columnController.getPrimaryColumn(key);
        if (column) {
          var filterPromise = this.filterManager.getFilterComponent(column, "NO_UI");
          var currentValue = filterPromise.resolveNow(null, function(filterComp) {
            return filterComp;
          });
          if (callback) {
            if (currentValue) {
              setTimeout(callback, 0, currentValue);
            } else {
              filterPromise.then(callback);
            }
          }
          return currentValue;
        }
      };
      GridApi2.prototype.getFilterApi = function(key) {
        console.warn("ag-Grid: getFilterApi is deprecated, use getFilterInstance instead");
        return this.getFilterInstance(key);
      };
      GridApi2.prototype.destroyFilter = function(key) {
        var column = this.columnController.getPrimaryColumn(key);
        if (column) {
          return this.filterManager.destroyFilter(column, "filterDestroyed");
        }
      };
      GridApi2.prototype.getStatusPanel = function(key) {
        if (this.statusBarService) {
          return this.statusBarService.getStatusPanel(key);
        }
      };
      GridApi2.prototype.getColumnDef = function(key) {
        var column = this.columnController.getPrimaryColumn(key);
        if (column) {
          return column.getColDef();
        }
        return null;
      };
      GridApi2.prototype.getColumnDefs = function() {
        return this.columnController.getColumnDefs();
      };
      GridApi2.prototype.onFilterChanged = function() {
        this.filterManager.onFilterChanged();
      };
      GridApi2.prototype.onSortChanged = function() {
        this.sortController.onSortChanged();
      };
      GridApi2.prototype.setSortModel = function(sortModel, source) {
        console.warn("ag-Grid: as of version 24.0.0, setSortModel() is deprecated, sort information is now part of Column State. Please use columnApi.applyColumnState() instead.");
        var columnState = [];
        if (sortModel) {
          sortModel.forEach(function(item, index) {
            columnState.push({
              colId: item.colId,
              sort: item.sort,
              sortIndex: index
            });
          });
        }
        this.columnController.applyColumnState({ state: columnState, defaultState: { sort: null } });
      };
      GridApi2.prototype.getSortModel = function() {
        console.warn("ag-Grid: as of version 24.0.0, getSortModel() is deprecated, sort information is now part of Column State. Please use columnApi.getColumnState() instead.");
        var columnState = this.columnController.getColumnState();
        var filteredStates = columnState.filter(function(item) {
          return item.sort != null;
        });
        var indexes = {};
        filteredStates.forEach(function(state) {
          return indexes[state.colId] = state.sortIndex;
        });
        var res = filteredStates.map(function(s) {
          return { colId: s.colId, sort: s.sort };
        });
        res.sort(function(a, b) {
          return indexes[a.colId] - indexes[b.colId];
        });
        return res;
      };
      GridApi2.prototype.setFilterModel = function(model) {
        this.filterManager.setFilterModel(model);
      };
      GridApi2.prototype.getFilterModel = function() {
        return this.filterManager.getFilterModel();
      };
      GridApi2.prototype.getFocusedCell = function() {
        return this.focusController.getFocusedCell();
      };
      GridApi2.prototype.clearFocusedCell = function() {
        return this.focusController.clearFocusedCell();
      };
      GridApi2.prototype.setFocusedCell = function(rowIndex, colKey, floating) {
        this.focusController.setFocusedCell(rowIndex, colKey, floating, true);
      };
      GridApi2.prototype.setSuppressRowDrag = function(value) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);
      };
      GridApi2.prototype.setSuppressMoveWhenRowDragging = function(value) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG, value);
      };
      GridApi2.prototype.setSuppressRowClickSelection = function(value) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_CLICK_SELECTION, value);
      };
      GridApi2.prototype.addRowDropZone = function(params) {
        this.gridPanel.getRowDragFeature().addRowDropZone(params);
      };
      GridApi2.prototype.removeRowDropZone = function(params) {
        var activeDropTarget = this.dragAndDropService.findExternalZone(params);
        if (activeDropTarget) {
          this.dragAndDropService.removeDropTarget(activeDropTarget);
        }
      };
      GridApi2.prototype.getRowDropZoneParams = function(events) {
        return this.gridPanel.getRowDragFeature().getRowDropZone(events);
      };
      GridApi2.prototype.setHeaderHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);
        this.doLayout();
      };
      GridApi2.prototype.setDomLayout = function(domLayout) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);
      };
      GridApi2.prototype.setEnableCellTextSelection = function(selectable) {
        this.gridPanel.setCellTextSelection(selectable);
      };
      GridApi2.prototype.setFillHandleDirection = function(direction) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FILL_HANDLE_DIRECTION, direction);
      };
      GridApi2.prototype.setGroupHeaderHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);
        this.doLayout();
      };
      GridApi2.prototype.setFloatingFiltersHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);
        this.doLayout();
      };
      GridApi2.prototype.setPivotGroupHeaderHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);
        this.doLayout();
      };
      GridApi2.prototype.setPivotHeaderHeight = function(headerHeight) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);
        this.doLayout();
      };
      GridApi2.prototype.isSideBarVisible = function() {
        return this.gridCore.isSideBarVisible();
      };
      GridApi2.prototype.setSideBarVisible = function(show) {
        this.gridCore.setSideBarVisible(show);
      };
      GridApi2.prototype.setSideBarPosition = function(position) {
        this.gridCore.setSideBarPosition(position);
      };
      GridApi2.prototype.openToolPanel = function(key) {
        this.gridCore.openToolPanel(key);
      };
      GridApi2.prototype.closeToolPanel = function() {
        this.gridCore.closeToolPanel();
      };
      GridApi2.prototype.getOpenedToolPanel = function() {
        return this.gridCore.getOpenedToolPanel();
      };
      GridApi2.prototype.getSideBar = function() {
        return this.gridCore.getSideBar();
      };
      GridApi2.prototype.setSideBar = function(def) {
        return this.gridCore.setSideBar(def);
      };
      GridApi2.prototype.setSuppressClipboardPaste = function(value) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);
      };
      GridApi2.prototype.isToolPanelShowing = function() {
        return this.gridCore.isToolPanelShowing();
      };
      GridApi2.prototype.doLayout = function() {
        this.gridPanel.checkViewportAndScrolls();
      };
      GridApi2.prototype.resetRowHeights = function() {
        if (exists(this.clientSideRowModel)) {
          this.clientSideRowModel.resetRowHeights();
        }
      };
      GridApi2.prototype.setGroupRemoveSingleChildren = function(value) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);
      };
      GridApi2.prototype.setGroupRemoveLowestSingleChildren = function(value) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);
      };
      GridApi2.prototype.onRowHeightChanged = function() {
        if (this.clientSideRowModel) {
          this.clientSideRowModel.onRowHeightChanged();
        } else if (this.serverSideRowModel) {
          this.serverSideRowModel.onRowHeightChanged();
        }
      };
      GridApi2.prototype.getValue = function(colKey, rowNode) {
        var column = this.columnController.getPrimaryColumn(colKey);
        if (missing(column)) {
          column = this.columnController.getGridColumn(colKey);
        }
        if (missing(column)) {
          return null;
        }
        return this.valueService.getValue(column, rowNode);
      };
      GridApi2.prototype.addEventListener = function(eventType, listener) {
        var async = this.gridOptionsWrapper.useAsyncEvents();
        this.eventService.addEventListener(eventType, listener, async);
      };
      GridApi2.prototype.addGlobalListener = function(listener) {
        var async = this.gridOptionsWrapper.useAsyncEvents();
        this.eventService.addGlobalListener(listener, async);
      };
      GridApi2.prototype.removeEventListener = function(eventType, listener) {
        var async = this.gridOptionsWrapper.useAsyncEvents();
        this.eventService.removeEventListener(eventType, listener, async);
      };
      GridApi2.prototype.removeGlobalListener = function(listener) {
        var async = this.gridOptionsWrapper.useAsyncEvents();
        this.eventService.removeGlobalListener(listener, async);
      };
      GridApi2.prototype.dispatchEvent = function(event) {
        this.eventService.dispatchEvent(event);
      };
      GridApi2.prototype.destroy = function() {
        if (this.destroyCalled) {
          return;
        }
        this.destroyCalled = true;
        this.context.destroyBean(this.gridCore);
        this.context.destroy();
      };
      GridApi2.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function() {
        setTimeout(_.removeAllReferences.bind(window, this, "Grid API"), 100);
      };
      GridApi2.prototype.warnIfDestroyed = function(methodName) {
        if (this.destroyCalled) {
          console.warn("ag-Grid: Grid API method " + methodName + " was called on a grid that was destroyed.");
        }
        return this.destroyCalled;
      };
      GridApi2.prototype.resetQuickFilter = function() {
        if (this.warnIfDestroyed("resetQuickFilter")) {
          return;
        }
        this.rowModel.forEachNode(function(node) {
          return node.quickFilterAggregateText = null;
        });
      };
      GridApi2.prototype.getRangeSelections = function() {
        console.warn("ag-Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\n        getCellRanges() is a bit different, please check the ag-Grid documentation.");
        return null;
      };
      GridApi2.prototype.getCellRanges = function() {
        if (this.rangeController) {
          return this.rangeController.getCellRanges();
        }
        console.warn("ag-Grid: cell range selection is only available in ag-Grid Enterprise");
        return null;
      };
      GridApi2.prototype.camelCaseToHumanReadable = function(camelCase) {
        return camelCaseToHumanText(camelCase);
      };
      GridApi2.prototype.addRangeSelection = function(deprecatedNoLongerUsed) {
        console.warn("ag-Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()");
      };
      GridApi2.prototype.addCellRange = function(params) {
        if (!this.rangeController) {
          console.warn("ag-Grid: cell range selection is only available in ag-Grid Enterprise");
        }
        this.rangeController.addCellRange(params);
      };
      GridApi2.prototype.clearRangeSelection = function() {
        if (!this.rangeController) {
          console.warn("ag-Grid: cell range selection is only available in ag-Grid Enterprise");
        }
        this.rangeController.removeAllCellRanges();
      };
      GridApi2.prototype.undoCellEditing = function() {
        this.undoRedoService.undo();
      };
      GridApi2.prototype.redoCellEditing = function() {
        this.undoRedoService.redo();
      };
      GridApi2.prototype.getCurrentUndoSize = function() {
        return this.undoRedoService.getCurrentUndoStackSize();
      };
      GridApi2.prototype.getCurrentRedoSize = function() {
        return this.undoRedoService.getCurrentRedoStackSize();
      };
      GridApi2.prototype.getChartModels = function() {
        if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.getChartModels") && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, "api.getChartModels")) {
          return this.chartService.getChartModels();
        }
      };
      GridApi2.prototype.createRangeChart = function(params) {
        if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.createRangeChart") && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, "api.createRangeChart")) {
          return this.chartService.createRangeChart(params);
        }
      };
      GridApi2.prototype.createPivotChart = function(params) {
        if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.createPivotChart") && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, "api.createPivotChart")) {
          return this.chartService.createPivotChart(params);
        }
      };
      GridApi2.prototype.copySelectedRowsToClipboard = function(includeHeader, columnKeys) {
        if (!this.clipboardService) {
          console.warn("ag-Grid: clipboard is only available in ag-Grid Enterprise");
        }
        this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);
      };
      GridApi2.prototype.copySelectedRangeToClipboard = function(includeHeader) {
        if (!this.clipboardService) {
          console.warn("ag-Grid: clipboard is only available in ag-Grid Enterprise");
        }
        this.clipboardService.copySelectedRangeToClipboard(includeHeader);
      };
      GridApi2.prototype.copySelectedRangeDown = function() {
        if (!this.clipboardService) {
          console.warn("ag-Grid: clipboard is only available in ag-Grid Enterprise");
        }
        this.clipboardService.copyRangeDown();
      };
      GridApi2.prototype.showColumnMenuAfterButtonClick = function(colKey, buttonElement) {
        var column = this.columnController.getGridColumn(colKey);
        this.menuFactory.showMenuAfterButtonClick(column, buttonElement);
      };
      GridApi2.prototype.showColumnMenuAfterMouseClick = function(colKey, mouseEvent) {
        var column = this.columnController.getGridColumn(colKey);
        if (!column) {
          column = this.columnController.getPrimaryColumn(colKey);
        }
        if (!column) {
          console.error("ag-Grid: column '" + colKey + "' not found");
          return;
        }
        this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);
      };
      GridApi2.prototype.hidePopupMenu = function() {
        if (this.contextMenuFactory) {
          this.contextMenuFactory.hideActiveMenu();
        }
        this.menuFactory.hideActiveMenu();
      };
      GridApi2.prototype.setPopupParent = function(ePopupParent) {
        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);
      };
      GridApi2.prototype.tabToNextCell = function() {
        return this.rowRenderer.tabToNextCell(false);
      };
      GridApi2.prototype.tabToPreviousCell = function() {
        return this.rowRenderer.tabToNextCell(true);
      };
      GridApi2.prototype.getCellRendererInstances = function(params) {
        if (params === void 0) {
          params = {};
        }
        return this.rowRenderer.getCellRendererInstances(params);
      };
      GridApi2.prototype.getCellEditorInstances = function(params) {
        if (params === void 0) {
          params = {};
        }
        return this.rowRenderer.getCellEditorInstances(params);
      };
      GridApi2.prototype.getEditingCells = function() {
        return this.rowRenderer.getEditingCells();
      };
      GridApi2.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) {
          cancel = false;
        }
        this.rowRenderer.stopEditing(cancel);
      };
      GridApi2.prototype.startEditingCell = function(params) {
        var column = this.columnController.getGridColumn(params.colKey);
        if (!column) {
          console.warn("ag-Grid: no column found for " + params.colKey);
          return;
        }
        var cellPosition = {
          rowIndex: params.rowIndex,
          rowPinned: params.rowPinned,
          column
        };
        var notPinned = missing(params.rowPinned);
        if (notPinned) {
          this.gridPanel.ensureIndexVisible(params.rowIndex);
        }
        this.rowRenderer.startEditingCell(cellPosition, params.keyPress, params.charPress);
      };
      GridApi2.prototype.addAggFunc = function(key, aggFunc) {
        if (this.aggFuncService) {
          this.aggFuncService.addAggFunc(key, aggFunc);
        }
      };
      GridApi2.prototype.addAggFuncs = function(aggFuncs) {
        if (this.aggFuncService) {
          this.aggFuncService.addAggFuncs(aggFuncs);
        }
      };
      GridApi2.prototype.clearAggFuncs = function() {
        if (this.aggFuncService) {
          this.aggFuncService.clear();
        }
      };
      GridApi2.prototype.applyServerSideTransaction = function(rowDataTransaction, route) {
        if (route === void 0) {
          route = [];
        }
        if (this.serverSideRowModel) {
          this.serverSideRowModel.applyTransaction(rowDataTransaction, route);
        }
      };
      GridApi2.prototype.applyTransaction = function(rowDataTransaction) {
        var res = null;
        if (this.clientSideRowModel) {
          res = this.clientSideRowModel.updateRowData(rowDataTransaction);
        } else if (this.infiniteRowModel) {
          var message_1 = "ag-Grid: as of v23.1, transactions for Infinite Row Model are deprecated. If you want to make updates to data in Infinite Row Models, then refresh the data.";
          doOnce(function() {
            return console.warn(message_1);
          }, "applyTransaction infiniteRowModel deprecated");
          this.infiniteRowModel.updateRowData(rowDataTransaction);
        } else {
          console.error("ag-Grid: updateRowData() only works with ClientSideRowModel.");
          return;
        }
        this.rowRenderer.refreshFullWidthRows(res.update);
        if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {
          this.rowRenderer.refreshCells();
        }
        return res;
      };
      GridApi2.prototype.updateRowData = function(rowDataTransaction) {
        var message2 = "ag-Grid: as of v23.1, grid API updateRowData(transaction) is now called applyTransaction(transaction). updateRowData is deprecated and will be removed in a future major release.";
        doOnce(function() {
          return console.warn(message2);
        }, "updateRowData deprecated");
        return this.applyTransaction(rowDataTransaction);
      };
      GridApi2.prototype.applyTransactionAsync = function(rowDataTransaction, callback) {
        if (!this.clientSideRowModel) {
          console.error("ag-Grid: api.applyTransactionAsync() only works with ClientSideRowModel.");
          return;
        }
        this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);
      };
      GridApi2.prototype.flushAsyncTransactions = function() {
        if (!this.clientSideRowModel) {
          console.error("ag-Grid: api.applyTransactionAsync() only works with ClientSideRowModel.");
          return;
        }
        this.clientSideRowModel.flushAsyncTransactions();
      };
      GridApi2.prototype.batchUpdateRowData = function(rowDataTransaction, callback) {
        var message2 = "ag-Grid: as of v23.1, grid API batchUpdateRowData(transaction, callback) is now called applyTransactionAsync(transaction, callback). batchUpdateRowData is deprecated and will be removed in a future major release.";
        doOnce(function() {
          return console.warn(message2);
        }, "batchUpdateRowData deprecated");
        this.applyTransactionAsync(rowDataTransaction, callback);
      };
      GridApi2.prototype.insertItemsAtIndex = function(index, items, skipRefresh) {
        console.warn("ag-Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.");
        this.updateRowData({ add: items, addIndex: index, update: null, remove: null });
      };
      GridApi2.prototype.removeItems = function(rowNodes, skipRefresh) {
        console.warn("ag-Grid: removeItems() is deprecated, use updateRowData(transaction) instead.");
        var dataToRemove = rowNodes.map(function(rowNode) {
          return rowNode.data;
        });
        this.updateRowData({ add: null, addIndex: null, update: null, remove: dataToRemove });
      };
      GridApi2.prototype.addItems = function(items, skipRefresh) {
        console.warn("ag-Grid: addItems() is deprecated, use updateRowData(transaction) instead.");
        this.updateRowData({ add: items, addIndex: null, update: null, remove: null });
      };
      GridApi2.prototype.refreshVirtualPageCache = function() {
        console.warn("ag-Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead");
        this.refreshInfiniteCache();
      };
      GridApi2.prototype.refreshInfinitePageCache = function() {
        console.warn("ag-Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead");
        this.refreshInfiniteCache();
      };
      GridApi2.prototype.refreshInfiniteCache = function() {
        if (this.infiniteRowModel) {
          this.infiniteRowModel.refreshCache();
        } else {
          console.warn("ag-Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.");
        }
      };
      GridApi2.prototype.purgeVirtualPageCache = function() {
        console.warn("ag-Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead");
        this.purgeInfinitePageCache();
      };
      GridApi2.prototype.purgeInfinitePageCache = function() {
        console.warn("ag-Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead");
        this.purgeInfiniteCache();
      };
      GridApi2.prototype.purgeInfiniteCache = function() {
        if (this.infiniteRowModel) {
          this.infiniteRowModel.purgeCache();
        } else {
          console.warn("ag-Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.");
        }
      };
      GridApi2.prototype.purgeEnterpriseCache = function(route) {
        console.warn("ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()");
        this.purgeServerSideCache(route);
      };
      GridApi2.prototype.purgeServerSideCache = function(route) {
        if (this.serverSideRowModel) {
          this.serverSideRowModel.purgeCache(route);
        } else {
          console.warn("ag-Grid: api.purgeServerSideCache is only available when rowModelType='enterprise'.");
        }
      };
      GridApi2.prototype.getVirtualRowCount = function() {
        console.warn("ag-Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead");
        return this.getInfiniteRowCount();
      };
      GridApi2.prototype.getInfiniteRowCount = function() {
        if (this.infiniteRowModel) {
          return this.infiniteRowModel.getVirtualRowCount();
        } else {
          console.warn("ag-Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.");
        }
      };
      GridApi2.prototype.isMaxRowFound = function() {
        if (this.infiniteRowModel) {
          return this.infiniteRowModel.isMaxRowFound();
        } else {
          console.warn("ag-Grid: api.isMaxRowFound is only available when rowModelType='virtual'.");
        }
      };
      GridApi2.prototype.setVirtualRowCount = function(rowCount, maxRowFound) {
        console.warn("ag-Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead");
        this.setInfiniteRowCount(rowCount, maxRowFound);
      };
      GridApi2.prototype.setInfiniteRowCount = function(rowCount, maxRowFound) {
        if (this.infiniteRowModel) {
          this.infiniteRowModel.setVirtualRowCount(rowCount, maxRowFound);
        } else {
          console.warn("ag-Grid: api.setVirtualRowCount is only available when rowModelType='virtual'.");
        }
      };
      GridApi2.prototype.getVirtualPageState = function() {
        console.warn("ag-Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead");
        return this.getCacheBlockState();
      };
      GridApi2.prototype.getInfinitePageState = function() {
        console.warn("ag-Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead");
        return this.getCacheBlockState();
      };
      GridApi2.prototype.getCacheBlockState = function() {
        if (this.infiniteRowModel) {
          return this.infiniteRowModel.getBlockState();
        } else if (this.serverSideRowModel) {
          return this.serverSideRowModel.getBlockState();
        } else {
          console.warn("ag-Grid: api.getCacheBlockState() is only available when rowModelType='infinite' or rowModelType='serverSide'.");
        }
      };
      GridApi2.prototype.checkGridSize = function() {
        this.gridPanel.setHeaderAndFloatingHeights();
      };
      GridApi2.prototype.getFirstRenderedRow = function() {
        console.warn("in ag-Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()");
        return this.getFirstDisplayedRow();
      };
      GridApi2.prototype.getFirstDisplayedRow = function() {
        return this.rowRenderer.getFirstVirtualRenderedRow();
      };
      GridApi2.prototype.getLastRenderedRow = function() {
        console.warn("in ag-Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()");
        return this.getLastDisplayedRow();
      };
      GridApi2.prototype.getLastDisplayedRow = function() {
        return this.rowRenderer.getLastVirtualRenderedRow();
      };
      GridApi2.prototype.getDisplayedRowAtIndex = function(index) {
        return this.rowModel.getRow(index);
      };
      GridApi2.prototype.getDisplayedRowCount = function() {
        return this.rowModel.getRowCount();
      };
      GridApi2.prototype.paginationIsLastPageFound = function() {
        return this.paginationProxy.isLastPageFound();
      };
      GridApi2.prototype.paginationGetPageSize = function() {
        return this.paginationProxy.getPageSize();
      };
      GridApi2.prototype.paginationSetPageSize = function(size) {
        this.gridOptionsWrapper.setProperty("paginationPageSize", size);
      };
      GridApi2.prototype.paginationGetCurrentPage = function() {
        return this.paginationProxy.getCurrentPage();
      };
      GridApi2.prototype.paginationGetTotalPages = function() {
        return this.paginationProxy.getTotalPages();
      };
      GridApi2.prototype.paginationGetRowCount = function() {
        return this.paginationProxy.getMasterRowCount();
      };
      GridApi2.prototype.paginationGoToNextPage = function() {
        this.paginationProxy.goToNextPage();
      };
      GridApi2.prototype.paginationGoToPreviousPage = function() {
        this.paginationProxy.goToPreviousPage();
      };
      GridApi2.prototype.paginationGoToFirstPage = function() {
        this.paginationProxy.goToFirstPage();
      };
      GridApi2.prototype.paginationGoToLastPage = function() {
        this.paginationProxy.goToLastPage();
      };
      GridApi2.prototype.paginationGoToPage = function(page) {
        this.paginationProxy.goToPage(page);
      };
      __decorate$10([
        Optional("immutableService")
      ], GridApi2.prototype, "immutableService", void 0);
      __decorate$10([
        Optional("csvCreator")
      ], GridApi2.prototype, "csvCreator", void 0);
      __decorate$10([
        Optional("excelCreator")
      ], GridApi2.prototype, "excelCreator", void 0);
      __decorate$10([
        Autowired("rowRenderer")
      ], GridApi2.prototype, "rowRenderer", void 0);
      __decorate$10([
        Autowired("filterManager")
      ], GridApi2.prototype, "filterManager", void 0);
      __decorate$10([
        Autowired("columnController")
      ], GridApi2.prototype, "columnController", void 0);
      __decorate$10([
        Autowired("selectionController")
      ], GridApi2.prototype, "selectionController", void 0);
      __decorate$10([
        Autowired("gridOptionsWrapper")
      ], GridApi2.prototype, "gridOptionsWrapper", void 0);
      __decorate$10([
        Autowired("valueService")
      ], GridApi2.prototype, "valueService", void 0);
      __decorate$10([
        Autowired("alignedGridsService")
      ], GridApi2.prototype, "alignedGridsService", void 0);
      __decorate$10([
        Autowired("eventService")
      ], GridApi2.prototype, "eventService", void 0);
      __decorate$10([
        Autowired("pinnedRowModel")
      ], GridApi2.prototype, "pinnedRowModel", void 0);
      __decorate$10([
        Autowired("context")
      ], GridApi2.prototype, "context", void 0);
      __decorate$10([
        Autowired("rowModel")
      ], GridApi2.prototype, "rowModel", void 0);
      __decorate$10([
        Autowired("sortController")
      ], GridApi2.prototype, "sortController", void 0);
      __decorate$10([
        Autowired("paginationProxy")
      ], GridApi2.prototype, "paginationProxy", void 0);
      __decorate$10([
        Autowired("focusController")
      ], GridApi2.prototype, "focusController", void 0);
      __decorate$10([
        Autowired("dragAndDropService")
      ], GridApi2.prototype, "dragAndDropService", void 0);
      __decorate$10([
        Optional("rangeController")
      ], GridApi2.prototype, "rangeController", void 0);
      __decorate$10([
        Optional("clipboardService")
      ], GridApi2.prototype, "clipboardService", void 0);
      __decorate$10([
        Optional("aggFuncService")
      ], GridApi2.prototype, "aggFuncService", void 0);
      __decorate$10([
        Autowired("menuFactory")
      ], GridApi2.prototype, "menuFactory", void 0);
      __decorate$10([
        Optional("contextMenuFactory")
      ], GridApi2.prototype, "contextMenuFactory", void 0);
      __decorate$10([
        Autowired("cellRendererFactory")
      ], GridApi2.prototype, "cellRendererFactory", void 0);
      __decorate$10([
        Autowired("valueCache")
      ], GridApi2.prototype, "valueCache", void 0);
      __decorate$10([
        Autowired("animationFrameService")
      ], GridApi2.prototype, "animationFrameService", void 0);
      __decorate$10([
        Optional("statusBarService")
      ], GridApi2.prototype, "statusBarService", void 0);
      __decorate$10([
        Optional("chartService")
      ], GridApi2.prototype, "chartService", void 0);
      __decorate$10([
        Optional("undoRedoService")
      ], GridApi2.prototype, "undoRedoService", void 0);
      __decorate$10([
        PostConstruct
      ], GridApi2.prototype, "init", null);
      __decorate$10([
        PreDestroy
      ], GridApi2.prototype, "cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid", null);
      GridApi2 = __decorate$10([
        Bean("gridApi")
      ], GridApi2);
      return GridApi2;
    }();
    var __extends$12 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$11 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$6 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var ExpressionService = function(_super) {
      __extends$12(ExpressionService2, _super);
      function ExpressionService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.expressionToFunctionCache = {};
        return _this;
      }
      ExpressionService2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("ExpressionService");
      };
      ExpressionService2.prototype.evaluate = function(expressionOrFunc, params) {
        if (typeof expressionOrFunc === "function") {
          var func = expressionOrFunc;
          return func(params);
        } else if (typeof expressionOrFunc === "string") {
          var expression = expressionOrFunc;
          return this.evaluateExpression(expression, params);
        } else {
          console.error("ag-Grid: value should be either a string or a function", expressionOrFunc);
        }
      };
      ExpressionService2.prototype.evaluateExpression = function(expression, params) {
        try {
          var javaScriptFunction = this.createExpressionFunction(expression);
          var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);
          return result;
        } catch (e) {
          console.log("Processing of the expression failed");
          console.log("Expression = " + expression);
          console.log("Params =", params);
          console.log("Exception = " + e);
          return null;
        }
      };
      ExpressionService2.prototype.createExpressionFunction = function(expression) {
        if (this.expressionToFunctionCache[expression]) {
          return this.expressionToFunctionCache[expression];
        }
        var functionBody = this.createFunctionBody(expression);
        var theFunction = new Function("x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup", functionBody);
        this.expressionToFunctionCache[expression] = theFunction;
        return theFunction;
      };
      ExpressionService2.prototype.createFunctionBody = function(expression) {
        if (expression.indexOf("return") >= 0) {
          return expression;
        } else {
          return "return " + expression + ";";
        }
      };
      __decorate$11([
        __param$6(0, Qualifier("loggerFactory"))
      ], ExpressionService2.prototype, "setBeans", null);
      ExpressionService2 = __decorate$11([
        Bean("expressionService")
      ], ExpressionService2);
      return ExpressionService2;
    }(BeanStub);
    var __extends$13 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$12 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TemplateService = function(_super) {
      __extends$13(TemplateService2, _super);
      function TemplateService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.templateCache = {};
        _this.waitingCallbacks = {};
        return _this;
      }
      TemplateService2.prototype.getTemplate = function(url, callback) {
        var templateFromCache = this.templateCache[url];
        if (templateFromCache) {
          return templateFromCache;
        }
        var callbackList = this.waitingCallbacks[url];
        var that = this;
        if (!callbackList) {
          callbackList = [];
          this.waitingCallbacks[url] = callbackList;
          var client = new XMLHttpRequest();
          client.onload = function() {
            that.handleHttpResult(this, url);
          };
          client.open("GET", url);
          client.send();
        }
        if (callback) {
          callbackList.push(callback);
        }
        return null;
      };
      TemplateService2.prototype.handleHttpResult = function(httpResult, url) {
        if (httpResult.status !== 200 || httpResult.response === null) {
          console.warn("Unable to get template error " + httpResult.status + " - " + url);
          return;
        }
        this.templateCache[url] = httpResult.response || httpResult.responseText;
        var callbacks = this.waitingCallbacks[url];
        for (var i = 0; i < callbacks.length; i++) {
          var callback = callbacks[i];
          callback();
        }
        if (this.$scope) {
          var that_1 = this;
          window.setTimeout(function() {
            that_1.$scope.$apply();
          }, 0);
        }
      };
      __decorate$12([
        Autowired("$scope")
      ], TemplateService2.prototype, "$scope", void 0);
      TemplateService2 = __decorate$12([
        Bean("templateService")
      ], TemplateService2);
      return TemplateService2;
    }(BeanStub);
    var __extends$14 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$13 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var PopupService = function(_super) {
      __extends$14(PopupService2, _super);
      function PopupService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.popupList = [];
        return _this;
      }
      PopupService2.prototype.init = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_KEYBOARD_FOCUS, function() {
          forEach(_this.popupList, function(popup) {
            return addCssClass(popup.element, "ag-keyboard-focus");
          });
        });
        this.addManagedListener(this.eventService, Events.EVENT_MOUSE_FOCUS, function() {
          forEach(_this.popupList, function(popup) {
            return removeCssClass(popup.element, "ag-keyboard-focus");
          });
        });
      };
      PopupService2.prototype.registerGridCore = function(gridCore) {
        this.gridCore = gridCore;
      };
      PopupService2.prototype.getPopupParent = function() {
        var ePopupParent = this.gridOptionsWrapper.getPopupParent();
        if (ePopupParent) {
          return ePopupParent;
        }
        return this.gridCore.getRootGui();
      };
      PopupService2.prototype.positionPopupForMenu = function(params) {
        var sourceRect = params.eventSource.getBoundingClientRect();
        var parentRect = this.getParentRect();
        var y = this.keepYWithinBounds(params, sourceRect.top - parentRect.top);
        var minWidth = params.ePopup.clientWidth > 0 ? params.ePopup.clientWidth : 200;
        params.ePopup.style.minWidth = minWidth + "px";
        var widthOfParent = parentRect.right - parentRect.left;
        var maxX = widthOfParent - minWidth;
        var x;
        if (this.gridOptionsWrapper.isEnableRtl()) {
          x = xLeftPosition();
          if (x < 0) {
            x = xRightPosition();
          }
          if (x > maxX) {
            x = 0;
          }
        } else {
          x = xRightPosition();
          if (x > maxX) {
            x = xLeftPosition();
          }
          if (x < 0) {
            x = 0;
          }
        }
        params.ePopup.style.left = x + "px";
        params.ePopup.style.top = y + "px";
        function xRightPosition() {
          return sourceRect.right - parentRect.left - 2;
        }
        function xLeftPosition() {
          return sourceRect.left - parentRect.left - minWidth;
        }
      };
      PopupService2.prototype.positionPopupUnderMouseEvent = function(params) {
        var _a = this.calculatePointerAlign(params.mouseEvent), x = _a.x, y = _a.y;
        var ePopup = params.ePopup, nudgeX = params.nudgeX, nudgeY = params.nudgeY;
        this.positionPopup({
          ePopup,
          x,
          y,
          nudgeX,
          nudgeY,
          keepWithinBounds: true
        });
        this.callPostProcessPopup(params.type, params.ePopup, null, params.mouseEvent, params.column, params.rowNode);
      };
      PopupService2.prototype.calculatePointerAlign = function(e) {
        var parentRect = this.getParentRect();
        return {
          x: e.clientX - parentRect.left,
          y: e.clientY - parentRect.top
        };
      };
      PopupService2.prototype.positionPopupUnderComponent = function(params) {
        var sourceRect = params.eventSource.getBoundingClientRect();
        var alignSide = params.alignSide || "left";
        var parentRect = this.getParentRect();
        var x = sourceRect.left - parentRect.left;
        if (alignSide === "right") {
          x -= params.ePopup.offsetWidth - sourceRect.width;
        }
        this.positionPopup({
          ePopup: params.ePopup,
          minWidth: params.minWidth,
          minHeight: params.minHeight,
          nudgeX: params.nudgeX,
          nudgeY: params.nudgeY,
          x,
          y: sourceRect.top - parentRect.top + sourceRect.height,
          keepWithinBounds: params.keepWithinBounds
        });
        this.callPostProcessPopup(params.type, params.ePopup, params.eventSource, null, params.column, params.rowNode);
      };
      PopupService2.prototype.positionPopupOverComponent = function(params) {
        var sourceRect = params.eventSource.getBoundingClientRect();
        var parentRect = this.getParentRect();
        this.positionPopup({
          ePopup: params.ePopup,
          minWidth: params.minWidth,
          nudgeX: params.nudgeX,
          nudgeY: params.nudgeY,
          x: sourceRect.left - parentRect.left,
          y: sourceRect.top - parentRect.top,
          keepWithinBounds: params.keepWithinBounds
        });
        this.callPostProcessPopup(params.type, params.ePopup, params.eventSource, null, params.column, params.rowNode);
      };
      PopupService2.prototype.callPostProcessPopup = function(type, ePopup, eventSource, mouseEvent, column, rowNode) {
        var callback = this.gridOptionsWrapper.getPostProcessPopupFunc();
        if (callback) {
          var params = {
            column,
            rowNode,
            ePopup,
            type,
            eventSource,
            mouseEvent
          };
          callback(params);
        }
      };
      PopupService2.prototype.positionPopup = function(params) {
        var x = params.x;
        var y = params.y;
        if (params.nudgeX) {
          x += params.nudgeX;
        }
        if (params.nudgeY) {
          y += params.nudgeY;
        }
        if (params.keepWithinBounds) {
          x = this.keepXWithinBounds(params, x);
          y = this.keepYWithinBounds(params, y);
        }
        params.ePopup.style.left = x + "px";
        params.ePopup.style.top = y + "px";
      };
      PopupService2.prototype.getActivePopups = function() {
        return this.popupList.map(function(popup) {
          return popup.element;
        });
      };
      PopupService2.prototype.getParentRect = function() {
        var popupParent = this.getPopupParent();
        var eDocument = this.gridOptionsWrapper.getDocument();
        if (popupParent === eDocument.body) {
          popupParent = eDocument.documentElement;
        }
        var style = getComputedStyle(popupParent);
        var bounds = popupParent.getBoundingClientRect();
        return {
          top: bounds.top + parseFloat(style.borderTopWidth) || 0,
          left: bounds.left + parseFloat(style.borderLeftWidth) || 0,
          right: bounds.right + parseFloat(style.borderRightWidth) || 0,
          bottom: bounds.bottom + parseFloat(style.borderBottomWidth) || 0
        };
      };
      PopupService2.prototype.keepYWithinBounds = function(params, y) {
        var eDocument = this.gridOptionsWrapper.getDocument();
        var docElement = eDocument.documentElement;
        var popupParent = this.getPopupParent();
        var parentRect = popupParent.getBoundingClientRect();
        var documentRect = eDocument.documentElement.getBoundingClientRect();
        var isBody = popupParent === eDocument.body;
        var minHeight = Math.min(200, parentRect.height);
        var diff = 0;
        if (params.minHeight && params.minHeight < minHeight) {
          minHeight = params.minHeight;
        } else if (params.ePopup.offsetHeight > 0) {
          minHeight = params.ePopup.clientHeight;
          diff = getAbsoluteHeight(params.ePopup) - minHeight;
        }
        var heightOfParent = isBody ? getAbsoluteHeight(docElement) + docElement.scrollTop : parentRect.height;
        if (isBody) {
          heightOfParent -= Math.abs(documentRect.top - parentRect.top);
        }
        var maxY = heightOfParent - minHeight - diff;
        return Math.min(Math.max(y, 0), Math.abs(maxY));
      };
      PopupService2.prototype.keepXWithinBounds = function(params, x) {
        var eDocument = this.gridOptionsWrapper.getDocument();
        var docElement = eDocument.documentElement;
        var popupParent = this.getPopupParent();
        var parentRect = popupParent.getBoundingClientRect();
        var documentRect = eDocument.documentElement.getBoundingClientRect();
        var isBody = popupParent === eDocument.body;
        var ePopup = params.ePopup;
        var minWidth = Math.min(200, parentRect.width);
        var diff = 0;
        if (params.minWidth && params.minWidth < minWidth) {
          minWidth = params.minWidth;
        } else if (ePopup.offsetWidth > 0) {
          minWidth = ePopup.offsetWidth;
          ePopup.style.minWidth = minWidth + "px";
          diff = getAbsoluteWidth(ePopup) - minWidth;
        }
        var widthOfParent = isBody ? getAbsoluteWidth(docElement) + docElement.scrollLeft : parentRect.width;
        if (isBody) {
          widthOfParent -= Math.abs(documentRect.left - parentRect.left);
        }
        var maxX = widthOfParent - minWidth - diff;
        return Math.min(Math.max(x, 0), Math.abs(maxX));
      };
      PopupService2.prototype.keepPopupPositionedRelativeTo = function(params) {
        var eParent = this.getPopupParent();
        var parentRect = eParent.getBoundingClientRect();
        var sourceRect = params.element.getBoundingClientRect();
        var initialDiffTop = parentRect.top - sourceRect.top;
        var lastDiffTop = initialDiffTop;
        var topPx = params.ePopup.style.top;
        var top = parseInt(topPx.substring(0, topPx.length - 1), 10);
        var intervalId = window.setInterval(function() {
          var parentRect2 = eParent.getBoundingClientRect();
          var sourceRect2 = params.element.getBoundingClientRect();
          var currentDiffTop = parentRect2.top - sourceRect2.top;
          if (currentDiffTop != lastDiffTop) {
            var newTop = top + initialDiffTop - currentDiffTop;
            params.ePopup.style.top = newTop + "px";
          }
          lastDiffTop = currentDiffTop;
        }, 200);
        var res = function() {
          window.clearInterval(intervalId);
        };
        return res;
      };
      PopupService2.prototype.addPopup = function(params) {
        var _this = this;
        var modal = params.modal, eChild = params.eChild, closeOnEsc = params.closeOnEsc, closedCallback = params.closedCallback, click = params.click, alwaysOnTop = params.alwaysOnTop, positionCallback = params.positionCallback, anchorToElement = params.anchorToElement;
        var eDocument = this.gridOptionsWrapper.getDocument();
        if (!eDocument) {
          console.warn("ag-grid: could not find the document, document is empty");
          return function() {
          };
        }
        var pos = findIndex(this.popupList, function(popup2) {
          return popup2.element === eChild;
        });
        if (pos !== -1) {
          var popup = this.popupList[pos];
          return popup.hideFunc;
        }
        var ePopupParent = this.getPopupParent();
        ePopupParent.appendChild(eChild);
        if (eChild.style.top == null) {
          eChild.style.top = "0px";
        }
        if (eChild.style.left == null) {
          eChild.style.left = "0px";
        }
        var eWrapper = document.createElement("div");
        var theme = this.environment.getTheme().theme;
        if (theme) {
          addCssClass(eWrapper, theme);
        }
        addCssClass(eWrapper, "ag-popup");
        addCssClass(eChild, this.gridOptionsWrapper.isEnableRtl() ? "ag-rtl" : "ag-ltr");
        addCssClass(eChild, "ag-popup-child");
        eWrapper.appendChild(eChild);
        ePopupParent.appendChild(eWrapper);
        if (alwaysOnTop) {
          this.setAlwaysOnTop(eWrapper, true);
        } else {
          this.bringPopupToFront(eWrapper);
        }
        var popupHidden = false;
        var hidePopupOnKeyboardEvent = function(event) {
          if (!eWrapper.contains(document.activeElement)) {
            return;
          }
          var key = event.which || event.keyCode;
          if (key === KeyCode.ESCAPE) {
            hidePopup({ keyboardEvent: event });
          }
        };
        var hidePopupOnMouseEvent = function(event) {
          return hidePopup({ mouseEvent: event });
        };
        var hidePopupOnTouchEvent = function(event) {
          return hidePopup({ touchEvent: event });
        };
        var destroyPositionTracker;
        var hidePopup = function(params2) {
          if (params2 === void 0) {
            params2 = {};
          }
          var mouseEvent = params2.mouseEvent, touchEvent = params2.touchEvent, keyboardEvent = params2.keyboardEvent;
          if (_this.isEventFromCurrentPopup({ mouseEvent, touchEvent }, eChild) || _this.isEventSameChainAsOriginalEvent({ originalMouseEvent: click, mouseEvent, touchEvent }) || popupHidden) {
            return;
          }
          popupHidden = true;
          ePopupParent.removeChild(eWrapper);
          eDocument.removeEventListener("keydown", hidePopupOnKeyboardEvent);
          eDocument.removeEventListener("mousedown", hidePopupOnMouseEvent);
          eDocument.removeEventListener("touchstart", hidePopupOnTouchEvent);
          eDocument.removeEventListener("contextmenu", hidePopupOnMouseEvent);
          _this.eventService.removeEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
          if (closedCallback) {
            closedCallback(mouseEvent || touchEvent || keyboardEvent);
          }
          _this.popupList = _this.popupList.filter(function(popup2) {
            return popup2.element !== eChild;
          });
          if (destroyPositionTracker) {
            destroyPositionTracker();
          }
        };
        window.setTimeout(function() {
          if (closeOnEsc) {
            eDocument.addEventListener("keydown", hidePopupOnKeyboardEvent);
          }
          if (modal) {
            eDocument.addEventListener("mousedown", hidePopupOnMouseEvent);
            _this.eventService.addEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
            eDocument.addEventListener("touchstart", hidePopupOnTouchEvent);
            eDocument.addEventListener("contextmenu", hidePopupOnMouseEvent);
          }
        }, 0);
        this.popupList.push({
          element: eChild,
          hideFunc: hidePopup
        });
        if (positionCallback) {
          positionCallback();
        }
        if (anchorToElement) {
          destroyPositionTracker = this.keepPopupPositionedRelativeTo({
            element: anchorToElement,
            ePopup: eChild
          });
        }
        return hidePopup;
      };
      PopupService2.prototype.isEventFromCurrentPopup = function(params, target) {
        var mouseEvent = params.mouseEvent, touchEvent = params.touchEvent;
        var event = mouseEvent ? mouseEvent : touchEvent;
        if (!event) {
          return false;
        }
        var indexOfThisChild = findIndex(this.popupList, function(popup2) {
          return popup2.element === target;
        });
        if (indexOfThisChild === -1) {
          return false;
        }
        for (var i = indexOfThisChild; i < this.popupList.length; i++) {
          var popup = this.popupList[i];
          if (isElementInEventPath(popup.element, event)) {
            return true;
          }
        }
        return this.isElementWithinCustomPopup(event.target);
      };
      PopupService2.prototype.isElementWithinCustomPopup = function(el) {
        if (!this.popupList.length) {
          return false;
        }
        while (el && el !== document.body) {
          if (el.classList.contains("ag-custom-component-popup") || el.parentElement === null) {
            return true;
          }
          el = el.parentElement;
        }
        return false;
      };
      PopupService2.prototype.isEventSameChainAsOriginalEvent = function(params) {
        var originalMouseEvent = params.originalMouseEvent, mouseEvent = params.mouseEvent, touchEvent = params.touchEvent;
        var mouseEventOrTouch = null;
        if (mouseEvent) {
          mouseEventOrTouch = mouseEvent;
        } else if (touchEvent) {
          mouseEventOrTouch = touchEvent.touches[0];
        }
        if (mouseEventOrTouch && originalMouseEvent) {
          var screenX_1 = mouseEvent ? mouseEvent.screenX : 0;
          var screenY_1 = mouseEvent ? mouseEvent.screenY : 0;
          var xMatch = Math.abs(originalMouseEvent.screenX - screenX_1) < 5;
          var yMatch = Math.abs(originalMouseEvent.screenY - screenY_1) < 5;
          if (xMatch && yMatch) {
            return true;
          }
        }
        return false;
      };
      PopupService2.prototype.getWrapper = function(ePopup) {
        while (!containsClass(ePopup, "ag-popup") && ePopup.parentElement) {
          ePopup = ePopup.parentElement;
        }
        return containsClass(ePopup, "ag-popup") ? ePopup : null;
      };
      PopupService2.prototype.setAlwaysOnTop = function(ePopup, alwaysOnTop) {
        var eWrapper = this.getWrapper(ePopup);
        if (!eWrapper) {
          return;
        }
        addOrRemoveCssClass(eWrapper, "ag-always-on-top", !!alwaysOnTop);
        if (alwaysOnTop) {
          this.bringPopupToFront(eWrapper);
        }
      };
      PopupService2.prototype.bringPopupToFront = function(ePopup) {
        var parent = this.getPopupParent();
        var popupList = Array.prototype.slice.call(parent.querySelectorAll(".ag-popup"));
        var popupLen = popupList.length;
        var alwaysOnTopList = Array.prototype.slice.call(parent.querySelectorAll(".ag-popup.ag-always-on-top"));
        var onTopLength = alwaysOnTopList.length;
        var eWrapper = this.getWrapper(ePopup);
        if (!eWrapper || popupLen <= 1 || !parent.contains(ePopup)) {
          return;
        }
        var pos = popupList.indexOf(eWrapper);
        if (onTopLength) {
          var isPopupAlwaysOnTop = containsClass(eWrapper, "ag-always-on-top");
          if (isPopupAlwaysOnTop) {
            if (pos !== popupLen - 1) {
              last(alwaysOnTopList).insertAdjacentElement("afterend", eWrapper);
            }
          } else if (pos !== popupLen - onTopLength - 1) {
            alwaysOnTopList[0].insertAdjacentElement("beforebegin", eWrapper);
          }
        } else if (pos !== popupLen - 1) {
          last(popupList).insertAdjacentElement("afterend", eWrapper);
        }
        var params = {
          type: "popupToFront",
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          eWrapper
        };
        this.eventService.dispatchEvent(params);
      };
      __decorate$13([
        Autowired("gridOptionsWrapper")
      ], PopupService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$13([
        Autowired("environment")
      ], PopupService2.prototype, "environment", void 0);
      __decorate$13([
        PostConstruct
      ], PopupService2.prototype, "init", null);
      PopupService2 = __decorate$13([
        Bean("popupService")
      ], PopupService2);
      return PopupService2;
    }(BeanStub);
    var __extends$15 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$14 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$7 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var LoggerFactory = function(_super) {
      __extends$15(LoggerFactory2, _super);
      function LoggerFactory2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      LoggerFactory2.prototype.setBeans = function(gridOptionsWrapper) {
        this.logging = gridOptionsWrapper.isDebug();
      };
      LoggerFactory2.prototype.create = function(name) {
        return new Logger(name, this.isLogging.bind(this));
      };
      LoggerFactory2.prototype.isLogging = function() {
        return this.logging;
      };
      __decorate$14([
        __param$7(0, Qualifier("gridOptionsWrapper"))
      ], LoggerFactory2.prototype, "setBeans", null);
      LoggerFactory2 = __decorate$14([
        Bean("loggerFactory")
      ], LoggerFactory2);
      return LoggerFactory2;
    }(BeanStub);
    var Logger = function() {
      function Logger2(name, isLoggingFunc) {
        this.name = name;
        this.isLoggingFunc = isLoggingFunc;
      }
      Logger2.prototype.isLogging = function() {
        return this.isLoggingFunc();
      };
      Logger2.prototype.log = function(message2) {
        if (this.isLoggingFunc()) {
          console.log("ag-Grid." + this.name + ": " + message2);
        }
      };
      return Logger2;
    }();
    var __extends$16 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$15 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AutoWidthCalculator = function(_super) {
      __extends$16(AutoWidthCalculator2, _super);
      function AutoWidthCalculator2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AutoWidthCalculator2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
      };
      AutoWidthCalculator2.prototype.registerHeaderRootComp = function(headerRootComp) {
        this.headerRootComp = headerRootComp;
      };
      AutoWidthCalculator2.prototype.getPreferredWidthForColumn = function(column, skipHeader) {
        var eHeaderCell = this.getHeaderCellForColumn(column);
        if (!eHeaderCell) {
          return -1;
        }
        var eDummyContainer = document.createElement("span");
        eDummyContainer.style.position = "fixed";
        var eBodyContainer = this.gridPanel.getCenterContainer();
        eBodyContainer.appendChild(eDummyContainer);
        this.putRowCellsIntoDummyContainer(column, eDummyContainer);
        if (!skipHeader) {
          this.cloneItemIntoDummy(eHeaderCell, eDummyContainer);
        }
        var dummyContainerWidth = eDummyContainer.offsetWidth;
        eBodyContainer.removeChild(eDummyContainer);
        var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();
        return dummyContainerWidth + autoSizePadding;
      };
      AutoWidthCalculator2.prototype.getHeaderCellForColumn = function(column) {
        var comp = null;
        this.headerRootComp.forEachHeaderElement(function(headerElement) {
          if (headerElement instanceof HeaderWrapperComp) {
            var headerWrapperComp = headerElement;
            if (headerWrapperComp.getColumn() === column) {
              comp = headerWrapperComp;
            }
          }
        });
        return comp ? comp.getGui() : null;
      };
      AutoWidthCalculator2.prototype.putRowCellsIntoDummyContainer = function(column, eDummyContainer) {
        var _this = this;
        var eCells = this.rowRenderer.getAllCellsForColumn(column);
        eCells.forEach(function(eCell) {
          return _this.cloneItemIntoDummy(eCell, eDummyContainer);
        });
      };
      AutoWidthCalculator2.prototype.cloneItemIntoDummy = function(eCell, eDummyContainer) {
        var eCellClone = eCell.cloneNode(true);
        eCellClone.style.width = "";
        eCellClone.style.position = "static";
        eCellClone.style.left = "";
        var eCloneParent = document.createElement("div");
        if (containsClass(eCellClone, "ag-header-cell")) {
          addCssClass(eCloneParent, "ag-header");
          addCssClass(eCloneParent, "ag-header-row");
          eCloneParent.style.position = "static";
        } else {
          addCssClass(eCloneParent, "ag-row");
        }
        eCloneParent.style.display = "table-row";
        eCloneParent.appendChild(eCellClone);
        eDummyContainer.appendChild(eCloneParent);
      };
      __decorate$15([
        Autowired("rowRenderer")
      ], AutoWidthCalculator2.prototype, "rowRenderer", void 0);
      __decorate$15([
        Autowired("gridOptionsWrapper")
      ], AutoWidthCalculator2.prototype, "gridOptionsWrapper", void 0);
      AutoWidthCalculator2 = __decorate$15([
        Bean("autoWidthCalculator")
      ], AutoWidthCalculator2);
      return AutoWidthCalculator2;
    }(BeanStub);
    var __extends$17 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$16 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HorizontalResizeService = function(_super) {
      __extends$17(HorizontalResizeService2, _super);
      function HorizontalResizeService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      HorizontalResizeService2.prototype.addResizeBar = function(params) {
        var _this = this;
        var dragSource = {
          dragStartPixels: params.dragStartPixels || 0,
          eElement: params.eResizeBar,
          onDragStart: this.onDragStart.bind(this, params),
          onDragStop: this.onDragStop.bind(this, params),
          onDragging: this.onDragging.bind(this, params)
        };
        this.dragService.addDragSource(dragSource, true);
        var finishedWithResizeFunc = function() {
          return _this.dragService.removeDragSource(dragSource);
        };
        return finishedWithResizeFunc;
      };
      HorizontalResizeService2.prototype.onDragStart = function(params, mouseEvent) {
        this.dragStartX = mouseEvent.clientX;
        this.setResizeIcons();
        var shiftKey = mouseEvent instanceof MouseEvent ? mouseEvent.shiftKey === true : false;
        params.onResizeStart(shiftKey);
      };
      HorizontalResizeService2.prototype.setResizeIcons = function() {
        this.oldBodyCursor = this.eGridDiv.style.cursor;
        this.oldUserSelect = this.eGridDiv.style.userSelect;
        this.oldWebkitUserSelect = this.eGridDiv.style.webkitUserSelect;
        this.eGridDiv.style.cursor = "ew-resize";
        this.eGridDiv.style.userSelect = "none";
        this.eGridDiv.style.webkitUserSelect = "none";
      };
      HorizontalResizeService2.prototype.onDragStop = function(params, mouseEvent) {
        params.onResizeEnd(this.resizeAmount);
        this.resetIcons();
      };
      HorizontalResizeService2.prototype.resetIcons = function() {
        this.eGridDiv.style.cursor = this.oldBodyCursor;
        this.eGridDiv.style.userSelect = this.oldUserSelect;
        this.eGridDiv.style.webkitUserSelect = this.oldWebkitUserSelect;
      };
      HorizontalResizeService2.prototype.onDragging = function(params, mouseEvent) {
        this.resizeAmount = mouseEvent.clientX - this.dragStartX;
        params.onResizing(this.resizeAmount);
      };
      __decorate$16([
        Autowired("dragService")
      ], HorizontalResizeService2.prototype, "dragService", void 0);
      __decorate$16([
        Autowired("eGridDiv")
      ], HorizontalResizeService2.prototype, "eGridDiv", void 0);
      HorizontalResizeService2 = __decorate$16([
        Bean("horizontalResizeService")
      ], HorizontalResizeService2);
      return HorizontalResizeService2;
    }(BeanStub);
    var __extends$18 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$17 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GridCore = function(_super) {
      __extends$18(GridCore2, _super);
      function GridCore2() {
        return _super.call(this, void 0, true) || this;
      }
      GridCore2.prototype.postConstruct = function() {
        var _this = this;
        this.logger = this.loggerFactory.create("GridCore");
        var template = this.createTemplate();
        this.setTemplate(template);
        [
          this.gridApi,
          this.rowRenderer,
          this.popupService,
          this.focusController
        ].forEach(function(service) {
          return service.registerGridCore(_this);
        });
        if (ModuleRegistry.isRegistered(exports.ModuleNames.ClipboardModule)) {
          this.clipboardService.registerGridCore(this);
        }
        this.gridOptionsWrapper.addLayoutElement(this.getGui());
        this.eGridDiv.appendChild(this.getGui());
        this.addDestroyFunc(function() {
          _this.eGridDiv.removeChild(_this.getGui());
        });
        if (this.$scope) {
          var quickFilterUnregisterFn = this.$scope.$watch(this.quickFilterOnScope, function(newFilter) {
            return _this.filterManager.setQuickFilter(newFilter);
          });
          this.addDestroyFunc(quickFilterUnregisterFn);
        }
        this.addRtlSupport();
        this.logger.log("ready");
        this.gridOptionsWrapper.addLayoutElement(this.eRootWrapperBody);
        var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eGridDiv, this.onGridSizeChanged.bind(this));
        this.addDestroyFunc(function() {
          return unsubscribeFromResize();
        });
        var eGui = this.getGui();
        this.addManagedListener(this.eventService, Events.EVENT_KEYBOARD_FOCUS, function() {
          addCssClass(eGui, "ag-keyboard-focus");
        });
        this.addManagedListener(this.eventService, Events.EVENT_MOUSE_FOCUS, function() {
          removeCssClass(eGui, "ag-keyboard-focus");
        });
        _super.prototype.postConstruct.call(this);
      };
      GridCore2.prototype.getFocusableElement = function() {
        return this.eRootWrapperBody;
      };
      GridCore2.prototype.createTemplate = function() {
        var sideBarModuleLoaded = ModuleRegistry.isRegistered(exports.ModuleNames.SideBarModule);
        var statusBarModuleLoaded = ModuleRegistry.isRegistered(exports.ModuleNames.StatusBarModule);
        var rowGroupingLoaded = ModuleRegistry.isRegistered(exports.ModuleNames.RowGroupingModule);
        var enterpriseCoreLoaded = ModuleRegistry.isRegistered(exports.ModuleNames.EnterpriseCoreModule);
        var dropZones = rowGroupingLoaded ? "<ag-grid-header-drop-zones></ag-grid-header-drop-zones>" : "";
        var sideBar = sideBarModuleLoaded ? '<ag-side-bar ref="sideBar"></ag-side-bar>' : "";
        var statusBar = statusBarModuleLoaded ? '<ag-status-bar ref="statusBar"></ag-status-bar>' : "";
        var watermark = enterpriseCoreLoaded ? "<ag-watermark></ag-watermark>" : "";
        var template = '<div ref="eRootWrapper" class="ag-root-wrapper">\n                ' + dropZones + '\n                <div class="ag-root-wrapper-body" ref="rootWrapperBody">\n                    <ag-grid-comp ref="gridPanel"></ag-grid-comp>\n                    ' + sideBar + "\n                </div>\n                " + statusBar + "\n                <ag-pagination></ag-pagination>\n                " + watermark + "\n            </div>";
        return template;
      };
      GridCore2.prototype.getFocusableContainers = function() {
        var focusableContainers = [
          this.gridPanel.getGui()
        ];
        if (this.sideBarComp) {
          focusableContainers.push(this.sideBarComp.getGui());
        }
        return focusableContainers.filter(function(el) {
          return isVisible(el);
        });
      };
      GridCore2.prototype.focusNextInnerContainer = function(backwards) {
        var focusableContainers = this.getFocusableContainers();
        var idxWithFocus = findIndex(focusableContainers, function(container) {
          return container.contains(document.activeElement);
        });
        var nextIdx = idxWithFocus + (backwards ? -1 : 1);
        if (nextIdx < 0 || nextIdx >= focusableContainers.length) {
          return false;
        }
        if (nextIdx === 0) {
          return this.focusGridHeader();
        }
        return this.focusController.focusInto(focusableContainers[nextIdx]);
      };
      GridCore2.prototype.focusInnerElement = function(fromBottom) {
        var focusableContainers = this.getFocusableContainers();
        if (fromBottom) {
          if (focusableContainers.length > 1) {
            return this.focusController.focusInto(last(focusableContainers));
          }
          var lastColumn = last(this.columnController.getAllDisplayedColumns());
          if (this.focusController.focusGridView(lastColumn, true)) {
            return true;
          }
        }
        return this.focusGridHeader();
      };
      GridCore2.prototype.focusGridHeader = function() {
        var firstColumn = this.columnController.getAllDisplayedColumns()[0];
        if (!firstColumn) {
          return false;
        }
        if (firstColumn.getParent()) {
          firstColumn = this.columnController.getColumnGroupAtLevel(firstColumn, 0);
        }
        this.focusController.focusHeaderPosition({ headerRowIndex: 0, column: firstColumn });
        return true;
      };
      GridCore2.prototype.onGridSizeChanged = function() {
        var event = {
          type: Events.EVENT_GRID_SIZE_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi,
          clientWidth: this.eGridDiv.clientWidth,
          clientHeight: this.eGridDiv.clientHeight
        };
        this.eventService.dispatchEvent(event);
      };
      GridCore2.prototype.addRtlSupport = function() {
        var cssClass = this.gridOptionsWrapper.isEnableRtl() ? "ag-rtl" : "ag-ltr";
        addCssClass(this.getGui(), cssClass);
      };
      GridCore2.prototype.getRootGui = function() {
        return this.getGui();
      };
      GridCore2.prototype.isSideBarVisible = function() {
        if (!this.sideBarComp) {
          return false;
        }
        return this.sideBarComp.isDisplayed();
      };
      GridCore2.prototype.setSideBarVisible = function(show) {
        if (!this.sideBarComp) {
          if (show) {
            console.warn("ag-Grid: sideBar is not loaded");
          }
          return;
        }
        this.sideBarComp.setDisplayed(show);
      };
      GridCore2.prototype.setSideBarPosition = function(position) {
        if (!this.sideBarComp) {
          console.warn("ag-Grid: sideBar is not loaded");
          return;
        }
        this.sideBarComp.setSideBarPosition(position);
      };
      GridCore2.prototype.closeToolPanel = function() {
        if (!this.sideBarComp) {
          console.warn("ag-Grid: toolPanel is only available in ag-Grid Enterprise");
          return;
        }
        this.sideBarComp.close();
      };
      GridCore2.prototype.getSideBar = function() {
        return this.gridOptions.sideBar;
      };
      GridCore2.prototype.getToolPanelInstance = function(key) {
        if (!this.sideBarComp) {
          console.warn("ag-Grid: toolPanel is only available in ag-Grid Enterprise");
          return;
        }
        return this.sideBarComp.getToolPanelInstance(key);
      };
      GridCore2.prototype.refreshSideBar = function() {
        if (this.sideBarComp) {
          this.sideBarComp.refresh();
        }
      };
      GridCore2.prototype.setSideBar = function(def) {
        if (!this.sideBarComp) {
          return;
        }
        this.eRootWrapperBody.removeChild(this.sideBarComp.getGui());
        this.gridOptions.sideBar = SideBarDefParser.parse(def);
        this.sideBarComp.reset();
        this.eRootWrapperBody.appendChild(this.sideBarComp.getGui());
      };
      GridCore2.prototype.getOpenedToolPanel = function() {
        if (!this.sideBarComp) {
          return null;
        }
        return this.sideBarComp.openedItem();
      };
      GridCore2.prototype.openToolPanel = function(key) {
        if (!this.sideBarComp) {
          console.warn("ag-Grid: toolPanel is only available in ag-Grid Enterprise");
          return;
        }
        this.sideBarComp.openToolPanel(key);
      };
      GridCore2.prototype.isToolPanelShowing = function() {
        return this.sideBarComp.isToolPanelShowing();
      };
      GridCore2.prototype.destroy = function() {
        this.logger.log("Grid DOM removed");
        _super.prototype.destroy.call(this);
      };
      GridCore2.prototype.ensureNodeVisible = function(comparator, position) {
        if (position === void 0) {
          position = null;
        }
        if (this.doingVirtualPaging) {
          throw new Error("Cannot use ensureNodeVisible when doing virtual paging, as we cannot check rows that are not in memory");
        }
        var rowCount = this.rowModel.getRowCount();
        var comparatorIsAFunction = typeof comparator === "function";
        var indexToSelect = -1;
        for (var i = 0; i < rowCount; i++) {
          var node = this.rowModel.getRow(i);
          if (comparatorIsAFunction) {
            if (comparator(node)) {
              indexToSelect = i;
              break;
            }
          } else {
            if (comparator === node || comparator === node.data) {
              indexToSelect = i;
              break;
            }
          }
        }
        if (indexToSelect >= 0) {
          this.gridPanel.ensureIndexVisible(indexToSelect, position);
        }
      };
      GridCore2.prototype.onTabKeyDown = function() {
      };
      __decorate$17([
        Autowired("gridOptions")
      ], GridCore2.prototype, "gridOptions", void 0);
      __decorate$17([
        Autowired("gridOptionsWrapper")
      ], GridCore2.prototype, "gridOptionsWrapper", void 0);
      __decorate$17([
        Autowired("rowModel")
      ], GridCore2.prototype, "rowModel", void 0);
      __decorate$17([
        Autowired("resizeObserverService")
      ], GridCore2.prototype, "resizeObserverService", void 0);
      __decorate$17([
        Autowired("rowRenderer")
      ], GridCore2.prototype, "rowRenderer", void 0);
      __decorate$17([
        Autowired("filterManager")
      ], GridCore2.prototype, "filterManager", void 0);
      __decorate$17([
        Autowired("eGridDiv")
      ], GridCore2.prototype, "eGridDiv", void 0);
      __decorate$17([
        Autowired("$scope")
      ], GridCore2.prototype, "$scope", void 0);
      __decorate$17([
        Autowired("quickFilterOnScope")
      ], GridCore2.prototype, "quickFilterOnScope", void 0);
      __decorate$17([
        Autowired("popupService")
      ], GridCore2.prototype, "popupService", void 0);
      __decorate$17([
        Autowired("columnController")
      ], GridCore2.prototype, "columnController", void 0);
      __decorate$17([
        Autowired("loggerFactory")
      ], GridCore2.prototype, "loggerFactory", void 0);
      __decorate$17([
        Autowired("columnApi")
      ], GridCore2.prototype, "columnApi", void 0);
      __decorate$17([
        Autowired("gridApi")
      ], GridCore2.prototype, "gridApi", void 0);
      __decorate$17([
        Optional("clipboardService")
      ], GridCore2.prototype, "clipboardService", void 0);
      __decorate$17([
        RefSelector("gridPanel")
      ], GridCore2.prototype, "gridPanel", void 0);
      __decorate$17([
        RefSelector("sideBar")
      ], GridCore2.prototype, "sideBarComp", void 0);
      __decorate$17([
        RefSelector("rootWrapperBody")
      ], GridCore2.prototype, "eRootWrapperBody", void 0);
      return GridCore2;
    }(ManagedFocusComponent);
    var __extends$19 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$18 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var StandardMenuFactory = function(_super) {
      __extends$19(StandardMenuFactory2, _super);
      function StandardMenuFactory2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      StandardMenuFactory2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
      };
      StandardMenuFactory2.prototype.hideActiveMenu = function() {
        if (this.hidePopup) {
          this.hidePopup();
        }
      };
      StandardMenuFactory2.prototype.showMenuAfterMouseEvent = function(column, mouseEvent) {
        var _this = this;
        this.showPopup(column, function(eMenu) {
          _this.popupService.positionPopupUnderMouseEvent({
            column,
            type: "columnMenu",
            mouseEvent,
            ePopup: eMenu
          });
        }, mouseEvent.target);
      };
      StandardMenuFactory2.prototype.showMenuAfterButtonClick = function(column, eventSource) {
        var _this = this;
        this.showPopup(column, function(eMenu) {
          _this.popupService.positionPopupUnderComponent({
            type: "columnMenu",
            eventSource,
            ePopup: eMenu,
            keepWithinBounds: true,
            column
          });
        }, eventSource);
      };
      StandardMenuFactory2.prototype.showPopup = function(column, positionCallback, eventSource) {
        var _this = this;
        var filterWrapper = this.filterManager.getOrCreateFilterWrapper(column, "COLUMN_MENU");
        var eMenu = document.createElement("div");
        eMenu.setAttribute("role", "presentation");
        addCssClass(eMenu, "ag-menu");
        this.tabListener = this.addManagedListener(eMenu, "keydown", function(e) {
          return _this.trapFocusWithin(e, eMenu);
        });
        filterWrapper.guiPromise.then(function(gui) {
          return eMenu.appendChild(gui);
        });
        var hidePopup;
        var bodyScrollListener = function(event) {
          if (event.direction === "horizontal") {
            hidePopup();
          }
        };
        this.eventService.addEventListener("bodyScroll", bodyScrollListener);
        var closedCallback = function(e) {
          _this.eventService.removeEventListener("bodyScroll", bodyScrollListener);
          column.setMenuVisible(false, "contextMenu");
          var isKeyboardEvent = e instanceof KeyboardEvent;
          if (_this.tabListener) {
            _this.tabListener = _this.tabListener();
          }
          if (isKeyboardEvent && eventSource && isVisible(eventSource)) {
            var focusableEl = _this.focusController.findTabbableParent(eventSource);
            if (focusableEl) {
              focusableEl.focus();
            }
          }
        };
        hidePopup = this.popupService.addPopup({
          modal: true,
          eChild: eMenu,
          closeOnEsc: true,
          closedCallback
        });
        filterWrapper.filterPromise.then(function(filter2) {
          positionCallback(eMenu);
          if (filter2.afterGuiAttached) {
            filter2.afterGuiAttached({ container: "columnMenu", hidePopup });
          }
        });
        this.hidePopup = hidePopup;
        column.setMenuVisible(true, "contextMenu");
      };
      StandardMenuFactory2.prototype.trapFocusWithin = function(e, menu) {
        if (e.keyCode !== KeyCode.TAB || e.defaultPrevented || this.focusController.findNextFocusableElement(menu, false, e.shiftKey)) {
          return;
        }
        e.preventDefault();
        this.focusController.focusInto(menu, e.shiftKey);
      };
      StandardMenuFactory2.prototype.isMenuEnabled = function(column) {
        return column.isFilterAllowed();
      };
      __decorate$18([
        Autowired("filterManager")
      ], StandardMenuFactory2.prototype, "filterManager", void 0);
      __decorate$18([
        Autowired("popupService")
      ], StandardMenuFactory2.prototype, "popupService", void 0);
      __decorate$18([
        Autowired("focusController")
      ], StandardMenuFactory2.prototype, "focusController", void 0);
      StandardMenuFactory2 = __decorate$18([
        Bean("menuFactory")
      ], StandardMenuFactory2);
      return StandardMenuFactory2;
    }(BeanStub);
    var __extends$1a = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$19 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DragService = function(_super) {
      __extends$1a(DragService2, _super);
      function DragService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dragEndFunctions = [];
        _this.dragSources = [];
        return _this;
      }
      DragService2.prototype.init = function() {
        this.logger = this.loggerFactory.create("DragService");
      };
      DragService2.prototype.removeAllListeners = function() {
        this.dragSources.forEach(this.removeListener.bind(this));
        this.dragSources.length = 0;
      };
      DragService2.prototype.removeListener = function(dragSourceAndListener) {
        var element = dragSourceAndListener.dragSource.eElement;
        var mouseDownListener = dragSourceAndListener.mouseDownListener;
        element.removeEventListener("mousedown", mouseDownListener);
        if (dragSourceAndListener.touchEnabled) {
          var touchStartListener = dragSourceAndListener.touchStartListener;
          element.removeEventListener("touchstart", touchStartListener, { passive: true });
        }
      };
      DragService2.prototype.removeDragSource = function(params) {
        var dragSourceAndListener = find(this.dragSources, function(item) {
          return item.dragSource === params;
        });
        if (!dragSourceAndListener) {
          return;
        }
        this.removeListener(dragSourceAndListener);
        removeFromArray(this.dragSources, dragSourceAndListener);
      };
      DragService2.prototype.setNoSelectToBody = function(noSelect) {
        var eDocument = this.gridOptionsWrapper.getDocument();
        var eBody = eDocument.querySelector("body");
        if (exists(eBody)) {
          addOrRemoveCssClass(eBody, "ag-unselectable", noSelect);
        }
      };
      DragService2.prototype.isDragging = function() {
        return this.dragging;
      };
      DragService2.prototype.addDragSource = function(params, includeTouch) {
        if (includeTouch === void 0) {
          includeTouch = false;
        }
        var mouseListener = this.onMouseDown.bind(this, params);
        params.eElement.addEventListener("mousedown", mouseListener);
        var touchListener = null;
        var suppressTouch = this.gridOptionsWrapper.isSuppressTouch();
        if (includeTouch && !suppressTouch) {
          touchListener = this.onTouchStart.bind(this, params);
          params.eElement.addEventListener("touchstart", touchListener, { passive: true });
        }
        this.dragSources.push({
          dragSource: params,
          mouseDownListener: mouseListener,
          touchStartListener: touchListener,
          touchEnabled: includeTouch
        });
      };
      DragService2.prototype.onTouchStart = function(params, touchEvent) {
        var _this = this;
        this.currentDragParams = params;
        this.dragging = false;
        var touch = touchEvent.touches[0];
        this.touchLastTime = touch;
        this.touchStart = touch;
        var touchMoveEvent = function(e) {
          return _this.onTouchMove(e, params.eElement);
        };
        var touchEndEvent = function(e) {
          return _this.onTouchUp(e, params.eElement);
        };
        var documentTouchMove = function(e) {
          if (e.cancelable) {
            e.preventDefault();
          }
        };
        var target = params.eElement;
        var events = [
          { target: document, type: "touchmove", listener: documentTouchMove, options: { passive: false } },
          { target, type: "touchmove", listener: touchMoveEvent, options: { passive: true } },
          { target, type: "touchend", listener: touchEndEvent, options: { passive: true } },
          { target, type: "touchcancel", listener: touchEndEvent, options: { passive: true } }
        ];
        this.addTemporaryEvents(events);
        if (params.dragStartPixels === 0) {
          this.onCommonMove(touch, this.touchStart, params.eElement);
        }
      };
      DragService2.prototype.onMouseDown = function(params, mouseEvent) {
        var _this = this;
        var e = mouseEvent;
        if (params.skipMouseEvent && params.skipMouseEvent(mouseEvent)) {
          return;
        }
        if (e._alreadyProcessedByDragService) {
          return;
        }
        e._alreadyProcessedByDragService = true;
        if (mouseEvent.button !== 0) {
          return;
        }
        this.currentDragParams = params;
        this.dragging = false;
        this.mouseStartEvent = mouseEvent;
        var eDocument = this.gridOptionsWrapper.getDocument();
        this.setNoSelectToBody(true);
        var mouseMoveEvent = function(e2, el) {
          return _this.onMouseMove(e2, params.eElement);
        };
        var mouseUpEvent = function(e2, el) {
          return _this.onMouseUp(e2, params.eElement);
        };
        var contextEvent = function(e2) {
          return e2.preventDefault();
        };
        var target = eDocument;
        var events = [
          { target, type: "mousemove", listener: mouseMoveEvent },
          { target, type: "mouseup", listener: mouseUpEvent },
          { target, type: "contextmenu", listener: contextEvent }
        ];
        this.addTemporaryEvents(events);
        if (params.dragStartPixels === 0) {
          this.onMouseMove(mouseEvent, params.eElement);
        }
      };
      DragService2.prototype.addTemporaryEvents = function(events) {
        events.forEach(function(currentEvent) {
          var target = currentEvent.target, type = currentEvent.type, listener = currentEvent.listener, options = currentEvent.options;
          target.addEventListener(type, listener, options);
        });
        this.dragEndFunctions.push(function() {
          events.forEach(function(currentEvent) {
            var target = currentEvent.target, type = currentEvent.type, listener = currentEvent.listener, options = currentEvent.options;
            target.removeEventListener(type, listener, options);
          });
        });
      };
      DragService2.prototype.isEventNearStartEvent = function(currentEvent, startEvent) {
        var dragStartPixels = this.currentDragParams.dragStartPixels;
        var requiredPixelDiff = exists(dragStartPixels) ? dragStartPixels : 4;
        return areEventsNear(currentEvent, startEvent, requiredPixelDiff);
      };
      DragService2.prototype.getFirstActiveTouch = function(touchList) {
        for (var i = 0; i < touchList.length; i++) {
          if (touchList[i].identifier === this.touchStart.identifier) {
            return touchList[i];
          }
        }
        return null;
      };
      DragService2.prototype.onCommonMove = function(currentEvent, startEvent, el) {
        if (!this.dragging) {
          if (!this.dragging && this.isEventNearStartEvent(currentEvent, startEvent)) {
            return;
          }
          this.dragging = true;
          var event_1 = {
            type: Events.EVENT_DRAG_STARTED,
            api: this.gridApi,
            columnApi: this.columnApi,
            target: el
          };
          this.eventService.dispatchEvent(event_1);
          this.currentDragParams.onDragStart(startEvent);
          this.currentDragParams.onDragging(startEvent);
        }
        this.currentDragParams.onDragging(currentEvent);
      };
      DragService2.prototype.onTouchMove = function(touchEvent, el) {
        var touch = this.getFirstActiveTouch(touchEvent.touches);
        if (!touch) {
          return;
        }
        this.onCommonMove(touch, this.touchStart, el);
      };
      DragService2.prototype.onMouseMove = function(mouseEvent, el) {
        this.onCommonMove(mouseEvent, this.mouseStartEvent, el);
      };
      DragService2.prototype.onTouchUp = function(touchEvent, el) {
        var touch = this.getFirstActiveTouch(touchEvent.changedTouches);
        if (!touch) {
          touch = this.touchLastTime;
        }
        this.onUpCommon(touch, el);
      };
      DragService2.prototype.onMouseUp = function(mouseEvent, el) {
        this.onUpCommon(mouseEvent, el);
      };
      DragService2.prototype.onUpCommon = function(eventOrTouch, el) {
        if (this.dragging) {
          this.dragging = false;
          this.currentDragParams.onDragStop(eventOrTouch);
          var event_2 = {
            type: Events.EVENT_DRAG_STOPPED,
            api: this.gridApi,
            columnApi: this.columnApi,
            target: el
          };
          this.eventService.dispatchEvent(event_2);
        }
        this.setNoSelectToBody(false);
        this.mouseStartEvent = null;
        this.touchStart = null;
        this.touchLastTime = null;
        this.currentDragParams = null;
        this.dragEndFunctions.forEach(function(func) {
          return func();
        });
        this.dragEndFunctions.length = 0;
      };
      __decorate$19([
        Autowired("loggerFactory")
      ], DragService2.prototype, "loggerFactory", void 0);
      __decorate$19([
        Autowired("gridOptionsWrapper")
      ], DragService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$19([
        Autowired("columnApi")
      ], DragService2.prototype, "columnApi", void 0);
      __decorate$19([
        Autowired("gridApi")
      ], DragService2.prototype, "gridApi", void 0);
      __decorate$19([
        PostConstruct
      ], DragService2.prototype, "init", null);
      __decorate$19([
        PreDestroy
      ], DragService2.prototype, "removeAllListeners", null);
      DragService2 = __decorate$19([
        Bean("dragService")
      ], DragService2);
      return DragService2;
    }(BeanStub);
    var __extends$1b = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1a = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SortController = function(_super) {
      __extends$1b(SortController2, _super);
      function SortController2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getSortModel = function() {
          return _this.getColumnsWithSortingOrdered().map(function(column) {
            return {
              colId: column.getColId(),
              sort: column.getSort()
            };
          });
        };
        return _this;
      }
      SortController_1 = SortController2;
      SortController2.prototype.progressSort = function(column, multiSort, source) {
        if (source === void 0) {
          source = "api";
        }
        var nextDirection = this.getNextSortDirection(column);
        this.setSortForColumn(column, nextDirection, multiSort, source);
      };
      SortController2.prototype.setSortForColumn = function(column, sort, multiSort, source) {
        if (source === void 0) {
          source = "api";
        }
        if (sort !== Constants.SORT_ASC && sort !== Constants.SORT_DESC) {
          sort = null;
        }
        column.setSort(sort, source);
        var doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort();
        if (!doingMultiSort) {
          this.clearSortBarThisColumn(column, source);
        }
        this.updateSortIndex(column);
        this.dispatchSortChangedEvents();
      };
      SortController2.prototype.updateSortIndex = function(lastColToChange) {
        var allSortedCols = this.getColumnsWithSortingOrdered();
        var sortIndex = 0;
        allSortedCols.forEach(function(col) {
          if (col !== lastColToChange) {
            col.setSortIndex(sortIndex);
            sortIndex++;
          }
        });
        if (lastColToChange.getSort()) {
          lastColToChange.setSortIndex(sortIndex);
        }
        var allCols = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
        allCols.filter(function(col) {
          return col.getSort() == null;
        }).forEach(function(col) {
          return col.setSortIndex(void 0);
        });
      };
      SortController2.prototype.onSortChanged = function() {
        this.dispatchSortChangedEvents();
      };
      SortController2.prototype.isSortActive = function() {
        var allCols = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
        var sortedCols = allCols.filter(function(column) {
          return !!column.getSort();
        });
        return sortedCols && sortedCols.length > 0;
      };
      SortController2.prototype.dispatchSortChangedEvents = function() {
        var event = {
          type: Events.EVENT_SORT_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
      };
      SortController2.prototype.clearSortBarThisColumn = function(columnToSkip, source) {
        this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach(function(columnToClear) {
          if (!(columnToClear === columnToSkip)) {
            columnToClear.setSort(void 0, source);
          }
        });
      };
      SortController2.prototype.getNextSortDirection = function(column) {
        var sortingOrder;
        if (column.getColDef().sortingOrder) {
          sortingOrder = column.getColDef().sortingOrder;
        } else if (this.gridOptionsWrapper.getSortingOrder()) {
          sortingOrder = this.gridOptionsWrapper.getSortingOrder();
        } else {
          sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;
        }
        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {
          console.warn("ag-grid: sortingOrder must be an array with at least one element, currently it's " + sortingOrder);
          return null;
        }
        var currentIndex = sortingOrder.indexOf(column.getSort());
        var notInArray = currentIndex < 0;
        var lastItemInArray = currentIndex == sortingOrder.length - 1;
        var result;
        if (notInArray || lastItemInArray) {
          result = sortingOrder[0];
        } else {
          result = sortingOrder[currentIndex + 1];
        }
        if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {
          console.warn("ag-grid: invalid sort type " + result);
          return null;
        }
        return result;
      };
      SortController2.prototype.getColumnsWithSortingOrdered = function() {
        var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
        var columnsWithSorting = allColumnsIncludingAuto.filter(function(column) {
          return !!column.getSort();
        });
        columnsWithSorting.sort(function(a, b) {
          return a.getSortIndex() - b.getSortIndex();
        });
        return columnsWithSorting;
      };
      SortController2.prototype.getSortForRowController = function() {
        return this.getColumnsWithSortingOrdered().map(function(column) {
          var isAscending = column.getSort() === Constants.SORT_ASC;
          return {
            inverter: isAscending ? 1 : -1,
            column
          };
        });
      };
      var SortController_1;
      SortController2.DEFAULT_SORTING_ORDER = [Constants.SORT_ASC, Constants.SORT_DESC, null];
      __decorate$1a([
        Autowired("gridOptionsWrapper")
      ], SortController2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1a([
        Autowired("columnController")
      ], SortController2.prototype, "columnController", void 0);
      __decorate$1a([
        Autowired("columnApi")
      ], SortController2.prototype, "columnApi", void 0);
      __decorate$1a([
        Autowired("gridApi")
      ], SortController2.prototype, "gridApi", void 0);
      SortController2 = SortController_1 = __decorate$1a([
        Bean("sortController")
      ], SortController2);
      return SortController2;
    }(BeanStub);
    var __extends$1c = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1b = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FocusController = function(_super) {
      __extends$1c(FocusController2, _super);
      function FocusController2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.keyboardFocusActive = false;
        return _this;
      }
      FocusController_1 = FocusController2;
      FocusController2.prototype.init = function() {
        var eDocument = this.gridOptionsWrapper.getDocument();
        var clearFocusedCellListener = this.clearFocusedCell.bind(this);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, clearFocusedCellListener);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnEverythingChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, clearFocusedCellListener);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, clearFocusedCellListener);
        this.addManagedListener(eDocument, "keydown", this.activateKeyboardMode.bind(this));
        this.addManagedListener(eDocument, "mousedown", this.activateMouseMode.bind(this));
      };
      FocusController2.prototype.registerGridCore = function(gridCore) {
        this.gridCore = gridCore;
      };
      FocusController2.prototype.onColumnEverythingChanged = function() {
        if (this.focusedCellPosition) {
          var col = this.focusedCellPosition.column;
          var colFromColumnController = this.columnController.getGridColumn(col.getId());
          if (col !== colFromColumnController) {
            this.clearFocusedCell();
          }
        }
      };
      FocusController2.prototype.isKeyboardFocus = function() {
        return this.keyboardFocusActive;
      };
      FocusController2.prototype.activateMouseMode = function() {
        if (!this.keyboardFocusActive) {
          return;
        }
        this.keyboardFocusActive = false;
        this.eventService.dispatchEvent({ type: Events.EVENT_MOUSE_FOCUS });
      };
      FocusController2.prototype.activateKeyboardMode = function() {
        if (this.keyboardFocusActive) {
          return;
        }
        this.keyboardFocusActive = true;
        this.eventService.dispatchEvent({ type: Events.EVENT_KEYBOARD_FOCUS });
      };
      FocusController2.prototype.getFocusCellToUseAfterRefresh = function() {
        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh() || !this.focusedCellPosition) {
          return null;
        }
        if (!this.getGridCellForDomElement(document.activeElement)) {
          return null;
        }
        return this.focusedCellPosition;
      };
      FocusController2.prototype.getGridCellForDomElement = function(eBrowserCell) {
        var ePointer = eBrowserCell;
        while (ePointer) {
          var cellComp = this.gridOptionsWrapper.getDomData(ePointer, CellComp.DOM_DATA_KEY_CELL_COMP);
          if (cellComp) {
            return cellComp.getCellPosition();
          }
          ePointer = ePointer.parentNode;
        }
        return null;
      };
      FocusController2.prototype.clearFocusedCell = function() {
        this.focusedCellPosition = null;
        this.onCellFocused(false);
      };
      FocusController2.prototype.getFocusedCell = function() {
        return this.focusedCellPosition;
      };
      FocusController2.prototype.setFocusedCell = function(rowIndex, colKey, floating, forceBrowserFocus) {
        if (forceBrowserFocus === void 0) {
          forceBrowserFocus = false;
        }
        var gridColumn = this.columnController.getGridColumn(colKey);
        if (!gridColumn) {
          this.focusedCellPosition = null;
          return;
        }
        this.focusedCellPosition = { rowIndex, rowPinned: makeNull(floating), column: makeNull(gridColumn) };
        this.onCellFocused(forceBrowserFocus);
      };
      FocusController2.prototype.isCellFocused = function(cellPosition) {
        if (this.focusedCellPosition == null) {
          return false;
        }
        return this.focusedCellPosition.column === cellPosition.column && this.isRowFocused(cellPosition.rowIndex, cellPosition.rowPinned);
      };
      FocusController2.prototype.isRowNodeFocused = function(rowNode) {
        return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);
      };
      FocusController2.prototype.isHeaderWrapperFocused = function(headerWrapper) {
        if (this.focusedHeaderPosition == null) {
          return false;
        }
        var column = headerWrapper.getColumn();
        var headerRowIndex = headerWrapper.getParentComponent().getRowIndex();
        var pinned = headerWrapper.getPinned();
        var _a = this.focusedHeaderPosition, focusedColumn = _a.column, focusedHeaderRowIndex = _a.headerRowIndex;
        return column === focusedColumn && headerRowIndex === focusedHeaderRowIndex && pinned == focusedColumn.getPinned();
      };
      FocusController2.prototype.clearFocusedHeader = function() {
        this.focusedHeaderPosition = null;
      };
      FocusController2.prototype.getFocusedHeader = function() {
        return this.focusedHeaderPosition;
      };
      FocusController2.prototype.setFocusedHeader = function(headerRowIndex, column) {
        this.focusedHeaderPosition = { headerRowIndex, column };
      };
      FocusController2.prototype.focusHeaderPosition = function(headerPosition, direction, fromTab, allowUserOverride, event) {
        if (direction === void 0) {
          direction = null;
        }
        if (fromTab === void 0) {
          fromTab = false;
        }
        if (allowUserOverride === void 0) {
          allowUserOverride = false;
        }
        if (allowUserOverride) {
          var gridOptionsWrapper = this.gridOptionsWrapper;
          var currentPosition = this.getFocusedHeader();
          var headerRowCount = this.headerNavigationService.getHeaderRowCount();
          if (fromTab) {
            var userFunc = gridOptionsWrapper.getTabToNextHeaderFunc();
            if (userFunc) {
              var params = {
                backwards: direction === "Before",
                previousHeaderPosition: currentPosition,
                nextHeaderPosition: headerPosition,
                headerRowCount
              };
              headerPosition = userFunc(params);
            }
          } else {
            var userFunc = gridOptionsWrapper.getNavigateToNextHeaderFunc();
            if (userFunc) {
              var params = {
                key: event.key,
                previousHeaderPosition: currentPosition,
                nextHeaderPosition: headerPosition,
                headerRowCount,
                event
              };
              headerPosition = userFunc(params);
            }
          }
        }
        if (!headerPosition) {
          return false;
        }
        if (headerPosition.headerRowIndex === -1) {
          return this.focusGridView(headerPosition.column);
        }
        this.headerNavigationService.scrollToColumn(headerPosition.column, direction);
        var childContainer = this.headerNavigationService.getHeaderContainer(headerPosition.column.getPinned());
        var rowComps = childContainer.getRowComps();
        var nextRowComp = rowComps[headerPosition.headerRowIndex];
        var headerComps = nextRowComp.getHeaderComps();
        var nextHeader = headerComps[headerPosition.column.getUniqueId()];
        if (nextHeader) {
          nextHeader.getFocusableElement().focus();
          return true;
        }
        return false;
      };
      FocusController2.prototype.isAnyCellFocused = function() {
        return !!this.focusedCellPosition;
      };
      FocusController2.prototype.isRowFocused = function(rowIndex, floating) {
        if (this.focusedCellPosition == null) {
          return false;
        }
        return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === makeNull(floating);
      };
      FocusController2.prototype.findFocusableElements = function(rootNode, exclude, onlyUnmanaged) {
        if (onlyUnmanaged === void 0) {
          onlyUnmanaged = false;
        }
        var focusableString = FocusController_1.FOCUSABLE_SELECTOR;
        var excludeString = FocusController_1.FOCUSABLE_EXCLUDE;
        if (exclude) {
          excludeString += ", " + exclude;
        }
        if (onlyUnmanaged) {
          excludeString += ', [tabindex="-1"]';
        }
        var nodes = Array.prototype.slice.apply(rootNode.querySelectorAll(focusableString));
        var excludeNodes = Array.prototype.slice.apply(rootNode.querySelectorAll(excludeString));
        if (!excludeNodes.length) {
          return nodes;
        }
        var diff = function(a, b) {
          return a.filter(function(element) {
            return b.indexOf(element) === -1;
          });
        };
        return diff(nodes, excludeNodes);
      };
      FocusController2.prototype.focusInto = function(rootNode, up, onlyUnmanaged) {
        if (up === void 0) {
          up = false;
        }
        if (onlyUnmanaged === void 0) {
          onlyUnmanaged = false;
        }
        var focusableElements = this.findFocusableElements(rootNode, null, onlyUnmanaged);
        var toFocus = up ? last(focusableElements) : focusableElements[0];
        if (toFocus) {
          toFocus.focus();
          return true;
        }
        return false;
      };
      FocusController2.prototype.findNextFocusableElement = function(rootNode, onlyManaged, backwards) {
        var focusable = this.findFocusableElements(rootNode, onlyManaged ? ':not([tabindex="-1"])' : null);
        var currentIndex;
        if (onlyManaged) {
          currentIndex = findIndex(focusable, function(el) {
            return el.contains(document.activeElement);
          });
        } else {
          currentIndex = focusable.indexOf(document.activeElement);
        }
        var nextIndex = currentIndex + (backwards ? -1 : 1);
        if (nextIndex < 0 || nextIndex >= focusable.length) {
          return null;
        }
        return focusable[nextIndex];
      };
      FocusController2.prototype.isFocusUnderManagedComponent = function(rootNode) {
        var managedContainers = rootNode.querySelectorAll("." + ManagedFocusComponent.FOCUS_MANAGED_CLASS);
        if (!managedContainers.length) {
          return false;
        }
        for (var i = 0; i < managedContainers.length; i++) {
          if (managedContainers[i].contains(document.activeElement)) {
            return true;
          }
        }
        return false;
      };
      FocusController2.prototype.findTabbableParent = function(node, limit) {
        if (limit === void 0) {
          limit = 5;
        }
        var counter = 0;
        while (node && getTabIndex(node) === null && ++counter <= limit) {
          node = node.parentElement;
        }
        if (getTabIndex(node) === null) {
          return null;
        }
        return node;
      };
      FocusController2.prototype.onCellFocused = function(forceBrowserFocus) {
        var event = {
          type: Events.EVENT_CELL_FOCUSED,
          forceBrowserFocus,
          rowIndex: null,
          column: null,
          floating: null,
          api: this.gridApi,
          columnApi: this.columnApi,
          rowPinned: null
        };
        if (this.focusedCellPosition) {
          event.rowIndex = this.focusedCellPosition.rowIndex;
          event.column = this.focusedCellPosition.column;
          event.rowPinned = this.focusedCellPosition.rowPinned;
        }
        this.eventService.dispatchEvent(event);
      };
      FocusController2.prototype.focusGridView = function(column, backwards) {
        var nextRow = backwards ? this.rowPositionUtils.getLastRow() : this.rowPositionUtils.getFirstRow();
        if (!nextRow) {
          return false;
        }
        var rowIndex = nextRow.rowIndex, rowPinned = nextRow.rowPinned;
        var focusedHeader = this.getFocusedHeader();
        if (!column) {
          column = focusedHeader.column;
        }
        if (rowIndex == null) {
          return false;
        }
        this.rowRenderer.ensureCellVisible({ rowIndex, column, rowPinned });
        this.setFocusedCell(rowIndex, column, makeNull(rowPinned), true);
        if (this.rangeController) {
          var cellPosition = { rowIndex, rowPinned, column };
          this.rangeController.setRangeToCell(cellPosition);
        }
        return true;
      };
      FocusController2.prototype.focusNextGridCoreContainer = function(backwards) {
        if (this.gridCore.focusNextInnerContainer(backwards)) {
          return true;
        }
        if (!backwards) {
          this.gridCore.forceFocusOutOfContainer();
        }
      };
      var FocusController_1;
      FocusController2.FOCUSABLE_SELECTOR = "[tabindex], input, select, button, textarea";
      FocusController2.FOCUSABLE_EXCLUDE = ".ag-hidden, .ag-hidden *, .ag-disabled, .ag-disabled *";
      __decorate$1b([
        Autowired("gridOptionsWrapper")
      ], FocusController2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1b([
        Autowired("columnController")
      ], FocusController2.prototype, "columnController", void 0);
      __decorate$1b([
        Autowired("headerNavigationService")
      ], FocusController2.prototype, "headerNavigationService", void 0);
      __decorate$1b([
        Autowired("columnApi")
      ], FocusController2.prototype, "columnApi", void 0);
      __decorate$1b([
        Autowired("gridApi")
      ], FocusController2.prototype, "gridApi", void 0);
      __decorate$1b([
        Autowired("rowRenderer")
      ], FocusController2.prototype, "rowRenderer", void 0);
      __decorate$1b([
        Autowired("rowPositionUtils")
      ], FocusController2.prototype, "rowPositionUtils", void 0);
      __decorate$1b([
        Optional("rangeController")
      ], FocusController2.prototype, "rangeController", void 0);
      __decorate$1b([
        PostConstruct
      ], FocusController2.prototype, "init", null);
      FocusController2 = FocusController_1 = __decorate$1b([
        Bean("focusController")
      ], FocusController2);
      return FocusController2;
    }(BeanStub);
    var __extends$1d = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1c = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var MouseEventService = function(_super) {
      __extends$1d(MouseEventService2, _super);
      function MouseEventService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();
        return _this;
      }
      MouseEventService_1 = MouseEventService2;
      MouseEventService2.prototype.init = function() {
        this.stampDomElementWithGridInstance();
      };
      MouseEventService2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
      };
      MouseEventService2.prototype.stampDomElementWithGridInstance = function() {
        this.eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;
      };
      MouseEventService2.prototype.getRenderedCellForEvent = function(event) {
        return getCellCompForEvent(this.gridOptionsWrapper, event);
      };
      MouseEventService2.prototype.isEventFromThisGrid = function(event) {
        var path = getEventPath(event);
        for (var i = 0; i < path.length; i++) {
          var element = path[i];
          var instanceId = element[MouseEventService_1.GRID_DOM_KEY];
          if (exists(instanceId)) {
            var eventFromThisGrid = instanceId === this.gridInstanceId;
            return eventFromThisGrid;
          }
        }
        return false;
      };
      MouseEventService2.prototype.getCellPositionForEvent = function(event) {
        var cellComp = this.getRenderedCellForEvent(event);
        return cellComp ? cellComp.getCellPosition() : null;
      };
      MouseEventService2.prototype.getNormalisedPosition = function(event) {
        var gridPanelHasScrolls = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;
        var e = event;
        var x;
        var y;
        if (e.clientX != null || e.clientY != null) {
          x = e.clientX;
          y = e.clientY;
        } else {
          x = e.x;
          y = e.y;
        }
        if (gridPanelHasScrolls) {
          var vRange = this.gridPanel.getVScrollPosition();
          var hRange = this.gridPanel.getHScrollPosition();
          x += hRange.left;
          y += vRange.top;
        }
        return { x, y };
      };
      var MouseEventService_1;
      MouseEventService2.gridInstanceSequence = new NumberSequence();
      MouseEventService2.GRID_DOM_KEY = "__ag_grid_instance";
      __decorate$1c([
        Autowired("gridOptionsWrapper")
      ], MouseEventService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1c([
        Autowired("eGridDiv")
      ], MouseEventService2.prototype, "eGridDiv", void 0);
      __decorate$1c([
        PostConstruct
      ], MouseEventService2.prototype, "init", null);
      MouseEventService2 = MouseEventService_1 = __decorate$1c([
        Bean("mouseEventService")
      ], MouseEventService2);
      return MouseEventService2;
    }(BeanStub);
    var __extends$1e = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1d = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var CellNavigationService = function(_super) {
      __extends$1e(CellNavigationService2, _super);
      function CellNavigationService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      CellNavigationService2.prototype.getNextCellToFocus = function(key, lastCellToFocus) {
        var pointer = lastCellToFocus;
        var finished = false;
        while (!finished) {
          switch (key) {
            case KeyCode.UP:
              pointer = this.getCellAbove(pointer);
              break;
            case KeyCode.DOWN:
              pointer = this.getCellBelow(pointer);
              break;
            case KeyCode.RIGHT:
              if (this.gridOptionsWrapper.isEnableRtl()) {
                pointer = this.getCellToLeft(pointer);
              } else {
                pointer = this.getCellToRight(pointer);
              }
              break;
            case KeyCode.LEFT:
              if (this.gridOptionsWrapper.isEnableRtl()) {
                pointer = this.getCellToRight(pointer);
              } else {
                pointer = this.getCellToLeft(pointer);
              }
              break;
            default:
              pointer = null;
              console.warn("ag-Grid: unknown key for navigation " + key);
              break;
          }
          if (pointer) {
            finished = this.isCellGoodToFocusOn(pointer);
          } else {
            finished = true;
          }
        }
        return pointer;
      };
      CellNavigationService2.prototype.isCellGoodToFocusOn = function(gridCell) {
        var column = gridCell.column;
        var rowNode;
        switch (gridCell.rowPinned) {
          case Constants.PINNED_TOP:
            rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);
            break;
          case Constants.PINNED_BOTTOM:
            rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);
            break;
          default:
            rowNode = this.rowModel.getRow(gridCell.rowIndex);
            break;
        }
        var suppressNavigable = column.isSuppressNavigable(rowNode);
        return !suppressNavigable;
      };
      CellNavigationService2.prototype.getCellToLeft = function(lastCell) {
        if (!lastCell) {
          return null;
        }
        var colToLeft = this.columnController.getDisplayedColBefore(lastCell.column);
        if (!colToLeft) {
          return null;
        }
        return {
          rowIndex: lastCell.rowIndex,
          column: colToLeft,
          rowPinned: lastCell.rowPinned
        };
      };
      CellNavigationService2.prototype.getCellToRight = function(lastCell) {
        if (!lastCell) {
          return null;
        }
        var colToRight = this.columnController.getDisplayedColAfter(lastCell.column);
        if (!colToRight) {
          return null;
        }
        return {
          rowIndex: lastCell.rowIndex,
          column: colToRight,
          rowPinned: lastCell.rowPinned
        };
      };
      CellNavigationService2.prototype.getRowBelow = function(rowPosition) {
        var index = rowPosition.rowIndex;
        var pinned = rowPosition.rowPinned;
        if (this.isLastRowInContainer(rowPosition)) {
          switch (pinned) {
            case Constants.PINNED_BOTTOM:
              return null;
            case Constants.PINNED_TOP:
              if (this.rowModel.isRowsToRender()) {
                return { rowIndex: this.paginationProxy.getPageFirstRow(), rowPinned: null };
              }
              if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {
                return { rowIndex: 0, rowPinned: Constants.PINNED_BOTTOM };
              }
              return null;
            default:
              if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {
                return { rowIndex: 0, rowPinned: Constants.PINNED_BOTTOM };
              }
              return null;
          }
        }
        return { rowIndex: index + 1, rowPinned: pinned };
      };
      CellNavigationService2.prototype.getCellBelow = function(lastCell) {
        if (!lastCell) {
          return null;
        }
        var rowBelow = this.getRowBelow(lastCell);
        if (rowBelow) {
          return {
            rowIndex: rowBelow.rowIndex,
            column: lastCell.column,
            rowPinned: rowBelow.rowPinned
          };
        }
        return null;
      };
      CellNavigationService2.prototype.isLastRowInContainer = function(rowPosition) {
        var pinned = rowPosition.rowPinned;
        var index = rowPosition.rowIndex;
        if (pinned === Constants.PINNED_TOP) {
          var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;
          return lastTopIndex <= index;
        }
        if (pinned === Constants.PINNED_BOTTOM) {
          var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;
          return lastBottomIndex <= index;
        }
        var lastBodyIndex = this.paginationProxy.getPageLastRow();
        return lastBodyIndex <= index;
      };
      CellNavigationService2.prototype.getRowAbove = function(rowPosition) {
        var index = rowPosition.rowIndex;
        var pinned = rowPosition.rowPinned;
        var isFirstRow = pinned ? index === 0 : index === this.paginationProxy.getPageFirstRow();
        if (isFirstRow) {
          if (pinned === Constants.PINNED_TOP) {
            return null;
          }
          if (!pinned) {
            if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {
              return this.getLastFloatingTopRow();
            }
            return null;
          }
          if (this.rowModel.isRowsToRender()) {
            return this.getLastBodyCell();
          }
          if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {
            return this.getLastFloatingTopRow();
          }
          return null;
        }
        return { rowIndex: index - 1, rowPinned: pinned };
      };
      CellNavigationService2.prototype.getCellAbove = function(lastCell) {
        if (!lastCell) {
          return null;
        }
        var rowAbove = this.getRowAbove({ rowIndex: lastCell.rowIndex, rowPinned: lastCell.rowPinned });
        if (rowAbove) {
          return {
            rowIndex: rowAbove.rowIndex,
            column: lastCell.column,
            rowPinned: rowAbove.rowPinned
          };
        }
        return null;
      };
      CellNavigationService2.prototype.getLastBodyCell = function() {
        var lastBodyRow = this.paginationProxy.getPageLastRow();
        return { rowIndex: lastBodyRow, rowPinned: null };
      };
      CellNavigationService2.prototype.getLastFloatingTopRow = function() {
        var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;
        return { rowIndex: lastFloatingRow, rowPinned: Constants.PINNED_TOP };
      };
      CellNavigationService2.prototype.getNextTabbedCell = function(gridCell, backwards) {
        if (backwards) {
          return this.getNextTabbedCellBackwards(gridCell);
        }
        return this.getNextTabbedCellForwards(gridCell);
      };
      CellNavigationService2.prototype.getNextTabbedCellForwards = function(gridCell) {
        var displayedColumns = this.columnController.getAllDisplayedColumns();
        var newRowIndex = gridCell.rowIndex;
        var newFloating = gridCell.rowPinned;
        var newColumn = this.columnController.getDisplayedColAfter(gridCell.column);
        if (!newColumn) {
          newColumn = displayedColumns[0];
          var rowBelow = this.getRowBelow(gridCell);
          if (missing(rowBelow)) {
            return null;
          }
          if (!rowBelow.rowPinned && !this.paginationProxy.isRowInPage(rowBelow)) {
            return null;
          }
          newRowIndex = rowBelow ? rowBelow.rowIndex : null;
          newFloating = rowBelow ? rowBelow.rowPinned : null;
        }
        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };
      };
      CellNavigationService2.prototype.getNextTabbedCellBackwards = function(gridCell) {
        var displayedColumns = this.columnController.getAllDisplayedColumns();
        var newRowIndex = gridCell.rowIndex;
        var newFloating = gridCell.rowPinned;
        var newColumn = this.columnController.getDisplayedColBefore(gridCell.column);
        if (!newColumn) {
          newColumn = last(displayedColumns);
          var rowAbove = this.getRowAbove({ rowIndex: gridCell.rowIndex, rowPinned: gridCell.rowPinned });
          if (missing(rowAbove)) {
            return null;
          }
          if (!rowAbove.rowPinned && !this.paginationProxy.isRowInPage(rowAbove)) {
            return null;
          }
          newRowIndex = rowAbove ? rowAbove.rowIndex : null;
          newFloating = rowAbove ? rowAbove.rowPinned : null;
        }
        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };
      };
      __decorate$1d([
        Autowired("columnController")
      ], CellNavigationService2.prototype, "columnController", void 0);
      __decorate$1d([
        Autowired("rowModel")
      ], CellNavigationService2.prototype, "rowModel", void 0);
      __decorate$1d([
        Autowired("pinnedRowModel")
      ], CellNavigationService2.prototype, "pinnedRowModel", void 0);
      __decorate$1d([
        Autowired("gridOptionsWrapper")
      ], CellNavigationService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1d([
        Autowired("paginationProxy")
      ], CellNavigationService2.prototype, "paginationProxy", void 0);
      CellNavigationService2 = __decorate$1d([
        Bean("cellNavigationService")
      ], CellNavigationService2);
      return CellNavigationService2;
    }(BeanStub);
    var __decorate$1e = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var CellRendererFactory = function() {
      function CellRendererFactory2() {
        this.cellRendererMap = {};
      }
      CellRendererFactory_1 = CellRendererFactory2;
      CellRendererFactory2.prototype.init = function() {
        this.cellRendererMap[CellRendererFactory_1.ANIMATE_SLIDE] = AnimateSlideCellRenderer;
        this.cellRendererMap[CellRendererFactory_1.ANIMATE_SHOW_CHANGE] = AnimateShowChangeCellRenderer;
        this.cellRendererMap[CellRendererFactory_1.GROUP] = GroupCellRenderer;
      };
      CellRendererFactory2.prototype.addCellRenderer = function(key, cellRenderer) {
        this.cellRendererMap[key] = cellRenderer;
      };
      CellRendererFactory2.prototype.getCellRenderer = function(key) {
        var result = this.cellRendererMap[key];
        if (missing(result)) {
          console.warn("ag-Grid: unable to find cellRenderer for key " + key);
          return null;
        }
        return result;
      };
      var CellRendererFactory_1;
      CellRendererFactory2.ANIMATE_SLIDE = "animateSlide";
      CellRendererFactory2.ANIMATE_SHOW_CHANGE = "animateShowChange";
      CellRendererFactory2.GROUP = "group";
      __decorate$1e([
        Autowired("gridOptionsWrapper")
      ], CellRendererFactory2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1e([
        Autowired("expressionService")
      ], CellRendererFactory2.prototype, "expressionService", void 0);
      __decorate$1e([
        Autowired("eventService")
      ], CellRendererFactory2.prototype, "eventService", void 0);
      __decorate$1e([
        PostConstruct
      ], CellRendererFactory2.prototype, "init", null);
      CellRendererFactory2 = CellRendererFactory_1 = __decorate$1e([
        Bean("cellRendererFactory")
      ], CellRendererFactory2);
      return CellRendererFactory2;
    }();
    var __extends$1f = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1f = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ValueFormatterService = function(_super) {
      __extends$1f(ValueFormatterService2, _super);
      function ValueFormatterService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ValueFormatterService2.prototype.formatValue = function(column, node, $scope, value, suppliedFormatter, useFormatterFromColumn) {
        if (useFormatterFromColumn === void 0) {
          useFormatterFromColumn = true;
        }
        var result = null;
        var formatter;
        var colDef = column.getColDef();
        if (suppliedFormatter) {
          formatter = suppliedFormatter;
        } else if (useFormatterFromColumn) {
          formatter = node && node.rowPinned && colDef.pinnedRowValueFormatter ? colDef.pinnedRowValueFormatter : colDef.valueFormatter;
        }
        if (formatter) {
          var params = {
            value,
            node,
            data: node ? node.data : null,
            colDef,
            column,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
          };
          params.$scope = $scope;
          result = this.expressionService.evaluate(formatter, params);
        } else if (colDef.refData) {
          return colDef.refData[value] || "";
        }
        if (result == null && Array.isArray(value)) {
          result = value.join(", ");
        }
        return result;
      };
      __decorate$1f([
        Autowired("gridOptionsWrapper")
      ], ValueFormatterService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1f([
        Autowired("expressionService")
      ], ValueFormatterService2.prototype, "expressionService", void 0);
      ValueFormatterService2 = __decorate$1f([
        Bean("valueFormatterService")
      ], ValueFormatterService2);
      return ValueFormatterService2;
    }(BeanStub);
    var __extends$1g = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgRadioButton = function(_super) {
      __extends$1g(AgRadioButton2, _super);
      function AgRadioButton2(config) {
        return _super.call(this, config, "ag-radio-button", "radio") || this;
      }
      AgRadioButton2.prototype.isSelected = function() {
        return this.eInput.checked;
      };
      AgRadioButton2.prototype.toggle = function() {
        if (!this.isSelected()) {
          this.setValue(true);
        }
      };
      AgRadioButton2.prototype.addInputListeners = function() {
        _super.prototype.addInputListeners.call(this);
        this.addManagedListener(this.eventService, Events.EVENT_CHECKBOX_CHANGED, this.onChange.bind(this));
      };
      AgRadioButton2.prototype.onChange = function(event) {
        if (event.selected && event.name && this.eInput.name && this.eInput.name === event.name && event.id && this.eInput.id !== event.id) {
          this.setValue(false, true);
        }
      };
      return AgRadioButton2;
    }(AgCheckbox);
    var VanillaFrameworkOverrides = function() {
      function VanillaFrameworkOverrides2() {
      }
      VanillaFrameworkOverrides2.prototype.setTimeout = function(action, timeout) {
        window.setTimeout(action, timeout);
      };
      VanillaFrameworkOverrides2.prototype.addEventListenerOutsideAngular = function(element, type, listener, useCapture) {
        element.addEventListener(type, listener, useCapture);
      };
      return VanillaFrameworkOverrides2;
    }();
    var __extends$1h = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1g = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ScrollVisibleService = function(_super) {
      __extends$1h(ScrollVisibleService2, _super);
      function ScrollVisibleService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ScrollVisibleService2.prototype.setScrollsVisible = function(params) {
        var atLeastOneDifferent = this.horizontalScrollShowing !== params.horizontalScrollShowing || this.verticalScrollShowing !== params.verticalScrollShowing;
        if (atLeastOneDifferent) {
          this.horizontalScrollShowing = params.horizontalScrollShowing;
          this.verticalScrollShowing = params.verticalScrollShowing;
          var event_1 = {
            type: Events.EVENT_SCROLL_VISIBILITY_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      ScrollVisibleService2.prototype.isHorizontalScrollShowing = function() {
        return this.horizontalScrollShowing;
      };
      ScrollVisibleService2.prototype.isVerticalScrollShowing = function() {
        return this.verticalScrollShowing;
      };
      __decorate$1g([
        Autowired("columnController")
      ], ScrollVisibleService2.prototype, "columnController", void 0);
      __decorate$1g([
        Autowired("columnApi")
      ], ScrollVisibleService2.prototype, "columnApi", void 0);
      __decorate$1g([
        Autowired("gridApi")
      ], ScrollVisibleService2.prototype, "gridApi", void 0);
      __decorate$1g([
        Autowired("gridOptionsWrapper")
      ], ScrollVisibleService2.prototype, "gridOptionsWrapper", void 0);
      ScrollVisibleService2 = __decorate$1g([
        Bean("scrollVisibleService")
      ], ScrollVisibleService2);
      return ScrollVisibleService2;
    }(BeanStub);
    var __extends$1i = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1h = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var StylingService = function(_super) {
      __extends$1i(StylingService2, _super);
      function StylingService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      StylingService2.prototype.processAllCellClasses = function(colDef, params, onApplicableClass, onNotApplicableClass) {
        this.processClassRules(colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);
        this.processStaticCellClasses(colDef, params, onApplicableClass);
      };
      StylingService2.prototype.processClassRules = function(classRules, params, onApplicableClass, onNotApplicableClass) {
        if (isNonNullObject(classRules)) {
          var classNames = Object.keys(classRules);
          for (var i = 0; i < classNames.length; i++) {
            var className = classNames[i];
            var rule = classRules[className];
            var resultOfRule = void 0;
            if (typeof rule === "string") {
              resultOfRule = this.expressionService.evaluate(rule, params);
            } else if (typeof rule === "function") {
              resultOfRule = rule(params);
            }
            if (resultOfRule) {
              onApplicableClass(className);
            } else if (onNotApplicableClass) {
              onNotApplicableClass(className);
            }
          }
        }
      };
      StylingService2.prototype.processStaticCellClasses = function(colDef, params, onApplicableClass) {
        var cellClass = colDef.cellClass;
        if (cellClass) {
          var classOrClasses = void 0;
          if (typeof colDef.cellClass === "function") {
            var cellClassFunc = colDef.cellClass;
            classOrClasses = cellClassFunc(params);
          } else {
            classOrClasses = colDef.cellClass;
          }
          if (typeof classOrClasses === "string") {
            onApplicableClass(classOrClasses);
          } else if (Array.isArray(classOrClasses)) {
            classOrClasses.forEach(function(cssClassItem) {
              onApplicableClass(cssClassItem);
            });
          }
        }
      };
      __decorate$1h([
        Autowired("expressionService")
      ], StylingService2.prototype, "expressionService", void 0);
      StylingService2 = __decorate$1h([
        Bean("stylingService")
      ], StylingService2);
      return StylingService2;
    }(BeanStub);
    var __extends$1j = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1i = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ColumnHoverService = function(_super) {
      __extends$1j(ColumnHoverService2, _super);
      function ColumnHoverService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ColumnHoverService2.prototype.setMouseOver = function(columns) {
        this.selectedColumns = columns;
        var event = {
          type: Events.EVENT_COLUMN_HOVER_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnHoverService2.prototype.clearMouseOver = function() {
        this.selectedColumns = null;
        var event = {
          type: Events.EVENT_COLUMN_HOVER_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnHoverService2.prototype.isHovered = function(column) {
        return this.selectedColumns && this.selectedColumns.indexOf(column) >= 0;
      };
      __decorate$1i([
        Autowired("columnApi")
      ], ColumnHoverService2.prototype, "columnApi", void 0);
      __decorate$1i([
        Autowired("gridApi")
      ], ColumnHoverService2.prototype, "gridApi", void 0);
      ColumnHoverService2 = __decorate$1i([
        Bean("columnHoverService")
      ], ColumnHoverService2);
      return ColumnHoverService2;
    }(BeanStub);
    var __extends$1k = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1j = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ColumnAnimationService = function(_super) {
      __extends$1k(ColumnAnimationService2, _super);
      function ColumnAnimationService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.executeNextFuncs = [];
        _this.executeLaterFuncs = [];
        _this.active = false;
        _this.animationThreadCount = 0;
        return _this;
      }
      ColumnAnimationService2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
      };
      ColumnAnimationService2.prototype.isActive = function() {
        return this.active;
      };
      ColumnAnimationService2.prototype.start = function() {
        if (this.active) {
          return;
        }
        if (this.gridOptionsWrapper.isSuppressColumnMoveAnimation()) {
          return;
        }
        if (this.gridOptionsWrapper.isEnableRtl()) {
          return;
        }
        this.ensureAnimationCssClassPresent();
        this.active = true;
      };
      ColumnAnimationService2.prototype.finish = function() {
        if (!this.active) {
          return;
        }
        this.flush();
        this.active = false;
      };
      ColumnAnimationService2.prototype.executeNextVMTurn = function(func) {
        if (this.active) {
          this.executeNextFuncs.push(func);
        } else {
          func();
        }
      };
      ColumnAnimationService2.prototype.executeLaterVMTurn = function(func) {
        if (this.active) {
          this.executeLaterFuncs.push(func);
        } else {
          func();
        }
      };
      ColumnAnimationService2.prototype.ensureAnimationCssClassPresent = function() {
        var _this = this;
        this.animationThreadCount++;
        var animationThreadCountCopy = this.animationThreadCount;
        this.gridPanel.setColumnMovingCss(true);
        this.executeLaterFuncs.push(function() {
          if (_this.animationThreadCount === animationThreadCountCopy) {
            _this.gridPanel.setColumnMovingCss(false);
          }
        });
      };
      ColumnAnimationService2.prototype.flush = function() {
        var nowFuncs = this.executeNextFuncs;
        this.executeNextFuncs = [];
        var waitFuncs = this.executeLaterFuncs;
        this.executeLaterFuncs = [];
        if (nowFuncs.length === 0 && waitFuncs.length === 0) {
          return;
        }
        window.setTimeout(function() {
          return nowFuncs.forEach(function(func) {
            return func();
          });
        }, 0);
        window.setTimeout(function() {
          return waitFuncs.forEach(function(func) {
            return func();
          });
        }, 300);
      };
      __decorate$1j([
        Autowired("gridOptionsWrapper")
      ], ColumnAnimationService2.prototype, "gridOptionsWrapper", void 0);
      ColumnAnimationService2 = __decorate$1j([
        Bean("columnAnimationService")
      ], ColumnAnimationService2);
      return ColumnAnimationService2;
    }(BeanStub);
    var __extends$1l = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1k = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AutoGroupColService = function(_super) {
      __extends$1l(AutoGroupColService2, _super);
      function AutoGroupColService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AutoGroupColService_1 = AutoGroupColService2;
      AutoGroupColService2.prototype.createAutoGroupColumns = function(rowGroupColumns) {
        var _this = this;
        var groupAutoColumns = [];
        var doingTreeData = this.gridOptionsWrapper.isTreeData();
        var doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();
        if (doingTreeData && doingMultiAutoColumn) {
          console.warn("ag-Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data");
          doingMultiAutoColumn = false;
        }
        if (doingMultiAutoColumn) {
          rowGroupColumns.forEach(function(rowGroupCol, index) {
            groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));
          });
        } else {
          groupAutoColumns.push(this.createOneAutoGroupColumn());
        }
        return groupAutoColumns;
      };
      AutoGroupColService2.prototype.createOneAutoGroupColumn = function(rowGroupCol, index) {
        var defaultAutoColDef = this.generateDefaultColDef(rowGroupCol);
        var colId;
        if (rowGroupCol) {
          colId = Constants.GROUP_AUTO_COLUMN_ID + "-" + rowGroupCol.getId();
        } else {
          colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_BUNDLE_ID;
        }
        var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
        mergeDeep(defaultAutoColDef, userAutoColDef);
        defaultAutoColDef = this.columnFactory.mergeColDefs(defaultAutoColDef);
        defaultAutoColDef.colId = colId;
        if (!this.gridOptionsWrapper.isTreeData()) {
          var noFieldOrValueGetter = missing(defaultAutoColDef.field) && missing(defaultAutoColDef.valueGetter) && missing(defaultAutoColDef.filterValueGetter);
          if (noFieldOrValueGetter) {
            defaultAutoColDef.filter = false;
          }
        }
        if (index && index > 0) {
          defaultAutoColDef.headerCheckboxSelection = false;
        }
        var newCol = new Column(defaultAutoColDef, null, colId, true);
        this.context.createBean(newCol);
        return newCol;
      };
      AutoGroupColService2.prototype.generateDefaultColDef = function(rowGroupCol) {
        var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        var defaultAutoColDef = {
          headerName: localeTextFunc("group", "Group")
        };
        var userHasProvidedGroupCellRenderer = userAutoColDef && (userAutoColDef.cellRenderer || userAutoColDef.cellRendererFramework);
        if (!userHasProvidedGroupCellRenderer) {
          defaultAutoColDef.cellRenderer = "agGroupCellRenderer";
        }
        if (rowGroupCol) {
          var rowGroupColDef = rowGroupCol.getColDef();
          assign(defaultAutoColDef, {
            headerName: this.columnController.getDisplayNameForColumn(rowGroupCol, "header"),
            headerValueGetter: rowGroupColDef.headerValueGetter
          });
          if (rowGroupColDef.cellRenderer) {
            assign(defaultAutoColDef, {
              cellRendererParams: {
                innerRenderer: rowGroupColDef.cellRenderer,
                innerRendererParams: rowGroupColDef.cellRendererParams
              }
            });
          }
          defaultAutoColDef.showRowGroup = rowGroupCol.getColId();
        } else {
          defaultAutoColDef.showRowGroup = true;
        }
        return defaultAutoColDef;
      };
      var AutoGroupColService_1;
      AutoGroupColService2.GROUP_AUTO_COLUMN_BUNDLE_ID = Constants.GROUP_AUTO_COLUMN_ID;
      __decorate$1k([
        Autowired("gridOptionsWrapper")
      ], AutoGroupColService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1k([
        Autowired("columnController")
      ], AutoGroupColService2.prototype, "columnController", void 0);
      __decorate$1k([
        Autowired("columnFactory")
      ], AutoGroupColService2.prototype, "columnFactory", void 0);
      AutoGroupColService2 = AutoGroupColService_1 = __decorate$1k([
        Bean("autoGroupColService")
      ], AutoGroupColService2);
      return AutoGroupColService2;
    }(BeanStub);
    var __extends$1m = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1l = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var PaginationProxy = function(_super) {
      __extends$1m(PaginationProxy2, _super);
      function PaginationProxy2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.currentPage = 0;
        _this.topDisplayedRowIndex = 0;
        _this.bottomDisplayedRowIndex = 0;
        _this.pixelOffset = 0;
        _this.masterRowCount = 0;
        return _this;
      }
      PaginationProxy2.prototype.postConstruct = function() {
        this.active = this.gridOptionsWrapper.isPagination();
        this.paginateChildRows = this.gridOptionsWrapper.isPaginateChildRows();
        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
        this.addManagedListener(this.gridOptionsWrapper, "paginationPageSize", this.onPaginationPageSizeChanged.bind(this));
        this.onModelUpdated();
      };
      PaginationProxy2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
        var res = this.rowModel.ensureRowHeightsValid(startPixel, endPixel, this.getPageFirstRow(), this.getPageLastRow());
        if (res) {
          this.calculatePages();
        }
        return res;
      };
      PaginationProxy2.prototype.onModelUpdated = function(modelUpdatedEvent) {
        this.calculatePages();
        var paginationChangedEvent = {
          type: Events.EVENT_PAGINATION_CHANGED,
          animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,
          newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,
          newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,
          keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(paginationChangedEvent);
      };
      PaginationProxy2.prototype.onPaginationPageSizeChanged = function() {
        this.calculatePages();
        var paginationChangedEvent = {
          type: Events.EVENT_PAGINATION_CHANGED,
          animate: false,
          newData: false,
          newPage: false,
          keepRenderedRows: true,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(paginationChangedEvent);
      };
      PaginationProxy2.prototype.goToPage = function(page) {
        if (!this.active || this.currentPage === page) {
          return;
        }
        this.currentPage = page;
        var event = {
          type: Events.EVENT_MODEL_UPDATED,
          animate: false,
          keepRenderedRows: false,
          newData: false,
          newPage: true,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.onModelUpdated(event);
      };
      PaginationProxy2.prototype.getPixelOffset = function() {
        return this.pixelOffset;
      };
      PaginationProxy2.prototype.getRow = function(index) {
        return this.rowModel.getRow(index);
      };
      PaginationProxy2.prototype.getRowNode = function(id) {
        return this.rowModel.getRowNode(id);
      };
      PaginationProxy2.prototype.getRowIndexAtPixel = function(pixel) {
        return this.rowModel.getRowIndexAtPixel(pixel);
      };
      PaginationProxy2.prototype.getCurrentPageHeight = function() {
        if (missing(this.topRowBounds) || missing(this.bottomRowBounds)) {
          return 0;
        }
        return Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);
      };
      PaginationProxy2.prototype.isRowPresent = function(rowNode) {
        if (!this.rowModel.isRowPresent(rowNode)) {
          return false;
        }
        var nodeIsInPage = rowNode.rowIndex >= this.topDisplayedRowIndex && rowNode.rowIndex <= this.bottomDisplayedRowIndex;
        return nodeIsInPage;
      };
      PaginationProxy2.prototype.isEmpty = function() {
        return this.rowModel.isEmpty();
      };
      PaginationProxy2.prototype.isRowsToRender = function() {
        return this.rowModel.isRowsToRender();
      };
      PaginationProxy2.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
        return this.rowModel.getNodesInRangeForSelection(firstInRange, lastInRange);
      };
      PaginationProxy2.prototype.forEachNode = function(callback) {
        return this.rowModel.forEachNode(callback);
      };
      PaginationProxy2.prototype.getType = function() {
        return this.rowModel.getType();
      };
      PaginationProxy2.prototype.getRowBounds = function(index) {
        var res = this.rowModel.getRowBounds(index);
        res.rowIndex = index;
        return res;
      };
      PaginationProxy2.prototype.getPageFirstRow = function() {
        return this.topRowBounds ? this.topRowBounds.rowIndex : -1;
      };
      PaginationProxy2.prototype.getPageLastRow = function() {
        return this.bottomRowBounds ? this.bottomRowBounds.rowIndex : -1;
      };
      PaginationProxy2.prototype.getRowCount = function() {
        return this.rowModel.getRowCount();
      };
      PaginationProxy2.prototype.getPageForIndex = function(index) {
        return Math.floor(index / this.pageSize);
      };
      PaginationProxy2.prototype.goToPageWithIndex = function(index) {
        if (!this.active) {
          return;
        }
        var pageNumber = this.getPageForIndex(index);
        this.goToPage(pageNumber);
      };
      PaginationProxy2.prototype.isRowInPage = function(row) {
        if (!this.active) {
          return true;
        }
        var rowPage = this.getPageForIndex(row.rowIndex);
        return rowPage === this.currentPage;
      };
      PaginationProxy2.prototype.isLastPageFound = function() {
        return this.rowModel.isLastRowFound();
      };
      PaginationProxy2.prototype.getCurrentPage = function() {
        return this.currentPage;
      };
      PaginationProxy2.prototype.goToNextPage = function() {
        this.goToPage(this.currentPage + 1);
      };
      PaginationProxy2.prototype.goToPreviousPage = function() {
        this.goToPage(this.currentPage - 1);
      };
      PaginationProxy2.prototype.goToFirstPage = function() {
        this.goToPage(0);
      };
      PaginationProxy2.prototype.goToLastPage = function() {
        var rowCount = this.rowModel.getRowCount();
        var lastPage = Math.floor(rowCount / this.pageSize);
        this.goToPage(lastPage);
      };
      PaginationProxy2.prototype.getPageSize = function() {
        return this.pageSize;
      };
      PaginationProxy2.prototype.getTotalPages = function() {
        return this.totalPages;
      };
      PaginationProxy2.prototype.setPageSize = function() {
        this.pageSize = this.gridOptionsWrapper.getPaginationPageSize();
        if (!(this.pageSize >= 1)) {
          this.pageSize = 100;
        }
      };
      PaginationProxy2.prototype.calculatePages = function() {
        if (this.active) {
          this.setPageSize();
          if (this.paginateChildRows) {
            this.calculatePagesAllRows();
          } else {
            this.calculatePagesMasterRowsOnly();
          }
        } else {
          this.calculatedPagesNotActive();
        }
        this.topRowBounds = this.rowModel.getRowBounds(this.topDisplayedRowIndex);
        if (this.topRowBounds) {
          this.topRowBounds.rowIndex = this.topDisplayedRowIndex;
        }
        this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomDisplayedRowIndex);
        if (this.bottomRowBounds) {
          this.bottomRowBounds.rowIndex = this.bottomDisplayedRowIndex;
        }
        this.setPixelOffset(exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0);
      };
      PaginationProxy2.prototype.setPixelOffset = function(value) {
        if (this.pixelOffset === value) {
          return;
        }
        this.pixelOffset = value;
        this.eventService.dispatchEvent({ type: Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED });
      };
      PaginationProxy2.prototype.setZeroRows = function() {
        this.masterRowCount = 0;
        this.topDisplayedRowIndex = 0;
        this.bottomDisplayedRowIndex = -1;
        this.currentPage = 0;
        this.totalPages = 0;
      };
      PaginationProxy2.prototype.calculatePagesMasterRowsOnly = function() {
        this.masterRowCount = this.rowModel.getTopLevelRowCount();
        if (this.masterRowCount <= 0) {
          this.setZeroRows();
          return;
        }
        var masterLastRowIndex = this.masterRowCount - 1;
        this.totalPages = Math.floor(masterLastRowIndex / this.pageSize) + 1;
        if (this.currentPage >= this.totalPages) {
          this.currentPage = this.totalPages - 1;
        }
        if (!isNumeric(this.currentPage) || this.currentPage < 0) {
          this.currentPage = 0;
        }
        var masterPageStartIndex = this.pageSize * this.currentPage;
        var masterPageEndIndex = this.pageSize * (this.currentPage + 1) - 1;
        if (masterPageEndIndex > masterLastRowIndex) {
          masterPageEndIndex = masterLastRowIndex;
        }
        this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex);
        if (masterPageEndIndex === masterLastRowIndex) {
          this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
        } else {
          var firstIndexNotToShow = this.rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1);
          this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;
        }
      };
      PaginationProxy2.prototype.getMasterRowCount = function() {
        return this.masterRowCount;
      };
      PaginationProxy2.prototype.calculatePagesAllRows = function() {
        this.masterRowCount = this.rowModel.getRowCount();
        if (this.masterRowCount === 0) {
          this.setZeroRows();
          return;
        }
        var maxRowIndex = this.masterRowCount - 1;
        this.totalPages = Math.floor(maxRowIndex / this.pageSize) + 1;
        if (this.currentPage >= this.totalPages) {
          this.currentPage = this.totalPages - 1;
        }
        if (!isNumeric(this.currentPage) || this.currentPage < 0) {
          this.currentPage = 0;
        }
        this.topDisplayedRowIndex = this.pageSize * this.currentPage;
        this.bottomDisplayedRowIndex = this.pageSize * (this.currentPage + 1) - 1;
        if (this.bottomDisplayedRowIndex > maxRowIndex) {
          this.bottomDisplayedRowIndex = maxRowIndex;
        }
      };
      PaginationProxy2.prototype.calculatedPagesNotActive = function() {
        this.pageSize = this.rowModel.getRowCount();
        this.totalPages = 1;
        this.currentPage = 0;
        this.topDisplayedRowIndex = 0;
        this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
      };
      __decorate$1l([
        Autowired("rowModel")
      ], PaginationProxy2.prototype, "rowModel", void 0);
      __decorate$1l([
        Autowired("gridOptionsWrapper")
      ], PaginationProxy2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1l([
        Autowired("columnApi")
      ], PaginationProxy2.prototype, "columnApi", void 0);
      __decorate$1l([
        Autowired("gridApi")
      ], PaginationProxy2.prototype, "gridApi", void 0);
      __decorate$1l([
        PostConstruct
      ], PaginationProxy2.prototype, "postConstruct", null);
      PaginationProxy2 = __decorate$1l([
        Bean("paginationProxy")
      ], PaginationProxy2);
      return PaginationProxy2;
    }(BeanStub);
    var __extends$1n = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1m = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var PaginationAutoPageSizeService = function(_super) {
      __extends$1n(PaginationAutoPageSizeService2, _super);
      function PaginationAutoPageSizeService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PaginationAutoPageSizeService2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.onBodyHeightChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
        this.checkPageSize();
      };
      PaginationAutoPageSizeService2.prototype.notActive = function() {
        return !this.gridOptionsWrapper.isPaginationAutoPageSize();
      };
      PaginationAutoPageSizeService2.prototype.onScrollVisibilityChanged = function() {
        this.checkPageSize();
      };
      PaginationAutoPageSizeService2.prototype.onBodyHeightChanged = function() {
        this.checkPageSize();
      };
      PaginationAutoPageSizeService2.prototype.checkPageSize = function() {
        if (this.notActive()) {
          return;
        }
        var rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
        var bodyHeight = this.gridPanel.getBodyHeight();
        if (bodyHeight > 0) {
          var newPageSize = Math.floor(bodyHeight / rowHeight);
          this.gridOptionsWrapper.setProperty("paginationPageSize", newPageSize);
        }
      };
      __decorate$1m([
        Autowired("gridOptionsWrapper")
      ], PaginationAutoPageSizeService2.prototype, "gridOptionsWrapper", void 0);
      PaginationAutoPageSizeService2 = __decorate$1m([
        Bean("paginationAutoPageSizeService")
      ], PaginationAutoPageSizeService2);
      return PaginationAutoPageSizeService2;
    }(BeanStub);
    var __extends$1o = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1n = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ValueCache = function(_super) {
      __extends$1o(ValueCache2, _super);
      function ValueCache2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cacheVersion = 0;
        return _this;
      }
      ValueCache2.prototype.init = function() {
        this.active = this.gridOptionsWrapper.isValueCache();
        this.neverExpires = this.gridOptionsWrapper.isValueCacheNeverExpires();
      };
      ValueCache2.prototype.onDataChanged = function() {
        if (this.neverExpires) {
          return;
        }
        this.expire();
      };
      ValueCache2.prototype.expire = function() {
        this.cacheVersion++;
      };
      ValueCache2.prototype.setValue = function(rowNode, colId, value) {
        if (this.active) {
          if (rowNode.__cacheVersion !== this.cacheVersion) {
            rowNode.__cacheVersion = this.cacheVersion;
            rowNode.__cacheData = {};
          }
          rowNode.__cacheData[colId] = value;
        }
      };
      ValueCache2.prototype.getValue = function(rowNode, colId) {
        if (!this.active || rowNode.__cacheVersion !== this.cacheVersion) {
          return void 0;
        }
        return rowNode.__cacheData[colId];
      };
      __decorate$1n([
        Autowired("gridOptionsWrapper")
      ], ValueCache2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1n([
        PostConstruct
      ], ValueCache2.prototype, "init", null);
      ValueCache2 = __decorate$1n([
        Bean("valueCache")
      ], ValueCache2);
      return ValueCache2;
    }(BeanStub);
    var __extends$1p = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1o = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ChangeDetectionService = function(_super) {
      __extends$1p(ChangeDetectionService2, _super);
      function ChangeDetectionService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ChangeDetectionService2.prototype.init = function() {
        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
          this.clientSideRowModel = this.rowModel;
        }
        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));
      };
      ChangeDetectionService2.prototype.onCellValueChanged = function(event) {
        if (event.source === Constants.SOURCE_PASTE) {
          return;
        }
        this.doChangeDetection(event.node, event.column);
      };
      ChangeDetectionService2.prototype.doChangeDetection = function(rowNode, column) {
        if (this.gridOptionsWrapper.isSuppressChangeDetection()) {
          return;
        }
        if (this.clientSideRowModel && !rowNode.isRowPinned()) {
          var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();
          var changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());
          changedPath.addParentNode(rowNode.parent, [column]);
          this.clientSideRowModel.doAggregate(changedPath);
        }
        this.rowRenderer.refreshCells();
      };
      __decorate$1o([
        Autowired("gridOptionsWrapper")
      ], ChangeDetectionService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1o([
        Autowired("rowModel")
      ], ChangeDetectionService2.prototype, "rowModel", void 0);
      __decorate$1o([
        Autowired("rowRenderer")
      ], ChangeDetectionService2.prototype, "rowRenderer", void 0);
      __decorate$1o([
        PostConstruct
      ], ChangeDetectionService2.prototype, "init", null);
      ChangeDetectionService2 = __decorate$1o([
        Bean("changeDetectionService")
      ], ChangeDetectionService2);
      return ChangeDetectionService2;
    }(BeanStub);
    var __extends$1q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1p = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$8 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var AlignedGridsService = function(_super) {
      __extends$1q(AlignedGridsService2, _super);
      function AlignedGridsService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.consuming = false;
        return _this;
      }
      AlignedGridsService2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("AlignedGridsService");
      };
      AlignedGridsService2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
      };
      AlignedGridsService2.prototype.init = function() {
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));
      };
      AlignedGridsService2.prototype.fireEvent = function(callback) {
        if (this.consuming) {
          return;
        }
        var otherGrids = this.gridOptionsWrapper.getAlignedGrids();
        if (otherGrids) {
          otherGrids.forEach(function(otherGridOptions) {
            if (otherGridOptions.api) {
              var alignedGridService = otherGridOptions.api.__getAlignedGridService();
              callback(alignedGridService);
            }
          });
        }
      };
      AlignedGridsService2.prototype.onEvent = function(callback) {
        this.consuming = true;
        callback();
        this.consuming = false;
      };
      AlignedGridsService2.prototype.fireColumnEvent = function(event) {
        this.fireEvent(function(alignedGridsService) {
          alignedGridsService.onColumnEvent(event);
        });
      };
      AlignedGridsService2.prototype.fireScrollEvent = function(event) {
        if (event.direction !== "horizontal") {
          return;
        }
        this.fireEvent(function(alignedGridsService) {
          alignedGridsService.onScrollEvent(event);
        });
      };
      AlignedGridsService2.prototype.onScrollEvent = function(event) {
        var _this = this;
        this.onEvent(function() {
          _this.gridPanel.setHorizontalScrollPosition(event.left);
        });
      };
      AlignedGridsService2.prototype.getMasterColumns = function(event) {
        var result = [];
        if (event.columns) {
          event.columns.forEach(function(column) {
            result.push(column);
          });
        } else if (event.column) {
          result.push(event.column);
        }
        return result;
      };
      AlignedGridsService2.prototype.getColumnIds = function(event) {
        var result = [];
        if (event.columns) {
          event.columns.forEach(function(column) {
            result.push(column.getColId());
          });
        } else if (event.column) {
          result.push(event.column.getColId());
        }
        return result;
      };
      AlignedGridsService2.prototype.onColumnEvent = function(event) {
        var _this = this;
        this.onEvent(function() {
          switch (event.type) {
            case Events.EVENT_COLUMN_MOVED:
            case Events.EVENT_COLUMN_VISIBLE:
            case Events.EVENT_COLUMN_PINNED:
            case Events.EVENT_COLUMN_RESIZED:
              var colEvent = event;
              _this.processColumnEvent(colEvent);
              break;
            case Events.EVENT_COLUMN_GROUP_OPENED:
              var groupOpenedEvent = event;
              _this.processGroupOpenedEvent(groupOpenedEvent);
              break;
            case Events.EVENT_COLUMN_PIVOT_CHANGED:
              console.warn("ag-Grid: pivoting is not supported with aligned grids. You can only use one of these features at a time in a grid.");
              break;
          }
        });
      };
      AlignedGridsService2.prototype.processGroupOpenedEvent = function(groupOpenedEvent) {
        var masterColumnGroup = groupOpenedEvent.columnGroup;
        var otherColumnGroup;
        if (masterColumnGroup) {
          var groupId = masterColumnGroup.getGroupId();
          otherColumnGroup = this.columnController.getOriginalColumnGroup(groupId);
        }
        if (masterColumnGroup && !otherColumnGroup) {
          return;
        }
        this.logger.log("onColumnEvent-> processing " + groupOpenedEvent + " expanded = " + masterColumnGroup.isExpanded());
        this.columnController.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), "alignedGridChanged");
      };
      AlignedGridsService2.prototype.processColumnEvent = function(colEvent) {
        var _this = this;
        var masterColumn = colEvent.column;
        var otherColumn;
        if (masterColumn) {
          otherColumn = this.columnController.getPrimaryColumn(masterColumn.getColId());
        }
        if (masterColumn && !otherColumn) {
          return;
        }
        var columnIds = this.getColumnIds(colEvent);
        var masterColumns = this.getMasterColumns(colEvent);
        switch (colEvent.type) {
          case Events.EVENT_COLUMN_MOVED:
            var movedEvent = colEvent;
            this.logger.log("onColumnEvent-> processing " + colEvent.type + " toIndex = " + movedEvent.toIndex);
            this.columnController.moveColumns(columnIds, movedEvent.toIndex, "alignedGridChanged");
            break;
          case Events.EVENT_COLUMN_VISIBLE:
            var visibleEvent = colEvent;
            this.logger.log("onColumnEvent-> processing " + colEvent.type + " visible = " + visibleEvent.visible);
            this.columnController.setColumnsVisible(columnIds, visibleEvent.visible, "alignedGridChanged");
            break;
          case Events.EVENT_COLUMN_PINNED:
            var pinnedEvent = colEvent;
            this.logger.log("onColumnEvent-> processing " + colEvent.type + " pinned = " + pinnedEvent.pinned);
            this.columnController.setColumnsPinned(columnIds, pinnedEvent.pinned, "alignedGridChanged");
            break;
          case Events.EVENT_COLUMN_RESIZED:
            var resizedEvent_1 = colEvent;
            masterColumns.forEach(function(column) {
              _this.logger.log("onColumnEvent-> processing " + colEvent.type + " actualWidth = " + column.getActualWidth());
              var columnWidths = [{ key: column.getColId(), newWidth: column.getActualWidth() }];
              _this.columnController.setColumnWidths(columnWidths, false, resizedEvent_1.finished, "alignedGridChanged");
            });
            break;
        }
        var isVerticalScrollShowing2 = this.gridPanel.isVerticalScrollShowing();
        var alignedGrids = this.gridOptionsWrapper.getAlignedGrids();
        alignedGrids.forEach(function(grid) {
          grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing2);
        });
      };
      __decorate$1p([
        Autowired("gridOptionsWrapper")
      ], AlignedGridsService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1p([
        Autowired("columnController")
      ], AlignedGridsService2.prototype, "columnController", void 0);
      __decorate$1p([
        __param$8(0, Qualifier("loggerFactory"))
      ], AlignedGridsService2.prototype, "setBeans", null);
      __decorate$1p([
        PostConstruct
      ], AlignedGridsService2.prototype, "init", null);
      AlignedGridsService2 = __decorate$1p([
        Bean("alignedGridsService")
      ], AlignedGridsService2);
      return AlignedGridsService2;
    }(BeanStub);
    var __extends$1r = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgComponentUtils = function(_super) {
      __extends$1r(AgComponentUtils2, _super);
      function AgComponentUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AgComponentUtils2.prototype.adaptFunction = function(propertyName, hardcodedJsFunction, componentFromFramework, source) {
        if (hardcodedJsFunction == null) {
          return {
            component: null,
            componentFromFramework,
            source,
            paramsFromSelector: null
          };
        }
        var metadata = this.componentMetadataProvider.retrieve(propertyName);
        if (metadata && metadata.functionAdapter) {
          return {
            componentFromFramework,
            component: metadata.functionAdapter(hardcodedJsFunction),
            source,
            paramsFromSelector: null
          };
        }
        return null;
      };
      AgComponentUtils2.prototype.adaptCellRendererFunction = function(callback) {
        var Adapter = function() {
          function Adapter2() {
          }
          Adapter2.prototype.refresh = function(params) {
            return false;
          };
          Adapter2.prototype.getGui = function() {
            var callbackResult = callback(this.params);
            var type = typeof callbackResult;
            if (type === "string" || type === "number" || type === "boolean") {
              return loadTemplate("<span>" + callbackResult + "</span>");
            }
            return callbackResult;
          };
          Adapter2.prototype.init = function(params) {
            this.params = params;
          };
          return Adapter2;
        }();
        return Adapter;
      };
      AgComponentUtils2.prototype.doesImplementIComponent = function(candidate) {
        if (!candidate) {
          return false;
        }
        return candidate.prototype && "getGui" in candidate.prototype;
      };
      __decorate$1q([
        Autowired("componentMetadataProvider")
      ], AgComponentUtils2.prototype, "componentMetadataProvider", void 0);
      AgComponentUtils2 = __decorate$1q([
        Bean("agComponentUtils")
      ], AgComponentUtils2);
      return AgComponentUtils2;
    }(BeanStub);
    var __extends$1s = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1r = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ComponentMetadataProvider = function(_super) {
      __extends$1s(ComponentMetadataProvider2, _super);
      function ComponentMetadataProvider2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ComponentMetadataProvider2.prototype.postConstruct = function() {
        this.componentMetaData = {
          dateComponent: {
            mandatoryMethodList: ["getDate", "setDate"],
            optionalMethodList: ["afterGuiAttached", "setInputPlaceholder", "setInputAriaLabel"]
          },
          detailCellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh"]
          },
          headerComponent: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh"]
          },
          headerGroupComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          loadingCellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          loadingOverlayComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          noRowsOverlayComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          floatingFilterComponent: {
            mandatoryMethodList: ["onParentModelChanged"],
            optionalMethodList: ["afterGuiAttached"]
          },
          floatingFilterWrapperComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          cellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh", "afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          cellEditor: {
            mandatoryMethodList: ["getValue"],
            optionalMethodList: ["isPopup", "isCancelBeforeStart", "isCancelAfterEnd", "getPopupPosition", "focusIn", "focusOut", "afterGuiAttached"]
          },
          innerRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          fullWidthCellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh", "afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          pinnedRowCellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh", "afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          groupRowRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          filter: {
            mandatoryMethodList: ["isFilterActive", "doesFilterPass", "getModel", "setModel"],
            optionalMethodList: ["afterGuiAttached", "onNewRowsLoaded", "getModelAsString", "onFloatingFilterChanged"]
          },
          filterComponent: {
            mandatoryMethodList: ["isFilterActive", "doesFilterPass", "getModel", "setModel"],
            optionalMethodList: ["afterGuiAttached", "onNewRowsLoaded", "getModelAsString", "onFloatingFilterChanged"]
          },
          statusPanel: {
            mandatoryMethodList: [],
            optionalMethodList: ["afterGuiAttached"]
          },
          toolPanel: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh", "afterGuiAttached"]
          },
          tooltipComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          }
        };
      };
      ComponentMetadataProvider2.prototype.retrieve = function(name) {
        return this.componentMetaData[name];
      };
      __decorate$1r([
        Autowired("agComponentUtils")
      ], ComponentMetadataProvider2.prototype, "agComponentUtils", void 0);
      __decorate$1r([
        PostConstruct
      ], ComponentMetadataProvider2.prototype, "postConstruct", null);
      ComponentMetadataProvider2 = __decorate$1r([
        Bean("componentMetadataProvider")
      ], ComponentMetadataProvider2);
      return ComponentMetadataProvider2;
    }(BeanStub);
    var __decorate$1s = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Beans = function() {
      function Beans2() {
      }
      Beans2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
      };
      Beans2.prototype.postConstruct = function() {
        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
        if (this.gridOptionsWrapper.isRowModelDefault()) {
          this.clientSideRowModel = this.rowModel;
        }
        if (this.gridOptionsWrapper.isRowModelServerSide()) {
          this.serverSideRowModel = this.rowModel;
        }
      };
      __decorate$1s([
        Autowired("resizeObserverService")
      ], Beans2.prototype, "resizeObserverService", void 0);
      __decorate$1s([
        Autowired("paginationProxy")
      ], Beans2.prototype, "paginationProxy", void 0);
      __decorate$1s([
        Autowired("context")
      ], Beans2.prototype, "context", void 0);
      __decorate$1s([
        Autowired("columnApi")
      ], Beans2.prototype, "columnApi", void 0);
      __decorate$1s([
        Autowired("gridApi")
      ], Beans2.prototype, "gridApi", void 0);
      __decorate$1s([
        Autowired("gridOptionsWrapper")
      ], Beans2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1s([
        Autowired("expressionService")
      ], Beans2.prototype, "expressionService", void 0);
      __decorate$1s([
        Autowired("rowRenderer")
      ], Beans2.prototype, "rowRenderer", void 0);
      __decorate$1s([
        Autowired("$compile")
      ], Beans2.prototype, "$compile", void 0);
      __decorate$1s([
        Autowired("templateService")
      ], Beans2.prototype, "templateService", void 0);
      __decorate$1s([
        Autowired("valueService")
      ], Beans2.prototype, "valueService", void 0);
      __decorate$1s([
        Autowired("eventService")
      ], Beans2.prototype, "eventService", void 0);
      __decorate$1s([
        Autowired("columnController")
      ], Beans2.prototype, "columnController", void 0);
      __decorate$1s([
        Autowired("headerNavigationService")
      ], Beans2.prototype, "headerNavigationService", void 0);
      __decorate$1s([
        Autowired("columnAnimationService")
      ], Beans2.prototype, "columnAnimationService", void 0);
      __decorate$1s([
        Optional("rangeController")
      ], Beans2.prototype, "rangeController", void 0);
      __decorate$1s([
        Autowired("focusController")
      ], Beans2.prototype, "focusController", void 0);
      __decorate$1s([
        Optional("contextMenuFactory")
      ], Beans2.prototype, "contextMenuFactory", void 0);
      __decorate$1s([
        Autowired("cellRendererFactory")
      ], Beans2.prototype, "cellRendererFactory", void 0);
      __decorate$1s([
        Autowired("popupService")
      ], Beans2.prototype, "popupService", void 0);
      __decorate$1s([
        Autowired("valueFormatterService")
      ], Beans2.prototype, "valueFormatterService", void 0);
      __decorate$1s([
        Autowired("stylingService")
      ], Beans2.prototype, "stylingService", void 0);
      __decorate$1s([
        Autowired("columnHoverService")
      ], Beans2.prototype, "columnHoverService", void 0);
      __decorate$1s([
        Autowired("userComponentFactory")
      ], Beans2.prototype, "userComponentFactory", void 0);
      __decorate$1s([
        Autowired("animationFrameService")
      ], Beans2.prototype, "taskQueue", void 0);
      __decorate$1s([
        Autowired("dragAndDropService")
      ], Beans2.prototype, "dragAndDropService", void 0);
      __decorate$1s([
        Autowired("sortController")
      ], Beans2.prototype, "sortController", void 0);
      __decorate$1s([
        Autowired("filterManager")
      ], Beans2.prototype, "filterManager", void 0);
      __decorate$1s([
        Autowired("maxDivHeightScaler")
      ], Beans2.prototype, "maxDivHeightScaler", void 0);
      __decorate$1s([
        Autowired("frameworkOverrides")
      ], Beans2.prototype, "frameworkOverrides", void 0);
      __decorate$1s([
        Autowired("detailRowCompCache")
      ], Beans2.prototype, "detailRowCompCache", void 0);
      __decorate$1s([
        Autowired("cellPositionUtils")
      ], Beans2.prototype, "cellPositionUtils", void 0);
      __decorate$1s([
        Autowired("rowPositionUtils")
      ], Beans2.prototype, "rowPositionUtils", void 0);
      __decorate$1s([
        Autowired("selectionController")
      ], Beans2.prototype, "selectionController", void 0);
      __decorate$1s([
        Optional("selectionHandleFactory")
      ], Beans2.prototype, "selectionHandleFactory", void 0);
      __decorate$1s([
        Autowired("rowCssClassCalculator")
      ], Beans2.prototype, "rowCssClassCalculator", void 0);
      __decorate$1s([
        Autowired("rowModel")
      ], Beans2.prototype, "rowModel", void 0);
      __decorate$1s([
        PostConstruct
      ], Beans2.prototype, "postConstruct", null);
      Beans2 = __decorate$1s([
        Bean("beans")
      ], Beans2);
      return Beans2;
    }();
    var __extends$1t = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1t = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var MAT_GRID_SIZE = 8;
    var BASE_GRID_SIZE = 4;
    var BALHAM_GRID_SIZE = 4;
    var ALPINE_GRID_SIZE = 6;
    var HARD_CODED_SIZES = {
      "ag-theme-custom": {
        headerHeight: 25,
        headerCellMinWidth: 24,
        listItemHeight: BASE_GRID_SIZE * 5,
        rowHeight: 25,
        chartMenuPanelWidth: 220
      },
      "ag-theme-material": {
        headerHeight: MAT_GRID_SIZE * 7,
        headerCellMinWidth: 48,
        listItemHeight: MAT_GRID_SIZE * 4,
        rowHeight: MAT_GRID_SIZE * 6,
        chartMenuPanelWidth: 240
      },
      "ag-theme-balham": {
        headerHeight: BALHAM_GRID_SIZE * 8,
        headerCellMinWidth: 24,
        listItemHeight: BALHAM_GRID_SIZE * 6,
        rowHeight: BALHAM_GRID_SIZE * 7,
        chartMenuPanelWidth: 220
      },
      "ag-theme-alpine": {
        headerHeight: ALPINE_GRID_SIZE * 8,
        headerCellMinWidth: 36,
        listItemHeight: ALPINE_GRID_SIZE * 4,
        rowHeight: ALPINE_GRID_SIZE * 7,
        chartMenuPanelWidth: 240
      }
    };
    var SASS_PROPERTY_BUILDER = {
      headerHeight: ["ag-header-row"],
      headerCellMinWidth: ["ag-header-cell"],
      listItemHeight: ["ag-virtual-list-item"],
      rowHeight: ["ag-row"],
      chartMenuPanelWidth: ["ag-chart-docked-container"]
    };
    var CALCULATED_SIZES = {};
    var Environment = function(_super) {
      __extends$1t(Environment2, _super);
      function Environment2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      Environment2.prototype.getSassVariable = function(theme, key) {
        var useTheme = "ag-theme-" + (theme.match("material") ? "material" : theme.match("balham") ? "balham" : theme.match("alpine") ? "alpine" : "custom");
        var defaultValue = HARD_CODED_SIZES[useTheme][key];
        var calculatedValue = 0;
        if (!CALCULATED_SIZES[theme]) {
          CALCULATED_SIZES[theme] = {};
        }
        if (CALCULATED_SIZES[theme][key]) {
          return CALCULATED_SIZES[theme][key];
        }
        if (SASS_PROPERTY_BUILDER[key]) {
          var classList = SASS_PROPERTY_BUILDER[key];
          var div = document.createElement("div");
          addCssClass(div, theme);
          div.style.position = "absolute";
          var el = classList.reduce(function(el2, currentClass) {
            var div2 = document.createElement("div");
            div2.style.position = "static";
            addCssClass(div2, currentClass);
            el2.appendChild(div2);
            return div2;
          }, div);
          if (document.body) {
            document.body.appendChild(div);
            var sizeName = key.toLowerCase().indexOf("height") !== -1 ? "height" : "width";
            calculatedValue = parseInt(window.getComputedStyle(el)[sizeName], 10);
            document.body.removeChild(div);
          }
        }
        CALCULATED_SIZES[theme][key] = calculatedValue || defaultValue;
        return CALCULATED_SIZES[theme][key];
      };
      Environment2.prototype.isThemeDark = function() {
        var theme = this.getTheme().theme;
        return !!theme && theme.indexOf("dark") >= 0;
      };
      Environment2.prototype.chartMenuPanelWidth = function() {
        var theme = this.getTheme().themeFamily;
        return this.getSassVariable(theme, "chartMenuPanelWidth");
      };
      Environment2.prototype.getTheme = function() {
        var reg = /\bag-(material|(?:theme-([\w\-]*)))\b/;
        var el = this.eGridDiv;
        var themeMatch;
        while (el) {
          themeMatch = reg.exec(el.className);
          if (!themeMatch) {
            el = el.parentElement;
          } else {
            break;
          }
        }
        if (!themeMatch) {
          return {};
        }
        var theme = themeMatch[0];
        var usingOldTheme = themeMatch[2] === void 0;
        if (usingOldTheme) {
          var newTheme_1 = theme.replace("ag-", "ag-theme-");
          doOnce(function() {
            return console.warn("ag-Grid: As of v19 old theme are no longer provided. Please replace " + theme + " with " + newTheme_1 + ".");
          }, "using-old-theme");
        }
        return { theme, el, themeFamily: theme.replace(/-dark$/, "") };
      };
      __decorate$1t([
        Autowired("eGridDiv")
      ], Environment2.prototype, "eGridDiv", void 0);
      Environment2 = __decorate$1t([
        Bean("environment")
      ], Environment2);
      return Environment2;
    }(BeanStub);
    var __extends$1u = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1u = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AnimationFrameService = function(_super) {
      __extends$1u(AnimationFrameService2, _super);
      function AnimationFrameService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.createTasksP1 = { list: [], sorted: false };
        _this.createTasksP2 = { list: [], sorted: false };
        _this.destroyTasks = [];
        _this.ticking = false;
        _this.scrollGoingDown = true;
        _this.lastScrollTop = 0;
        _this.taskCount = 0;
        _this.cancelledTasks = /* @__PURE__ */ new Set();
        return _this;
      }
      AnimationFrameService2.prototype.setScrollTop = function(scrollTop) {
        this.scrollGoingDown = scrollTop > this.lastScrollTop;
        this.lastScrollTop = scrollTop;
      };
      AnimationFrameService2.prototype.init = function() {
        this.useAnimationFrame = !this.gridOptionsWrapper.isSuppressAnimationFrame();
      };
      AnimationFrameService2.prototype.verifyAnimationFrameOn = function(methodName) {
        if (this.useAnimationFrame === false) {
          console.warn("ag-Grid: AnimationFrameService." + methodName + " called but animation frames are off");
        }
      };
      AnimationFrameService2.prototype.createTask = function(task, index, list) {
        this.verifyAnimationFrameOn(list);
        var taskItem = { task, index, createOrder: ++this.taskCount };
        this.addTaskToList(this[list], taskItem);
        this.schedule();
      };
      AnimationFrameService2.prototype.cancelTask = function(task) {
        this.cancelledTasks.add(task);
      };
      AnimationFrameService2.prototype.addTaskToList = function(taskList, task) {
        taskList.list.push(task);
        taskList.sorted = false;
      };
      AnimationFrameService2.prototype.sortTaskList = function(taskList) {
        if (taskList.sorted) {
          return;
        }
        var sortDirection = this.scrollGoingDown ? 1 : -1;
        taskList.list.sort(function(a, b) {
          return a.index !== b.index ? sortDirection * (b.index - a.index) : b.createOrder - a.createOrder;
        });
        taskList.sorted = true;
      };
      AnimationFrameService2.prototype.addDestroyTask = function(task) {
        this.verifyAnimationFrameOn("createTasksP3");
        this.destroyTasks.push(task);
        this.schedule();
      };
      AnimationFrameService2.prototype.executeFrame = function(millis) {
        this.verifyAnimationFrameOn("executeFrame");
        var p1TaskList = this.createTasksP1;
        var p1Tasks = p1TaskList.list;
        var p2TaskList = this.createTasksP2;
        var p2Tasks = p2TaskList.list;
        var destroyTasks = this.destroyTasks;
        var frameStart = new Date().getTime();
        var duration = new Date().getTime() - frameStart;
        var noMaxMillis = millis <= 0;
        while (noMaxMillis || duration < millis) {
          var task = void 0;
          if (p1Tasks.length) {
            this.sortTaskList(p1TaskList);
            task = p1Tasks.pop().task;
          } else if (p2Tasks.length) {
            this.sortTaskList(p2TaskList);
            task = p2Tasks.pop().task;
          } else if (destroyTasks.length) {
            task = destroyTasks.pop();
          } else {
            this.cancelledTasks.clear();
            break;
          }
          if (!this.cancelledTasks.has(task)) {
            task();
          }
          duration = new Date().getTime() - frameStart;
        }
        if (p1Tasks.length || p2Tasks.length || destroyTasks.length) {
          this.requestFrame();
        } else {
          this.stopTicking();
        }
      };
      AnimationFrameService2.prototype.stopTicking = function() {
        this.ticking = false;
        var event = {
          type: Events.EVENT_ANIMATION_QUEUE_EMPTY,
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          api: this.gridOptionsWrapper.getApi()
        };
        this.eventService.dispatchEvent(event);
      };
      AnimationFrameService2.prototype.flushAllFrames = function() {
        if (!this.useAnimationFrame) {
          return;
        }
        this.executeFrame(-1);
      };
      AnimationFrameService2.prototype.schedule = function() {
        if (!this.useAnimationFrame) {
          return;
        }
        if (!this.ticking) {
          this.ticking = true;
          this.requestFrame();
        }
      };
      AnimationFrameService2.prototype.requestFrame = function() {
        var callback = this.executeFrame.bind(this, 60);
        if (window.requestAnimationFrame) {
          window.requestAnimationFrame(callback);
        } else if (window.webkitRequestAnimationFrame) {
          window.webkitRequestAnimationFrame(callback);
        } else {
          window.setTimeout(callback, 0);
        }
      };
      AnimationFrameService2.prototype.isQueueEmpty = function() {
        return !this.ticking;
      };
      __decorate$1u([
        Autowired("gridOptionsWrapper")
      ], AnimationFrameService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1u([
        PostConstruct
      ], AnimationFrameService2.prototype, "init", null);
      AnimationFrameService2 = __decorate$1u([
        Bean("animationFrameService")
      ], AnimationFrameService2);
      return AnimationFrameService2;
    }(BeanStub);
    var __extends$1v = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1v = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var NavigationService = function(_super) {
      __extends$1v(NavigationService2, _super);
      function NavigationService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.timeLastPageEventProcessed = 0;
        return _this;
      }
      NavigationService2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
      };
      NavigationService2.prototype.handlePageScrollingKey = function(event) {
        var key = event.which || event.keyCode;
        var alt = event.altKey;
        var ctrl = event.ctrlKey;
        var currentCell = this.mouseEventService.getCellPositionForEvent(event);
        if (!currentCell) {
          return false;
        }
        var processed = false;
        switch (key) {
          case KeyCode.PAGE_HOME:
          case KeyCode.PAGE_END:
            if (!ctrl && !alt) {
              this.onHomeOrEndKey(key);
              processed = true;
            }
            break;
          case KeyCode.LEFT:
          case KeyCode.RIGHT:
            if (ctrl && !alt) {
              this.onCtrlLeftOrRight(key, currentCell);
              processed = true;
            }
            break;
          case KeyCode.UP:
          case KeyCode.DOWN:
            if (ctrl && !alt) {
              this.onCtrlUpOrDown(key, currentCell);
              processed = true;
            }
            break;
          case KeyCode.PAGE_DOWN:
            if (!ctrl && !alt) {
              this.onPageDown(currentCell);
              processed = true;
            }
            break;
          case KeyCode.PAGE_UP:
            if (!ctrl && !alt) {
              this.onPageUp(currentCell);
              processed = true;
            }
            break;
        }
        if (processed) {
          event.preventDefault();
        }
        return processed;
      };
      NavigationService2.prototype.isTimeSinceLastPageEventToRecent = function() {
        var now = new Date().getTime();
        var diff = now - this.timeLastPageEventProcessed;
        return diff < 100;
      };
      NavigationService2.prototype.setTimeLastPageEventProcessed = function() {
        this.timeLastPageEventProcessed = new Date().getTime();
      };
      NavigationService2.prototype.onPageDown = function(gridCell) {
        if (this.isTimeSinceLastPageEventToRecent()) {
          return;
        }
        var scrollPosition = this.gridPanel.getVScrollPosition();
        var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
        var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;
        if (this.gridPanel.isHorizontalScrollShowing()) {
          pixelsInOnePage -= scrollbarWidth;
        }
        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
        var currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;
        var currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);
        var scrollIndex = currentPageBottomRow;
        var currentCellPixel = this.paginationProxy.getRow(gridCell.rowIndex).rowTop;
        var nextCellPixel = currentCellPixel + pixelsInOnePage - pagingPixelOffset;
        var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
        var pageLastRow = this.paginationProxy.getPageLastRow();
        if (focusIndex > pageLastRow) {
          focusIndex = pageLastRow;
        }
        if (scrollIndex > pageLastRow) {
          scrollIndex = pageLastRow;
        }
        this.navigateTo(scrollIndex, "top", null, focusIndex, gridCell.column);
        this.setTimeLastPageEventProcessed();
      };
      NavigationService2.prototype.onPageUp = function(gridCell) {
        if (this.isTimeSinceLastPageEventToRecent()) {
          return;
        }
        var scrollPosition = this.gridPanel.getVScrollPosition();
        var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
        var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;
        if (this.gridPanel.isHorizontalScrollShowing()) {
          pixelsInOnePage -= scrollbarWidth;
        }
        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
        var currentPageTopPixel = scrollPosition.top;
        var currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);
        var scrollIndex = currentPageTopRow;
        var currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);
        var nextCellPixel = currentRowNode.rowTop + currentRowNode.rowHeight - pixelsInOnePage - pagingPixelOffset;
        var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
        var firstRow = this.paginationProxy.getPageFirstRow();
        if (focusIndex < firstRow) {
          focusIndex = firstRow;
        }
        if (scrollIndex < firstRow) {
          scrollIndex = firstRow;
        }
        this.navigateTo(scrollIndex, "bottom", null, focusIndex, gridCell.column);
        this.setTimeLastPageEventProcessed();
      };
      NavigationService2.prototype.navigateTo = function(scrollIndex, scrollType, scrollColumn, focusIndex, focusColumn) {
        if (exists(scrollColumn)) {
          this.gridPanel.ensureColumnVisible(scrollColumn);
        }
        if (exists(scrollIndex)) {
          this.gridPanel.ensureIndexVisible(scrollIndex, scrollType);
        }
        this.animationFrameService.flushAllFrames();
        this.focusController.setFocusedCell(focusIndex, focusColumn, null, true);
        if (this.rangeController) {
          var cellPosition = { rowIndex: focusIndex, rowPinned: null, column: focusColumn };
          this.rangeController.setRangeToCell(cellPosition);
        }
      };
      NavigationService2.prototype.onCtrlUpOrDown = function(key, gridCell) {
        var upKey = key === KeyCode.UP;
        var rowIndexToScrollTo = upKey ? 0 : this.paginationProxy.getPageLastRow();
        this.navigateTo(rowIndexToScrollTo, null, gridCell.column, rowIndexToScrollTo, gridCell.column);
      };
      NavigationService2.prototype.onCtrlLeftOrRight = function(key, gridCell) {
        var leftKey = key === KeyCode.LEFT;
        var allColumns = this.columnController.getAllDisplayedColumns();
        var columnToSelect = leftKey ? allColumns[0] : last(allColumns);
        this.navigateTo(gridCell.rowIndex, null, columnToSelect, gridCell.rowIndex, columnToSelect);
      };
      NavigationService2.prototype.onHomeOrEndKey = function(key) {
        var homeKey = key === KeyCode.PAGE_HOME;
        var allColumns = this.columnController.getAllDisplayedColumns();
        var columnToSelect = homeKey ? allColumns[0] : last(allColumns);
        var rowIndexToScrollTo = homeKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();
        this.navigateTo(rowIndexToScrollTo, null, columnToSelect, rowIndexToScrollTo, columnToSelect);
      };
      __decorate$1v([
        Autowired("mouseEventService")
      ], NavigationService2.prototype, "mouseEventService", void 0);
      __decorate$1v([
        Autowired("paginationProxy")
      ], NavigationService2.prototype, "paginationProxy", void 0);
      __decorate$1v([
        Autowired("focusController")
      ], NavigationService2.prototype, "focusController", void 0);
      __decorate$1v([
        Autowired("animationFrameService")
      ], NavigationService2.prototype, "animationFrameService", void 0);
      __decorate$1v([
        Optional("rangeController")
      ], NavigationService2.prototype, "rangeController", void 0);
      __decorate$1v([
        Autowired("columnController")
      ], NavigationService2.prototype, "columnController", void 0);
      __decorate$1v([
        Autowired("gridOptionsWrapper")
      ], NavigationService2.prototype, "gridOptionsWrapper", void 0);
      NavigationService2 = __decorate$1v([
        Bean("navigationService")
      ], NavigationService2);
      return NavigationService2;
    }(BeanStub);
    var __extends$1w = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1w = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var MaxDivHeightScaler = function(_super) {
      __extends$1w(MaxDivHeightScaler2, _super);
      function MaxDivHeightScaler2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.scrollY = 0;
        _this.uiBodyHeight = 0;
        return _this;
      }
      MaxDivHeightScaler2.prototype.postConstruct = function() {
        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.updateOffset.bind(this));
        this.maxDivHeight = getMaxDivHeight();
      };
      MaxDivHeightScaler2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
      };
      MaxDivHeightScaler2.prototype.isScaling = function() {
        return this.scaling;
      };
      MaxDivHeightScaler2.prototype.getOffset = function() {
        return this.offset;
      };
      MaxDivHeightScaler2.prototype.updateOffset = function() {
        if (!this.scaling) {
          return;
        }
        var newScrollY = this.gridPanel.getVScrollPosition().top;
        var newBodyHeight = this.getUiBodyHeight();
        var atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;
        if (atLeastOneChanged) {
          this.scrollY = newScrollY;
          this.uiBodyHeight = newBodyHeight;
          this.calculateOffset();
        }
      };
      MaxDivHeightScaler2.prototype.calculateOffset = function() {
        this.uiContainerHeight = this.maxDivHeight;
        this.pixelsToShave = this.modelHeight - this.uiContainerHeight;
        this.maxScrollY = this.uiContainerHeight - this.uiBodyHeight;
        var scrollPercent = this.scrollY / this.maxScrollY;
        this.setOffset(scrollPercent * this.pixelsToShave);
      };
      MaxDivHeightScaler2.prototype.clearOffset = function() {
        this.uiContainerHeight = this.modelHeight;
        this.pixelsToShave = 0;
        this.setOffset(0);
      };
      MaxDivHeightScaler2.prototype.setOffset = function(newOffset) {
        var newOffsetFloor = typeof newOffset === "number" ? Math.floor(newOffset) : null;
        if (this.offset === newOffsetFloor) {
          return;
        }
        this.offset = newOffsetFloor;
        this.eventService.dispatchEvent({ type: Events.EVENT_HEIGHT_SCALE_CHANGED });
      };
      MaxDivHeightScaler2.prototype.setModelHeight = function(modelHeight) {
        this.modelHeight = modelHeight;
        this.scaling = this.maxDivHeight > 0 && modelHeight > this.maxDivHeight;
        if (this.scaling) {
          this.calculateOffset();
        } else {
          this.clearOffset();
        }
      };
      MaxDivHeightScaler2.prototype.getUiContainerHeight = function() {
        return this.uiContainerHeight;
      };
      MaxDivHeightScaler2.prototype.getRealPixelPosition = function(modelPixel) {
        return modelPixel - this.offset;
      };
      MaxDivHeightScaler2.prototype.getUiBodyHeight = function() {
        var pos = this.gridPanel.getVScrollPosition();
        return pos.bottom - pos.top;
      };
      MaxDivHeightScaler2.prototype.getScrollPositionForPixel = function(rowTop) {
        if (this.pixelsToShave <= 0) {
          return rowTop;
        }
        var modelMaxScroll = this.modelHeight - this.getUiBodyHeight();
        var scrollPercent = rowTop / modelMaxScroll;
        var scrollPixel = this.maxScrollY * scrollPercent;
        return scrollPixel;
      };
      __decorate$1w([
        PostConstruct
      ], MaxDivHeightScaler2.prototype, "postConstruct", null);
      MaxDivHeightScaler2 = __decorate$1w([
        Bean("maxDivHeightScaler")
      ], MaxDivHeightScaler2);
      return MaxDivHeightScaler2;
    }(BeanStub);
    var __extends$1x = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1x = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SelectableService = function(_super) {
      __extends$1x(SelectableService2, _super);
      function SelectableService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SelectableService2.prototype.init = function() {
        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
        this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
      };
      SelectableService2.prototype.updateSelectableAfterGrouping = function(rowNode) {
        if (this.isRowSelectableFunc) {
          var nextChildrenFunc = function(rowNode2) {
            return rowNode2.childrenAfterGroup;
          };
          this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
        }
      };
      SelectableService2.prototype.updateSelectableAfterFiltering = function(rowNode) {
        if (this.isRowSelectableFunc) {
          var nextChildrenFunc = function(rowNode2) {
            return rowNode2.childrenAfterFilter;
          };
          this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
        }
      };
      SelectableService2.prototype.recurseDown = function(children, nextChildrenFunc) {
        var _this = this;
        children.forEach(function(child) {
          if (!child.group) {
            return;
          }
          if (child.hasChildren()) {
            _this.recurseDown(nextChildrenFunc(child), nextChildrenFunc);
          }
          var rowSelectable;
          if (_this.groupSelectsChildren) {
            var firstSelectable = find(nextChildrenFunc(child), "selectable", true);
            rowSelectable = exists(firstSelectable);
          } else {
            rowSelectable = _this.isRowSelectableFunc ? _this.isRowSelectableFunc(child) : false;
          }
          child.setRowSelectable(rowSelectable);
        });
      };
      __decorate$1x([
        Autowired("gridOptionsWrapper")
      ], SelectableService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1x([
        PostConstruct
      ], SelectableService2.prototype, "init", null);
      SelectableService2 = __decorate$1x([
        Bean("selectableService")
      ], SelectableService2);
      return SelectableService2;
    }(BeanStub);
    var __extends$1y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AutoHeightCalculator = function(_super) {
      __extends$1y(AutoHeightCalculator2, _super);
      function AutoHeightCalculator2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AutoHeightCalculator2.prototype.registerGridComp = function(gridPanel) {
        this.gridPanel = gridPanel;
      };
      AutoHeightCalculator2.prototype.getPreferredHeightForRow = function(rowNode) {
        var _this = this;
        var eDummyContainer = document.createElement("div");
        this.addInRowCssClasses(rowNode, eDummyContainer);
        var eBodyContainer = this.gridPanel.getCenterContainer();
        eBodyContainer.appendChild(eDummyContainer);
        var scopeResult = AngularRowUtils.createChildScopeOrNull(rowNode, this.$scope, this.beans.gridOptionsWrapper);
        var scope = scopeResult ? scopeResult.scope : void 0;
        var scopeDestroyFunc = scopeResult ? scopeResult.scopeDestroyFunc : void 0;
        var cellComps = [];
        var autoRowHeightCols = this.columnController.getAllAutoRowHeightCols();
        var displayedCols = this.columnController.getAllDisplayedColumns();
        var visibleAutoRowHeightCols = autoRowHeightCols.filter(function(col) {
          return displayedCols.indexOf(col) >= 0;
        });
        visibleAutoRowHeightCols.forEach(function(col) {
          var cellComp = new CellComp(scope, _this.beans, col, rowNode, null, true, false);
          cellComp.setParentRow(eDummyContainer);
          cellComps.push(cellComp);
        });
        var template = cellComps.map(function(cellComp) {
          return cellComp.getCreateTemplate();
        }).join(" ");
        eDummyContainer.innerHTML = template;
        cellComps.forEach(function(cellComp) {
          return cellComp.afterAttached();
        });
        if (scope) {
          this.$compile(eDummyContainer)(scope);
        }
        var maxCellHeight = 0;
        for (var i = 0; i < eDummyContainer.children.length; i++) {
          var child = eDummyContainer.children[i];
          if (child.offsetHeight > maxCellHeight) {
            maxCellHeight = child.offsetHeight;
          }
        }
        eBodyContainer.removeChild(eDummyContainer);
        cellComps.forEach(function(cellComp) {
          cellComp.detach();
          cellComp.destroy();
        });
        if (scopeDestroyFunc) {
          scopeDestroyFunc();
        }
        return maxCellHeight;
      };
      AutoHeightCalculator2.prototype.addInRowCssClasses = function(rowNode, eDummyContainer) {
        var rowIndex = rowNode.rowIndex;
        var params = {
          rowNode,
          rowIsEven: rowIndex % 2 === 0,
          rowLevel: this.rowCssClassCalculator.calculateRowLevel(rowNode),
          firstRowOnPage: rowIndex === this.beans.paginationProxy.getPageFirstRow(),
          lastRowOnPage: rowIndex === this.beans.paginationProxy.getPageLastRow(),
          printLayout: false,
          expandable: rowNode.isExpandable()
        };
        var classes = this.rowCssClassCalculator.getInitialRowClasses(params);
        addCssClass(eDummyContainer, classes.join(" "));
      };
      __decorate$1y([
        Autowired("beans")
      ], AutoHeightCalculator2.prototype, "beans", void 0);
      __decorate$1y([
        Autowired("$scope")
      ], AutoHeightCalculator2.prototype, "$scope", void 0);
      __decorate$1y([
        Autowired("columnController")
      ], AutoHeightCalculator2.prototype, "columnController", void 0);
      __decorate$1y([
        Autowired("rowCssClassCalculator")
      ], AutoHeightCalculator2.prototype, "rowCssClassCalculator", void 0);
      __decorate$1y([
        Autowired("$compile")
      ], AutoHeightCalculator2.prototype, "$compile", void 0);
      AutoHeightCalculator2 = __decorate$1y([
        Bean("autoHeightCalculator")
      ], AutoHeightCalculator2);
      return AutoHeightCalculator2;
    }(BeanStub);
    var __extends$1z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var PaginationComp = function(_super) {
      __extends$1z(PaginationComp2, _super);
      function PaginationComp2() {
        var _this = _super.call(this) || this;
        _this.previousAndFirstButtonsDisabled = false;
        _this.nextButtonDisabled = false;
        _this.lastButtonDisabled = false;
        return _this;
      }
      PaginationComp2.prototype.postConstruct = function() {
        var _this = this;
        var isRtl = this.gridOptionsWrapper.isEnableRtl();
        this.setTemplate(this.getTemplate());
        this.btFirst.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "last" : "first", this.gridOptionsWrapper));
        this.btPrevious.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "next" : "previous", this.gridOptionsWrapper));
        this.btNext.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "previous" : "next", this.gridOptionsWrapper));
        this.btLast.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "first" : "last", this.gridOptionsWrapper));
        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_SERVER_SIDE) {
          this.serverSideRowModel = this.rowModel;
        }
        var isPaging = this.gridOptionsWrapper.isPagination();
        var paginationPanelEnabled = isPaging && !this.gridOptionsWrapper.isSuppressPaginationPanel();
        if (!paginationPanelEnabled) {
          this.setDisplayed(false);
          return;
        }
        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
        [
          { el: this.btFirst, fn: this.onBtFirst.bind(this) },
          { el: this.btPrevious, fn: this.onBtPrevious.bind(this) },
          { el: this.btNext, fn: this.onBtNext.bind(this) },
          { el: this.btLast, fn: this.onBtLast.bind(this) }
        ].forEach(function(item) {
          var el = item.el, fn = item.fn;
          _this.addManagedListener(el, "click", fn);
          _this.addManagedListener(el, "keydown", function(e) {
            if (e.keyCode === KeyCode.ENTER || e.keyCode === KeyCode.SPACE) {
              e.preventDefault();
              fn();
            }
          });
        });
        this.onPaginationChanged();
      };
      PaginationComp2.prototype.onPaginationChanged = function() {
        this.enableOrDisableButtons();
        this.updateRowLabels();
        this.setCurrentPageLabel();
        this.setTotalLabels();
      };
      PaginationComp2.prototype.onBtFirst = function() {
        if (!this.previousAndFirstButtonsDisabled) {
          this.paginationProxy.goToFirstPage();
        }
      };
      PaginationComp2.prototype.setCurrentPageLabel = function() {
        var pagesExist = this.paginationProxy.getTotalPages() > 0;
        var currentPage = this.paginationProxy.getCurrentPage();
        var toDisplay = pagesExist ? currentPage + 1 : 0;
        this.lbCurrent.innerHTML = this.formatNumber(toDisplay);
      };
      PaginationComp2.prototype.formatNumber = function(value) {
        var userFunc = this.gridOptionsWrapper.getPaginationNumberFormatterFunc();
        if (userFunc) {
          return userFunc({ value });
        }
        return formatNumberCommas(value);
      };
      PaginationComp2.prototype.getTemplate = function() {
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        var strPage = localeTextFunc("page", "Page");
        var strTo = localeTextFunc("to", "to");
        var strOf = localeTextFunc("of", "of");
        var strFirst = localeTextFunc("firstPage", "First Page");
        var strPrevious = localeTextFunc("previousPage", "Previous Page");
        var strNext = localeTextFunc("nextPage", "Next Page");
        var strLast = localeTextFunc("lastPage", "Last Page");
        var compId = this.getCompId();
        var summaryDescribedBy = "ag-" + compId + "-first-row ag-" + compId + "-to ag-" + compId + "-last-row ag-" + compId + "-of ag-" + compId + "-row-count";
        var descriptionDescribedBy = "ag-" + compId + "-start-page ag-" + compId + "-start-page-number ag-" + compId + "-of-page ag-" + compId + "-of-page-number";
        return '<div class="ag-paging-panel ag-unselectable" id="ag-' + compId + '" aria-live="polite" aria-describedby="' + descriptionDescribedBy + " " + summaryDescribedBy + '">\n                <span class="ag-paging-row-summary-panel" aria-hidden="true">\n                    <span id="ag-' + compId + '-first-row" ref="lbFirstRowOnPage" class="ag-paging-row-summary-panel-number"></span>\n                    <span id="ag-' + compId + '-to">' + strTo + '</span>\n                    <span id="ag-' + compId + '-last-row" ref="lbLastRowOnPage" class="ag-paging-row-summary-panel-number"></span>\n                    <span id="ag-' + compId + '-of">' + strOf + '</span>\n                    <span id="ag-' + compId + '-row-count" ref="lbRecordCount" class="ag-paging-row-summary-panel-number"></span>\n                </span>\n                <span class="ag-paging-page-summary-panel" role="presentation">\n                    <div ref="btFirst" class="ag-paging-button" role="button" aria-label="' + strFirst + '" tabindex="0"></div>\n                    <div ref="btPrevious" class="ag-paging-button" role="button" aria-label="' + strPrevious + '" tabindex="0"></div>\n                    <span class="ag-paging-description" aria-hidden="true">\n                        <span id="ag-' + compId + '-start-page">' + strPage + '</span>\n                        <span id="ag-' + compId + '-start-page-number" ref="lbCurrent" class="ag-paging-number"></span>\n                        <span id="ag-' + compId + '-of-page">' + strOf + '</span>\n                        <span id="ag-' + compId + '-of-page-number" ref="lbTotal" class="ag-paging-number"></span>\n                    </span>\n                    <div ref="btNext" class="ag-paging-button" role="button" aria-label="' + strNext + '" tabindex="0"></div>\n                    <div ref="btLast" class="ag-paging-button" role="button" aria-label="' + strLast + '" tabindex="0"></div>\n                </span>\n            </div>';
      };
      PaginationComp2.prototype.onBtNext = function() {
        if (!this.nextButtonDisabled) {
          this.paginationProxy.goToNextPage();
        }
      };
      PaginationComp2.prototype.onBtPrevious = function() {
        if (!this.previousAndFirstButtonsDisabled) {
          this.paginationProxy.goToPreviousPage();
        }
      };
      PaginationComp2.prototype.onBtLast = function() {
        if (!this.lastButtonDisabled) {
          this.paginationProxy.goToLastPage();
        }
      };
      PaginationComp2.prototype.enableOrDisableButtons = function() {
        var currentPage = this.paginationProxy.getCurrentPage();
        var maxRowFound = this.paginationProxy.isLastPageFound();
        var totalPages = this.paginationProxy.getTotalPages();
        this.previousAndFirstButtonsDisabled = currentPage === 0;
        addOrRemoveCssClass(this.btFirst, "ag-disabled", this.previousAndFirstButtonsDisabled);
        setAriaDisabled(this.btFirst, this.previousAndFirstButtonsDisabled);
        addOrRemoveCssClass(this.btPrevious, "ag-disabled", this.previousAndFirstButtonsDisabled);
        setAriaDisabled(this.btPrevious, this.previousAndFirstButtonsDisabled);
        var zeroPagesToDisplay = this.isZeroPagesToDisplay();
        var onLastPage = maxRowFound && currentPage === totalPages - 1;
        this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;
        addOrRemoveCssClass(this.btNext, "ag-disabled", this.nextButtonDisabled);
        setAriaDisabled(this.btNext, this.nextButtonDisabled);
        this.lastButtonDisabled = !maxRowFound || zeroPagesToDisplay || currentPage === totalPages - 1;
        addOrRemoveCssClass(this.btLast, "ag-disabled", this.lastButtonDisabled);
        setAriaDisabled(this.btLast, this.lastButtonDisabled);
      };
      PaginationComp2.prototype.updateRowLabels = function() {
        var currentPage = this.paginationProxy.getCurrentPage();
        var pageSize = this.paginationProxy.getPageSize();
        var maxRowFound = this.paginationProxy.isLastPageFound();
        var rowCount = this.paginationProxy.isLastPageFound() ? this.paginationProxy.getMasterRowCount() : null;
        var startRow;
        var endRow;
        if (this.isZeroPagesToDisplay()) {
          startRow = endRow = 0;
        } else {
          startRow = pageSize * currentPage + 1;
          endRow = startRow + pageSize - 1;
          if (maxRowFound && endRow > rowCount) {
            endRow = rowCount;
          }
        }
        this.lbFirstRowOnPage.innerHTML = this.formatNumber(startRow);
        if (this.serverSideRowModel && this.serverSideRowModel.isLoading()) {
          this.lbLastRowOnPage.innerHTML = "?";
        } else {
          this.lbLastRowOnPage.innerHTML = this.formatNumber(endRow);
        }
      };
      PaginationComp2.prototype.isZeroPagesToDisplay = function() {
        var maxRowFound = this.paginationProxy.isLastPageFound();
        var totalPages = this.paginationProxy.getTotalPages();
        return maxRowFound && totalPages === 0;
      };
      PaginationComp2.prototype.setTotalLabels = function() {
        var lastPageFound = this.paginationProxy.isLastPageFound();
        var totalPages = this.paginationProxy.getTotalPages();
        var rowCount = lastPageFound ? this.paginationProxy.getMasterRowCount() : null;
        if (lastPageFound) {
          this.lbTotal.innerHTML = this.formatNumber(totalPages);
          this.lbRecordCount.innerHTML = this.formatNumber(rowCount);
        } else {
          var moreText = this.gridOptionsWrapper.getLocaleTextFunc()("more", "more");
          this.lbTotal.innerHTML = moreText;
          this.lbRecordCount.innerHTML = moreText;
        }
      };
      __decorate$1z([
        Autowired("gridOptionsWrapper")
      ], PaginationComp2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1z([
        Autowired("paginationProxy")
      ], PaginationComp2.prototype, "paginationProxy", void 0);
      __decorate$1z([
        Autowired("rowModel")
      ], PaginationComp2.prototype, "rowModel", void 0);
      __decorate$1z([
        RefSelector("btFirst")
      ], PaginationComp2.prototype, "btFirst", void 0);
      __decorate$1z([
        RefSelector("btPrevious")
      ], PaginationComp2.prototype, "btPrevious", void 0);
      __decorate$1z([
        RefSelector("btNext")
      ], PaginationComp2.prototype, "btNext", void 0);
      __decorate$1z([
        RefSelector("btLast")
      ], PaginationComp2.prototype, "btLast", void 0);
      __decorate$1z([
        RefSelector("lbRecordCount")
      ], PaginationComp2.prototype, "lbRecordCount", void 0);
      __decorate$1z([
        RefSelector("lbFirstRowOnPage")
      ], PaginationComp2.prototype, "lbFirstRowOnPage", void 0);
      __decorate$1z([
        RefSelector("lbLastRowOnPage")
      ], PaginationComp2.prototype, "lbLastRowOnPage", void 0);
      __decorate$1z([
        RefSelector("lbCurrent")
      ], PaginationComp2.prototype, "lbCurrent", void 0);
      __decorate$1z([
        RefSelector("lbTotal")
      ], PaginationComp2.prototype, "lbTotal", void 0);
      __decorate$1z([
        PostConstruct
      ], PaginationComp2.prototype, "postConstruct", null);
      return PaginationComp2;
    }(Component);
    var __extends$1A = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1A = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ResizeObserverService = function(_super) {
      __extends$1A(ResizeObserverService2, _super);
      function ResizeObserverService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ResizeObserverService2.prototype.observeResize = function(element, callback, debounceDelay) {
        if (debounceDelay === void 0) {
          debounceDelay = 50;
        }
        var frameworkFactory = this.getFrameworkOverrides();
        var debouncedCallback = debounce(callback, debounceDelay);
        var useBrowserResizeObserver = function() {
          var resizeObserver = new window.ResizeObserver(debouncedCallback);
          resizeObserver.observe(element);
          return function() {
            return resizeObserver.disconnect();
          };
        };
        var usePolyfill = function() {
          var widthLastTime = offsetWidth(element);
          var heightLastTime = offsetHeight(element);
          var running = true;
          var periodicallyCheckWidthAndHeight = function() {
            if (running) {
              var newWidth = offsetWidth(element);
              var newHeight = offsetHeight(element);
              var changed = newWidth !== widthLastTime || newHeight !== heightLastTime;
              if (changed) {
                widthLastTime = newWidth;
                heightLastTime = newHeight;
                callback();
              }
              frameworkFactory.setTimeout(periodicallyCheckWidthAndHeight, debounceDelay);
            }
          };
          periodicallyCheckWidthAndHeight();
          return function() {
            return running = false;
          };
        };
        var suppressResize = this.gridOptionsWrapper.isSuppressBrowserResizeObserver();
        var resizeObserverExists = !!window.ResizeObserver;
        if (resizeObserverExists && !suppressResize) {
          return useBrowserResizeObserver();
        } else {
          return usePolyfill();
        }
      };
      __decorate$1A([
        Autowired("gridOptionsWrapper")
      ], ResizeObserverService2.prototype, "gridOptionsWrapper", void 0);
      ResizeObserverService2 = __decorate$1A([
        Bean("resizeObserverService")
      ], ResizeObserverService2);
      return ResizeObserverService2;
    }(BeanStub);
    var __extends$1B = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1B = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var LoadingType;
    (function(LoadingType2) {
      LoadingType2[LoadingType2["Loading"] = 0] = "Loading";
      LoadingType2[LoadingType2["NoRows"] = 1] = "NoRows";
    })(LoadingType || (LoadingType = {}));
    var OverlayWrapperComponent = function(_super) {
      __extends$1B(OverlayWrapperComponent2, _super);
      function OverlayWrapperComponent2() {
        var _this = _super.call(this, OverlayWrapperComponent2.TEMPLATE) || this;
        _this.inProgress = false;
        _this.destroyRequested = false;
        return _this;
      }
      OverlayWrapperComponent2.prototype.postConstruct = function() {
        this.gridOptionsWrapper.addLayoutElement(this.eOverlayWrapper);
        this.setDisplayed(false);
      };
      OverlayWrapperComponent2.prototype.setWrapperTypeClass = function(loadingType) {
        addOrRemoveCssClass(this.eOverlayWrapper, "ag-overlay-loading-wrapper", loadingType === LoadingType.Loading);
        addOrRemoveCssClass(this.eOverlayWrapper, "ag-overlay-no-rows-wrapper", loadingType === LoadingType.NoRows);
      };
      OverlayWrapperComponent2.prototype.showLoadingOverlay = function() {
        var workItem = this.userComponentFactory.newLoadingOverlayComponent({
          api: this.gridOptionsWrapper.getApi()
        });
        this.showOverlay(workItem, LoadingType.Loading);
      };
      OverlayWrapperComponent2.prototype.showNoRowsOverlay = function() {
        var workItem = this.userComponentFactory.newNoRowsOverlayComponent({
          api: this.gridOptionsWrapper.getApi()
        });
        this.showOverlay(workItem, LoadingType.NoRows);
      };
      OverlayWrapperComponent2.prototype.showOverlay = function(workItem, type) {
        var _this = this;
        if (this.inProgress) {
          return;
        }
        this.setWrapperTypeClass(type);
        this.destroyActiveOverlay();
        this.inProgress = true;
        workItem.then(function(comp) {
          _this.inProgress = false;
          _this.eOverlayWrapper.appendChild(comp.getGui());
          _this.activeOverlay = comp;
          if (_this.destroyRequested) {
            _this.destroyRequested = false;
            _this.destroyActiveOverlay();
          }
        });
        this.setDisplayed(true);
      };
      OverlayWrapperComponent2.prototype.destroyActiveOverlay = function() {
        if (this.inProgress) {
          this.destroyRequested = true;
          return;
        }
        if (!this.activeOverlay) {
          return;
        }
        this.activeOverlay = this.getContext().destroyBean(this.activeOverlay);
        clearElement(this.eOverlayWrapper);
      };
      OverlayWrapperComponent2.prototype.hideOverlay = function() {
        this.destroyActiveOverlay();
        this.setDisplayed(false);
      };
      OverlayWrapperComponent2.prototype.destroy = function() {
        this.destroyActiveOverlay();
        _super.prototype.destroy.call(this);
      };
      OverlayWrapperComponent2.TEMPLATE = '\n        <div class="ag-overlay" aria-hidden="true">\n            <div class="ag-overlay-panel">\n                <div class="ag-overlay-wrapper" ref="eOverlayWrapper"></div>\n            </div>\n        </div>';
      __decorate$1B([
        Autowired("gridOptionsWrapper")
      ], OverlayWrapperComponent2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1B([
        Autowired("userComponentFactory")
      ], OverlayWrapperComponent2.prototype, "userComponentFactory", void 0);
      __decorate$1B([
        RefSelector("eOverlayWrapper")
      ], OverlayWrapperComponent2.prototype, "eOverlayWrapper", void 0);
      __decorate$1B([
        PostConstruct
      ], OverlayWrapperComponent2.prototype, "postConstruct", null);
      return OverlayWrapperComponent2;
    }(Component);
    var __extends$1C = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1C = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgGroupComponent = function(_super) {
      __extends$1C(AgGroupComponent2, _super);
      function AgGroupComponent2(params) {
        if (params === void 0) {
          params = {};
        }
        var _this = _super.call(this, AgGroupComponent2.getTemplate(params)) || this;
        _this.suppressEnabledCheckbox = true;
        _this.suppressOpenCloseIcons = false;
        var title = params.title, enabled = params.enabled, items = params.items, suppressEnabledCheckbox = params.suppressEnabledCheckbox, suppressOpenCloseIcons = params.suppressOpenCloseIcons;
        _this.title = title;
        _this.cssIdentifier = params.cssIdentifier || "default";
        _this.enabled = enabled != null ? enabled : true;
        _this.items = items || [];
        _this.alignItems = params.alignItems || "center";
        if (suppressEnabledCheckbox != null) {
          _this.suppressEnabledCheckbox = suppressEnabledCheckbox;
        }
        if (suppressOpenCloseIcons != null) {
          _this.suppressOpenCloseIcons = suppressOpenCloseIcons;
        }
        return _this;
      }
      AgGroupComponent2.getTemplate = function(params) {
        var cssIdentifier = params.cssIdentifier || "default";
        var direction = params.direction || "vertical";
        return '<div class="ag-group ag-' + cssIdentifier + '-group">\n            <div class="ag-group-title-bar ag-' + cssIdentifier + '-group-title-bar ag-unselectable" ref="eTitleBar">\n                <span class="ag-group-title-bar-icon ag-' + cssIdentifier + '-group-title-bar-icon" ref="eGroupOpenedIcon"></span>\n                <span class="ag-group-title-bar-icon ag-' + cssIdentifier + '-group-title-bar-icon" ref="eGroupClosedIcon"></span>\n                <span ref="eTitle" class="ag-group-title ag-' + cssIdentifier + '-group-title"></span>\n            </div>\n            <div ref="eToolbar" class="ag-group-toolbar ag-' + cssIdentifier + '-group-toolbar">\n                <ag-checkbox ref="cbGroupEnabled"></ag-checkbox>\n            </div>\n            <div ref="eContainer" class="ag-group-container ag-group-container-' + direction + " ag-" + cssIdentifier + '-group-container"></div>\n        </div>';
      };
      AgGroupComponent2.prototype.postConstruct = function() {
        if (this.items.length) {
          var initialItems = this.items;
          this.items = [];
          this.addItems(initialItems);
        }
        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
        this.cbGroupEnabled.setLabel(localeTextFunc("enabled", "Enabled"));
        if (this.title) {
          this.setTitle(this.title);
        }
        if (this.enabled) {
          this.setEnabled(this.enabled);
        }
        this.setAlignItems(this.alignItems);
        this.hideEnabledCheckbox(this.suppressEnabledCheckbox);
        this.hideOpenCloseIcons(this.suppressOpenCloseIcons);
        this.setupExpandContract();
        this.refreshChildDisplay();
      };
      AgGroupComponent2.prototype.setupExpandContract = function() {
        var _this = this;
        this.eGroupClosedIcon.appendChild(createIcon("columnSelectClosed", this.gridOptionsWrapper, null));
        this.eGroupOpenedIcon.appendChild(createIcon("columnSelectOpen", this.gridOptionsWrapper, null));
        this.addManagedListener(this.eTitleBar, "click", function() {
          return _this.toggleGroupExpand();
        });
        this.addManagedListener(this.eTitleBar, "keydown", function(e) {
          switch (e.keyCode) {
            case KeyCode.ENTER:
              _this.toggleGroupExpand();
              break;
            case KeyCode.RIGHT:
              _this.toggleGroupExpand(true);
              break;
            case KeyCode.LEFT:
              _this.toggleGroupExpand(false);
              break;
          }
        });
      };
      AgGroupComponent2.prototype.refreshChildDisplay = function() {
        var showIcon = !this.suppressOpenCloseIcons;
        setDisplayed(this.eToolbar, this.expanded && !this.suppressEnabledCheckbox);
        setDisplayed(this.eGroupOpenedIcon, showIcon && this.expanded);
        setDisplayed(this.eGroupClosedIcon, showIcon && !this.expanded);
      };
      AgGroupComponent2.prototype.isExpanded = function() {
        return this.expanded;
      };
      AgGroupComponent2.prototype.setAlignItems = function(alignment) {
        var eGui = this.getGui();
        if (this.alignItems !== alignment) {
          removeCssClass(eGui, "ag-group-item-alignment-" + this.alignItems);
        }
        this.alignItems = alignment;
        var newCls = "ag-group-item-alignment-" + this.alignItems;
        addCssClass(eGui, newCls);
        return this;
      };
      AgGroupComponent2.prototype.toggleGroupExpand = function(expanded) {
        if (this.suppressOpenCloseIcons) {
          this.expanded = true;
          this.refreshChildDisplay();
          setDisplayed(this.eContainer, true);
          return this;
        }
        expanded = expanded != null ? expanded : !this.expanded;
        if (this.expanded === expanded) {
          return this;
        }
        this.expanded = expanded;
        this.refreshChildDisplay();
        setDisplayed(this.eContainer, expanded);
        this.dispatchEvent({ type: this.expanded ? AgGroupComponent2.EVENT_EXPANDED : AgGroupComponent2.EVENT_COLLAPSED });
        return this;
      };
      AgGroupComponent2.prototype.addItems = function(items) {
        var _this = this;
        items.forEach(function(item) {
          return _this.addItem(item);
        });
      };
      AgGroupComponent2.prototype.addItem = function(item) {
        var container = this.eContainer;
        var el = item instanceof Component ? item.getGui() : item;
        addCssClass(el, "ag-group-item");
        addCssClass(el, "ag-" + this.cssIdentifier + "-group-item");
        container.appendChild(el);
        this.items.push(el);
      };
      AgGroupComponent2.prototype.hideItem = function(hide, index) {
        var itemToHide = this.items[index];
        addOrRemoveCssClass(itemToHide, "ag-hidden", hide);
      };
      AgGroupComponent2.prototype.setTitle = function(title) {
        this.eTitle.innerText = title;
        return this;
      };
      AgGroupComponent2.prototype.addCssClassToTitleBar = function(cssClass) {
        addCssClass(this.eTitleBar, cssClass);
      };
      AgGroupComponent2.prototype.setEnabled = function(enabled, skipToggle) {
        this.enabled = enabled;
        this.refreshDisabledStyles();
        this.toggleGroupExpand(enabled);
        if (!skipToggle) {
          this.cbGroupEnabled.setValue(enabled);
        }
        return this;
      };
      AgGroupComponent2.prototype.isEnabled = function() {
        return this.enabled;
      };
      AgGroupComponent2.prototype.onEnableChange = function(callbackFn) {
        var _this = this;
        this.cbGroupEnabled.onValueChange(function(newSelection) {
          _this.setEnabled(newSelection, true);
          callbackFn(newSelection);
        });
        return this;
      };
      AgGroupComponent2.prototype.hideEnabledCheckbox = function(hide) {
        this.suppressEnabledCheckbox = hide;
        this.refreshChildDisplay();
        this.refreshDisabledStyles();
        return this;
      };
      AgGroupComponent2.prototype.hideOpenCloseIcons = function(hide) {
        this.suppressOpenCloseIcons = hide;
        if (hide) {
          this.toggleGroupExpand(true);
        }
        return this;
      };
      AgGroupComponent2.prototype.refreshDisabledStyles = function() {
        addOrRemoveCssClass(this.getGui(), "ag-disabled", !this.enabled);
        if (this.suppressEnabledCheckbox && !this.enabled) {
          addCssClass(this.eTitleBar, "ag-disabled-group-title-bar");
          this.eTitleBar.removeAttribute("tabindex");
        } else {
          removeCssClass(this.eTitleBar, "ag-disabled-group-title-bar");
          this.eTitleBar.setAttribute("tabindex", "0");
        }
        addOrRemoveCssClass(this.eContainer, "ag-disabled-group-container", !this.enabled);
      };
      AgGroupComponent2.EVENT_EXPANDED = "expanded";
      AgGroupComponent2.EVENT_COLLAPSED = "collapsed";
      __decorate$1C([
        Autowired("gridOptionsWrapper")
      ], AgGroupComponent2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1C([
        RefSelector("eTitleBar")
      ], AgGroupComponent2.prototype, "eTitleBar", void 0);
      __decorate$1C([
        RefSelector("eGroupOpenedIcon")
      ], AgGroupComponent2.prototype, "eGroupOpenedIcon", void 0);
      __decorate$1C([
        RefSelector("eGroupClosedIcon")
      ], AgGroupComponent2.prototype, "eGroupClosedIcon", void 0);
      __decorate$1C([
        RefSelector("eToolbar")
      ], AgGroupComponent2.prototype, "eToolbar", void 0);
      __decorate$1C([
        RefSelector("cbGroupEnabled")
      ], AgGroupComponent2.prototype, "cbGroupEnabled", void 0);
      __decorate$1C([
        RefSelector("eTitle")
      ], AgGroupComponent2.prototype, "eTitle", void 0);
      __decorate$1C([
        RefSelector("eContainer")
      ], AgGroupComponent2.prototype, "eContainer", void 0);
      __decorate$1C([
        PostConstruct
      ], AgGroupComponent2.prototype, "postConstruct", null);
      return AgGroupComponent2;
    }(Component);
    var __extends$1D = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1D = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgPanel = function(_super) {
      __extends$1D(AgPanel2, _super);
      function AgPanel2(config) {
        var _this = _super.call(this, AgPanel2.getTemplate(config)) || this;
        _this.closable = true;
        _this.positioned = false;
        _this.dragStartPosition = {
          x: 0,
          y: 0
        };
        _this.position = {
          x: 0,
          y: 0
        };
        _this.size = {
          width: void 0,
          height: void 0
        };
        _this.config = config;
        return _this;
      }
      AgPanel2.getTemplate = function(config) {
        var cssIdentifier = config && config.cssIdentifier || "default";
        return '<div class="ag-panel ag-' + cssIdentifier + '-panel" tabindex="-1">\n            <div ref="eTitleBar" class="ag-panel-title-bar ag-' + cssIdentifier + '-panel-title-bar ag-unselectable">\n                <span ref="eTitle" class="ag-panel-title-bar-title ag-' + cssIdentifier + '-panel-title-bar-title"></span>\n                <div ref="eTitleBarButtons" class="ag-panel-title-bar-buttons ag-' + cssIdentifier + '-panel-title-bar-buttons"></div>\n            </div>\n            <div ref="eContentWrapper" class="ag-panel-content-wrapper ag-' + cssIdentifier + '-panel-content-wrapper"></div>\n        </div>';
      };
      AgPanel2.prototype.postConstruct = function() {
        var _this = this;
        var _a = this.config, component = _a.component, closable = _a.closable, hideTitleBar = _a.hideTitleBar, title = _a.title, minWidth = _a.minWidth, width = _a.width, minHeight = _a.minHeight, height = _a.height, centered = _a.centered, x = _a.x, y = _a.y;
        var eGui = this.getGui();
        if (component) {
          this.setBodyComponent(component);
        }
        if (!hideTitleBar) {
          if (title) {
            this.setTitle(title);
          }
          this.setClosable(closable != null ? closable : this.closable);
        } else {
          addCssClass(this.eTitleBar, "ag-hidden");
        }
        this.addManagedListener(this.eTitleBar, "mousedown", function(e) {
          if (eGui.contains(e.relatedTarget) || eGui.contains(document.activeElement) || _this.eTitleBarButtons.contains(e.target)) {
            e.preventDefault();
            return;
          }
          var focusEl = _this.eContentWrapper.querySelector("button, [href], input, select, textarea, [tabindex]");
          if (focusEl) {
            focusEl.focus();
          }
        });
        if (this.positioned) {
          return;
        }
        this.minHeight = minHeight != null ? minHeight : 250;
        this.minWidth = minWidth != null ? minWidth : 250;
        this.popupParent = this.popupService.getPopupParent();
        if (width) {
          this.setWidth(width);
        }
        if (height) {
          this.setHeight(height);
        }
        if (this.renderComponent) {
          this.renderComponent();
        }
        if (!width || !height) {
          this.refreshSize();
        }
        if (centered) {
          this.center();
        } else if (x || y) {
          this.offsetElement(x, y);
        }
        this.positioned = true;
        this.eContentWrapper.style.height = "0";
      };
      AgPanel2.prototype.renderComponent = function() {
        var _this = this;
        var eGui = this.getGui();
        eGui.focus();
        this.close = function() {
          eGui.parentElement.removeChild(eGui);
          _this.destroy();
        };
      };
      AgPanel2.prototype.updateDragStartPosition = function(x, y) {
        this.dragStartPosition = { x, y };
      };
      AgPanel2.prototype.calculateMouseMovement = function(params) {
        var parentRect = this.popupParent.getBoundingClientRect();
        var e = params.e, isLeft = params.isLeft, isTop = params.isTop, anywhereWithin = params.anywhereWithin, topBuffer = params.topBuffer;
        var movementX = e.clientX - this.dragStartPosition.x;
        var movementY = e.clientY - this.dragStartPosition.y;
        var width = this.getWidth();
        var height = this.getHeight();
        var skipX = parentRect.left >= e.clientX && this.position.x <= 0 || parentRect.right <= e.clientX && parentRect.right <= this.position.x + parentRect.left + width;
        if (!skipX) {
          if (isLeft) {
            skipX = movementX < 0 && e.clientX > this.position.x + parentRect.left || movementX > 0 && e.clientX < this.position.x + parentRect.left;
          } else {
            if (anywhereWithin) {
              skipX = movementX < 0 && e.clientX > this.position.x + parentRect.left + width || movementX > 0 && e.clientX < this.position.x + parentRect.left;
            } else {
              skipX = movementX < 0 && e.clientX > this.position.x + parentRect.left + width || movementX > 0 && e.clientX < this.position.x + parentRect.left + width;
            }
          }
        }
        movementX = skipX ? 0 : movementX;
        var skipY = parentRect.top >= e.clientY && this.position.y <= 0 || parentRect.bottom <= e.clientY && parentRect.bottom <= this.position.y + parentRect.top + height || isTop && (movementY < 0 && e.clientY > this.position.y + parentRect.top + (topBuffer || 0) || movementY > 0 && e.clientY < this.position.y + parentRect.top) || !isTop && (movementY < 0 && e.clientY > this.position.y + parentRect.top + height || movementY > 0 && e.clientY < this.position.y + parentRect.top + height);
        movementY = skipY ? 0 : movementY;
        return { movementX, movementY };
      };
      AgPanel2.prototype.refreshSize = function() {
        var _a = this.size, width = _a.width, height = _a.height;
        if (!width) {
          this.setWidth(this.getGui().offsetWidth);
        }
        if (!height) {
          this.setHeight(this.getGui().offsetHeight);
        }
      };
      AgPanel2.prototype.offsetElement = function(x, y) {
        if (x === void 0) {
          x = 0;
        }
        if (y === void 0) {
          y = 0;
        }
        var ePopup = this.getGui();
        this.popupService.positionPopup({
          ePopup,
          x,
          y,
          minWidth: this.minWidth,
          minHeight: this.minHeight,
          keepWithinBounds: true
        });
        this.position.x = parseInt(ePopup.style.left, 10);
        this.position.y = parseInt(ePopup.style.top, 10);
      };
      AgPanel2.prototype.getHeight = function() {
        return this.size.height;
      };
      AgPanel2.prototype.setHeight = function(height) {
        var eGui = this.getGui();
        var isPercent = false;
        if (typeof height === "string" && height.indexOf("%") !== -1) {
          setFixedHeight(eGui, height);
          height = getAbsoluteHeight(eGui);
          isPercent = true;
        } else {
          height = Math.max(this.minHeight, height);
          var offsetParent = eGui.offsetParent;
          if (offsetParent && offsetParent.clientHeight && height + this.position.y > offsetParent.clientHeight) {
            height = offsetParent.clientHeight - this.position.y;
          }
        }
        if (this.size.height === height) {
          return;
        }
        this.size.height = height;
        if (!isPercent) {
          setFixedHeight(eGui, height);
        } else {
          eGui.style.maxHeight = "unset";
          eGui.style.minHeight = "unset";
        }
      };
      AgPanel2.prototype.getWidth = function() {
        return this.size.width;
      };
      AgPanel2.prototype.setWidth = function(width) {
        var eGui = this.getGui();
        var isPercent = false;
        if (typeof width === "string" && width.indexOf("%") !== -1) {
          setFixedWidth(eGui, width);
          width = getAbsoluteWidth(eGui);
          isPercent = true;
        } else {
          width = Math.max(this.minWidth, width);
          var offsetParent = eGui.offsetParent;
          if (offsetParent && offsetParent.clientWidth && width + this.position.x > offsetParent.clientWidth) {
            width = offsetParent.clientWidth - this.position.x;
          }
        }
        if (this.size.width === width) {
          return;
        }
        this.size.width = width;
        if (!isPercent) {
          setFixedWidth(eGui, width);
        } else {
          eGui.style.maxWidth = "unset";
          eGui.style.minWidth = "unset";
        }
      };
      AgPanel2.prototype.center = function() {
        var eGui = this.getGui();
        var x = eGui.offsetParent.clientWidth / 2 - this.getWidth() / 2;
        var y = eGui.offsetParent.clientHeight / 2 - this.getHeight() / 2;
        this.offsetElement(x, y);
      };
      AgPanel2.prototype.setClosable = function(closable) {
        if (closable !== this.closable) {
          this.closable = closable;
        }
        if (closable) {
          var closeButtonComp = this.closeButtonComp = new Component(AgPanel2.CLOSE_BTN_TEMPLATE);
          this.getContext().createBean(closeButtonComp);
          var eGui = closeButtonComp.getGui();
          eGui.appendChild(addCssClass(createIconNoSpan("close", this.gridOptionsWrapper), "ag-panel-title-bar-button-icon"));
          this.addTitleBarButton(closeButtonComp);
          closeButtonComp.addManagedListener(eGui, "click", this.onBtClose.bind(this));
        } else if (this.closeButtonComp) {
          var eGui = this.closeButtonComp.getGui();
          eGui.parentElement.removeChild(eGui);
          this.closeButtonComp = this.destroyBean(this.closeButtonComp);
        }
      };
      AgPanel2.prototype.setBodyComponent = function(bodyComponent) {
        bodyComponent.setParentComponent(this);
        this.eContentWrapper.appendChild(bodyComponent.getGui());
      };
      AgPanel2.prototype.addTitleBarButton = function(button, position) {
        var eTitleBarButtons = this.eTitleBarButtons;
        var buttons = eTitleBarButtons.children;
        var len = buttons.length;
        if (position == null) {
          position = len;
        }
        position = Math.max(0, Math.min(position, len));
        var eGui = button.getGui();
        addCssClass(eGui, "ag-panel-title-bar-button");
        if (position === 0) {
          eTitleBarButtons.insertAdjacentElement("afterbegin", eGui);
        } else if (position === len) {
          eTitleBarButtons.insertAdjacentElement("beforeend", eGui);
        } else {
          buttons[position - 1].insertAdjacentElement("afterend", eGui);
        }
        button.setParentComponent(this);
      };
      AgPanel2.prototype.getBodyHeight = function() {
        return getInnerHeight(this.eContentWrapper);
      };
      AgPanel2.prototype.getBodyWidth = function() {
        return getInnerWidth(this.eContentWrapper);
      };
      AgPanel2.prototype.setTitle = function(title) {
        this.eTitle.innerText = title;
      };
      AgPanel2.prototype.onBtClose = function() {
        this.close();
      };
      AgPanel2.prototype.destroy = function() {
        if (this.closeButtonComp) {
          this.closeButtonComp = this.destroyBean(this.closeButtonComp);
        }
        var eGui = this.getGui();
        if (eGui && eGui.offsetParent) {
          this.close();
        }
        _super.prototype.destroy.call(this);
      };
      AgPanel2.CLOSE_BTN_TEMPLATE = '<div class="ag-button"></div>';
      __decorate$1D([
        Autowired("popupService")
      ], AgPanel2.prototype, "popupService", void 0);
      __decorate$1D([
        Autowired("gridOptionsWrapper")
      ], AgPanel2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1D([
        RefSelector("eContentWrapper")
      ], AgPanel2.prototype, "eContentWrapper", void 0);
      __decorate$1D([
        RefSelector("eTitleBar")
      ], AgPanel2.prototype, "eTitleBar", void 0);
      __decorate$1D([
        RefSelector("eTitleBarButtons")
      ], AgPanel2.prototype, "eTitleBarButtons", void 0);
      __decorate$1D([
        RefSelector("eTitle")
      ], AgPanel2.prototype, "eTitle", void 0);
      __decorate$1D([
        PostConstruct
      ], AgPanel2.prototype, "postConstruct", null);
      return AgPanel2;
    }(Component);
    var __extends$1E = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1E = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgDialog = function(_super) {
      __extends$1E(AgDialog2, _super);
      function AgDialog2(config) {
        var _this = _super.call(this, config) || this;
        _this.RESIZE_TEMPLATE = '<div class="ag-resizer-wrapper">\n            <div ref="eTopLeftResizer" class="ag-resizer ag-resizer-topLeft"></div>\n            <div ref="eTopResizer" class="ag-resizer ag-resizer-top"></div>\n            <div ref="eTopRightResizer" class="ag-resizer ag-resizer-topRight"></div>\n            <div ref="eRightResizer" class="ag-resizer ag-resizer-right"></div>\n            <div ref="eBottomRightResizer" class="ag-resizer ag-resizer-bottomRight"></div>\n            <div ref="eBottomResizer" class="ag-resizer ag-resizer-bottom"></div>\n            <div ref="eBottomLeftResizer" class="ag-resizer ag-resizer-bottomLeft"></div>\n            <div ref="eLeftResizer" class="ag-resizer ag-resizer-left"></div>\n        </div>';
        _this.resizable = {};
        _this.movable = false;
        _this.isMoving = false;
        _this.isMaximizable = false;
        _this.isMaximized = false;
        _this.maximizeListeners = [];
        _this.resizeListenerDestroy = null;
        _this.isResizing = false;
        _this.lastPosition = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
        return _this;
      }
      AgDialog2.prototype.postConstruct = function() {
        var _this = this;
        var eGui = this.getGui();
        var _a = this.config, movable = _a.movable, resizable = _a.resizable, maximizable = _a.maximizable;
        addCssClass(eGui, "ag-dialog");
        this.moveElement = this.eTitleBar;
        _super.prototype.postConstruct.call(this);
        this.addManagedListener(eGui, "focusin", function(e) {
          if (eGui.contains(e.relatedTarget)) {
            return;
          }
          _this.popupService.bringPopupToFront(eGui);
        });
        if (movable) {
          this.setMovable(movable);
        }
        if (maximizable) {
          this.setMaximizable(maximizable);
        }
        this.addResizers();
        if (resizable) {
          this.setResizable(resizable);
        }
      };
      AgDialog2.prototype.renderComponent = function() {
        var eGui = this.getGui();
        var _a = this.config, alwaysOnTop = _a.alwaysOnTop, modal = _a.modal;
        this.close = this.popupService.addPopup({
          modal,
          eChild: eGui,
          closeOnEsc: true,
          closedCallback: this.destroy.bind(this),
          alwaysOnTop
        });
      };
      AgDialog2.prototype.addResizers = function() {
        var eGui = this.getGui();
        if (!eGui) {
          return;
        }
        var parser = new DOMParser();
        var resizers = parser.parseFromString(this.RESIZE_TEMPLATE, "text/html").body;
        eGui.appendChild(resizers.firstChild);
        this.createMap();
      };
      AgDialog2.prototype.createMap = function() {
        var eGui = this.getGui();
        this.resizerMap = {
          topLeft: { element: eGui.querySelector("[ref=eTopLeftResizer]") },
          top: { element: eGui.querySelector("[ref=eTopResizer]") },
          topRight: { element: eGui.querySelector("[ref=eTopRightResizer]") },
          right: { element: eGui.querySelector("[ref=eRightResizer]") },
          bottomRight: { element: eGui.querySelector("[ref=eBottomRightResizer]") },
          bottom: { element: eGui.querySelector("[ref=eBottomResizer]") },
          bottomLeft: { element: eGui.querySelector("[ref=eBottomLeftResizer]") },
          left: { element: eGui.querySelector("[ref=eLeftResizer]") }
        };
      };
      AgDialog2.prototype.getResizerElement = function(side) {
        return this.resizerMap[side].element;
      };
      AgDialog2.prototype.onResizeStart = function(e) {
        this.isResizing = true;
        this.updateDragStartPosition(e.clientX, e.clientY);
      };
      AgDialog2.prototype.onResize = function(e, side) {
        if (!this.isResizing) {
          return;
        }
        var isLeft = !!side.match(/left/i);
        var isRight = !!side.match(/right/i);
        var isTop = !!side.match(/top/i);
        var isBottom = !!side.match(/bottom/i);
        var isHorizontal = isLeft || isRight;
        var isVertical = isTop || isBottom;
        var _a = this.calculateMouseMovement({ e, isLeft, isTop }), movementX = _a.movementX, movementY = _a.movementY;
        var offsetLeft = 0;
        var offsetTop = 0;
        if (isHorizontal && movementX) {
          var direction = isLeft ? -1 : 1;
          var oldWidth = this.getWidth();
          var newWidth = oldWidth + movementX * direction;
          var skipWidth = false;
          if (isLeft) {
            offsetLeft = oldWidth - newWidth;
            if (this.position.x + offsetLeft <= 0 || newWidth <= this.minWidth) {
              skipWidth = true;
              offsetLeft = 0;
            }
          }
          if (!skipWidth) {
            this.setWidth(newWidth);
          }
        }
        if (isVertical && movementY) {
          var direction = isTop ? -1 : 1;
          var oldHeight = this.getHeight();
          var newHeight = oldHeight + movementY * direction;
          var skipHeight = false;
          if (isTop) {
            offsetTop = oldHeight - newHeight;
            if (this.position.y + offsetTop <= 0 || newHeight <= this.minHeight) {
              skipHeight = true;
              offsetTop = 0;
            }
          }
          if (!skipHeight) {
            this.setHeight(newHeight);
          }
        }
        this.updateDragStartPosition(e.clientX, e.clientY);
        if (offsetLeft || offsetTop) {
          this.offsetElement(this.position.x + offsetLeft, this.position.y + offsetTop);
        }
      };
      AgDialog2.prototype.onResizeEnd = function() {
        this.isResizing = false;
        var params = {
          type: "resize",
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi()
        };
        this.dispatchEvent(params);
      };
      AgDialog2.prototype.onMoveStart = function(e) {
        this.isMoving = true;
        this.updateDragStartPosition(e.clientX, e.clientY);
      };
      AgDialog2.prototype.onMove = function(e) {
        if (!this.isMoving) {
          return;
        }
        var _a = this.position, x = _a.x, y = _a.y;
        var _b = this.calculateMouseMovement({
          e,
          isTop: true,
          anywhereWithin: true,
          topBuffer: this.getHeight() - this.getBodyHeight()
        }), movementX = _b.movementX, movementY = _b.movementY;
        this.offsetElement(x + movementX, y + movementY);
        this.updateDragStartPosition(e.clientX, e.clientY);
      };
      AgDialog2.prototype.onMoveEnd = function() {
        this.isMoving = false;
      };
      AgDialog2.prototype.toggleMaximize = function() {
        if (this.isMaximized) {
          var _a = this.lastPosition, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
          this.setWidth(width);
          this.setHeight(height);
          this.offsetElement(x, y);
        } else {
          this.lastPosition.width = this.getWidth();
          this.lastPosition.height = this.getHeight();
          this.lastPosition.x = this.position.x;
          this.lastPosition.y = this.position.y;
          this.offsetElement(0, 0);
          this.setHeight("100%");
          this.setWidth("100%");
        }
        this.isMaximized = !this.isMaximized;
        this.refreshMaximizeIcon();
      };
      AgDialog2.prototype.refreshMaximizeIcon = function() {
        setDisplayed(this.maximizeIcon, !this.isMaximized);
        setDisplayed(this.minimizeIcon, this.isMaximized);
      };
      AgDialog2.prototype.clearMaximizebleListeners = function() {
        if (this.maximizeListeners.length) {
          this.maximizeListeners.forEach(function(destroyListener) {
            return destroyListener();
          });
          this.maximizeListeners.length = 0;
        }
        if (this.resizeListenerDestroy) {
          this.resizeListenerDestroy();
          this.resizeListenerDestroy = null;
        }
      };
      AgDialog2.prototype.destroy = function() {
        this.setResizable(false);
        this.setMovable(false);
        this.maximizeButtonComp = this.destroyBean(this.maximizeButtonComp);
        this.clearMaximizebleListeners();
        _super.prototype.destroy.call(this);
      };
      AgDialog2.prototype.setResizable = function(resizable) {
        var _this = this;
        if (typeof resizable === "boolean") {
          resizable = {
            topLeft: resizable,
            top: resizable,
            topRight: resizable,
            right: resizable,
            bottomRight: resizable,
            bottom: resizable,
            bottomLeft: resizable,
            left: resizable
          };
        }
        Object.keys(resizable).forEach(function(side) {
          var r = resizable;
          var s = side;
          var val = !!r[s];
          var el = _this.getResizerElement(s);
          var params = _this.resizerMap[s].dragSource || {
            eElement: el,
            onDragStart: _this.onResizeStart.bind(_this),
            onDragging: function(e) {
              return _this.onResize(e, s);
            },
            onDragStop: _this.onResizeEnd.bind(_this)
          };
          if (!!_this.resizable[s] !== val || !_this.isAlive() && !val) {
            if (val) {
              _this.dragService.addDragSource(params);
              el.style.pointerEvents = "all";
            } else {
              _this.dragService.removeDragSource(params);
              el.style.pointerEvents = "none";
            }
            _this.resizerMap[s].dragSource = val ? params : void 0;
          }
        });
      };
      AgDialog2.prototype.setMovable = function(movable) {
        if (movable === this.movable) {
          return;
        }
        this.movable = movable;
        var params = this.moveElementDragListener || {
          eElement: this.moveElement,
          onDragStart: this.onMoveStart.bind(this),
          onDragging: this.onMove.bind(this),
          onDragStop: this.onMoveEnd.bind(this)
        };
        if (movable) {
          this.dragService.addDragSource(params);
          this.moveElementDragListener = params;
        } else {
          this.dragService.removeDragSource(params);
          this.moveElementDragListener = void 0;
        }
      };
      AgDialog2.prototype.setMaximizable = function(maximizable) {
        var _this = this;
        if (!maximizable) {
          this.clearMaximizebleListeners();
          if (this.maximizeButtonComp) {
            this.destroyBean(this.maximizeButtonComp);
            this.maximizeButtonComp = this.maximizeIcon = this.minimizeIcon = void 0;
          }
          return;
        }
        var eTitleBar = this.eTitleBar;
        if (!eTitleBar || maximizable === this.isMaximizable) {
          return;
        }
        var maximizeButtonComp = this.maximizeButtonComp = this.createBean(new Component('<div class="ag-dialog-button"></span>'));
        var eGui = maximizeButtonComp.getGui();
        eGui.appendChild(this.maximizeIcon = createIconNoSpan("maximize", this.gridOptionsWrapper));
        addCssClass(this.maximizeIcon, "ag-panel-title-bar-button-icon");
        eGui.appendChild(this.minimizeIcon = createIconNoSpan("minimize", this.gridOptionsWrapper));
        addCssClass(this.minimizeIcon, "ag-panel-title-bar-button-icon");
        addCssClass(this.minimizeIcon, "ag-hidden");
        maximizeButtonComp.addManagedListener(eGui, "click", this.toggleMaximize.bind(this));
        this.addTitleBarButton(maximizeButtonComp, 0);
        this.maximizeListeners.push(this.addManagedListener(eTitleBar, "dblclick", this.toggleMaximize.bind(this)));
        this.resizeListenerDestroy = this.addManagedListener(this, "resize", function() {
          _this.isMaximized = false;
          _this.refreshMaximizeIcon();
        });
      };
      __decorate$1E([
        Autowired("dragService")
      ], AgDialog2.prototype, "dragService", void 0);
      return AgDialog2;
    }(AgPanel);
    var __extends$1F = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgInputTextField = function(_super) {
      __extends$1F(AgInputTextField2, _super);
      function AgInputTextField2(config, className, inputType) {
        if (className === void 0) {
          className = "ag-text-field";
        }
        if (inputType === void 0) {
          inputType = "text";
        }
        return _super.call(this, config, className, inputType) || this;
      }
      AgInputTextField2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        if (this.config.allowedCharPattern) {
          this.preventDisallowedCharacters();
        }
      };
      AgInputTextField2.prototype.setValue = function(value, silent) {
        var ret = _super.prototype.setValue.call(this, value, silent);
        if (this.eInput.value !== value) {
          this.eInput.value = exists(value) ? value : "";
        }
        return ret;
      };
      AgInputTextField2.prototype.preventDisallowedCharacters = function() {
        var pattern = new RegExp("[" + this.config.allowedCharPattern + "]");
        var preventDisallowedCharacters = function(event) {
          if (event.key && !pattern.test(event.key)) {
            event.preventDefault();
          }
        };
        this.addManagedListener(this.eInput, "keypress", preventDisallowedCharacters);
        this.addManagedListener(this.eInput, "paste", function(e) {
          var text = e.clipboardData.getData("text");
          if (some(text, function(c) {
            return !pattern.test(c);
          })) {
            e.preventDefault();
          }
        });
      };
      return AgInputTextField2;
    }(AgAbstractInputField);
    var __extends$1G = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgInputTextArea = function(_super) {
      __extends$1G(AgInputTextArea2, _super);
      function AgInputTextArea2(config) {
        return _super.call(this, config, "ag-text-area", null, "textarea") || this;
      }
      AgInputTextArea2.prototype.setValue = function(value, silent) {
        var ret = _super.prototype.setValue.call(this, value, silent);
        this.eInput.value = value;
        return ret;
      };
      AgInputTextArea2.prototype.setCols = function(cols) {
        this.eInput.cols = cols;
        return this;
      };
      AgInputTextArea2.prototype.setRows = function(rows) {
        this.eInput.rows = rows;
        return this;
      };
      return AgInputTextArea2;
    }(AgAbstractInputField);
    var __extends$1H = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1F = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgSlider = function(_super) {
      __extends$1H(AgSlider2, _super);
      function AgSlider2(config) {
        var _this = _super.call(this, config, AgSlider2.TEMPLATE) || this;
        _this.labelAlignment = "top";
        return _this;
      }
      AgSlider2.prototype.init = function() {
        addCssClass(this.eSlider.getGui(), "ag-slider-field");
      };
      AgSlider2.prototype.onValueChange = function(callbackFn) {
        var _this = this;
        var eventChanged = AgAbstractField.EVENT_CHANGED;
        this.addManagedListener(this.eText, eventChanged, function() {
          var textValue = parseFloat(_this.eText.getValue());
          _this.eSlider.setValue(textValue.toString(), true);
          callbackFn(textValue || 0);
        });
        this.addManagedListener(this.eSlider, eventChanged, function() {
          var sliderValue = _this.eSlider.getValue();
          _this.eText.setValue(sliderValue, true);
          callbackFn(parseFloat(sliderValue));
        });
        return this;
      };
      AgSlider2.prototype.setSliderWidth = function(width) {
        this.eSlider.setWidth(width);
        return this;
      };
      AgSlider2.prototype.setTextFieldWidth = function(width) {
        this.eText.setWidth(width);
        return this;
      };
      AgSlider2.prototype.setMinValue = function(minValue) {
        this.eSlider.setMinValue(minValue);
        this.eText.setMin(minValue);
        return this;
      };
      AgSlider2.prototype.setMaxValue = function(maxValue) {
        this.eSlider.setMaxValue(maxValue);
        this.eText.setMax(maxValue);
        return this;
      };
      AgSlider2.prototype.getValue = function() {
        return this.eText.getValue();
      };
      AgSlider2.prototype.setValue = function(value) {
        if (this.getValue() === value) {
          return this;
        }
        this.eText.setValue(value, true);
        this.eSlider.setValue(value, true);
        this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });
        return this;
      };
      AgSlider2.prototype.setStep = function(step) {
        this.eSlider.setStep(step);
        this.eText.setStep(step);
        return this;
      };
      AgSlider2.TEMPLATE = '<div class="ag-slider">\n            <label ref="eLabel"></label>\n            <div class="ag-wrapper ag-slider-wrapper">\n                <ag-input-range ref="eSlider"></ag-input-range>\n                <ag-input-number-field ref="eText"></ag-input-number-field>\n            </div>\n        </div>';
      __decorate$1F([
        RefSelector("eLabel")
      ], AgSlider2.prototype, "eLabel", void 0);
      __decorate$1F([
        RefSelector("eSlider")
      ], AgSlider2.prototype, "eSlider", void 0);
      __decorate$1F([
        RefSelector("eText")
      ], AgSlider2.prototype, "eText", void 0);
      __decorate$1F([
        PostConstruct
      ], AgSlider2.prototype, "init", null);
      return AgSlider2;
    }(AgAbstractLabel);
    var __extends$1I = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1G = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgColorPanel = function(_super) {
      __extends$1I(AgColorPanel2, _super);
      function AgColorPanel2(config) {
        var _this = _super.call(this, AgColorPanel2.TEMPLATE) || this;
        _this.H = 1;
        _this.S = 1;
        _this.B = 1;
        _this.A = 1;
        _this.isSpectrumDragging = false;
        _this.isSpectrumHueDragging = false;
        _this.isSpectrumAlphaDragging = false;
        _this.colorChanged = false;
        _this.picker = config.picker;
        return _this;
      }
      AgColorPanel2.prototype.postConstruct = function() {
        var eGui = this.getGui();
        this.initRecentColors();
        this.addManagedListener(this.spectrumVal, "mousedown", this.onSpectrumDraggerDown.bind(this));
        this.addManagedListener(eGui, "mousemove", this.onSpectrumDraggerMove.bind(this));
        this.addManagedListener(this.spectrumHue, "mousedown", this.onSpectrumHueDown.bind(this));
        this.addManagedListener(eGui, "mousemove", this.onSpectrumHueMove.bind(this));
        this.addManagedListener(this.spectrumAlpha, "mousedown", this.onSpectrumAlphaDown.bind(this));
        this.addManagedListener(eGui, "mousemove", this.onSpectrumAlphaMove.bind(this));
        this.addManagedListener(document, "mouseup", this.onMouseUp.bind(this));
        this.addManagedListener(this.recentColors, "click", this.onRecentColorClick.bind(this));
      };
      AgColorPanel2.prototype.refreshSpectrumRect = function() {
        return this.spectrumValRect = this.spectrumVal.getBoundingClientRect();
      };
      AgColorPanel2.prototype.refreshHueRect = function() {
        return this.spectrumHueRect = this.spectrumHue.getBoundingClientRect();
      };
      AgColorPanel2.prototype.refreshAlphaRect = function() {
        return this.spectrumAlphaRect = this.spectrumAlpha.getBoundingClientRect();
      };
      AgColorPanel2.prototype.onSpectrumDraggerDown = function(e) {
        this.refreshSpectrumRect();
        this.isSpectrumDragging = true;
        this.moveDragger(e);
      };
      AgColorPanel2.prototype.onSpectrumDraggerMove = function(e) {
        if (this.isSpectrumDragging) {
          this.moveDragger(e);
        }
      };
      AgColorPanel2.prototype.onSpectrumHueDown = function(e) {
        this.refreshHueRect();
        this.isSpectrumHueDragging = true;
        this.moveHueSlider(e);
      };
      AgColorPanel2.prototype.onSpectrumHueMove = function(e) {
        if (this.isSpectrumHueDragging) {
          this.moveHueSlider(e);
        }
      };
      AgColorPanel2.prototype.onSpectrumAlphaDown = function(e) {
        this.refreshAlphaRect();
        this.isSpectrumAlphaDragging = true;
        this.moveAlphaSlider(e);
      };
      AgColorPanel2.prototype.onSpectrumAlphaMove = function(e) {
        if (this.isSpectrumAlphaDragging) {
          this.moveAlphaSlider(e);
        }
      };
      AgColorPanel2.prototype.onMouseUp = function() {
        this.isSpectrumDragging = false;
        this.isSpectrumHueDragging = false;
        this.isSpectrumAlphaDragging = false;
      };
      AgColorPanel2.prototype.moveDragger = function(e) {
        var valRect = this.spectrumValRect;
        if (valRect) {
          var x = e.clientX - valRect.left;
          var y = e.clientY - valRect.top;
          x = Math.max(x, 0);
          x = Math.min(x, valRect.width);
          y = Math.max(y, 0);
          y = Math.min(y, valRect.height);
          this.setSpectrumValue(x / valRect.width, 1 - y / valRect.height);
        }
      };
      AgColorPanel2.prototype.moveHueSlider = function(e) {
        var hueRect = this.spectrumHueRect;
        if (hueRect) {
          var slider = this.spectrumHueSlider;
          var sliderRect = slider.getBoundingClientRect();
          var x = e.clientX - hueRect.left;
          x = Math.max(x, 0);
          x = Math.min(x, hueRect.width);
          this.H = 1 - x / hueRect.width;
          slider.style.left = x + sliderRect.width / 2 + "px";
          this.update();
        }
      };
      AgColorPanel2.prototype.moveAlphaSlider = function(e) {
        var alphaRect = this.spectrumAlphaRect;
        if (alphaRect) {
          var slider = this.spectrumAlphaSlider;
          var sliderRect = slider.getBoundingClientRect();
          var x = e.clientX - alphaRect.left;
          x = Math.max(x, 0);
          x = Math.min(x, alphaRect.width);
          this.A = x / alphaRect.width;
          slider.style.left = x + sliderRect.width / 2 + "px";
          this.update();
        }
      };
      AgColorPanel2.prototype.update = function() {
        var color = Color.fromHSB(this.H * 360, this.S, this.B, this.A);
        var spectrumColor = Color.fromHSB(this.H * 360, 1, 1);
        var rgbaColor = color.toRgbaString();
        var colorPicker = this.picker;
        var existingColor = Color.fromString(colorPicker.getValue());
        if (existingColor.toRgbaString() !== rgbaColor) {
          this.colorChanged = true;
        }
        colorPicker.setValue(rgbaColor);
        this.spectrumColor.style.backgroundColor = spectrumColor.toRgbaString();
        this.spectrumDragger.style.backgroundColor = rgbaColor;
      };
      AgColorPanel2.prototype.setSpectrumValue = function(saturation, brightness) {
        var valRect = this.spectrumValRect || this.refreshSpectrumRect();
        if (valRect) {
          var dragger = this.spectrumDragger;
          var draggerRect = dragger.getBoundingClientRect();
          saturation = Math.max(0, saturation);
          saturation = Math.min(1, saturation);
          brightness = Math.max(0, brightness);
          brightness = Math.min(1, brightness);
          this.S = saturation;
          this.B = brightness;
          dragger.style.left = saturation * valRect.width - draggerRect.width / 2 + "px";
          dragger.style.top = (1 - brightness) * valRect.height - draggerRect.height / 2 + "px";
          this.update();
        }
      };
      AgColorPanel2.prototype.initRecentColors = function() {
        var recentColors = AgColorPanel2.recentColors;
        var innerHtml = recentColors.map(function(color, index) {
          return '<div class="ag-recent-color" id=' + index + ' style="background-color: ' + color + '; width: 15px; height: 15px;" recent-color="' + color + '"></div>';
        });
        this.recentColors.innerHTML = innerHtml.join("");
      };
      AgColorPanel2.prototype.setValue = function(val) {
        var color = Color.fromString(val);
        var _a = color.toHSB(), h = _a[0], s = _a[1], b = _a[2];
        this.H = (isNaN(h) ? 0 : h) / 360;
        this.A = color.a;
        var spectrumHueRect = this.spectrumHueRect || this.refreshHueRect();
        var spectrumAlphaRect = this.spectrumAlphaRect || this.refreshAlphaRect();
        this.spectrumHueSlider.style.left = (this.H - 1) * -spectrumHueRect.width + "px";
        this.spectrumAlphaSlider.style.left = this.A * spectrumAlphaRect.width + "px";
        this.setSpectrumValue(s, b);
      };
      AgColorPanel2.prototype.onRecentColorClick = function(e) {
        var target = e.target;
        if (!exists(target.id)) {
          return;
        }
        var id = parseInt(target.id, 10);
        this.setValue(AgColorPanel2.recentColors[id]);
        this.destroy();
      };
      AgColorPanel2.prototype.addRecentColor = function() {
        var color = Color.fromHSB(this.H * 360, this.S, this.B, this.A);
        var rgbaColor = color.toRgbaString();
        var recentColors = AgColorPanel2.recentColors;
        if (!this.colorChanged || recentColors[0] === rgbaColor) {
          return;
        }
        recentColors = recentColors.filter(function(color2) {
          return color2 != rgbaColor;
        });
        recentColors = [rgbaColor].concat(recentColors);
        if (recentColors.length > AgColorPanel2.maxRecentColors) {
          recentColors = recentColors.slice(0, AgColorPanel2.maxRecentColors);
        }
        AgColorPanel2.recentColors = recentColors;
      };
      AgColorPanel2.prototype.destroy = function() {
        this.addRecentColor();
        _super.prototype.destroy.call(this);
      };
      AgColorPanel2.maxRecentColors = 8;
      AgColorPanel2.recentColors = [];
      AgColorPanel2.TEMPLATE = '<div class="ag-color-panel">\n            <div ref="spectrumColor" class="ag-spectrum-color">\n                <div class="ag-spectrum-sat ag-spectrum-fill">\n                    <div ref="spectrumVal" class="ag-spectrum-val ag-spectrum-fill">\n                        <div ref="spectrumDragger" class="ag-spectrum-dragger"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="ag-spectrum-tools">\n                <div ref="spectrumHue" class="ag-spectrum-hue ag-spectrum-tool">\n                    <div class="ag-spectrum-hue-background"></div>\n                    <div ref="spectrumHueSlider" class="ag-spectrum-slider"></div>\n                </div>\n                <div ref="spectrumAlpha" class="ag-spectrum-alpha ag-spectrum-tool">\n                    <div class="ag-spectrum-alpha-background"></div>\n                    <div ref="spectrumAlphaSlider" class="ag-spectrum-slider"></div>\n                </div>\n                <div ref="recentColors" class="ag-recent-colors"></div>\n            </div>\n        </div>';
      __decorate$1G([
        RefSelector("spectrumColor")
      ], AgColorPanel2.prototype, "spectrumColor", void 0);
      __decorate$1G([
        RefSelector("spectrumVal")
      ], AgColorPanel2.prototype, "spectrumVal", void 0);
      __decorate$1G([
        RefSelector("spectrumDragger")
      ], AgColorPanel2.prototype, "spectrumDragger", void 0);
      __decorate$1G([
        RefSelector("spectrumHue")
      ], AgColorPanel2.prototype, "spectrumHue", void 0);
      __decorate$1G([
        RefSelector("spectrumHueSlider")
      ], AgColorPanel2.prototype, "spectrumHueSlider", void 0);
      __decorate$1G([
        RefSelector("spectrumAlpha")
      ], AgColorPanel2.prototype, "spectrumAlpha", void 0);
      __decorate$1G([
        RefSelector("spectrumAlphaSlider")
      ], AgColorPanel2.prototype, "spectrumAlphaSlider", void 0);
      __decorate$1G([
        RefSelector("recentColors")
      ], AgColorPanel2.prototype, "recentColors", void 0);
      __decorate$1G([
        PostConstruct
      ], AgColorPanel2.prototype, "postConstruct", null);
      return AgColorPanel2;
    }(Component);
    var __extends$1J = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1H = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgPickerField = function(_super) {
      __extends$1J(AgPickerField2, _super);
      function AgPickerField2(config, className, pickerIcon, popupRole) {
        var _this = _super.call(this, config, '<div class="ag-picker-field" role="presentation">\n                <div ref="eLabel"></div>\n                <div ref="eWrapper"\n                    class="ag-wrapper ag-picker-field-wrapper"\n                    tabIndex="-1"\n                    ' + (popupRole ? 'aria-haspopup="' + popupRole + '"' : "") + '>\n                    <div ref="eDisplayField" class="ag-picker-field-display"></div>\n                    <div ref="eIcon" class="ag-picker-field-icon" aria-hidden="true"></div>\n                </div>\n            </div>', className) || this;
        _this.pickerIcon = pickerIcon;
        _this.isPickerDisplayed = false;
        _this.isDestroyingPicker = false;
        _this.skipClick = false;
        return _this;
      }
      AgPickerField2.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        var displayId = this.getCompId() + "-display";
        this.eDisplayField.setAttribute("id", displayId);
        setAriaDescribedBy(this.eWrapper, displayId);
        var clickHandler = function() {
          if (_this.skipClick) {
            _this.skipClick = false;
            return;
          }
          if (_this.isDisabled()) {
            return;
          }
          _this.pickerComponent = _this.showPicker();
        };
        var eGui = this.getGui();
        this.addManagedListener(eGui, "mousedown", function(e) {
          if (!_this.skipClick && _this.pickerComponent && _this.pickerComponent.isAlive() && isVisible(_this.pickerComponent.getGui()) && eGui.contains(e.target)) {
            _this.skipClick = true;
          }
        });
        this.addManagedListener(eGui, "keydown", function(e) {
          switch (e.keyCode) {
            case KeyCode.UP:
            case KeyCode.DOWN:
            case KeyCode.ENTER:
            case KeyCode.SPACE:
              clickHandler();
            case KeyCode.ESCAPE:
              if (_this.isPickerDisplayed) {
                e.preventDefault();
              }
              break;
          }
        });
        this.addManagedListener(this.eWrapper, "click", clickHandler);
        this.addManagedListener(this.eLabel, "click", clickHandler);
        if (this.pickerIcon) {
          this.eIcon.appendChild(createIconNoSpan(this.pickerIcon, this.gridOptionsWrapper));
        }
      };
      AgPickerField2.prototype.refreshLabel = function() {
        if (exists(this.getLabel())) {
          setAriaLabelledBy(this.eWrapper, this.getLabelId());
        } else {
          this.eWrapper.removeAttribute("aria-labelledby");
        }
        _super.prototype.refreshLabel.call(this);
      };
      AgPickerField2.prototype.setAriaLabel = function(label) {
        setAriaLabel(this.eWrapper, label);
        return this;
      };
      AgPickerField2.prototype.setInputWidth = function(width) {
        setElementWidth(this.eWrapper, width);
        return this;
      };
      AgPickerField2.prototype.getFocusableElement = function() {
        return this.eWrapper;
      };
      __decorate$1H([
        Autowired("gridOptionsWrapper")
      ], AgPickerField2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1H([
        RefSelector("eLabel")
      ], AgPickerField2.prototype, "eLabel", void 0);
      __decorate$1H([
        RefSelector("eWrapper")
      ], AgPickerField2.prototype, "eWrapper", void 0);
      __decorate$1H([
        RefSelector("eDisplayField")
      ], AgPickerField2.prototype, "eDisplayField", void 0);
      __decorate$1H([
        RefSelector("eIcon")
      ], AgPickerField2.prototype, "eIcon", void 0);
      return AgPickerField2;
    }(AgAbstractField);
    var __extends$1K = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgColorPicker = function(_super) {
      __extends$1K(AgColorPicker2, _super);
      function AgColorPicker2(config) {
        var _this = _super.call(this, config, "ag-color-picker", "colorPicker") || this;
        if (config && config.color) {
          _this.value = config.color;
        }
        return _this;
      }
      AgColorPicker2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        if (this.value) {
          this.setValue(this.value);
        }
      };
      AgColorPicker2.prototype.showPicker = function() {
        var _this = this;
        var eGuiRect = this.getGui().getBoundingClientRect();
        var colorDialog = this.createBean(new AgDialog({
          closable: false,
          modal: true,
          hideTitleBar: true,
          minWidth: 190,
          width: 190,
          height: 250,
          x: eGuiRect.right - 190,
          y: eGuiRect.top - 250
        }));
        this.isPickerDisplayed = true;
        addCssClass(colorDialog.getGui(), "ag-color-dialog");
        var colorPanel = this.createBean(new AgColorPanel({ picker: this }));
        colorPanel.addDestroyFunc(function() {
          if (colorDialog.isAlive()) {
            _this.destroyBean(colorDialog);
          }
        });
        colorDialog.setParentComponent(this);
        colorDialog.setBodyComponent(colorPanel);
        colorPanel.setValue(this.getValue());
        colorDialog.addDestroyFunc(function() {
          if (!_this.isDestroyingPicker) {
            _this.isDestroyingPicker = true;
            if (colorPanel.isAlive()) {
              _this.destroyBean(colorPanel);
            }
          } else {
            _this.isDestroyingPicker = false;
          }
          if (_this.isAlive()) {
            _this.getFocusableElement().focus();
          }
          _this.isPickerDisplayed = false;
        });
        return colorDialog;
      };
      AgColorPicker2.prototype.setValue = function(color) {
        if (this.value === color) {
          return this;
        }
        this.value = color;
        this.eDisplayField.style.backgroundColor = color;
        this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });
        return this;
      };
      AgColorPicker2.prototype.getValue = function() {
        return this.value;
      };
      return AgColorPicker2;
    }(AgPickerField);
    var __extends$1L = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgInputNumberField = function(_super) {
      __extends$1L(AgInputNumberField2, _super);
      function AgInputNumberField2(config) {
        return _super.call(this, config, "ag-number-field", "number") || this;
      }
      AgInputNumberField2.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        this.addManagedListener(this.eInput, "blur", function() {
          var floatedValue = parseFloat(_this.eInput.value);
          var value = isNaN(floatedValue) ? "" : _this.normalizeValue(floatedValue.toString());
          if (_this.value !== value) {
            _this.setValue(value);
          }
        });
      };
      AgInputNumberField2.prototype.normalizeValue = function(value) {
        if (value === "") {
          return "";
        }
        if (this.precision) {
          value = this.adjustPrecision(value);
        }
        var val = parseFloat(value);
        if (this.min != null && val < this.min) {
          value = this.min.toString();
        } else if (this.max != null && val > this.max) {
          value = this.max.toString();
        }
        return value;
      };
      AgInputNumberField2.prototype.adjustPrecision = function(value) {
        if (this.precision) {
          var floatString = parseFloat(value).toFixed(this.precision);
          value = parseFloat(floatString).toString();
        }
        return value;
      };
      AgInputNumberField2.prototype.setMin = function(min) {
        if (this.min === min) {
          return this;
        }
        this.min = min;
        addOrRemoveAttribute(this.eInput, "min", min);
        return this;
      };
      AgInputNumberField2.prototype.setMax = function(max) {
        if (this.max === max) {
          return this;
        }
        this.max = max;
        addOrRemoveAttribute(this.eInput, "max", max);
        return this;
      };
      AgInputNumberField2.prototype.setPrecision = function(precision) {
        this.precision = precision;
        return this;
      };
      AgInputNumberField2.prototype.setStep = function(step) {
        if (this.step === step) {
          return this;
        }
        this.step = step;
        addOrRemoveAttribute(this.eInput, "step", step);
        return this;
      };
      AgInputNumberField2.prototype.setValue = function(value, silent) {
        value = this.adjustPrecision(value);
        var normalizedValue = this.normalizeValue(value);
        if (value != normalizedValue) {
          return this;
        }
        return _super.prototype.setValue.call(this, value, silent);
      };
      return AgInputNumberField2;
    }(AgInputTextField);
    var __extends$1M = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgInputRange = function(_super) {
      __extends$1M(AgInputRange2, _super);
      function AgInputRange2(config) {
        return _super.call(this, config, "ag-range-field", "range") || this;
      }
      AgInputRange2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        var _a = this.config, min = _a.min, max = _a.max, step = _a.step;
        if (min != null) {
          this.setMinValue(min);
        }
        if (max != null) {
          this.setMaxValue(max);
        }
        this.setStep(step || 1);
      };
      AgInputRange2.prototype.addInputListeners = function() {
        var _this = this;
        var isIE2 = isBrowserIE();
        var eventName = isIE2 ? "change" : "input";
        this.addManagedListener(this.eInput, eventName, function(e) {
          var value = e.target.value;
          _this.setValue(value);
        });
      };
      AgInputRange2.prototype.setMinValue = function(value) {
        this.min = value;
        this.eInput.setAttribute("min", value.toString());
        return this;
      };
      AgInputRange2.prototype.setMaxValue = function(value) {
        this.max = value;
        this.eInput.setAttribute("max", value.toString());
        return this;
      };
      AgInputRange2.prototype.setStep = function(value) {
        this.eInput.setAttribute("step", value.toString());
        return this;
      };
      AgInputRange2.prototype.setValue = function(value, silent) {
        if (this.min != null) {
          value = Math.max(parseFloat(value), this.min).toString();
        }
        if (this.max != null) {
          value = Math.min(parseFloat(value), this.max).toString();
        }
        var ret = _super.prototype.setValue.call(this, value, silent);
        this.eInput.value = value;
        return ret;
      };
      return AgInputRange2;
    }(AgAbstractInputField);
    var __extends$1N = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1I = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgList = function(_super) {
      __extends$1N(AgList2, _super);
      function AgList2(cssIdentifier) {
        if (cssIdentifier === void 0) {
          cssIdentifier = "default";
        }
        var _this = _super.call(this, '<div class="ag-list ag-' + cssIdentifier + '-list" role="listbox"></div>') || this;
        _this.cssIdentifier = cssIdentifier;
        _this.options = [];
        _this.itemEls = [];
        return _this;
      }
      AgList2.prototype.init = function() {
        this.addManagedListener(this.getGui(), "keydown", this.handleKeyDown.bind(this));
      };
      AgList2.prototype.handleKeyDown = function(e) {
        var key = e.keyCode;
        switch (key) {
          case KeyCode.ENTER:
            if (!this.highlightedEl) {
              this.setValue(this.getValue());
            } else {
              var pos = this.itemEls.indexOf(this.highlightedEl);
              this.setValueByIndex(pos);
            }
            break;
          case KeyCode.DOWN:
          case KeyCode.UP:
            var isDown = key === KeyCode.DOWN;
            var itemToHighlight = void 0;
            e.preventDefault();
            if (!this.highlightedEl) {
              itemToHighlight = this.itemEls[isDown ? 0 : this.itemEls.length - 1];
            } else {
              var currentIdx = this.itemEls.indexOf(this.highlightedEl);
              var nextPos = currentIdx + (isDown ? 1 : -1);
              nextPos = Math.min(Math.max(nextPos, 0), this.itemEls.length - 1);
              itemToHighlight = this.itemEls[nextPos];
            }
            this.highlightItem(itemToHighlight);
            break;
        }
      };
      AgList2.prototype.addOptions = function(listOptions) {
        var _this = this;
        listOptions.forEach(function(listOption) {
          return _this.addOption(listOption);
        });
        return this;
      };
      AgList2.prototype.addOption = function(listOption) {
        var value = listOption.value, text = listOption.text;
        var sanitisedText = escapeString(text || value);
        this.options.push({ value, text: sanitisedText });
        this.renderOption(value, sanitisedText);
        return this;
      };
      AgList2.prototype.renderOption = function(value, text) {
        var _this = this;
        var itemEl = document.createElement("div");
        itemEl.setAttribute("role", "option");
        addCssClass(itemEl, "ag-list-item");
        addCssClass(itemEl, "ag-" + this.cssIdentifier + "-list-item");
        itemEl.innerHTML = text;
        itemEl.tabIndex = -1;
        this.itemEls.push(itemEl);
        this.addManagedListener(itemEl, "mouseover", function() {
          return _this.highlightItem(itemEl);
        });
        this.addManagedListener(itemEl, "mouseleave", function() {
          return _this.clearHighlighted();
        });
        this.addManagedListener(itemEl, "click", function() {
          return _this.setValue(value);
        });
        this.getGui().appendChild(itemEl);
      };
      AgList2.prototype.setValue = function(value, silent) {
        if (this.value === value) {
          this.fireItemSelected();
          return this;
        }
        if (value == null) {
          this.reset();
          return this;
        }
        var idx = findIndex(this.options, function(option2) {
          return option2.value === value;
        });
        if (idx !== -1) {
          var option = this.options[idx];
          this.value = option.value;
          this.displayValue = option.text != null ? option.text : option.value;
          this.highlightItem(this.itemEls[idx]);
          if (!silent) {
            this.fireChangeEvent();
          }
        }
        return this;
      };
      AgList2.prototype.setValueByIndex = function(idx) {
        return this.setValue(this.options[idx].value);
      };
      AgList2.prototype.getValue = function() {
        return this.value;
      };
      AgList2.prototype.getDisplayValue = function() {
        return this.displayValue;
      };
      AgList2.prototype.refreshHighlighted = function() {
        var _this = this;
        this.clearHighlighted();
        var idx = findIndex(this.options, function(option) {
          return option.value === _this.value;
        });
        if (idx !== -1) {
          this.highlightItem(this.itemEls[idx]);
        }
      };
      AgList2.prototype.reset = function() {
        this.value = null;
        this.displayValue = null;
        this.clearHighlighted();
        this.fireChangeEvent();
      };
      AgList2.prototype.highlightItem = function(el) {
        if (!el.offsetParent) {
          return;
        }
        this.clearHighlighted();
        this.highlightedEl = el;
        addCssClass(this.highlightedEl, AgList2.ACTIVE_CLASS);
        setAriaSelected(this.highlightedEl, true);
        this.highlightedEl.focus();
      };
      AgList2.prototype.clearHighlighted = function() {
        if (!this.highlightedEl || !this.highlightedEl.offsetParent) {
          return;
        }
        removeCssClass(this.highlightedEl, AgList2.ACTIVE_CLASS);
        setAriaSelected(this.highlightedEl, false);
        this.highlightedEl = null;
      };
      AgList2.prototype.fireChangeEvent = function() {
        this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });
        this.fireItemSelected();
      };
      AgList2.prototype.fireItemSelected = function() {
        this.dispatchEvent({ type: AgList2.EVENT_ITEM_SELECTED });
      };
      AgList2.EVENT_ITEM_SELECTED = "selectedItem";
      AgList2.ACTIVE_CLASS = "ag-active-item";
      __decorate$1I([
        PostConstruct
      ], AgList2.prototype, "init", null);
      return AgList2;
    }(Component);
    var __extends$1O = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1J = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgSelect = function(_super) {
      __extends$1O(AgSelect2, _super);
      function AgSelect2(config) {
        return _super.call(this, config, "ag-select", "smallDown", "listbox") || this;
      }
      AgSelect2.prototype.init = function() {
        var _this = this;
        this.listComponent = this.createBean(new AgList("select"));
        this.listComponent.setParentComponent(this);
        this.eWrapper.tabIndex = 0;
        this.listComponent.addManagedListener(this.listComponent, AgList.EVENT_ITEM_SELECTED, function() {
          if (_this.hideList) {
            _this.hideList();
          }
        });
        this.listComponent.addManagedListener(this.listComponent, AgAbstractField.EVENT_CHANGED, function() {
          _this.setValue(_this.listComponent.getValue(), false, true);
          if (_this.hideList) {
            _this.hideList();
          }
        });
      };
      AgSelect2.prototype.showPicker = function() {
        var _this = this;
        var listGui = this.listComponent.getGui();
        var destroyMouseWheelFunc = this.addManagedListener(document.body, "wheel", function(e) {
          if (!listGui.contains(e.target) && _this.hideList) {
            _this.hideList();
          }
        });
        var destroyFocusOutFunc = this.addManagedListener(listGui, "focusout", function(e) {
          if (!listGui.contains(e.relatedTarget) && _this.hideList) {
            _this.hideList();
          }
        });
        this.hideList = this.popupService.addPopup({
          modal: true,
          eChild: listGui,
          closeOnEsc: true,
          closedCallback: function() {
            _this.hideList = null;
            _this.isPickerDisplayed = false;
            destroyFocusOutFunc();
            destroyMouseWheelFunc();
            if (_this.isAlive()) {
              _this.getFocusableElement().focus();
            }
          }
        });
        this.isPickerDisplayed = true;
        setElementWidth(listGui, getAbsoluteWidth(this.eWrapper));
        listGui.style.maxHeight = getInnerHeight(this.popupService.getPopupParent()) + "px";
        listGui.style.position = "absolute";
        this.popupService.positionPopupUnderComponent({
          type: "ag-list",
          eventSource: this.eWrapper,
          ePopup: listGui,
          keepWithinBounds: true
        });
        this.listComponent.refreshHighlighted();
        return this.listComponent;
      };
      AgSelect2.prototype.addOptions = function(options) {
        var _this = this;
        options.forEach(function(option) {
          return _this.addOption(option);
        });
        return this;
      };
      AgSelect2.prototype.addOption = function(option) {
        this.listComponent.addOption(option);
        return this;
      };
      AgSelect2.prototype.setValue = function(value, silent, fromPicker) {
        if (this.value === value) {
          return this;
        }
        if (!fromPicker) {
          this.listComponent.setValue(value, true);
        }
        var newValue = this.listComponent.getValue();
        if (newValue === this.getValue()) {
          return this;
        }
        this.eDisplayField.innerHTML = this.listComponent.getDisplayValue();
        return _super.prototype.setValue.call(this, value, silent);
      };
      AgSelect2.prototype.destroy = function() {
        if (this.hideList) {
          this.hideList();
        }
        this.destroyBean(this.listComponent);
        _super.prototype.destroy.call(this);
      };
      __decorate$1J([
        Autowired("popupService")
      ], AgSelect2.prototype, "popupService", void 0);
      __decorate$1J([
        PostConstruct
      ], AgSelect2.prototype, "init", null);
      return AgSelect2;
    }(AgPickerField);
    var __extends$1P = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1K = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgAngleSelect = function(_super) {
      __extends$1P(AgAngleSelect2, _super);
      function AgAngleSelect2(config) {
        var _this = _super.call(this, config, AgAngleSelect2.TEMPLATE) || this;
        _this.radius = 0;
        _this.offsetX = 0;
        _this.offsetY = 0;
        return _this;
      }
      AgAngleSelect2.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        this.dragListener = {
          eElement: this.eParentCircle,
          dragStartPixels: 0,
          onDragStart: function(e) {
            _this.parentCircleRect = _this.eParentCircle.getBoundingClientRect();
          },
          onDragging: function(e) {
            return _this.calculateAngleDrag(e);
          },
          onDragStop: function() {
          }
        };
        this.dragService.addDragSource(this.dragListener);
        this.eAngleValue.setLabel("").setLabelWidth(5).setInputWidth(45).setMin(0).setMax(360).setValue("" + this.degrees).onValueChange(function(value) {
          if (value == null || value === "") {
            value = "0";
          }
          value = _this.eAngleValue.normalizeValue(value);
          var floatValue = parseFloat(value);
          if (floatValue > 180) {
            floatValue = floatValue - 360;
          }
          _this.setValue(floatValue);
        });
        this.updateNumberInput();
        if (exists(this.getValue())) {
          this.eAngleValue.setValue(this.normalizeNegativeValue(this.getValue()).toString());
        }
        this.addManagedListener(this, AgAbstractField.EVENT_CHANGED, function() {
          if (_this.eAngleValue.getInputElement().contains(document.activeElement)) {
            return;
          }
          _this.updateNumberInput();
        });
      };
      AgAngleSelect2.prototype.updateNumberInput = function() {
        var normalizedValue = this.normalizeNegativeValue(this.getValue());
        this.eAngleValue.setValue(normalizedValue.toString());
      };
      AgAngleSelect2.prototype.positionChildCircle = function(radians) {
        var rect = this.parentCircleRect || { width: 24, height: 24 };
        var eChildCircle = this.eChildCircle;
        var centerX = rect.width / 2;
        var centerY = rect.height / 2;
        eChildCircle.style.left = centerX + Math.cos(radians) * 8 + "px";
        eChildCircle.style.top = centerY + Math.sin(radians) * 8 + "px";
      };
      AgAngleSelect2.prototype.calculatePolar = function() {
        var x = this.offsetX;
        var y = this.offsetY;
        var radians = Math.atan2(y, x);
        this.degrees = this.toDegrees(radians);
        this.radius = Math.sqrt(x * x + y * y);
        this.positionChildCircle(radians);
      };
      AgAngleSelect2.prototype.calculateCartesian = function() {
        var radians = this.toRadians(this.getValue());
        var radius = this.getRadius();
        this.setOffsetX(Math.cos(radians) * radius).setOffsetY(Math.sin(radians) * radius);
      };
      AgAngleSelect2.prototype.setOffsetX = function(offset) {
        if (this.offsetX !== offset) {
          this.offsetX = offset;
          this.calculatePolar();
        }
        return this;
      };
      AgAngleSelect2.prototype.setOffsetY = function(offset) {
        if (this.offsetY !== offset) {
          this.offsetY = offset;
          this.calculatePolar();
        }
        return this;
      };
      AgAngleSelect2.prototype.calculateAngleDrag = function(e) {
        var rect = this.parentCircleRect;
        var centerX = rect.width / 2;
        var centerY = rect.height / 2;
        var x = e.clientX - rect.left;
        var y = e.clientY - rect.top;
        var dx = x - centerX;
        var dy = y - centerY;
        var radians = Math.atan2(dy, dx);
        this.setValue(radians, true);
      };
      AgAngleSelect2.prototype.toDegrees = function(radians) {
        return radians / Math.PI * 180;
      };
      AgAngleSelect2.prototype.toRadians = function(degrees) {
        return degrees / 180 * Math.PI;
      };
      AgAngleSelect2.prototype.normalizeNegativeValue = function(degrees) {
        return degrees < 0 ? 360 + degrees : degrees;
      };
      AgAngleSelect2.prototype.normalizeAngle180 = function(radians) {
        radians %= Math.PI * 2;
        if (radians < -Math.PI) {
          radians += Math.PI * 2;
        } else if (radians >= Math.PI) {
          radians -= Math.PI * 2;
        }
        return radians;
      };
      AgAngleSelect2.prototype.getRadius = function() {
        return this.radius;
      };
      AgAngleSelect2.prototype.setRadius = function(r) {
        if (this.radius === r) {
          return this;
        }
        this.radius = r;
        this.calculateCartesian();
        return this;
      };
      AgAngleSelect2.prototype.onValueChange = function(callbackFn) {
        var _this = this;
        this.addManagedListener(this, AgAbstractField.EVENT_CHANGED, function() {
          callbackFn(_this.degrees);
        });
        return this;
      };
      AgAngleSelect2.prototype.getValue = function(radians) {
        return radians ? this.toRadians(this.degrees) : this.degrees;
      };
      AgAngleSelect2.prototype.setValue = function(degrees, radians) {
        var radiansValue;
        if (!radians) {
          radiansValue = this.normalizeAngle180(this.toRadians(degrees));
        } else {
          radiansValue = degrees;
        }
        degrees = this.toDegrees(radiansValue);
        if (this.degrees !== degrees) {
          this.degrees = Math.floor(degrees);
          this.calculateCartesian();
          this.positionChildCircle(radiansValue);
          this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });
        }
        return this;
      };
      AgAngleSelect2.prototype.setWidth = function(width) {
        setFixedWidth(this.getGui(), width);
        return this;
      };
      AgAngleSelect2.prototype.destroy = function() {
        this.dragService.removeDragSource(this.dragListener);
        _super.prototype.destroy.call(this);
      };
      AgAngleSelect2.TEMPLATE = '<div class="ag-angle-select">\n            <div ref="eLabel"></div>\n            <div class="ag-wrapper ag-angle-select-wrapper">\n                <div ref="eAngleSelectField" class="ag-angle-select-field">\n                    <div ref="eParentCircle" class="ag-angle-select-parent-circle">\n                        <div ref="eChildCircle" class="ag-angle-select-child-circle"></div>\n                    </div>\n                </div>\n                <ag-input-number-field ref="eAngleValue"></ag-input-number-field>\n            </div>\n        </div>';
      __decorate$1K([
        RefSelector("eLabel")
      ], AgAngleSelect2.prototype, "eLabel", void 0);
      __decorate$1K([
        RefSelector("eParentCircle")
      ], AgAngleSelect2.prototype, "eParentCircle", void 0);
      __decorate$1K([
        RefSelector("eChildCircle")
      ], AgAngleSelect2.prototype, "eChildCircle", void 0);
      __decorate$1K([
        RefSelector("eAngleValue")
      ], AgAngleSelect2.prototype, "eAngleValue", void 0);
      __decorate$1K([
        Autowired("dragService")
      ], AgAngleSelect2.prototype, "dragService", void 0);
      return AgAngleSelect2;
    }(AgAbstractLabel);
    var __extends$1Q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgToggleButton = function(_super) {
      __extends$1Q(AgToggleButton2, _super);
      function AgToggleButton2(config) {
        return _super.call(this, config, "ag-toggle-button") || this;
      }
      AgToggleButton2.prototype.setValue = function(value, silent) {
        _super.prototype.setValue.call(this, value, silent);
        addOrRemoveCssClass(this.getGui(), "ag-selected", this.getValue());
        return this;
      };
      return AgToggleButton2;
    }(AgCheckbox);
    var __extends$1R = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1L = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DetailRowCompCache = function(_super) {
      __extends$1R(DetailRowCompCache2, _super);
      function DetailRowCompCache2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cacheItems = [];
        return _this;
      }
      DetailRowCompCache2.prototype.postConstruct = function() {
        this.active = this.gridOptionsWrapper.isKeepDetailRows();
        this.maxCacheSize = this.gridOptionsWrapper.getKeepDetailRowsCount();
      };
      DetailRowCompCache2.prototype.addOrDestroy = function(rowNode, pinned, comp) {
        var doNotUseCache = !this.active || !rowNode.detail;
        if (doNotUseCache) {
          this.destroyFullWidthRow(comp);
          return;
        }
        var item = this.getCacheItem(rowNode, true);
        switch (pinned) {
          case Constants.PINNED_LEFT:
            this.destroyFullWidthRow(item.left);
            item.left = comp;
            break;
          case Constants.PINNED_RIGHT:
            this.destroyFullWidthRow(item.right);
            item.right = comp;
            break;
          default:
            this.destroyFullWidthRow(item.center);
            item.center = comp;
            break;
        }
        this.cacheItems.sort(function(a, b) {
          return b.lastAccessedTime - a.lastAccessedTime;
        });
        this.purgeCache(this.maxCacheSize);
      };
      DetailRowCompCache2.prototype.getCacheItem = function(rowNode, autoCreate) {
        if (autoCreate === void 0) {
          autoCreate = false;
        }
        var res;
        for (var i = 0; i < this.cacheItems.length; i++) {
          var item = this.cacheItems[i];
          if (item.rowNode === rowNode) {
            res = item;
            break;
          }
        }
        if (!res && autoCreate) {
          res = {
            rowNode
          };
          this.cacheItems.push(res);
        }
        if (res) {
          this.stampCacheItem(res);
        }
        return res;
      };
      DetailRowCompCache2.prototype.stampCacheItem = function(item) {
        item.lastAccessedTime = new Date().getTime();
      };
      DetailRowCompCache2.prototype.destroyFullWidthRow = function(comp) {
        this.getContext().destroyBean(comp);
      };
      DetailRowCompCache2.prototype.purgeCache = function(startIndex) {
        for (var i = startIndex; i < this.cacheItems.length; i++) {
          var item = this.cacheItems[i];
          this.destroyFullWidthRow(item.center);
          this.destroyFullWidthRow(item.left);
          this.destroyFullWidthRow(item.right);
        }
        if (this.cacheItems.length > startIndex) {
          this.cacheItems.length = startIndex;
        }
      };
      DetailRowCompCache2.prototype.get = function(rowNode, pinned) {
        if (!rowNode.detail) {
          return void 0;
        }
        var item = this.getCacheItem(rowNode);
        var res;
        if (item) {
          switch (pinned) {
            case Constants.PINNED_LEFT:
              if (item.left) {
                res = item.left;
                item.left = void 0;
              }
              break;
            case Constants.PINNED_RIGHT:
              if (item.right) {
                res = item.right;
                item.right = void 0;
              }
              break;
            default:
              if (item.center) {
                res = item.center;
                item.center = void 0;
              }
              break;
          }
        }
        return res;
      };
      DetailRowCompCache2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.purgeCache(0);
      };
      __decorate$1L([
        Autowired("gridOptionsWrapper")
      ], DetailRowCompCache2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1L([
        PostConstruct
      ], DetailRowCompCache2.prototype, "postConstruct", null);
      __decorate$1L([
        PreDestroy
      ], DetailRowCompCache2.prototype, "destroy", null);
      DetailRowCompCache2 = __decorate$1L([
        Bean("detailRowCompCache")
      ], DetailRowCompCache2);
      return DetailRowCompCache2;
    }(BeanStub);
    var __extends$1S = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1M = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RowPositionUtils = function(_super) {
      __extends$1S(RowPositionUtils2, _super);
      function RowPositionUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      RowPositionUtils2.prototype.getFirstRow = function() {
        var rowIndex = 0;
        var rowPinned;
        if (this.pinnedRowModel.getPinnedTopRowCount()) {
          rowPinned = Constants.PINNED_TOP;
        } else if (this.rowModel.getRowCount()) {
          rowPinned = null;
          rowIndex = this.paginationProxy.getPageFirstRow();
        } else if (this.pinnedRowModel.getPinnedBottomRowCount()) {
          rowPinned = Constants.PINNED_BOTTOM;
        }
        return rowPinned === void 0 ? null : { rowIndex, rowPinned };
      };
      RowPositionUtils2.prototype.getLastRow = function() {
        var rowIndex;
        var rowPinned;
        var pinnedBottomCount = this.pinnedRowModel.getPinnedBottomRowCount();
        var pinnedTopCount = this.pinnedRowModel.getPinnedTopRowCount();
        if (pinnedBottomCount) {
          rowPinned = Constants.PINNED_BOTTOM;
          rowIndex = pinnedBottomCount - 1;
        } else if (this.rowModel.getRowCount()) {
          rowPinned = null;
          rowIndex = this.paginationProxy.getPageLastRow();
        } else if (pinnedTopCount) {
          rowPinned = Constants.PINNED_TOP;
          rowIndex = pinnedTopCount - 1;
        }
        return rowIndex === void 0 ? null : { rowIndex, rowPinned };
      };
      RowPositionUtils2.prototype.getRowNode = function(gridRow) {
        switch (gridRow.rowPinned) {
          case Constants.PINNED_TOP:
            return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
          case Constants.PINNED_BOTTOM:
            return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
          default:
            return this.rowModel.getRow(gridRow.rowIndex);
        }
      };
      RowPositionUtils2.prototype.sameRow = function(rowA, rowB) {
        if (!rowA && !rowB) {
          return true;
        }
        if (rowA && !rowB || !rowA && rowB) {
          return false;
        }
        return rowA.rowIndex === rowB.rowIndex && rowA.rowPinned == rowB.rowPinned;
      };
      RowPositionUtils2.prototype.before = function(rowA, rowB) {
        switch (rowA.rowPinned) {
          case Constants.PINNED_TOP:
            if (rowB.rowPinned !== Constants.PINNED_TOP) {
              return true;
            }
            break;
          case Constants.PINNED_BOTTOM:
            if (rowB.rowPinned !== Constants.PINNED_BOTTOM) {
              return false;
            }
            break;
          default:
            if (exists(rowB.rowPinned)) {
              return rowB.rowPinned !== Constants.PINNED_TOP;
            }
            break;
        }
        return rowA.rowIndex < rowB.rowIndex;
      };
      __decorate$1M([
        Autowired("rowModel")
      ], RowPositionUtils2.prototype, "rowModel", void 0);
      __decorate$1M([
        Autowired("pinnedRowModel")
      ], RowPositionUtils2.prototype, "pinnedRowModel", void 0);
      __decorate$1M([
        Autowired("paginationProxy")
      ], RowPositionUtils2.prototype, "paginationProxy", void 0);
      RowPositionUtils2 = __decorate$1M([
        Bean("rowPositionUtils")
      ], RowPositionUtils2);
      return RowPositionUtils2;
    }(BeanStub);
    var __extends$1T = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1N = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var CellPositionUtils = function(_super) {
      __extends$1T(CellPositionUtils2, _super);
      function CellPositionUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      CellPositionUtils2.prototype.createId = function(cellPosition) {
        var rowIndex = cellPosition.rowIndex, rowPinned = cellPosition.rowPinned, column = cellPosition.column;
        return this.createIdFromValues(rowIndex, column, rowPinned);
      };
      CellPositionUtils2.prototype.createIdFromValues = function(rowIndex, column, rowPinned) {
        return rowIndex + "." + (rowPinned == null ? "null" : rowPinned) + "." + column.getId();
      };
      CellPositionUtils2.prototype.equals = function(cellA, cellB) {
        var colsMatch = cellA.column === cellB.column;
        var floatingMatch = cellA.rowPinned === cellB.rowPinned;
        var indexMatch = cellA.rowIndex === cellB.rowIndex;
        return colsMatch && floatingMatch && indexMatch;
      };
      CellPositionUtils2 = __decorate$1N([
        Bean("cellPositionUtils")
      ], CellPositionUtils2);
      return CellPositionUtils2;
    }(BeanStub);
    var __extends$1U = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1O = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var PinnedRowModel = function(_super) {
      __extends$1U(PinnedRowModel2, _super);
      function PinnedRowModel2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PinnedRowModel2.prototype.init = function() {
        this.setPinnedTopRowData(this.gridOptionsWrapper.getPinnedTopRowData());
        this.setPinnedBottomRowData(this.gridOptionsWrapper.getPinnedBottomRowData());
      };
      PinnedRowModel2.prototype.isEmpty = function(floating) {
        var rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
        return missingOrEmpty(rows);
      };
      PinnedRowModel2.prototype.isRowsToRender = function(floating) {
        return !this.isEmpty(floating);
      };
      PinnedRowModel2.prototype.getRowAtPixel = function(pixel, floating) {
        var rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
        if (missingOrEmpty(rows)) {
          return 0;
        }
        for (var i = 0; i < rows.length; i++) {
          var rowNode = rows[i];
          var rowTopPixel = rowNode.rowTop + rowNode.rowHeight - 1;
          if (rowTopPixel >= pixel) {
            return i;
          }
        }
        return rows.length - 1;
      };
      PinnedRowModel2.prototype.setPinnedTopRowData = function(rowData) {
        this.pinnedTopRows = this.createNodesFromData(rowData, true);
        var event = {
          type: Events.EVENT_PINNED_ROW_DATA_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
      };
      PinnedRowModel2.prototype.setPinnedBottomRowData = function(rowData) {
        this.pinnedBottomRows = this.createNodesFromData(rowData, false);
        var event = {
          type: Events.EVENT_PINNED_ROW_DATA_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
      };
      PinnedRowModel2.prototype.createNodesFromData = function(allData, isTop) {
        var _this = this;
        var rowNodes = [];
        if (allData) {
          var nextRowTop_1 = 0;
          allData.forEach(function(dataItem, index) {
            var rowNode = new RowNode();
            _this.context.createBean(rowNode);
            rowNode.data = dataItem;
            var idPrefix = isTop ? RowNode.ID_PREFIX_TOP_PINNED : RowNode.ID_PREFIX_BOTTOM_PINNED;
            rowNode.id = idPrefix + index;
            rowNode.rowPinned = isTop ? Constants.PINNED_TOP : Constants.PINNED_BOTTOM;
            rowNode.setRowTop(nextRowTop_1);
            rowNode.setRowHeight(_this.gridOptionsWrapper.getRowHeightForNode(rowNode).height);
            rowNode.setRowIndex(index);
            nextRowTop_1 += rowNode.rowHeight;
            rowNodes.push(rowNode);
          });
        }
        return rowNodes;
      };
      PinnedRowModel2.prototype.getPinnedTopRowData = function() {
        return this.pinnedTopRows;
      };
      PinnedRowModel2.prototype.getPinnedBottomRowData = function() {
        return this.pinnedBottomRows;
      };
      PinnedRowModel2.prototype.getPinnedTopTotalHeight = function() {
        return this.getTotalHeight(this.pinnedTopRows);
      };
      PinnedRowModel2.prototype.getPinnedTopRowCount = function() {
        return this.pinnedTopRows ? this.pinnedTopRows.length : 0;
      };
      PinnedRowModel2.prototype.getPinnedBottomRowCount = function() {
        return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;
      };
      PinnedRowModel2.prototype.getPinnedTopRow = function(index) {
        return this.pinnedTopRows[index];
      };
      PinnedRowModel2.prototype.getPinnedBottomRow = function(index) {
        return this.pinnedBottomRows[index];
      };
      PinnedRowModel2.prototype.forEachPinnedTopRow = function(callback) {
        if (missingOrEmpty(this.pinnedTopRows)) {
          return;
        }
        this.pinnedTopRows.forEach(callback);
      };
      PinnedRowModel2.prototype.forEachPinnedBottomRow = function(callback) {
        if (missingOrEmpty(this.pinnedBottomRows)) {
          return;
        }
        this.pinnedBottomRows.forEach(callback);
      };
      PinnedRowModel2.prototype.getPinnedBottomTotalHeight = function() {
        return this.getTotalHeight(this.pinnedBottomRows);
      };
      PinnedRowModel2.prototype.getTotalHeight = function(rowNodes) {
        if (!rowNodes || rowNodes.length === 0) {
          return 0;
        }
        var lastNode = last(rowNodes);
        return lastNode.rowTop + lastNode.rowHeight;
      };
      __decorate$1O([
        Autowired("gridOptionsWrapper")
      ], PinnedRowModel2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1O([
        Autowired("columnApi")
      ], PinnedRowModel2.prototype, "columnApi", void 0);
      __decorate$1O([
        Autowired("gridApi")
      ], PinnedRowModel2.prototype, "gridApi", void 0);
      __decorate$1O([
        PostConstruct
      ], PinnedRowModel2.prototype, "init", null);
      PinnedRowModel2 = __decorate$1O([
        Bean("pinnedRowModel")
      ], PinnedRowModel2);
      return PinnedRowModel2;
    }(BeanStub);
    var __extends$1V = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var UndoRedoAction = function() {
      function UndoRedoAction2(cellValueChanges) {
        this.cellValueChanges = cellValueChanges;
      }
      return UndoRedoAction2;
    }();
    var FillUndoRedoAction = function(_super) {
      __extends$1V(FillUndoRedoAction2, _super);
      function FillUndoRedoAction2(cellValueChanges, initialRange, finalRange) {
        var _this = _super.call(this, cellValueChanges) || this;
        _this.initialRange = initialRange;
        _this.finalRange = finalRange;
        return _this;
      }
      return FillUndoRedoAction2;
    }(UndoRedoAction);
    var UndoRedoStack = function() {
      function UndoRedoStack2(maxStackSize) {
        this.actionStack = [];
        this.maxStackSize = maxStackSize ? maxStackSize : UndoRedoStack2.DEFAULT_STACK_SIZE;
        this.actionStack = new Array(this.maxStackSize);
      }
      UndoRedoStack2.prototype.pop = function() {
        return this.actionStack.pop();
      };
      UndoRedoStack2.prototype.push = function(item) {
        var shouldAddActions = item.cellValueChanges && item.cellValueChanges.length > 0;
        if (!shouldAddActions) {
          return;
        }
        if (this.actionStack.length === this.maxStackSize) {
          this.actionStack.shift();
        }
        this.actionStack.push(item);
      };
      UndoRedoStack2.prototype.clear = function() {
        this.actionStack = [];
      };
      UndoRedoStack2.prototype.getCurrentStackSize = function() {
        return this.actionStack.length;
      };
      UndoRedoStack2.DEFAULT_STACK_SIZE = 10;
      return UndoRedoStack2;
    }();
    var __extends$1W = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1P = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var UndoRedoService = function(_super) {
      __extends$1W(UndoRedoService2, _super);
      function UndoRedoService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cellValueChanges = [];
        _this.isCellEditing = false;
        _this.isRowEditing = false;
        _this.isPasting = false;
        _this.isFilling = false;
        _this.onCellValueChanged = function(event) {
          var shouldCaptureAction = _this.isCellEditing || _this.isRowEditing || _this.isPasting || _this.isFilling;
          if (!shouldCaptureAction) {
            return;
          }
          var rowPinned = event.rowPinned, rowIndex = event.rowIndex, column = event.column, oldValue = event.oldValue, value = event.value;
          var cellValueChange = {
            rowPinned,
            rowIndex,
            columnId: column.getColId(),
            oldValue,
            newValue: value
          };
          _this.cellValueChanges.push(cellValueChange);
        };
        _this.clearStacks = function() {
          _this.undoStack.clear();
          _this.redoStack.clear();
        };
        return _this;
      }
      UndoRedoService2.prototype.init = function() {
        if (!this.gridOptionsWrapper.isUndoRedoCellEditing()) {
          return;
        }
        var undoRedoLimit = this.gridOptionsWrapper.getUndoRedoCellEditingLimit();
        if (undoRedoLimit <= 0) {
          return;
        }
        this.undoStack = new UndoRedoStack(undoRedoLimit);
        this.redoStack = new UndoRedoStack(undoRedoLimit);
        this.addRowEditingListeners();
        this.addCellEditingListeners();
        this.addPasteListeners();
        this.addFillListeners();
        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged);
        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_ROW_DRAG_END, this.clearStacks);
      };
      UndoRedoService2.prototype.getCurrentUndoStackSize = function() {
        return this.undoStack ? this.undoStack.getCurrentStackSize() : 0;
      };
      UndoRedoService2.prototype.getCurrentRedoStackSize = function() {
        return this.redoStack ? this.redoStack.getCurrentStackSize() : 0;
      };
      UndoRedoService2.prototype.undo = function() {
        if (!this.undoStack) {
          return;
        }
        var undoAction = this.undoStack.pop();
        if (!undoAction || !undoAction.cellValueChanges) {
          return;
        }
        this.processAction(undoAction, function(cellValueChange) {
          return cellValueChange.oldValue;
        });
        if (undoAction instanceof FillUndoRedoAction) {
          this.processRangeAndCellFocus(undoAction.cellValueChanges, undoAction.initialRange);
        } else {
          this.processRangeAndCellFocus(undoAction.cellValueChanges);
        }
        this.redoStack.push(undoAction);
      };
      UndoRedoService2.prototype.redo = function() {
        if (!this.redoStack) {
          return;
        }
        var redoAction = this.redoStack.pop();
        if (!redoAction || !redoAction.cellValueChanges) {
          return;
        }
        this.processAction(redoAction, function(cellValueChange) {
          return cellValueChange.newValue;
        });
        if (redoAction instanceof FillUndoRedoAction) {
          this.processRangeAndCellFocus(redoAction.cellValueChanges, redoAction.finalRange);
        } else {
          this.processRangeAndCellFocus(redoAction.cellValueChanges);
        }
        this.undoStack.push(redoAction);
      };
      UndoRedoService2.prototype.processAction = function(action, valueExtractor) {
        var _this = this;
        action.cellValueChanges.forEach(function(cellValueChange) {
          var rowIndex = cellValueChange.rowIndex, rowPinned = cellValueChange.rowPinned, columnId = cellValueChange.columnId;
          var rowPosition = { rowIndex, rowPinned };
          var currentRow = _this.getRowNode(rowPosition);
          if (currentRow.rowTop == null) {
            return;
          }
          currentRow.setDataValue(columnId, valueExtractor(cellValueChange));
        });
      };
      UndoRedoService2.prototype.processRangeAndCellFocus = function(cellValueChanges, range) {
        if (range) {
          var startRow = range.startRow;
          var endRow = range.endRow;
          var lastFocusedCell_1 = {
            rowPinned: startRow.rowPinned,
            rowIndex: startRow.rowIndex,
            columnId: range.startColumn.getColId()
          };
          this.setLastFocusedCell(lastFocusedCell_1);
          var cellRangeParams = {
            rowStartIndex: startRow.rowIndex,
            rowStartPinned: startRow.rowPinned,
            rowEndIndex: endRow.rowIndex,
            rowEndPinned: endRow.rowPinned,
            columnStart: range.startColumn,
            columns: range.columns
          };
          this.gridApi.addCellRange(cellRangeParams);
          return;
        }
        var cellValueChange = cellValueChanges[0];
        var rowIndex = cellValueChange.rowIndex, rowPinned = cellValueChange.rowPinned;
        var rowPosition = { rowIndex, rowPinned };
        var row = this.getRowNode(rowPosition);
        var lastFocusedCell = {
          rowPinned: cellValueChange.rowPinned,
          rowIndex: row.rowIndex,
          columnId: cellValueChange.columnId
        };
        this.setLastFocusedCell(lastFocusedCell);
      };
      UndoRedoService2.prototype.setLastFocusedCell = function(lastFocusedCell) {
        var rowIndex = lastFocusedCell.rowIndex, columnId = lastFocusedCell.columnId, rowPinned = lastFocusedCell.rowPinned;
        this.gridApi.ensureIndexVisible(rowIndex);
        this.gridApi.ensureColumnVisible(columnId);
        if (ModuleRegistry.isRegistered(exports.ModuleNames.RangeSelectionModule)) {
          this.gridApi.clearRangeSelection();
        }
        this.focusController.setFocusedCell(rowIndex, columnId, rowPinned, true);
      };
      UndoRedoService2.prototype.addRowEditingListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STARTED, function() {
          _this.isRowEditing = true;
        });
        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STOPPED, function() {
          var action = new UndoRedoAction(_this.cellValueChanges);
          _this.pushActionsToUndoStack(action);
          _this.isRowEditing = false;
        });
      };
      UndoRedoService2.prototype.addCellEditingListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STARTED, function() {
          _this.isCellEditing = true;
        });
        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STOPPED, function() {
          _this.isCellEditing = false;
          var shouldPushAction = !_this.isRowEditing && !_this.isPasting && !_this.isFilling;
          if (shouldPushAction) {
            var action = new UndoRedoAction(_this.cellValueChanges);
            _this.pushActionsToUndoStack(action);
          }
        });
      };
      UndoRedoService2.prototype.addPasteListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_PASTE_START, function() {
          _this.isPasting = true;
        });
        this.addManagedListener(this.eventService, Events.EVENT_PASTE_END, function() {
          var action = new UndoRedoAction(_this.cellValueChanges);
          _this.pushActionsToUndoStack(action);
          _this.isPasting = false;
        });
      };
      UndoRedoService2.prototype.addFillListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_FILL_START, function() {
          _this.isFilling = true;
        });
        this.addManagedListener(this.eventService, Events.EVENT_FILL_END, function(event) {
          var action = new FillUndoRedoAction(_this.cellValueChanges, event.initialRange, event.finalRange);
          _this.pushActionsToUndoStack(action);
          _this.isFilling = false;
        });
      };
      UndoRedoService2.prototype.pushActionsToUndoStack = function(action) {
        this.undoStack.push(action);
        this.cellValueChanges = [];
        this.redoStack.clear();
      };
      UndoRedoService2.prototype.getRowNode = function(gridRow) {
        switch (gridRow.rowPinned) {
          case Constants.PINNED_TOP:
            return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
          case Constants.PINNED_BOTTOM:
            return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
          default:
            return this.rowModel.getRow(gridRow.rowIndex);
        }
      };
      __decorate$1P([
        Autowired("gridOptionsWrapper")
      ], UndoRedoService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1P([
        Autowired("focusController")
      ], UndoRedoService2.prototype, "focusController", void 0);
      __decorate$1P([
        Autowired("gridApi")
      ], UndoRedoService2.prototype, "gridApi", void 0);
      __decorate$1P([
        Autowired("rowModel")
      ], UndoRedoService2.prototype, "rowModel", void 0);
      __decorate$1P([
        Autowired("pinnedRowModel")
      ], UndoRedoService2.prototype, "pinnedRowModel", void 0);
      __decorate$1P([
        PostConstruct
      ], UndoRedoService2.prototype, "init", null);
      UndoRedoService2 = __decorate$1P([
        Bean("undoRedoService")
      ], UndoRedoService2);
      return UndoRedoService2;
    }(BeanStub);
    var __extends$1X = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1Q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgStackComponentsRegistry = function(_super) {
      __extends$1X(AgStackComponentsRegistry2, _super);
      function AgStackComponentsRegistry2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.componentsMappedByName = {};
        return _this;
      }
      AgStackComponentsRegistry2.prototype.setupComponents = function(components) {
        var _this = this;
        if (components) {
          components.forEach(function(componentMeta) {
            return _this.addComponent(componentMeta);
          });
        }
      };
      AgStackComponentsRegistry2.prototype.addComponent = function(componentMeta) {
        var classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
        var classUpperCase = classEscaped.toUpperCase();
        this.componentsMappedByName[classUpperCase] = componentMeta.componentClass;
      };
      AgStackComponentsRegistry2.prototype.getComponentClass = function(htmlTag) {
        return this.componentsMappedByName[htmlTag];
      };
      AgStackComponentsRegistry2 = __decorate$1Q([
        Bean("agStackComponentsRegistry")
      ], AgStackComponentsRegistry2);
      return AgStackComponentsRegistry2;
    }(BeanStub);
    var __extends$1Y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1R = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderPositionUtils = function(_super) {
      __extends$1Y(HeaderPositionUtils2, _super);
      function HeaderPositionUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      HeaderPositionUtils2.prototype.findHeader = function(focusedHeader, direction) {
        var nextColumn;
        var getGroupMethod;
        var getColMethod;
        if (focusedHeader.column instanceof ColumnGroup) {
          getGroupMethod = "getDisplayedGroup" + direction;
          nextColumn = this.columnController[getGroupMethod](focusedHeader.column);
        } else {
          getColMethod = "getDisplayedCol" + direction;
          nextColumn = this.columnController[getColMethod](focusedHeader.column);
        }
        if (nextColumn) {
          return {
            column: nextColumn,
            headerRowIndex: focusedHeader.headerRowIndex
          };
        }
      };
      HeaderPositionUtils2.prototype.findColAtEdgeForHeaderRow = function(level, position) {
        var displayedColumns = this.columnController.getAllDisplayedColumns();
        var column = displayedColumns[position === "start" ? 0 : displayedColumns.length - 1];
        if (!column) {
          return;
        }
        var childContainer = this.headerNavigationService.getHeaderContainer(column.getPinned());
        var headerRowComp = childContainer.getRowComps()[level];
        var type = headerRowComp && headerRowComp.getType();
        if (type == HeaderRowType.COLUMN_GROUP) {
          var columnGroup = this.columnController.getColumnGroupAtLevel(column, level);
          return {
            headerRowIndex: level,
            column: columnGroup
          };
        }
        return {
          headerRowIndex: !headerRowComp ? -1 : level,
          column
        };
      };
      __decorate$1R([
        Autowired("columnController")
      ], HeaderPositionUtils2.prototype, "columnController", void 0);
      __decorate$1R([
        Autowired("headerNavigationService")
      ], HeaderPositionUtils2.prototype, "headerNavigationService", void 0);
      HeaderPositionUtils2 = __decorate$1R([
        Bean("headerPositionUtils")
      ], HeaderPositionUtils2);
      return HeaderPositionUtils2;
    }(BeanStub);
    var __decorate$1S = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ColumnDefFactory = function() {
      function ColumnDefFactory2() {
      }
      ColumnDefFactory2.prototype.buildColumnDefs = function(cols, rowGroupColumns, pivotColumns) {
        var _this = this;
        var res = [];
        var colGroupDefs = {};
        cols.forEach(function(col) {
          var colDef = _this.createDefFromColumn(col, rowGroupColumns, pivotColumns);
          var addToResult = true;
          var childDef = colDef;
          var child = col;
          while (child.getParent()) {
            var parent_1 = child.getParent();
            var parentDef = void 0;
            if (parent_1.isPadding()) {
              child = parent_1;
              continue;
            }
            var existingParentDef = colGroupDefs[parent_1.getGroupId()];
            if (existingParentDef) {
              existingParentDef.children.push(childDef);
              addToResult = false;
              break;
            }
            parentDef = _this.createDefFromGroup(parent_1);
            parentDef.children = [childDef];
            colGroupDefs[parentDef.groupId] = parentDef;
            childDef = parentDef;
            child = parent_1;
          }
          if (addToResult) {
            res.push(childDef);
          }
        });
        return res;
      };
      ColumnDefFactory2.prototype.createDefFromGroup = function(group) {
        var defCloned = deepCloneDefinition(group.getColGroupDef(), ["children"]);
        defCloned.groupId = group.getGroupId();
        return defCloned;
      };
      ColumnDefFactory2.prototype.createDefFromColumn = function(col, rowGroupColumns, pivotColumns) {
        var colDefCloned = deepCloneDefinition(col.getColDef());
        colDefCloned.colId = col.getColId();
        colDefCloned.width = col.getActualWidth();
        colDefCloned.rowGroup = col.isRowGroupActive();
        colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;
        colDefCloned.pivot = col.isPivotActive();
        colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;
        colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;
        colDefCloned.hide = col.isVisible() ? void 0 : true;
        colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;
        colDefCloned.sort = col.getSort() ? col.getSort() : null;
        colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;
        return colDefCloned;
      };
      ColumnDefFactory2 = __decorate$1S([
        Bean("columnDefFactory")
      ], ColumnDefFactory2);
      return ColumnDefFactory2;
    }();
    var __decorate$1T = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RowCssClassCalculator = function() {
      function RowCssClassCalculator2() {
      }
      RowCssClassCalculator2.prototype.getInitialRowClasses = function(params) {
        var classes = [];
        if (exists(params.extraCssClass)) {
          classes.push(params.extraCssClass);
        }
        classes.push("ag-row");
        classes.push(params.rowFocused ? "ag-row-focus" : "ag-row-no-focus");
        if (params.fadeRowIn) {
          classes.push("ag-opacity-zero");
        }
        classes.push(params.rowIsEven ? "ag-row-even" : "ag-row-odd");
        if (params.rowNode.isRowPinned()) {
          classes.push("ag-row-pinned");
        }
        if (params.rowNode.isSelected()) {
          classes.push("ag-row-selected");
        }
        if (params.rowNode.footer) {
          classes.push("ag-row-footer");
        }
        classes.push("ag-row-level-" + params.rowLevel);
        if (params.rowNode.stub) {
          classes.push("ag-row-loading");
        }
        if (params.fullWidthRow) {
          classes.push("ag-full-width-row");
        }
        if (params.expandable) {
          classes.push("ag-row-group");
          classes.push(params.rowNode.expanded ? "ag-row-group-expanded" : "ag-row-group-contracted");
        }
        if (params.rowNode.dragging) {
          classes.push("ag-row-dragging");
        }
        pushAll(classes, this.processClassesFromGridOptions(params.rowNode));
        pushAll(classes, this.preProcessRowClassRules(params.rowNode, params.scope));
        classes.push(params.printLayout ? "ag-row-position-relative" : "ag-row-position-absolute");
        if (params.firstRowOnPage) {
          classes.push("ag-row-first");
        }
        if (params.lastRowOnPage) {
          classes.push("ag-row-last");
        }
        return classes;
      };
      RowCssClassCalculator2.prototype.processClassesFromGridOptions = function(rowNode) {
        var res = [];
        var process = function(rowCls) {
          if (typeof rowCls === "string") {
            res.push(rowCls);
          } else if (Array.isArray(rowCls)) {
            rowCls.forEach(function(e) {
              return res.push(e);
            });
          }
        };
        var rowClass = this.gridOptionsWrapper.getRowClass();
        if (rowClass) {
          if (typeof rowClass === "function") {
            console.warn("ag-Grid: rowClass should not be a function, please use getRowClass instead");
            return;
          }
          process(rowClass);
        }
        var rowClassFunc = this.gridOptionsWrapper.getRowClassFunc();
        if (rowClassFunc) {
          var params = {
            node: rowNode,
            data: rowNode.data,
            rowIndex: rowNode.rowIndex,
            context: this.gridOptionsWrapper.getContext(),
            api: this.gridOptionsWrapper.getApi()
          };
          var rowClassFuncResult = rowClassFunc(params);
          process(rowClassFuncResult);
        }
        return res;
      };
      RowCssClassCalculator2.prototype.preProcessRowClassRules = function(rowNode, scope) {
        var res = [];
        this.processRowClassRules(rowNode, scope, function(className) {
          res.push(className);
        }, function(className) {
        });
        return res;
      };
      RowCssClassCalculator2.prototype.processRowClassRules = function(rowNode, scope, onApplicableClass, onNotApplicableClass) {
        this.stylingService.processClassRules(this.gridOptionsWrapper.rowClassRules(), {
          value: void 0,
          colDef: void 0,
          data: rowNode.data,
          node: rowNode,
          rowIndex: rowNode.rowIndex,
          api: this.gridOptionsWrapper.getApi(),
          columnApi: this.gridOptionsWrapper.getColumnApi(),
          $scope: scope,
          context: this.gridOptionsWrapper.getContext()
        }, onApplicableClass, onNotApplicableClass);
      };
      RowCssClassCalculator2.prototype.calculateRowLevel = function(rowNode) {
        if (rowNode.group) {
          return rowNode.level;
        }
        return rowNode.parent ? rowNode.parent.level + 1 : 0;
      };
      __decorate$1T([
        Autowired("stylingService")
      ], RowCssClassCalculator2.prototype, "stylingService", void 0);
      __decorate$1T([
        Autowired("gridOptionsWrapper")
      ], RowCssClassCalculator2.prototype, "gridOptionsWrapper", void 0);
      RowCssClassCalculator2 = __decorate$1T([
        Bean("rowCssClassCalculator")
      ], RowCssClassCalculator2);
      return RowCssClassCalculator2;
    }();
    var Grid = function() {
      function Grid2(eGridDiv, gridOptions, params) {
        if (!eGridDiv) {
          console.error("ag-Grid: no div element provided to the grid");
          return;
        }
        if (!gridOptions) {
          console.error("ag-Grid: no gridOptions provided to the grid");
          return;
        }
        var debug = !!gridOptions.debug;
        this.gridOptions = gridOptions;
        var registeredModules = this.getRegisteredModules(params);
        var beanClasses = this.createBeansList(registeredModules);
        var providedBeanInstances = this.createProvidedBeans(eGridDiv, params);
        if (!beanClasses) {
          return;
        }
        var contextParams = {
          providedBeanInstances,
          beanClasses,
          debug
        };
        this.logger = new Logger("ag-Grid", function() {
          return gridOptions.debug;
        });
        var contextLogger = new Logger("Context", function() {
          return contextParams.debug;
        });
        this.context = new Context(contextParams, contextLogger);
        this.registerModuleUserComponents(registeredModules);
        this.registerStackComponents(registeredModules);
        var gridCoreClass = params && params.rootComponent || GridCore;
        var gridCore = new gridCoreClass();
        this.context.createBean(gridCore);
        this.setColumnsAndData();
        this.dispatchGridReadyEvent(gridOptions);
        var isEnterprise = ModuleRegistry.isRegistered(exports.ModuleNames.EnterpriseCoreModule);
        this.logger.log("initialised successfully, enterprise = " + isEnterprise);
      }
      Grid2.prototype.registerStackComponents = function(registeredModules) {
        var agStackComponents = this.createAgStackComponentsList(registeredModules);
        var agStackComponentsRegistry = this.context.getBean("agStackComponentsRegistry");
        agStackComponentsRegistry.setupComponents(agStackComponents);
      };
      Grid2.prototype.getRegisteredModules = function(params) {
        var passedViaConstructor = params ? params.modules : null;
        var registered2 = ModuleRegistry.getRegisteredModules();
        var allModules = [];
        var mapNames = {};
        function addModule(moduleBased, module2) {
          function addIndividualModule(module3) {
            if (!mapNames[module3.moduleName]) {
              mapNames[module3.moduleName] = true;
              allModules.push(module3);
              ModuleRegistry.register(module3, moduleBased);
            }
          }
          addIndividualModule(module2);
          if (module2.dependantModules) {
            module2.dependantModules.forEach(addModule.bind(null, moduleBased));
          }
        }
        if (passedViaConstructor) {
          passedViaConstructor.forEach(addModule.bind(null, true));
        }
        if (registered2) {
          registered2.forEach(addModule.bind(null, !ModuleRegistry.isPackageBased()));
        }
        return allModules;
      };
      Grid2.prototype.registerModuleUserComponents = function(registeredModules) {
        var userComponentRegistry = this.context.getBean("userComponentRegistry");
        var moduleUserComps = this.extractModuleEntity(registeredModules, function(module2) {
          return module2.userComponents ? module2.userComponents : [];
        });
        moduleUserComps.forEach(function(compMeta) {
          userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);
        });
      };
      Grid2.prototype.createProvidedBeans = function(eGridDiv, params) {
        var frameworkOverrides = params ? params.frameworkOverrides : null;
        if (missing(frameworkOverrides)) {
          frameworkOverrides = new VanillaFrameworkOverrides();
        }
        var seed = {
          gridOptions: this.gridOptions,
          eGridDiv,
          $scope: params ? params.$scope : null,
          $compile: params ? params.$compile : null,
          quickFilterOnScope: params ? params.quickFilterOnScope : null,
          globalEventListener: params ? params.globalEventListener : null,
          frameworkOverrides
        };
        if (params && params.providedBeanInstances) {
          assign(seed, params.providedBeanInstances);
        }
        return seed;
      };
      Grid2.prototype.createAgStackComponentsList = function(registeredModules) {
        var components = [
          { componentName: "AgCheckbox", componentClass: AgCheckbox },
          { componentName: "AgRadioButton", componentClass: AgRadioButton },
          { componentName: "AgToggleButton", componentClass: AgToggleButton },
          { componentName: "AgInputTextField", componentClass: AgInputTextField },
          { componentName: "AgInputTextArea", componentClass: AgInputTextArea },
          { componentName: "AgInputNumberField", componentClass: AgInputNumberField },
          { componentName: "AgInputRange", componentClass: AgInputRange },
          { componentName: "AgSelect", componentClass: AgSelect },
          { componentName: "AgSlider", componentClass: AgSlider },
          { componentName: "AgAngleSelect", componentClass: AgAngleSelect },
          { componentName: "AgColorPicker", componentClass: AgColorPicker },
          { componentName: "AgGridComp", componentClass: GridPanel },
          { componentName: "AgHeaderRoot", componentClass: HeaderRootComp },
          { componentName: "AgPagination", componentClass: PaginationComp },
          { componentName: "AgOverlayWrapper", componentClass: OverlayWrapperComponent },
          { componentName: "AgGroupComponent", componentClass: AgGroupComponent },
          { componentName: "AgPanel", componentClass: AgPanel },
          { componentName: "AgDialog", componentClass: AgDialog }
        ];
        var moduleAgStackComps = this.extractModuleEntity(registeredModules, function(module2) {
          return module2.agStackComponents ? module2.agStackComponents : [];
        });
        components = components.concat(moduleAgStackComps);
        return components;
      };
      Grid2.prototype.createBeansList = function(registeredModules) {
        var rowModelClass = this.getRowModelClass(registeredModules);
        if (!rowModelClass) {
          return;
        }
        var beans = [
          rowModelClass,
          Beans,
          RowPositionUtils,
          CellPositionUtils,
          HeaderPositionUtils,
          PaginationAutoPageSizeService,
          GridApi,
          UserComponentRegistry,
          AgComponentUtils,
          ComponentMetadataProvider,
          ResizeObserverService,
          UserComponentFactory,
          MaxDivHeightScaler,
          AutoHeightCalculator,
          CellRendererFactory,
          HorizontalResizeService,
          PinnedRowModel,
          DragService,
          DisplayedGroupCreator,
          EventService,
          GridOptionsWrapper,
          PopupService,
          SelectionController,
          FilterManager,
          ColumnController,
          HeaderNavigationService,
          PaginationProxy,
          RowRenderer,
          ExpressionService,
          ColumnFactory,
          TemplateService,
          AlignedGridsService,
          NavigationService,
          ValueCache,
          ValueService,
          LoggerFactory,
          ColumnUtils,
          AutoWidthCalculator,
          StandardMenuFactory,
          DragAndDropService,
          ColumnApi,
          FocusController,
          MouseEventService,
          Environment,
          CellNavigationService,
          ValueFormatterService,
          StylingService,
          ScrollVisibleService,
          SortController,
          ColumnHoverService,
          ColumnAnimationService,
          SelectableService,
          AutoGroupColService,
          ChangeDetectionService,
          AnimationFrameService,
          DetailRowCompCache,
          UndoRedoService,
          AgStackComponentsRegistry,
          ColumnDefFactory,
          RowCssClassCalculator
        ];
        var moduleBeans = this.extractModuleEntity(registeredModules, function(module2) {
          return module2.beans ? module2.beans : [];
        });
        beans.push.apply(beans, moduleBeans);
        var beansNoDuplicates = [];
        beans.forEach(function(bean) {
          if (beansNoDuplicates.indexOf(bean) < 0) {
            beansNoDuplicates.push(bean);
          }
        });
        return beansNoDuplicates;
      };
      Grid2.prototype.extractModuleEntity = function(moduleEntities, extractor) {
        return [].concat.apply([], moduleEntities.map(extractor));
      };
      Grid2.prototype.setColumnsAndData = function() {
        var gridOptionsWrapper = this.context.getBean("gridOptionsWrapper");
        var columnController = this.context.getBean("columnController");
        var columnDefs = gridOptionsWrapper.getColumnDefs();
        columnController.setColumnDefs(columnDefs || [], "gridInitializing");
        var rowModel = this.context.getBean("rowModel");
        rowModel.start();
      };
      Grid2.prototype.dispatchGridReadyEvent = function(gridOptions) {
        var eventService = this.context.getBean("eventService");
        var readyEvent = {
          type: Events.EVENT_GRID_READY,
          api: gridOptions.api,
          columnApi: gridOptions.columnApi
        };
        eventService.dispatchEvent(readyEvent);
      };
      Grid2.prototype.getRowModelClass = function(registeredModules) {
        var rowModelType = this.gridOptions.rowModelType;
        if (!rowModelType) {
          rowModelType = Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        }
        var rowModelClasses = {};
        registeredModules.forEach(function(module2) {
          iterateObject(module2.rowModels, function(key, value) {
            rowModelClasses[key] = value;
          });
        });
        var rowModelClass = rowModelClasses[rowModelType];
        if (exists(rowModelClass)) {
          return rowModelClass;
        }
        if (rowModelType === Constants.ROW_MODEL_TYPE_INFINITE) {
          console.error('ag-Grid: Row Model "Infinite" not found. Please ensure the ' + exports.ModuleNames.InfiniteRowModelModule + " is registered.';");
        }
        console.error("ag-Grid: could not find matching row model for rowModelType " + rowModelType);
        if (rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT) {
          console.error('ag-Grid: Row Model "Viewport" not found. Please ensure the ag-Grid Enterprise Module ' + exports.ModuleNames.ViewportRowModelModule + " is registered.';");
        }
        if (rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE) {
          console.error('ag-Grid: Row Model "Server Side" not found. Please ensure the ag-Grid Enterprise Module ' + exports.ModuleNames.ServerSideRowModelModule + " is registered.';");
        }
        if (rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
          console.error('ag-Grid: Row Model "Client Side" not found. Please ensure the ' + exports.ModuleNames.ClientSideRowModelModule + " is registered.';");
        }
      };
      Grid2.prototype.destroy = function() {
        this.gridOptions.api.destroy();
      };
      return Grid2;
    }();
    function initialiseAgGridWithAngular1(angular) {
      var angularModule = angular.module("agGrid", []);
      angularModule.directive("agGrid", function() {
        return {
          restrict: "A",
          controller: ["$element", "$scope", "$compile", "$attrs", AngularDirectiveController],
          scope: true
        };
      });
    }
    function AngularDirectiveController($element, $scope, $compile, $attrs) {
      var gridOptions;
      var quickFilterOnScope;
      var keyOfGridInScope = $attrs.agGrid;
      quickFilterOnScope = keyOfGridInScope + ".quickFilterText";
      gridOptions = $scope.$eval(keyOfGridInScope);
      if (!gridOptions) {
        console.warn("WARNING - grid options for ag-Grid not found. Please ensure the attribute ag-grid points to a valid object on the scope");
        return;
      }
      var eGridDiv = $element[0];
      var gridParams = {
        $scope,
        $compile,
        quickFilterOnScope
      };
      var grid = new Grid(eGridDiv, gridOptions, gridParams);
      $scope.$on("$destroy", function() {
        grid.destroy();
        grid = null;
      });
    }
    var registered = false;
    function initialiseAgGridWithWebComponents() {
      console.warn("ag-grid: initialiseAgGridWithWebComponents is deprecated. Please use the ag-grid-webcomponent dependency instead. ");
      if (registered) {
        return;
      }
      registered = true;
      if (typeof document === "undefined" || !document.registerElement) {
        console.error("ag-Grid: unable to find document.registerElement() function, unable to initialise ag-Grid as a Web Component");
      }
      var AgileGridProto = Object.create(HTMLElement.prototype);
      ComponentUtil.ALL_PROPERTIES.forEach(function(key) {
        Object.defineProperty(AgileGridProto, key, {
          set: function(v) {
            this.__agGridSetProperty(key, v);
          },
          get: function() {
            return this.__agGridGetProperty(key);
          },
          enumerable: true,
          configurable: true
        });
      });
      var agGridProtoNoType = AgileGridProto;
      agGridProtoNoType.__agGridSetProperty = function(key, value) {
        if (!this.__attributes) {
          this.__attributes = {};
        }
        this.__attributes[key] = value;
        var changeObject = {};
        changeObject[key] = { currentValue: value };
        this.onChange(changeObject);
      };
      agGridProtoNoType.onChange = function(changes) {
        if (this._initialised) {
          ComponentUtil.processOnChange(changes, this._gridOptions, this.api, this.columnApi);
        }
      };
      agGridProtoNoType.__agGridGetProperty = function(key) {
        if (!this.__attributes) {
          this.__attributes = {};
        }
        return this.__attributes[key];
      };
      agGridProtoNoType.setGridOptions = function(options) {
        var globalEventListener = this.globalEventListener.bind(this);
        this._gridOptions = ComponentUtil.copyAttributesToGridOptions(options, this);
        var gridParams = {
          globalEventListener
        };
        this._agGrid = new Grid(this, this._gridOptions, gridParams);
        this.api = options.api;
        this.columnApi = options.columnApi;
        this._initialised = true;
      };
      agGridProtoNoType.createdCallback = function() {
        for (var i = 0; i < this.attributes.length; i++) {
          var attribute = this.attributes[i];
          this.setPropertyFromAttribute(attribute);
        }
      };
      agGridProtoNoType.setPropertyFromAttribute = function(attribute) {
        var name = toCamelCase(attribute.nodeName);
        var value = attribute.nodeValue;
        if (ComponentUtil.ALL_PROPERTIES.indexOf(name) >= 0) {
          this[name] = value;
        }
      };
      agGridProtoNoType.attachedCallback = function(params) {
      };
      agGridProtoNoType.detachedCallback = function(params) {
      };
      agGridProtoNoType.attributeChangedCallback = function(attributeName) {
        var attribute = this.attributes[attributeName];
        this.setPropertyFromAttribute(attribute);
      };
      agGridProtoNoType.globalEventListener = function(eventType, event) {
        var eventLowerCase = eventType.toLowerCase();
        var browserEvent = new Event(eventLowerCase);
        var browserEventNoType = browserEvent;
        browserEventNoType.agGridDetails = event;
        this.dispatchEvent(browserEvent);
        var callbackMethod = "on" + eventLowerCase;
        if (typeof this[callbackMethod] === "function") {
          this[callbackMethod](browserEvent);
        }
      };
      document.registerElement("ag-grid", { prototype: AgileGridProto });
    }
    function toCamelCase(myString) {
      if (typeof myString === "string") {
        var result = myString.replace(/-([a-z])/g, function(g) {
          return g[1].toUpperCase();
        });
        return result;
      } else {
        return myString;
      }
    }
    var __extends$1Z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1U = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TabbedLayout = function(_super) {
      __extends$1Z(TabbedLayout2, _super);
      function TabbedLayout2(params) {
        var _this = _super.call(this, TabbedLayout2.getTemplate(params.cssClass)) || this;
        _this.items = [];
        _this.params = params;
        if (params.items) {
          params.items.forEach(function(item) {
            return _this.addItem(item);
          });
        }
        return _this;
      }
      TabbedLayout2.getTemplate = function(cssClass) {
        return '<div class="ag-tabs ' + cssClass + '">\n            <div ref="eHeader" role="menu" class="ag-tabs-header ' + (cssClass ? cssClass + "-header" : "") + '"></div>\n            <div ref="eBody" role="presentation" class="ag-tabs-body ' + (cssClass ? cssClass + "-body" : "") + '"></div>\n        </div>';
      };
      TabbedLayout2.prototype.handleKeyDown = function(e) {
        switch (e.keyCode) {
          case KeyCode.RIGHT:
          case KeyCode.LEFT:
            if (!this.eHeader.contains(document.activeElement)) {
              return;
            }
            var currentPosition = this.items.indexOf(this.activeItem);
            var nextPosition = e.keyCode === KeyCode.RIGHT ? Math.min(currentPosition + 1, this.items.length - 1) : Math.max(currentPosition - 1, 0);
            if (currentPosition === nextPosition) {
              return;
            }
            e.preventDefault();
            var nextItem = this.items[nextPosition];
            this.showItemWrapper(nextItem);
            nextItem.eHeaderButton.focus();
            break;
          case KeyCode.UP:
          case KeyCode.DOWN:
            e.stopPropagation();
            break;
        }
      };
      TabbedLayout2.prototype.onTabKeyDown = function(e) {
        if (e.defaultPrevented) {
          return;
        }
        var _a = this, focusController = _a.focusController, eHeader = _a.eHeader, eBody = _a.eBody, activeItem = _a.activeItem;
        var activeElement = document.activeElement;
        e.preventDefault();
        if (eHeader.contains(activeElement)) {
          focusController.focusInto(eBody, e.shiftKey);
        } else {
          if (focusController.isFocusUnderManagedComponent(eBody)) {
            activeItem.eHeaderButton.focus();
          } else {
            var nextEl = focusController.findNextFocusableElement(eBody, false, e.shiftKey);
            if (nextEl) {
              nextEl.focus();
            } else {
              activeItem.eHeaderButton.focus();
            }
          }
        }
      };
      TabbedLayout2.prototype.setAfterAttachedParams = function(params) {
        this.afterAttachedParams = params;
      };
      TabbedLayout2.prototype.getMinDimensions = function() {
        var eDummyContainer = this.getGui().cloneNode(true);
        var eDummyBody = eDummyContainer.querySelector('[ref="eBody"]');
        eDummyContainer.style.position = "fixed";
        this.getGui().appendChild(eDummyContainer);
        var minWidth = 0;
        var minHeight = 0;
        this.items.forEach(function(itemWrapper) {
          clearElement(eDummyBody);
          var eClone = itemWrapper.tabbedItem.bodyPromise.resolveNow(null, function(body) {
            return body.cloneNode(true);
          });
          if (eClone == null) {
            return;
          }
          eDummyBody.appendChild(eClone);
          if (minWidth < eDummyContainer.offsetWidth) {
            minWidth = eDummyContainer.offsetWidth;
          }
          if (minHeight < eDummyContainer.offsetHeight) {
            minHeight = eDummyContainer.offsetHeight;
          }
        });
        this.getGui().removeChild(eDummyContainer);
        return { height: minHeight, width: minWidth };
      };
      TabbedLayout2.prototype.showFirstItem = function() {
        if (this.items.length > 0) {
          this.showItemWrapper(this.items[0]);
        }
      };
      TabbedLayout2.prototype.addItem = function(item) {
        var eHeaderButton = document.createElement("span");
        eHeaderButton.setAttribute("tabIndex", "-1");
        eHeaderButton.setAttribute("role", "menuitem");
        eHeaderButton.appendChild(item.title);
        addCssClass(eHeaderButton, "ag-tab");
        this.eHeader.appendChild(eHeaderButton);
        setAriaLabel(eHeaderButton, item.titleLabel);
        var wrapper = {
          tabbedItem: item,
          eHeaderButton
        };
        this.items.push(wrapper);
        eHeaderButton.addEventListener("click", this.showItemWrapper.bind(this, wrapper));
      };
      TabbedLayout2.prototype.showItem = function(tabbedItem) {
        var itemWrapper = find(this.items, function(wrapper) {
          return wrapper.tabbedItem === tabbedItem;
        });
        if (itemWrapper) {
          this.showItemWrapper(itemWrapper);
        }
      };
      TabbedLayout2.prototype.showItemWrapper = function(wrapper) {
        var _this = this;
        if (this.params.onItemClicked) {
          this.params.onItemClicked({ item: wrapper.tabbedItem });
        }
        if (this.activeItem === wrapper) {
          callIfPresent(this.params.onActiveItemClicked);
          return;
        }
        clearElement(this.eBody);
        wrapper.tabbedItem.bodyPromise.then(function(body) {
          _this.eBody.appendChild(body);
          var onlyUnmanaged = !_this.focusController.isKeyboardFocus();
          _this.focusController.focusInto(_this.eBody, false, onlyUnmanaged);
        });
        if (this.activeItem) {
          removeCssClass(this.activeItem.eHeaderButton, "ag-tab-selected");
        }
        addCssClass(wrapper.eHeaderButton, "ag-tab-selected");
        this.activeItem = wrapper;
        if (wrapper.tabbedItem.afterAttachedCallback) {
          wrapper.tabbedItem.afterAttachedCallback(this.afterAttachedParams);
        }
      };
      __decorate$1U([
        RefSelector("eHeader")
      ], TabbedLayout2.prototype, "eHeader", void 0);
      __decorate$1U([
        RefSelector("eBody")
      ], TabbedLayout2.prototype, "eBody", void 0);
      return TabbedLayout2;
    }(ManagedFocusComponent);
    function simpleHttpRequest(params) {
      return new Promise2(function(resolve) {
        var httpRequest = new XMLHttpRequest();
        httpRequest.open("GET", params.url);
        httpRequest.send();
        httpRequest.onreadystatechange = function() {
          if (httpRequest.readyState === 4 && httpRequest.status === 200) {
            resolve(JSON.parse(httpRequest.responseText));
          }
        };
      });
    }
    var __extends$1_ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1V = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RowNodeBlock = function(_super) {
      __extends$1_(RowNodeBlock2, _super);
      function RowNodeBlock2(blockNumber, rowNodeCacheParams) {
        var _this = _super.call(this) || this;
        _this.version = 0;
        _this.state = RowNodeBlock2.STATE_DIRTY;
        _this.rowNodeCacheParams = rowNodeCacheParams;
        _this.blockNumber = blockNumber;
        _this.startRow = blockNumber * rowNodeCacheParams.blockSize;
        _this.endRow = _this.startRow + rowNodeCacheParams.blockSize;
        return _this;
      }
      RowNodeBlock2.prototype.isAnyNodeOpen = function(rowCount) {
        var result = false;
        this.forEachNodeCallback(function(rowNode) {
          if (rowNode.expanded) {
            result = true;
          }
        }, rowCount);
        return result;
      };
      RowNodeBlock2.prototype.forEachNodeCallback = function(callback, rowCount) {
        for (var rowIndex = this.startRow; rowIndex < this.endRow; rowIndex++) {
          if (rowIndex < rowCount) {
            var rowNode = this.getRowUsingLocalIndex(rowIndex);
            callback(rowNode, rowIndex);
          }
        }
      };
      RowNodeBlock2.prototype.forEachNode = function(callback, sequence, rowCount, deep) {
        this.forEachNodeCallback(function(rowNode) {
          callback(rowNode, sequence.next());
          if (deep && rowNode.childrenCache) {
            rowNode.childrenCache.forEachNodeDeep(callback, sequence);
          }
        }, rowCount);
      };
      RowNodeBlock2.prototype.forEachNodeDeep = function(callback, sequence, rowCount) {
        this.forEachNode(callback, sequence, rowCount, true);
      };
      RowNodeBlock2.prototype.forEachNodeShallow = function(callback, sequence, rowCount) {
        this.forEachNode(callback, sequence, rowCount, false);
      };
      RowNodeBlock2.prototype.getVersion = function() {
        return this.version;
      };
      RowNodeBlock2.prototype.getLastAccessed = function() {
        return this.lastAccessed;
      };
      RowNodeBlock2.prototype.getRowUsingLocalIndex = function(rowIndex, dontTouchLastAccessed) {
        if (dontTouchLastAccessed === void 0) {
          dontTouchLastAccessed = false;
        }
        if (!dontTouchLastAccessed) {
          this.lastAccessed = this.rowNodeCacheParams.lastAccessedSequence.next();
        }
        var localIndex = rowIndex - this.startRow;
        return this.rowNodes[localIndex];
      };
      RowNodeBlock2.prototype.init = function() {
        this.createRowNodes();
      };
      RowNodeBlock2.prototype.getStartRow = function() {
        return this.startRow;
      };
      RowNodeBlock2.prototype.getEndRow = function() {
        return this.endRow;
      };
      RowNodeBlock2.prototype.getBlockNumber = function() {
        return this.blockNumber;
      };
      RowNodeBlock2.prototype.setDirty = function() {
        this.version++;
        this.state = RowNodeBlock2.STATE_DIRTY;
      };
      RowNodeBlock2.prototype.setDirtyAndPurge = function() {
        this.setDirty();
        this.rowNodes.forEach(function(rowNode) {
          return rowNode.setData(null);
        });
      };
      RowNodeBlock2.prototype.getState = function() {
        return this.state;
      };
      RowNodeBlock2.prototype.setRowNode = function(rowIndex, rowNode) {
        var localIndex = rowIndex - this.startRow;
        this.rowNodes[localIndex] = rowNode;
      };
      RowNodeBlock2.prototype.setBlankRowNode = function(rowIndex) {
        var newRowNode = this.createBlankRowNode(rowIndex);
        var localIndex = rowIndex - this.startRow;
        this.rowNodes[localIndex] = newRowNode;
        return newRowNode;
      };
      RowNodeBlock2.prototype.setNewData = function(rowIndex, dataItem) {
        var newRowNode = this.setBlankRowNode(rowIndex);
        this.setDataAndId(newRowNode, dataItem, this.startRow + rowIndex);
        return newRowNode;
      };
      RowNodeBlock2.prototype.createBlankRowNode = function(rowIndex) {
        var rowNode = this.getContext().createBean(new RowNode());
        rowNode.setRowHeight(this.rowNodeCacheParams.rowHeight);
        return rowNode;
      };
      RowNodeBlock2.prototype.createRowNodes = function() {
        this.rowNodes = [];
        for (var i = 0; i < this.rowNodeCacheParams.blockSize; i++) {
          var rowIndex = this.startRow + i;
          var rowNode = this.createBlankRowNode(rowIndex);
          this.rowNodes.push(rowNode);
        }
      };
      RowNodeBlock2.prototype.load = function() {
        this.state = RowNodeBlock2.STATE_LOADING;
        this.loadFromDatasource();
      };
      RowNodeBlock2.prototype.pageLoadFailed = function() {
        this.state = RowNodeBlock2.STATE_FAILED;
        var event = {
          type: RowNodeBlock2.EVENT_LOAD_COMPLETE,
          success: false,
          page: this,
          lastRow: null
        };
        this.dispatchEvent(event);
      };
      RowNodeBlock2.prototype.populateWithRowData = function(rows) {
        var _this = this;
        var rowNodesToRefresh = [];
        this.rowNodes.forEach(function(rowNode, index) {
          var data = rows[index];
          if (rowNode.stub) {
            rowNodesToRefresh.push(rowNode);
          }
          _this.setDataAndId(rowNode, data, _this.startRow + index);
        });
        if (rowNodesToRefresh.length > 0) {
          this.rowRenderer.redrawRows(rowNodesToRefresh);
        }
      };
      RowNodeBlock2.prototype.destroyRowNodes = function() {
        var _this = this;
        this.rowNodes.forEach(function(rowNode) {
          if (rowNode.childrenCache) {
            _this.destroyBean(rowNode.childrenCache);
            rowNode.childrenCache = null;
          }
          rowNode.clearRowTop();
        });
      };
      RowNodeBlock2.prototype.pageLoaded = function(version, rows, lastRow) {
        if (version === this.version) {
          this.state = RowNodeBlock2.STATE_LOADED;
          this.populateWithRowData(rows);
        }
        lastRow = cleanNumber(lastRow);
        var event = {
          type: RowNodeBlock2.EVENT_LOAD_COMPLETE,
          success: true,
          page: this,
          lastRow
        };
        this.dispatchEvent(event);
      };
      RowNodeBlock2.EVENT_LOAD_COMPLETE = "loadComplete";
      RowNodeBlock2.STATE_DIRTY = "dirty";
      RowNodeBlock2.STATE_LOADING = "loading";
      RowNodeBlock2.STATE_LOADED = "loaded";
      RowNodeBlock2.STATE_FAILED = "failed";
      __decorate$1V([
        Autowired("rowRenderer")
      ], RowNodeBlock2.prototype, "rowRenderer", void 0);
      __decorate$1V([
        PostConstruct
      ], RowNodeBlock2.prototype, "init", null);
      __decorate$1V([
        PreDestroy
      ], RowNodeBlock2.prototype, "destroyRowNodes", null);
      return RowNodeBlock2;
    }(BeanStub);
    var __extends$1$ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1W = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$9 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var RowNodeBlockLoader = function(_super) {
      __extends$1$(RowNodeBlockLoader2, _super);
      function RowNodeBlockLoader2(maxConcurrentRequests, blockLoadDebounceMillis) {
        var _this = _super.call(this) || this;
        _this.activeBlockLoadsCount = 0;
        _this.blocks = [];
        _this.active = true;
        _this.maxConcurrentRequests = maxConcurrentRequests;
        if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {
          _this.checkBlockToLoadDebounce = debounce(_this.performCheckBlocksToLoad.bind(_this), blockLoadDebounceMillis);
        }
        return _this;
      }
      RowNodeBlockLoader2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("RowNodeBlockLoader");
      };
      RowNodeBlockLoader2.prototype.addBlock = function(block) {
        this.blocks.push(block);
      };
      RowNodeBlockLoader2.prototype.removeBlock = function(block) {
        removeFromArray(this.blocks, block);
      };
      RowNodeBlockLoader2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.active = false;
      };
      RowNodeBlockLoader2.prototype.loadComplete = function() {
        this.activeBlockLoadsCount--;
      };
      RowNodeBlockLoader2.prototype.checkBlockToLoad = function() {
        if (this.checkBlockToLoadDebounce) {
          this.checkBlockToLoadDebounce();
        } else {
          this.performCheckBlocksToLoad();
        }
      };
      RowNodeBlockLoader2.prototype.performCheckBlocksToLoad = function() {
        if (!this.active) {
          return;
        }
        this.printCacheStatus();
        if (this.maxConcurrentRequests != null && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {
          this.logger.log("checkBlockToLoad: max loads exceeded");
          return;
        }
        var blockToLoad = null;
        this.blocks.forEach(function(block) {
          if (block.getState() === RowNodeBlock.STATE_DIRTY) {
            blockToLoad = block;
          }
        });
        if (blockToLoad) {
          blockToLoad.load();
          this.activeBlockLoadsCount++;
          this.logger.log("checkBlockToLoad: loading page " + blockToLoad.getBlockNumber());
          this.printCacheStatus();
        } else {
          this.logger.log("checkBlockToLoad: no pages to load");
        }
      };
      RowNodeBlockLoader2.prototype.getBlockState = function() {
        var result = {};
        this.blocks.forEach(function(block) {
          var nodeIdPrefix = block.getNodeIdPrefix();
          var stateItem = {
            blockNumber: block.getBlockNumber(),
            startRow: block.getStartRow(),
            endRow: block.getEndRow(),
            pageStatus: block.getState()
          };
          if (exists(nodeIdPrefix)) {
            result[nodeIdPrefix + block.getBlockNumber()] = stateItem;
          } else {
            result[block.getBlockNumber()] = stateItem;
          }
        });
        return result;
      };
      RowNodeBlockLoader2.prototype.printCacheStatus = function() {
        if (this.logger.isLogging()) {
          this.logger.log("printCacheStatus: activePageLoadsCount = " + this.activeBlockLoadsCount + "," + (" blocks = " + JSON.stringify(this.getBlockState())));
        }
      };
      RowNodeBlockLoader2.prototype.isLoading = function() {
        return this.activeBlockLoadsCount > 0;
      };
      __decorate$1W([
        __param$9(0, Qualifier("loggerFactory"))
      ], RowNodeBlockLoader2.prototype, "setBeans", null);
      return RowNodeBlockLoader2;
    }(BeanStub);
    var __extends$20 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1X = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RowNodeCache = function(_super) {
      __extends$20(RowNodeCache2, _super);
      function RowNodeCache2(cacheParams) {
        var _this = _super.call(this) || this;
        _this.maxRowFound = false;
        _this.blocks = {};
        _this.blockCount = 0;
        _this.virtualRowCount = cacheParams.initialRowCount;
        _this.cacheParams = cacheParams;
        return _this;
      }
      RowNodeCache2.prototype.destroyAllBlocks = function() {
        var _this = this;
        this.forEachBlockInOrder(function(block) {
          return _this.destroyBlock(block);
        });
      };
      RowNodeCache2.prototype.init = function() {
        var _this = this;
        this.active = true;
        this.addDestroyFunc(function() {
          return _this.active = false;
        });
      };
      RowNodeCache2.prototype.isActive = function() {
        return this.active;
      };
      RowNodeCache2.prototype.getVirtualRowCount = function() {
        return this.virtualRowCount;
      };
      RowNodeCache2.prototype.hack_setVirtualRowCount = function(virtualRowCount) {
        this.virtualRowCount = virtualRowCount;
      };
      RowNodeCache2.prototype.isMaxRowFound = function() {
        return this.maxRowFound;
      };
      RowNodeCache2.prototype.onPageLoaded = function(event) {
        this.cacheParams.rowNodeBlockLoader.loadComplete();
        this.checkBlockToLoad();
        if (!this.isActive()) {
          return;
        }
        this.logger.log("onPageLoaded: page = " + event.page.getBlockNumber() + ", lastRow = " + event.lastRow);
        if (event.success) {
          this.checkVirtualRowCount(event.page, event.lastRow);
          this.onCacheUpdated();
        }
      };
      RowNodeCache2.prototype.purgeBlocksIfNeeded = function(blockToExclude) {
        var _this = this;
        var blocksForPurging = [];
        this.forEachBlockInOrder(function(block) {
          if (block === blockToExclude) {
            return;
          }
          blocksForPurging.push(block);
        });
        blocksForPurging.sort(function(a, b) {
          return b.getLastAccessed() - a.getLastAccessed();
        });
        var maxBlocksProvided = this.cacheParams.maxBlocksInCache > 0;
        var blocksToKeep = maxBlocksProvided ? this.cacheParams.maxBlocksInCache - 1 : null;
        var emptyBlocksToKeep = RowNodeCache2.MAX_EMPTY_BLOCKS_TO_KEEP - 1;
        blocksForPurging.forEach(function(block, index) {
          var purgeBecauseBlockEmpty = block.getState() === RowNodeBlock.STATE_DIRTY && index >= emptyBlocksToKeep;
          var purgeBecauseCacheFull = maxBlocksProvided ? index >= blocksToKeep : false;
          if (purgeBecauseBlockEmpty || purgeBecauseCacheFull) {
            if (block.isAnyNodeOpen(_this.virtualRowCount)) {
              return;
            }
            if (_this.isBlockCurrentlyDisplayed(block)) {
              return;
            }
            _this.removeBlockFromCache(block);
          }
        });
      };
      RowNodeCache2.prototype.isBlockCurrentlyDisplayed = function(block) {
        var firstViewportRow = this.rowRenderer.getFirstVirtualRenderedRow();
        var lastViewportRow = this.rowRenderer.getLastVirtualRenderedRow();
        var firstRowIndex = block.getDisplayIndexStart();
        var lastRowIndex = block.getDisplayIndexEnd() - 1;
        var parentClosed = firstRowIndex == null || lastRowIndex == null;
        if (parentClosed) {
          return false;
        }
        var blockBeforeViewport = firstRowIndex > lastViewportRow;
        var blockAfterViewport = lastRowIndex < firstViewportRow;
        var blockInsideViewport = !blockBeforeViewport && !blockAfterViewport;
        return blockInsideViewport;
      };
      RowNodeCache2.prototype.postCreateBlock = function(newBlock) {
        newBlock.addEventListener(RowNodeBlock.EVENT_LOAD_COMPLETE, this.onPageLoaded.bind(this));
        this.setBlock(newBlock.getBlockNumber(), newBlock);
        this.purgeBlocksIfNeeded(newBlock);
        this.checkBlockToLoad();
      };
      RowNodeCache2.prototype.removeBlockFromCache = function(blockToRemove) {
        if (!blockToRemove) {
          return;
        }
        this.destroyBlock(blockToRemove);
      };
      RowNodeCache2.prototype.checkBlockToLoad = function() {
        this.cacheParams.rowNodeBlockLoader.checkBlockToLoad();
      };
      RowNodeCache2.prototype.checkVirtualRowCount = function(block, lastRow) {
        if (typeof lastRow === "number" && lastRow >= 0) {
          this.virtualRowCount = lastRow;
          this.maxRowFound = true;
        } else if (!this.maxRowFound) {
          var lastRowIndex = (block.getBlockNumber() + 1) * this.cacheParams.blockSize;
          var lastRowIndexPlusOverflow = lastRowIndex + this.cacheParams.overflowSize;
          if (this.virtualRowCount < lastRowIndexPlusOverflow) {
            this.virtualRowCount = lastRowIndexPlusOverflow;
          }
        }
      };
      RowNodeCache2.prototype.setVirtualRowCount = function(rowCount, maxRowFound) {
        this.virtualRowCount = rowCount;
        if (exists(maxRowFound)) {
          this.maxRowFound = maxRowFound;
        }
        if (!this.maxRowFound) {
          if (this.virtualRowCount % this.cacheParams.blockSize === 0) {
            this.virtualRowCount++;
          }
        }
        this.onCacheUpdated();
      };
      RowNodeCache2.prototype.forEachNodeDeep = function(callback, sequence) {
        var _this = this;
        if (sequence === void 0) {
          sequence = new NumberSequence();
        }
        this.forEachBlockInOrder(function(block) {
          return block.forEachNodeDeep(callback, sequence, _this.virtualRowCount);
        });
      };
      RowNodeCache2.prototype.forEachBlockInOrder = function(callback) {
        var ids = this.getBlockIdsSorted();
        this.forEachBlockId(ids, callback);
      };
      RowNodeCache2.prototype.forEachBlockInReverseOrder = function(callback) {
        var ids = this.getBlockIdsSorted().reverse();
        this.forEachBlockId(ids, callback);
      };
      RowNodeCache2.prototype.forEachBlockId = function(ids, callback) {
        var _this = this;
        ids.forEach(function(id) {
          var block = _this.blocks[id];
          callback(block, id);
        });
      };
      RowNodeCache2.prototype.getBlockIdsSorted = function() {
        var numberComparator = function(a, b) {
          return a - b;
        };
        var blockIds = Object.keys(this.blocks).map(function(idStr) {
          return parseInt(idStr, 10);
        }).sort(numberComparator);
        return blockIds;
      };
      RowNodeCache2.prototype.getBlock = function(blockId) {
        return this.blocks[blockId];
      };
      RowNodeCache2.prototype.setBlock = function(id, block) {
        this.blocks[id] = block;
        this.blockCount++;
        this.cacheParams.rowNodeBlockLoader.addBlock(block);
      };
      RowNodeCache2.prototype.destroyBlock = function(block) {
        delete this.blocks[block.getBlockNumber()];
        this.destroyBean(block);
        this.blockCount--;
        this.cacheParams.rowNodeBlockLoader.removeBlock(block);
      };
      RowNodeCache2.prototype.onCacheUpdated = function() {
        if (this.isActive()) {
          this.destroyAllBlocksPastVirtualRowCount();
          var event_1 = {
            type: RowNodeCache2.EVENT_CACHE_UPDATED
          };
          this.dispatchEvent(event_1);
        }
      };
      RowNodeCache2.prototype.destroyAllBlocksPastVirtualRowCount = function() {
        var _this = this;
        var blocksToDestroy = [];
        this.forEachBlockInOrder(function(block, id) {
          var startRow = id * _this.cacheParams.blockSize;
          if (startRow >= _this.virtualRowCount) {
            blocksToDestroy.push(block);
          }
        });
        if (blocksToDestroy.length > 0) {
          blocksToDestroy.forEach(function(block) {
            return _this.destroyBlock(block);
          });
        }
      };
      RowNodeCache2.prototype.purgeCache = function() {
        var _this = this;
        this.forEachBlockInOrder(function(block) {
          return _this.removeBlockFromCache(block);
        });
        this.maxRowFound = false;
        if (this.virtualRowCount === 0) {
          this.virtualRowCount = this.cacheParams.initialRowCount;
        }
        this.onCacheUpdated();
      };
      RowNodeCache2.prototype.getRowNodesInRange = function(firstInRange, lastInRange) {
        var _this = this;
        var result = [];
        var lastBlockId = -1;
        var inActiveRange = false;
        var numberSequence = new NumberSequence();
        if (missing(firstInRange)) {
          inActiveRange = true;
        }
        var foundGapInSelection = false;
        this.forEachBlockInOrder(function(block, id) {
          if (foundGapInSelection) {
            return;
          }
          if (inActiveRange && lastBlockId + 1 !== id) {
            foundGapInSelection = true;
            return;
          }
          lastBlockId = id;
          block.forEachNodeShallow(function(rowNode) {
            var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;
            if (inActiveRange || hitFirstOrLast) {
              result.push(rowNode);
            }
            if (hitFirstOrLast) {
              inActiveRange = !inActiveRange;
            }
          }, numberSequence, _this.virtualRowCount);
        });
        var invalidRange = foundGapInSelection || inActiveRange;
        return invalidRange ? [] : result;
      };
      RowNodeCache2.EVENT_CACHE_UPDATED = "cacheUpdated";
      RowNodeCache2.MAX_EMPTY_BLOCKS_TO_KEEP = 2;
      __decorate$1X([
        Autowired("rowRenderer")
      ], RowNodeCache2.prototype, "rowRenderer", void 0);
      __decorate$1X([
        PreDestroy
      ], RowNodeCache2.prototype, "destroyAllBlocks", null);
      __decorate$1X([
        PostConstruct
      ], RowNodeCache2.prototype, "init", null);
      return RowNodeCache2;
    }(BeanStub);
    var __extends$21 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1Y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var VirtualList = function(_super) {
      __extends$21(VirtualList2, _super);
      function VirtualList2(cssIdentifier, ariaRole) {
        if (cssIdentifier === void 0) {
          cssIdentifier = "default";
        }
        if (ariaRole === void 0) {
          ariaRole = "listbox";
        }
        var _this = _super.call(this, VirtualList2.getTemplate(cssIdentifier), true) || this;
        _this.cssIdentifier = cssIdentifier;
        _this.ariaRole = ariaRole;
        _this.renderedRows = /* @__PURE__ */ new Map();
        _this.rowHeight = 20;
        _this.isDestroyed = false;
        return _this;
      }
      VirtualList2.prototype.postConstruct = function() {
        this.addScrollListener();
        this.rowHeight = this.getItemHeight();
        this.addResizeObserver();
        _super.prototype.postConstruct.call(this);
      };
      VirtualList2.prototype.addResizeObserver = function() {
        var listener = this.drawVirtualRows.bind(this);
        var destroyObserver = this.resizeObserverService.observeResize(this.getGui(), listener);
        this.addDestroyFunc(destroyObserver);
      };
      VirtualList2.prototype.focusInnerElement = function(fromBottom) {
        this.focusRow(fromBottom ? this.model.getRowCount() - 1 : 0);
      };
      VirtualList2.prototype.onFocusIn = function(e) {
        _super.prototype.onFocusIn.call(this, e);
        var target = e.target;
        if (containsClass(target, "ag-virtual-list-item")) {
          this.lastFocusedRowIndex = getAriaPosInSet(target) - 1;
        }
      };
      VirtualList2.prototype.onFocusOut = function(e) {
        _super.prototype.onFocusOut.call(this, e);
        if (!this.getFocusableElement().contains(e.relatedTarget)) {
          this.lastFocusedRowIndex = null;
        }
      };
      VirtualList2.prototype.handleKeyDown = function(e) {
        switch (e.keyCode) {
          case KeyCode.UP:
          case KeyCode.DOWN:
            if (this.navigate(e.keyCode === KeyCode.UP)) {
              e.preventDefault();
            }
            break;
        }
      };
      VirtualList2.prototype.onTabKeyDown = function(e) {
        if (this.navigate(e.shiftKey)) {
          e.preventDefault();
        } else {
          this.focusController.focusInto(this.getGui(), !e.shiftKey);
        }
      };
      VirtualList2.prototype.navigate = function(up) {
        if (this.lastFocusedRowIndex == null) {
          return false;
        }
        var nextRow = this.lastFocusedRowIndex + (up ? -1 : 1);
        if (nextRow < 0 || nextRow >= this.model.getRowCount()) {
          return false;
        }
        this.focusRow(nextRow);
        return true;
      };
      VirtualList2.prototype.getLastFocusedRow = function() {
        return this.lastFocusedRowIndex;
      };
      VirtualList2.prototype.focusRow = function(rowNumber) {
        var _this = this;
        this.ensureIndexVisible(rowNumber);
        window.setTimeout(function() {
          var renderedRow = _this.renderedRows.get(rowNumber);
          if (renderedRow) {
            renderedRow.eDiv.focus();
          }
        }, 10);
      };
      VirtualList2.prototype.getComponentAt = function(rowIndex) {
        var comp = this.renderedRows.get(rowIndex);
        return comp && comp.rowComponent;
      };
      VirtualList2.getTemplate = function(cssIdentifier) {
        return '\n            <div class="ag-virtual-list-viewport ag-' + cssIdentifier + '-virtual-list-viewport" role="listbox">\n                <div class="ag-virtual-list-container ag-' + cssIdentifier + '-virtual-list-container" ref="eContainer"></div>\n            </div>';
      };
      VirtualList2.prototype.getItemHeight = function() {
        return this.gridOptionsWrapper.getListItemHeight();
      };
      VirtualList2.prototype.ensureIndexVisible = function(index) {
        var lastRow = this.model.getRowCount();
        if (typeof index !== "number" || index < 0 || index >= lastRow) {
          console.warn("invalid row index for ensureIndexVisible: " + index);
          return;
        }
        var rowTopPixel = index * this.rowHeight;
        var rowBottomPixel = rowTopPixel + this.rowHeight;
        var eGui = this.getGui();
        var viewportTopPixel = eGui.scrollTop;
        var viewportHeight = eGui.offsetHeight;
        var viewportBottomPixel = viewportTopPixel + viewportHeight;
        var viewportScrolledPastRow = viewportTopPixel > rowTopPixel;
        var viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel;
        if (viewportScrolledPastRow) {
          eGui.scrollTop = rowTopPixel;
        } else if (viewportScrolledBeforeRow) {
          var newScrollPosition = rowBottomPixel - viewportHeight;
          eGui.scrollTop = newScrollPosition;
        }
      };
      VirtualList2.prototype.setComponentCreator = function(componentCreator) {
        this.componentCreator = componentCreator;
      };
      VirtualList2.prototype.getRowHeight = function() {
        return this.rowHeight;
      };
      VirtualList2.prototype.getScrollTop = function() {
        return this.getGui().scrollTop;
      };
      VirtualList2.prototype.setRowHeight = function(rowHeight) {
        this.rowHeight = rowHeight;
        this.refresh();
      };
      VirtualList2.prototype.refresh = function() {
        var _this = this;
        if (this.model == null || this.isDestroyed) {
          return;
        }
        var rowCount = this.model.getRowCount();
        this.eContainer.style.height = rowCount * this.rowHeight + "px";
        setTimeout(function() {
          if (_this.isDestroyed) {
            return;
          }
          _this.clearVirtualRows();
          _this.drawVirtualRows();
        }, 0);
      };
      VirtualList2.prototype.clearVirtualRows = function() {
        var _this = this;
        this.renderedRows.forEach(function(_2, rowIndex) {
          return _this.removeRow(rowIndex);
        });
      };
      VirtualList2.prototype.drawVirtualRows = function() {
        var gui = this.getGui();
        var topPixel = gui.scrollTop;
        var bottomPixel = topPixel + gui.offsetHeight;
        var firstRow = Math.floor(topPixel / this.rowHeight);
        var lastRow = Math.floor(bottomPixel / this.rowHeight);
        this.ensureRowsRendered(firstRow, lastRow);
      };
      VirtualList2.prototype.ensureRowsRendered = function(start, finish) {
        var _this = this;
        this.renderedRows.forEach(function(_2, rowIndex2) {
          if ((rowIndex2 < start || rowIndex2 > finish) && rowIndex2 !== _this.lastFocusedRowIndex) {
            _this.removeRow(rowIndex2);
          }
        });
        for (var rowIndex = start; rowIndex <= finish; rowIndex++) {
          if (this.renderedRows.has(rowIndex)) {
            continue;
          }
          if (rowIndex < this.model.getRowCount()) {
            this.insertRow(rowIndex);
          }
        }
      };
      VirtualList2.prototype.insertRow = function(rowIndex) {
        var _this = this;
        var value = this.model.getRow(rowIndex);
        var eDiv = document.createElement("div");
        addCssClass(eDiv, "ag-virtual-list-item");
        addCssClass(eDiv, "ag-" + this.cssIdentifier + "-virtual-list-item");
        eDiv.setAttribute("role", this.ariaRole === "tree" ? "treeitem" : "option");
        setAriaSetSize(eDiv, this.model.getRowCount());
        setAriaPosInSet(eDiv, rowIndex + 1);
        eDiv.setAttribute("tabindex", "-1");
        if (typeof this.model.isRowSelected === "function") {
          var isSelected = this.model.isRowSelected(rowIndex);
          setAriaSelected(eDiv, !!isSelected);
          setAriaChecked(eDiv, isSelected);
        }
        eDiv.style.height = this.rowHeight + "px";
        eDiv.style.top = this.rowHeight * rowIndex + "px";
        var rowComponent = this.componentCreator(value, eDiv);
        rowComponent.addGuiEventListener("focusin", function() {
          return _this.lastFocusedRowIndex = rowIndex;
        });
        eDiv.appendChild(rowComponent.getGui());
        if (this.renderedRows.has(rowIndex - 1)) {
          this.renderedRows.get(rowIndex - 1).eDiv.insertAdjacentElement("afterend", eDiv);
        } else if (this.renderedRows.has(rowIndex + 1)) {
          this.renderedRows.get(rowIndex + 1).eDiv.insertAdjacentElement("beforebegin", eDiv);
        } else {
          this.eContainer.appendChild(eDiv);
        }
        this.renderedRows.set(rowIndex, { rowComponent, eDiv });
      };
      VirtualList2.prototype.removeRow = function(rowIndex) {
        var component = this.renderedRows.get(rowIndex);
        this.eContainer.removeChild(component.eDiv);
        this.destroyBean(component.rowComponent);
        this.renderedRows.delete(rowIndex);
      };
      VirtualList2.prototype.addScrollListener = function() {
        var _this = this;
        this.addGuiEventListener("scroll", function() {
          return _this.drawVirtualRows();
        });
      };
      VirtualList2.prototype.setModel = function(model) {
        this.model = model;
      };
      VirtualList2.prototype.destroy = function() {
        if (this.isDestroyed) {
          return;
        }
        this.clearVirtualRows();
        this.isDestroyed = true;
        _super.prototype.destroy.call(this);
      };
      __decorate$1Y([
        Autowired("gridOptionsWrapper")
      ], VirtualList2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1Y([
        Autowired("resizeObserverService")
      ], VirtualList2.prototype, "resizeObserverService", void 0);
      __decorate$1Y([
        RefSelector("eContainer")
      ], VirtualList2.prototype, "eContainer", void 0);
      return VirtualList2;
    }(ManagedFocusComponent);
    function defaultGroupComparator(valueA, valueB, nodeA, nodeB, accentedCompare) {
      if (accentedCompare === void 0) {
        accentedCompare = false;
      }
      console.warn("ag-Grid: Since ag-grid 11.0.0 defaultGroupComparator is not necessary. You can remove this from your colDef");
      var nodeAIsGroup = exists(nodeA) && nodeA.group;
      var nodeBIsGroup = exists(nodeB) && nodeB.group;
      var bothAreGroups = nodeAIsGroup && nodeBIsGroup;
      var bothAreNormal = !nodeAIsGroup && !nodeBIsGroup;
      if (bothAreGroups) {
        return defaultComparator(nodeA.key, nodeB.key, accentedCompare);
      }
      if (bothAreNormal) {
        return defaultComparator(valueA, valueB, accentedCompare);
      }
      if (nodeAIsGroup) {
        return 1;
      }
      return -1;
    }
    var BaseComponentWrapper = function() {
      function BaseComponentWrapper2() {
      }
      BaseComponentWrapper2.prototype.wrap = function(OriginalConstructor, mandatoryMethodList, optionalMethodList, componentType, componentName) {
        var _this = this;
        if (optionalMethodList === void 0) {
          optionalMethodList = [];
        }
        var wrapper = this.createWrapper(OriginalConstructor, componentType, componentName);
        mandatoryMethodList.forEach(function(methodName) {
          _this.createMethod(wrapper, methodName, true);
        });
        optionalMethodList.forEach(function(methodName) {
          _this.createMethod(wrapper, methodName, false);
        });
        return wrapper;
      };
      BaseComponentWrapper2.prototype.createMethod = function(wrapper, methodName, mandatory) {
        wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));
      };
      BaseComponentWrapper2.prototype.createMethodProxy = function(wrapper, methodName, mandatory) {
        return function() {
          if (wrapper.hasMethod(methodName)) {
            return wrapper.callMethod(methodName, arguments);
          }
          if (mandatory) {
            console.warn("ag-Grid: Framework component is missing the method " + methodName + "()");
          }
          return null;
        };
      };
      return BaseComponentWrapper2;
    }();
    (function(ChartType) {
      ChartType["GroupedColumn"] = "groupedColumn";
      ChartType["StackedColumn"] = "stackedColumn";
      ChartType["NormalizedColumn"] = "normalizedColumn";
      ChartType["GroupedBar"] = "groupedBar";
      ChartType["StackedBar"] = "stackedBar";
      ChartType["NormalizedBar"] = "normalizedBar";
      ChartType["Line"] = "line";
      ChartType["Scatter"] = "scatter";
      ChartType["Bubble"] = "bubble";
      ChartType["Pie"] = "pie";
      ChartType["Doughnut"] = "doughnut";
      ChartType["Area"] = "area";
      ChartType["StackedArea"] = "stackedArea";
      ChartType["NormalizedArea"] = "normalizedArea";
      ChartType["Histogram"] = "histogram";
    })(exports.ChartType || (exports.ChartType = {}));
    (function(LegendPosition) {
      LegendPosition["Top"] = "top";
      LegendPosition["Right"] = "right";
      LegendPosition["Bottom"] = "bottom";
      LegendPosition["Left"] = "left";
    })(exports.LegendPosition || (exports.LegendPosition = {}));
    var globalObj = typeof global === "undefined" ? {} : global;
    globalObj.HTMLElement = typeof HTMLElement === "undefined" ? {} : HTMLElement;
    globalObj.HTMLButtonElement = typeof HTMLButtonElement === "undefined" ? {} : HTMLButtonElement;
    globalObj.HTMLSelectElement = typeof HTMLSelectElement === "undefined" ? {} : HTMLSelectElement;
    globalObj.HTMLInputElement = typeof HTMLInputElement === "undefined" ? {} : HTMLInputElement;
    globalObj.Node = typeof Node === "undefined" ? {} : Node;
    globalObj.MouseEvent = typeof MouseEvent === "undefined" ? {} : MouseEvent;
    var ClientSideNodeManager = function() {
      function ClientSideNodeManager2(rootNode, gridOptionsWrapper, context, eventService, columnController, gridApi, columnApi, selectionController) {
        this.nextId = 0;
        this.allNodesMap = {};
        this.rootNode = rootNode;
        this.gridOptionsWrapper = gridOptionsWrapper;
        this.context = context;
        this.eventService = eventService;
        this.columnController = columnController;
        this.gridApi = gridApi;
        this.columnApi = columnApi;
        this.selectionController = selectionController;
        this.rootNode.group = true;
        this.rootNode.level = -1;
        this.rootNode.id = ClientSideNodeManager2.ROOT_NODE_ID;
        this.rootNode.allLeafChildren = [];
        this.rootNode.childrenAfterGroup = [];
        this.rootNode.childrenAfterSort = [];
        this.rootNode.childrenAfterFilter = [];
        this.postConstruct();
      }
      ClientSideNodeManager2.prototype.postConstruct = function() {
        this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();
        this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();
        this.doingTreeData = this.gridOptionsWrapper.isTreeData();
        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
      };
      ClientSideNodeManager2.prototype.getCopyOfNodesMap = function() {
        return _.cloneObject(this.allNodesMap);
      };
      ClientSideNodeManager2.prototype.getRowNode = function(id) {
        return this.allNodesMap[id];
      };
      ClientSideNodeManager2.prototype.setRowData = function(rowData) {
        this.rootNode.childrenAfterFilter = null;
        this.rootNode.childrenAfterGroup = null;
        this.rootNode.childrenAfterSort = null;
        this.rootNode.childrenMapped = null;
        this.rootNode.updateHasChildren();
        this.nextId = 0;
        this.allNodesMap = {};
        if (!rowData) {
          this.rootNode.allLeafChildren = [];
          this.rootNode.childrenAfterGroup = [];
          return;
        }
        this.rootNode.allLeafChildren = this.recursiveFunction(rowData, this.rootNode, ClientSideNodeManager2.TOP_LEVEL);
      };
      ClientSideNodeManager2.prototype.updateRowData = function(rowDataTran, rowNodeOrder) {
        var rowNodeTransaction = {
          remove: [],
          update: [],
          add: []
        };
        var nodesToUnselect = [];
        this.executeAdd(rowDataTran, rowNodeTransaction);
        this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);
        this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);
        this.updateSelection(nodesToUnselect);
        if (rowNodeOrder) {
          _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);
        }
        return rowNodeTransaction;
      };
      ClientSideNodeManager2.prototype.updateSelection = function(nodesToUnselect) {
        var selectionChanged = nodesToUnselect.length > 0;
        if (selectionChanged) {
          nodesToUnselect.forEach(function(rowNode) {
            rowNode.setSelected(false, false, true);
          });
        }
        this.selectionController.updateGroupsFromChildrenSelections();
        if (selectionChanged) {
          var event_1 = {
            type: Events.EVENT_SELECTION_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      ClientSideNodeManager2.prototype.executeAdd = function(rowDataTran, rowNodeTransaction) {
        var _this = this;
        var add = rowDataTran.add, addIndex = rowDataTran.addIndex;
        if (_.missingOrEmpty(add)) {
          return;
        }
        var useIndex = typeof addIndex === "number" && addIndex >= 0;
        if (useIndex) {
          add.reverse().forEach(function(item) {
            var newRowNode = _this.addRowNode(item, addIndex);
            rowNodeTransaction.add.push(newRowNode);
          });
        } else {
          add.forEach(function(item) {
            var newRowNode = _this.addRowNode(item);
            rowNodeTransaction.add.push(newRowNode);
          });
        }
      };
      ClientSideNodeManager2.prototype.executeRemove = function(rowDataTran, rowNodeTransaction, nodesToUnselect) {
        var _this = this;
        var remove = rowDataTran.remove;
        if (_.missingOrEmpty(remove)) {
          return;
        }
        var rowIdsRemoved = {};
        remove.forEach(function(item) {
          var rowNode = _this.lookupRowNode(item);
          if (!rowNode) {
            return;
          }
          if (rowNode.isSelected()) {
            nodesToUnselect.push(rowNode);
          }
          rowNode.clearRowTop();
          rowIdsRemoved[rowNode.id] = true;
          delete _this.allNodesMap[rowNode.id];
          rowNodeTransaction.remove.push(rowNode);
        });
        this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function(rowNode) {
          return !rowIdsRemoved[rowNode.id];
        });
      };
      ClientSideNodeManager2.prototype.executeUpdate = function(rowDataTran, rowNodeTransaction, nodesToUnselect) {
        var _this = this;
        var update = rowDataTran.update;
        if (_.missingOrEmpty(update)) {
          return;
        }
        update.forEach(function(item) {
          var rowNode = _this.lookupRowNode(item);
          if (!rowNode) {
            return;
          }
          rowNode.updateData(item);
          if (!rowNode.selectable && rowNode.isSelected()) {
            nodesToUnselect.push(rowNode);
          }
          _this.setMasterForRow(rowNode, item, ClientSideNodeManager2.TOP_LEVEL, false);
          rowNodeTransaction.update.push(rowNode);
        });
      };
      ClientSideNodeManager2.prototype.addRowNode = function(data, index) {
        var newNode = this.createNode(data, this.rootNode, ClientSideNodeManager2.TOP_LEVEL);
        if (_.exists(index)) {
          _.insertIntoArray(this.rootNode.allLeafChildren, newNode, index);
        } else {
          this.rootNode.allLeafChildren.push(newNode);
        }
        return newNode;
      };
      ClientSideNodeManager2.prototype.lookupRowNode = function(data) {
        var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
        var rowNode;
        if (_.exists(rowNodeIdFunc)) {
          var id = rowNodeIdFunc(data);
          rowNode = this.allNodesMap[id];
          if (!rowNode) {
            console.error("ag-Grid: could not find row id=" + id + ", data item was not found for this id");
            return null;
          }
        } else {
          rowNode = _.find(this.rootNode.allLeafChildren, function(rowNode2) {
            return rowNode2.data === data;
          });
          if (!rowNode) {
            console.error("ag-Grid: could not find data item as object was not found", data);
            return null;
          }
        }
        return rowNode;
      };
      ClientSideNodeManager2.prototype.recursiveFunction = function(rowData, parent, level) {
        var _this = this;
        if (typeof rowData === "string") {
          console.warn("ag-Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first");
          return;
        }
        var rowNodes = [];
        rowData.forEach(function(dataItem) {
          var node = _this.createNode(dataItem, parent, level);
          rowNodes.push(node);
        });
        return rowNodes;
      };
      ClientSideNodeManager2.prototype.createNode = function(dataItem, parent, level) {
        var node = new RowNode();
        this.context.createBean(node);
        node.group = false;
        this.setMasterForRow(node, dataItem, level, true);
        if (parent && !this.suppressParentsInRowNodes) {
          node.parent = parent;
        }
        node.level = level;
        node.setDataAndId(dataItem, this.nextId.toString());
        if (this.allNodesMap[node.id]) {
          console.warn("ag-grid: duplicate node id '" + node.id + "' detected from getRowNodeId callback, this could cause issues in your grid.");
        }
        this.allNodesMap[node.id] = node;
        this.nextId++;
        return node;
      };
      ClientSideNodeManager2.prototype.setMasterForRow = function(rowNode, data, level, setExpanded) {
        if (this.doingTreeData) {
          rowNode.setMaster(false);
          if (setExpanded) {
            rowNode.expanded = false;
          }
        } else {
          if (this.doingMasterDetail) {
            if (this.isRowMasterFunc) {
              rowNode.setMaster(this.isRowMasterFunc(data));
            } else {
              rowNode.setMaster(true);
            }
          } else {
            rowNode.setMaster(false);
          }
          if (setExpanded) {
            var rowGroupColumns = this.columnController.getRowGroupColumns();
            var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;
            var masterRowLevel = level + numRowGroupColumns;
            rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;
          }
        }
      };
      ClientSideNodeManager2.prototype.isExpanded = function(level) {
        var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();
        if (expandByDefault === -1) {
          return true;
        } else {
          return level < expandByDefault;
        }
      };
      ClientSideNodeManager2.prototype.setLeafChildren = function(node) {
        node.allLeafChildren = [];
        if (node.childrenAfterGroup) {
          node.childrenAfterGroup.forEach(function(childAfterGroup) {
            if (childAfterGroup.group) {
              if (childAfterGroup.allLeafChildren) {
                childAfterGroup.allLeafChildren.forEach(function(leafChild) {
                  return node.allLeafChildren.push(leafChild);
                });
              }
            } else {
              node.allLeafChildren.push(childAfterGroup);
            }
          });
        }
      };
      ClientSideNodeManager2.TOP_LEVEL = 0;
      ClientSideNodeManager2.ROOT_NODE_ID = "ROOT_NODE_ID";
      return ClientSideNodeManager2;
    }();
    var __extends$22 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1Z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RecursionType;
    (function(RecursionType2) {
      RecursionType2[RecursionType2["Normal"] = 0] = "Normal";
      RecursionType2[RecursionType2["AfterFilter"] = 1] = "AfterFilter";
      RecursionType2[RecursionType2["AfterFilterAndSort"] = 2] = "AfterFilterAndSort";
      RecursionType2[RecursionType2["PivotNodes"] = 3] = "PivotNodes";
    })(RecursionType || (RecursionType = {}));
    var ClientSideRowModel = function(_super) {
      __extends$22(ClientSideRowModel2, _super);
      function ClientSideRowModel2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ClientSideRowModel2.prototype.init = function() {
        var refreshEverythingFunc = this.refreshModel.bind(this, { step: Constants.STEP_EVERYTHING });
        var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {
          step: Constants.STEP_EVERYTHING,
          afterColumnsChanged: true,
          keepRenderedRows: true,
          animate: true
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_EVERYTHING_CHANGED, refreshEverythingAfterColsChangedFunc);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: Constants.STEP_PIVOT }));
        this.addManagedListener(this.eventService, Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);
        var refreshMapListener = this.refreshModel.bind(this, {
          step: Constants.STEP_MAP,
          keepRenderedRows: true,
          animate: true
        });
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapListener);
        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapListener);
        this.rootNode = new RowNode();
        this.nodeManager = new ClientSideNodeManager(this.rootNode, this.gridOptionsWrapper, this.getContext(), this.eventService, this.columnController, this.gridApi, this.columnApi, this.selectionController);
        this.createBean(this.rootNode);
      };
      ClientSideRowModel2.prototype.start = function() {
        var rowData = this.gridOptionsWrapper.getRowData();
        if (rowData) {
          this.setRowData(rowData);
        }
      };
      ClientSideRowModel2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
        var atLeastOneChange;
        var res = false;
        do {
          atLeastOneChange = false;
          var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);
          var rowAtEndPixel = this.getRowIndexAtPixel(endPixel);
          var firstRow = Math.max(rowAtStartPixel, startLimitIndex);
          var lastRow = Math.min(rowAtEndPixel, endLimitIndex);
          for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {
            var rowNode = this.getRow(rowIndex);
            if (rowNode.rowHeightEstimated) {
              var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);
              rowNode.setRowHeight(rowHeight.height);
              atLeastOneChange = true;
              res = true;
            }
          }
          if (atLeastOneChange) {
            this.setRowTops();
          }
        } while (atLeastOneChange);
        return res;
      };
      ClientSideRowModel2.prototype.setRowTops = function() {
        var nextRowTop = 0;
        for (var i = 0; i < this.rowsToDisplay.length; i++) {
          var allowEstimate = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;
          var rowNode = this.rowsToDisplay[i];
          if (_.missing(rowNode.rowHeight)) {
            var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode, allowEstimate);
            rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);
          }
          rowNode.setRowTop(nextRowTop);
          rowNode.setRowIndex(i);
          nextRowTop += rowNode.rowHeight;
        }
      };
      ClientSideRowModel2.prototype.resetRowTops = function(rowNode, changedPath) {
        rowNode.clearRowTop();
        if (rowNode.hasChildren()) {
          if (rowNode.childrenAfterGroup) {
            var skipChildren = changedPath.isActive() && !rowNode.expanded;
            if (!skipChildren) {
              for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
                this.resetRowTops(rowNode.childrenAfterGroup[i], changedPath);
              }
            }
          }
          if (rowNode.sibling) {
            rowNode.sibling.clearRowTop();
          }
        }
        if (rowNode.detailNode) {
          rowNode.detailNode.clearRowTop();
        }
      };
      ClientSideRowModel2.prototype.ensureRowsAtPixel = function(rowNodes, pixel, increment) {
        var _this = this;
        if (increment === void 0) {
          increment = 0;
        }
        var indexAtPixelNow = this.getRowIndexAtPixel(pixel);
        var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);
        if (rowNodeAtPixelNow === rowNodes[0]) {
          return false;
        }
        rowNodes.forEach(function(rowNode) {
          _.removeFromArray(_this.rootNode.allLeafChildren, rowNode);
        });
        rowNodes.forEach(function(rowNode, idx) {
          _.insertIntoArray(_this.rootNode.allLeafChildren, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);
        });
        this.refreshModel({
          step: Constants.STEP_EVERYTHING,
          keepRenderedRows: true,
          animate: true,
          keepEditingRows: true
        });
        return true;
      };
      ClientSideRowModel2.prototype.highlightRowAtPixel = function(rowNode, pixel) {
        var indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;
        var rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;
        if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {
          if (this.lastHighlightedRow) {
            this.lastHighlightedRow.setHighlighted(null);
            this.lastHighlightedRow = null;
          }
          return;
        }
        var highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);
        if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {
          this.lastHighlightedRow.setHighlighted(null);
          this.lastHighlightedRow = null;
        }
        rowNodeAtPixelNow.setHighlighted(highlight);
        this.lastHighlightedRow = rowNodeAtPixelNow;
      };
      ClientSideRowModel2.prototype.getHighlightPosition = function(pixel, rowNode) {
        if (!rowNode) {
          var index = this.getRowIndexAtPixel(pixel);
          rowNode = this.getRow(index || 0);
          if (!rowNode) {
            return "below";
          }
        }
        var rowTop = rowNode.rowTop, rowHeight = rowNode.rowHeight;
        return pixel - rowTop < rowHeight / 2 ? "above" : "below";
      };
      ClientSideRowModel2.prototype.getLastHighlightedRowNode = function() {
        return this.lastHighlightedRow;
      };
      ClientSideRowModel2.prototype.isLastRowFound = function() {
        return true;
      };
      ClientSideRowModel2.prototype.getRowCount = function() {
        if (this.rowsToDisplay) {
          return this.rowsToDisplay.length;
        }
        return 0;
      };
      ClientSideRowModel2.prototype.getTopLevelRowCount = function() {
        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
        if (showingRootNode) {
          return 1;
        }
        return this.rootNode.childrenAfterFilter ? this.rootNode.childrenAfterFilter.length : 0;
      };
      ClientSideRowModel2.prototype.getTopLevelRowDisplayedIndex = function(topLevelIndex) {
        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
        if (showingRootNode) {
          return topLevelIndex;
        }
        var rowNode = this.rootNode.childrenAfterSort[topLevelIndex];
        if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
          while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {
            rowNode = rowNode.childrenAfterSort[0];
          }
        }
        return rowNode.rowIndex;
      };
      ClientSideRowModel2.prototype.getRowBounds = function(index) {
        if (_.missing(this.rowsToDisplay)) {
          return null;
        }
        var rowNode = this.rowsToDisplay[index];
        if (rowNode) {
          return {
            rowTop: rowNode.rowTop,
            rowHeight: rowNode.rowHeight
          };
        }
        return null;
      };
      ClientSideRowModel2.prototype.onRowGroupOpened = function() {
        var animate = this.gridOptionsWrapper.isAnimateRows();
        this.refreshModel({ step: Constants.STEP_MAP, keepRenderedRows: true, animate });
      };
      ClientSideRowModel2.prototype.onFilterChanged = function(event) {
        if (event.afterDataChange) {
          return;
        }
        var animate = this.gridOptionsWrapper.isAnimateRows();
        this.refreshModel({ step: Constants.STEP_FILTER, keepRenderedRows: true, animate });
      };
      ClientSideRowModel2.prototype.onSortChanged = function() {
        var animate = this.gridOptionsWrapper.isAnimateRows();
        this.refreshModel({ step: Constants.STEP_SORT, keepRenderedRows: true, animate, keepEditingRows: true });
      };
      ClientSideRowModel2.prototype.getType = function() {
        return Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
      };
      ClientSideRowModel2.prototype.onValueChanged = function() {
        if (this.columnController.isPivotActive()) {
          this.refreshModel({ step: Constants.STEP_PIVOT });
        } else {
          this.refreshModel({ step: Constants.STEP_AGGREGATE });
        }
      };
      ClientSideRowModel2.prototype.createChangePath = function(rowNodeTransactions) {
        var noTransactions = _.missingOrEmpty(rowNodeTransactions);
        var changedPath = new ChangedPath(false, this.rootNode);
        if (noTransactions || this.gridOptionsWrapper.isTreeData()) {
          changedPath.setInactive();
        }
        return changedPath;
      };
      ClientSideRowModel2.prototype.refreshModel = function(params) {
        var _this = this;
        var changedPath = this.createChangePath(params.rowNodeTransactions);
        switch (params.step) {
          case Constants.STEP_EVERYTHING:
            this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath, params.afterColumnsChanged);
          case Constants.STEP_FILTER:
            this.doFilter(changedPath);
          case Constants.STEP_PIVOT:
            this.doPivot(changedPath);
          case Constants.STEP_AGGREGATE:
            this.doAggregate(changedPath);
          case Constants.STEP_SORT:
            this.doSort(params.rowNodeTransactions, changedPath);
          case Constants.STEP_MAP:
            this.doRowsToDisplay();
        }
        this.resetRowTops(this.rootNode, changedPath);
        this.setRowTops();
        var event = {
          type: Events.EVENT_MODEL_UPDATED,
          api: this.gridApi,
          columnApi: this.columnApi,
          animate: params.animate,
          keepRenderedRows: params.keepRenderedRows,
          newData: params.newData,
          newPage: false
        };
        this.eventService.dispatchEvent(event);
        if (this.$scope) {
          window.setTimeout(function() {
            _this.$scope.$apply();
          }, 0);
        }
      };
      ClientSideRowModel2.prototype.isEmpty = function() {
        var rowsMissing = _.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;
        return _.missing(this.rootNode) || rowsMissing || !this.columnController.isReady();
      };
      ClientSideRowModel2.prototype.isRowsToRender = function() {
        return _.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;
      };
      ClientSideRowModel2.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
        var firstRowHit = !lastInRange;
        var lastRowHit = false;
        var lastRow;
        var result = [];
        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
        this.forEachNodeAfterFilterAndSort(function(rowNode) {
          var lookingForLastRow = firstRowHit && !lastRowHit;
          if (!firstRowHit) {
            if (rowNode === lastInRange || rowNode === firstInRange) {
              firstRowHit = true;
            }
          }
          var skipThisGroupNode = rowNode.group && groupsSelectChildren;
          if (!skipThisGroupNode) {
            var inRange = firstRowHit && !lastRowHit;
            var childOfLastRow = rowNode.isParentOfNode(lastRow);
            if (inRange || childOfLastRow) {
              result.push(rowNode);
            }
          }
          if (lookingForLastRow) {
            if (rowNode === lastInRange || rowNode === firstInRange) {
              lastRowHit = true;
              if (rowNode === lastInRange) {
                lastRow = lastInRange;
              } else {
                lastRow = firstInRange;
              }
            }
          }
        });
        return result;
      };
      ClientSideRowModel2.prototype.setDatasource = function(datasource) {
        console.error("ag-Grid: should never call setDatasource on clientSideRowController");
      };
      ClientSideRowModel2.prototype.getTopLevelNodes = function() {
        return this.rootNode ? this.rootNode.childrenAfterGroup : null;
      };
      ClientSideRowModel2.prototype.getRootNode = function() {
        return this.rootNode;
      };
      ClientSideRowModel2.prototype.getRow = function(index) {
        return this.rowsToDisplay[index];
      };
      ClientSideRowModel2.prototype.isRowPresent = function(rowNode) {
        return this.rowsToDisplay.indexOf(rowNode) >= 0;
      };
      ClientSideRowModel2.prototype.getRowIndexAtPixel = function(pixelToMatch) {
        if (this.isEmpty()) {
          return -1;
        }
        var bottomPointer = 0;
        var topPointer = this.rowsToDisplay.length - 1;
        if (pixelToMatch <= 0) {
          return 0;
        }
        var lastNode = _.last(this.rowsToDisplay);
        if (lastNode.rowTop <= pixelToMatch) {
          return this.rowsToDisplay.length - 1;
        }
        while (true) {
          var midPointer = Math.floor((bottomPointer + topPointer) / 2);
          var currentRowNode = this.rowsToDisplay[midPointer];
          if (this.isRowInPixel(currentRowNode, pixelToMatch)) {
            return midPointer;
          }
          if (currentRowNode.rowTop < pixelToMatch) {
            bottomPointer = midPointer + 1;
          } else if (currentRowNode.rowTop > pixelToMatch) {
            topPointer = midPointer - 1;
          }
        }
      };
      ClientSideRowModel2.prototype.isRowInPixel = function(rowNode, pixelToMatch) {
        var topPixel = rowNode.rowTop;
        var bottomPixel = rowNode.rowTop + rowNode.rowHeight;
        var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;
        return pixelInRow;
      };
      ClientSideRowModel2.prototype.getCurrentPageHeight = function() {
        if (this.rowsToDisplay && this.rowsToDisplay.length > 0) {
          var lastRow = _.last(this.rowsToDisplay);
          var lastPixel = lastRow.rowTop + lastRow.rowHeight;
          return lastPixel;
        }
        return 0;
      };
      ClientSideRowModel2.prototype.forEachLeafNode = function(callback) {
        if (this.rootNode.allLeafChildren) {
          this.rootNode.allLeafChildren.forEach(function(rowNode, index) {
            return callback(rowNode, index);
          });
        }
      };
      ClientSideRowModel2.prototype.forEachNode = function(callback) {
        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);
      };
      ClientSideRowModel2.prototype.forEachNodeAfterFilter = function(callback) {
        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, RecursionType.AfterFilter, 0);
      };
      ClientSideRowModel2.prototype.forEachNodeAfterFilterAndSort = function(callback) {
        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);
      };
      ClientSideRowModel2.prototype.forEachPivotNode = function(callback) {
        this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);
      };
      ClientSideRowModel2.prototype.recursivelyWalkNodesAndCallback = function(nodes, callback, recursionType, index) {
        if (!nodes) {
          return index;
        }
        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          callback(node, index++);
          if (node.hasChildren()) {
            var nodeChildren = null;
            switch (recursionType) {
              case RecursionType.Normal:
                nodeChildren = node.childrenAfterGroup;
                break;
              case RecursionType.AfterFilter:
                nodeChildren = node.childrenAfterFilter;
                break;
              case RecursionType.AfterFilterAndSort:
                nodeChildren = node.childrenAfterSort;
                break;
              case RecursionType.PivotNodes:
                nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;
                break;
            }
            if (nodeChildren) {
              index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);
            }
          }
        }
        return index;
      };
      ClientSideRowModel2.prototype.doAggregate = function(changedPath) {
        if (this.aggregationStage) {
          this.aggregationStage.execute({ rowNode: this.rootNode, changedPath });
        }
      };
      ClientSideRowModel2.prototype.expandOrCollapseAll = function(expand) {
        var usingTreeData = this.gridOptionsWrapper.isTreeData();
        if (this.rootNode) {
          recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);
        }
        function recursiveExpandOrCollapse(rowNodes) {
          if (!rowNodes) {
            return;
          }
          rowNodes.forEach(function(rowNode) {
            var shouldExpandOrCollapse = usingTreeData ? _.exists(rowNode.childrenAfterGroup) : rowNode.group;
            if (shouldExpandOrCollapse) {
              rowNode.expanded = expand;
              recursiveExpandOrCollapse(rowNode.childrenAfterGroup);
            }
          });
        }
        this.refreshModel({ step: Constants.STEP_MAP });
        var eventSource = expand ? "expandAll" : "collapseAll";
        var event = {
          api: this.gridApi,
          columnApi: this.columnApi,
          type: Events.EVENT_EXPAND_COLLAPSE_ALL,
          source: eventSource
        };
        this.eventService.dispatchEvent(event);
      };
      ClientSideRowModel2.prototype.doSort = function(rowNodeTransactions, changedPath) {
        this.sortStage.execute({
          rowNode: this.rootNode,
          rowNodeTransactions,
          changedPath
        });
      };
      ClientSideRowModel2.prototype.doRowGrouping = function(groupState, rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {
        if (this.groupStage) {
          if (rowNodeTransactions) {
            this.groupStage.execute({
              rowNode: this.rootNode,
              rowNodeTransactions,
              rowNodeOrder,
              changedPath
            });
          } else {
            this.selectionController.removeGroupsFromSelection();
            this.groupStage.execute({
              rowNode: this.rootNode,
              changedPath,
              afterColumnsChanged
            });
            this.restoreGroupState(groupState);
          }
          if (this.gridOptionsWrapper.isGroupSelectsChildren()) {
            this.selectionController.updateGroupsFromChildrenSelections(changedPath);
          }
        } else {
          this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;
          this.rootNode.updateHasChildren();
        }
      };
      ClientSideRowModel2.prototype.restoreGroupState = function(groupState) {
        if (!groupState) {
          return;
        }
        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function(node, key) {
          if (typeof groupState[key] === "boolean") {
            node.expanded = groupState[key];
          }
        });
      };
      ClientSideRowModel2.prototype.doFilter = function(changedPath) {
        this.filterStage.execute({ rowNode: this.rootNode, changedPath });
      };
      ClientSideRowModel2.prototype.doPivot = function(changedPath) {
        if (this.pivotStage) {
          this.pivotStage.execute({ rowNode: this.rootNode, changedPath });
        }
      };
      ClientSideRowModel2.prototype.getGroupState = function() {
        if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {
          return null;
        }
        var result = {};
        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function(node, key) {
          return result[key] = node.expanded;
        });
        return result;
      };
      ClientSideRowModel2.prototype.getCopyOfNodesMap = function() {
        return this.nodeManager.getCopyOfNodesMap();
      };
      ClientSideRowModel2.prototype.getRowNode = function(id) {
        return this.nodeManager.getRowNode(id);
      };
      ClientSideRowModel2.prototype.setRowData = function(rowData) {
        var groupState = this.getGroupState();
        this.nodeManager.setRowData(rowData);
        var rowDataChangedEvent = {
          type: Events.EVENT_ROW_DATA_CHANGED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(rowDataChangedEvent);
        this.refreshModel({
          step: Constants.STEP_EVERYTHING,
          groupState,
          newData: true
        });
      };
      ClientSideRowModel2.prototype.batchUpdateRowData = function(rowDataTransaction, callback) {
        var _this = this;
        if (this.applyAsyncTransactionsTimeout == null) {
          this.rowDataTransactionBatch = [];
          var waitMillis = this.gridOptionsWrapper.getAsyncTransactionWaitMillis();
          this.applyAsyncTransactionsTimeout = window.setTimeout(function() {
            _this.executeBatchUpdateRowData();
          }, waitMillis);
        }
        this.rowDataTransactionBatch.push({ rowDataTransaction, callback });
      };
      ClientSideRowModel2.prototype.flushAsyncTransactions = function() {
        if (this.applyAsyncTransactionsTimeout != null) {
          clearTimeout(this.applyAsyncTransactionsTimeout);
          this.executeBatchUpdateRowData();
        }
      };
      ClientSideRowModel2.prototype.executeBatchUpdateRowData = function() {
        var _this = this;
        this.valueCache.onDataChanged();
        var callbackFuncsBound = [];
        var rowNodeTrans = [];
        if (this.rowDataTransactionBatch) {
          this.rowDataTransactionBatch.forEach(function(tranItem) {
            var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, null);
            rowNodeTrans.push(rowNodeTran);
            if (tranItem.callback) {
              callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));
            }
          });
        }
        this.commonUpdateRowData(rowNodeTrans);
        if (callbackFuncsBound.length > 0) {
          window.setTimeout(function() {
            callbackFuncsBound.forEach(function(func) {
              return func();
            });
          }, 0);
        }
        this.rowDataTransactionBatch = null;
        this.applyAsyncTransactionsTimeout = void 0;
      };
      ClientSideRowModel2.prototype.updateRowData = function(rowDataTran, rowNodeOrder) {
        this.valueCache.onDataChanged();
        var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);
        if (typeof rowDataTran.addIndex === "number") {
          rowNodeOrder = this.createRowNodeOrder();
        }
        this.commonUpdateRowData([rowNodeTran], rowNodeOrder);
        return rowNodeTran;
      };
      ClientSideRowModel2.prototype.createRowNodeOrder = function() {
        var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();
        if (suppressSortOrder) {
          return;
        }
        var orderMap = suppressSortOrder ? null : {};
        if (this.rootNode && this.rootNode.allLeafChildren) {
          for (var index = 0; index < this.rootNode.allLeafChildren.length; index++) {
            var node = this.rootNode.allLeafChildren[index];
            orderMap[node.id] = index;
          }
        }
        return orderMap;
      };
      ClientSideRowModel2.prototype.commonUpdateRowData = function(rowNodeTrans, rowNodeOrder) {
        this.refreshModel({
          step: Constants.STEP_EVERYTHING,
          rowNodeTransactions: rowNodeTrans,
          rowNodeOrder,
          keepRenderedRows: true,
          animate: true,
          keepEditingRows: true
        });
        var event = {
          type: Events.EVENT_ROW_DATA_UPDATED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
      };
      ClientSideRowModel2.prototype.doRowsToDisplay = function() {
        this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });
      };
      ClientSideRowModel2.prototype.onRowHeightChanged = function() {
        this.refreshModel({ step: Constants.STEP_MAP, keepRenderedRows: true, keepEditingRows: true });
      };
      ClientSideRowModel2.prototype.resetRowHeights = function() {
        var atLeastOne = false;
        this.forEachNode(function(rowNode) {
          rowNode.setRowHeight(rowNode.rowHeight, true);
          var detailNode = rowNode.detailNode;
          if (detailNode) {
            detailNode.setRowHeight(detailNode.rowHeight, true);
          }
          atLeastOne = true;
        });
        if (atLeastOne) {
          this.onRowHeightChanged();
        }
      };
      __decorate$1Z([
        Autowired("gridOptionsWrapper")
      ], ClientSideRowModel2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1Z([
        Autowired("columnController")
      ], ClientSideRowModel2.prototype, "columnController", void 0);
      __decorate$1Z([
        Autowired("filterManager")
      ], ClientSideRowModel2.prototype, "filterManager", void 0);
      __decorate$1Z([
        Autowired("$scope")
      ], ClientSideRowModel2.prototype, "$scope", void 0);
      __decorate$1Z([
        Autowired("selectionController")
      ], ClientSideRowModel2.prototype, "selectionController", void 0);
      __decorate$1Z([
        Autowired("valueService")
      ], ClientSideRowModel2.prototype, "valueService", void 0);
      __decorate$1Z([
        Autowired("valueCache")
      ], ClientSideRowModel2.prototype, "valueCache", void 0);
      __decorate$1Z([
        Autowired("columnApi")
      ], ClientSideRowModel2.prototype, "columnApi", void 0);
      __decorate$1Z([
        Autowired("gridApi")
      ], ClientSideRowModel2.prototype, "gridApi", void 0);
      __decorate$1Z([
        Autowired("filterStage")
      ], ClientSideRowModel2.prototype, "filterStage", void 0);
      __decorate$1Z([
        Autowired("sortStage")
      ], ClientSideRowModel2.prototype, "sortStage", void 0);
      __decorate$1Z([
        Autowired("flattenStage")
      ], ClientSideRowModel2.prototype, "flattenStage", void 0);
      __decorate$1Z([
        Optional("groupStage")
      ], ClientSideRowModel2.prototype, "groupStage", void 0);
      __decorate$1Z([
        Optional("aggregationStage")
      ], ClientSideRowModel2.prototype, "aggregationStage", void 0);
      __decorate$1Z([
        Optional("pivotStage")
      ], ClientSideRowModel2.prototype, "pivotStage", void 0);
      __decorate$1Z([
        PostConstruct
      ], ClientSideRowModel2.prototype, "init", null);
      ClientSideRowModel2 = __decorate$1Z([
        Bean("rowModel")
      ], ClientSideRowModel2);
      return ClientSideRowModel2;
    }(BeanStub);
    var __extends$23 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1_ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FilterStage = function(_super) {
      __extends$23(FilterStage2, _super);
      function FilterStage2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FilterStage2.prototype.execute = function(params) {
        var rowNode = params.rowNode, changedPath = params.changedPath;
        this.filterService.filter(changedPath);
        this.selectableService.updateSelectableAfterFiltering(rowNode);
      };
      __decorate$1_([
        Autowired("gridOptionsWrapper")
      ], FilterStage2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1_([
        Autowired("selectableService")
      ], FilterStage2.prototype, "selectableService", void 0);
      __decorate$1_([
        Autowired("filterService")
      ], FilterStage2.prototype, "filterService", void 0);
      FilterStage2 = __decorate$1_([
        Bean("filterStage")
      ], FilterStage2);
      return FilterStage2;
    }(BeanStub);
    var __extends$24 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1$ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SortStage = function(_super) {
      __extends$24(SortStage2, _super);
      function SortStage2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SortStage2.prototype.execute = function(params) {
        var sortOptions = this.sortController.getSortForRowController();
        var sortActive = _.exists(sortOptions) && sortOptions.length > 0;
        var deltaSort = sortActive && _.exists(params.rowNodeTransactions) && this.gridOptionsWrapper.isDeltaSort();
        var dirtyLeafNodes = deltaSort ? this.calculateDirtyNodes(params.rowNodeTransactions) : null;
        var valueColumns = this.columnController.getValueColumns();
        var noAggregations = _.missingOrEmpty(valueColumns);
        this.sortService.sort(sortOptions, sortActive, deltaSort, dirtyLeafNodes, params.changedPath, noAggregations);
      };
      SortStage2.prototype.calculateDirtyNodes = function(rowNodeTransactions) {
        var dirtyNodes = {};
        var addNodesFunc = function(rowNodes) {
          if (rowNodes) {
            rowNodes.forEach(function(rowNode) {
              return dirtyNodes[rowNode.id] = true;
            });
          }
        };
        rowNodeTransactions.forEach(function(tran) {
          addNodesFunc(tran.add);
          addNodesFunc(tran.update);
          addNodesFunc(tran.remove);
        });
        return dirtyNodes;
      };
      __decorate$1$([
        Autowired("gridOptionsWrapper")
      ], SortStage2.prototype, "gridOptionsWrapper", void 0);
      __decorate$1$([
        Autowired("sortService")
      ], SortStage2.prototype, "sortService", void 0);
      __decorate$1$([
        Autowired("sortController")
      ], SortStage2.prototype, "sortController", void 0);
      __decorate$1$([
        Autowired("columnController")
      ], SortStage2.prototype, "columnController", void 0);
      SortStage2 = __decorate$1$([
        Bean("sortStage")
      ], SortStage2);
      return SortStage2;
    }(BeanStub);
    var __extends$25 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$20 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FlattenStage = function(_super) {
      __extends$25(FlattenStage2, _super);
      function FlattenStage2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FlattenStage2.prototype.execute = function(params) {
        var rootNode = params.rowNode;
        var result = [];
        var nextRowTop = { value: 0 };
        var skipLeafNodes = this.columnController.isPivotMode();
        var showRootNode = skipLeafNodes && rootNode.leafGroup;
        var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;
        this.recursivelyAddToRowsToDisplay(topList, result, nextRowTop, skipLeafNodes, 0);
        var atLeastOneRowPresent = result.length > 0;
        var includeGroupTotalFooter = !showRootNode && atLeastOneRowPresent && this.gridOptionsWrapper.isGroupIncludeTotalFooter();
        if (includeGroupTotalFooter) {
          this.ensureFooterNodeExists(rootNode);
          this.addRowNodeToRowsToDisplay(rootNode.sibling, result, nextRowTop, 0);
        }
        return result;
      };
      FlattenStage2.prototype.recursivelyAddToRowsToDisplay = function(rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel) {
        if (_.missingOrEmpty(rowsToFlatten)) {
          return;
        }
        var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents();
        var groupRemoveSingleChildren = this.gridOptionsWrapper.isGroupRemoveSingleChildren();
        var groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
        for (var i = 0; i < rowsToFlatten.length; i++) {
          var rowNode = rowsToFlatten[i];
          var isParent = rowNode.hasChildren();
          var isSkippedLeafNode = skipLeafNodes && !isParent;
          var isRemovedSingleChildrenGroup = groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;
          var isRemovedLowestSingleChildrenGroup = groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1;
          var neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;
          var isHiddenOpenParent = hideOpenParents && rowNode.expanded && !neverAllowToExpand;
          var thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;
          if (thisRowShouldBeRendered) {
            this.addRowNodeToRowsToDisplay(rowNode, result, nextRowTop, uiLevel);
          }
          if (skipLeafNodes && rowNode.leafGroup) {
            continue;
          }
          if (isParent) {
            var excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;
            if (rowNode.expanded || excludedParent) {
              var uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;
              this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort, result, nextRowTop, skipLeafNodes, uiLevelForChildren);
              if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
                this.ensureFooterNodeExists(rowNode);
                this.addRowNodeToRowsToDisplay(rowNode.sibling, result, nextRowTop, uiLevel);
              }
            }
          } else if (rowNode.master && rowNode.expanded) {
            var detailNode = this.createDetailNode(rowNode);
            this.addRowNodeToRowsToDisplay(detailNode, result, nextRowTop, uiLevel);
          }
        }
      };
      FlattenStage2.prototype.addRowNodeToRowsToDisplay = function(rowNode, result, nextRowTop, uiLevel) {
        var isGroupMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();
        result.push(rowNode);
        rowNode.setUiLevel(isGroupMultiAutoColumn ? 0 : uiLevel);
      };
      FlattenStage2.prototype.ensureFooterNodeExists = function(groupNode) {
        if (_.exists(groupNode.sibling)) {
          return;
        }
        var footerNode = new RowNode();
        this.context.createBean(footerNode);
        Object.keys(groupNode).forEach(function(key) {
          footerNode[key] = groupNode[key];
        });
        footerNode.footer = true;
        footerNode.rowTop = null;
        footerNode.oldRowTop = null;
        if (_.exists(footerNode.id)) {
          footerNode.id = "rowGroupFooter_" + footerNode.id;
        }
        footerNode.sibling = groupNode;
        groupNode.sibling = footerNode;
      };
      FlattenStage2.prototype.createDetailNode = function(masterNode) {
        if (_.exists(masterNode.detailNode)) {
          return masterNode.detailNode;
        }
        var detailNode = new RowNode();
        this.context.createBean(detailNode);
        detailNode.detail = true;
        detailNode.selectable = false;
        detailNode.parent = masterNode;
        if (_.exists(masterNode.id)) {
          detailNode.id = "detail_" + masterNode.id;
        }
        detailNode.data = masterNode.data;
        detailNode.level = masterNode.level + 1;
        masterNode.detailNode = detailNode;
        return detailNode;
      };
      __decorate$20([
        Autowired("gridOptionsWrapper")
      ], FlattenStage2.prototype, "gridOptionsWrapper", void 0);
      __decorate$20([
        Autowired("selectionController")
      ], FlattenStage2.prototype, "selectionController", void 0);
      __decorate$20([
        Autowired("columnController")
      ], FlattenStage2.prototype, "columnController", void 0);
      FlattenStage2 = __decorate$20([
        Bean("flattenStage")
      ], FlattenStage2);
      return FlattenStage2;
    }(BeanStub);
    var __extends$26 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$21 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SortService = function(_super) {
      __extends$26(SortService2, _super);
      function SortService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SortService2.prototype.init = function() {
        this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();
      };
      SortService2.prototype.sort = function(sortOptions, sortActive, deltaSort, dirtyLeafNodes, changedPath, noAggregations) {
        var _this = this;
        var callback = function(rowNode) {
          _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterFilter, true);
          if (sortActive) {
            var sortedRowNodes = deltaSort ? _this.doDeltaSort(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) : _this.doFullSort(rowNode, sortOptions);
            rowNode.childrenAfterSort = sortedRowNodes.map(function(sorted) {
              return sorted.rowNode;
            });
          } else {
            rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);
          }
          _this.updateChildIndexes(rowNode);
          if (_this.postSortFunc) {
            _this.postSortFunc(rowNode.childrenAfterSort);
          }
        };
        changedPath.forEachChangedNodeDepthFirst(callback);
        this.updateGroupDataForHiddenOpenParents(changedPath);
      };
      SortService2.prototype.doFullSort = function(rowNode, sortOptions) {
        var sortedRowNodes = rowNode.childrenAfterFilter.map(this.mapNodeToSortedNode.bind(this));
        sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));
        return sortedRowNodes;
      };
      SortService2.prototype.mapNodeToSortedNode = function(rowNode, pos) {
        return { currentPos: pos, rowNode };
      };
      SortService2.prototype.doDeltaSort = function(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) {
        var cleanNodes = rowNode.childrenAfterSort.filter(function(rowNode2) {
          var passesDirtyNodesCheck = !dirtyLeafNodes[rowNode2.id];
          var passesChangedPathCheck = noAggregations || changedPath.canSkip(rowNode2);
          return passesDirtyNodesCheck && passesChangedPathCheck;
        }).map(this.mapNodeToSortedNode.bind(this));
        var cleanNodesMapped = {};
        cleanNodes.forEach(function(sortedRowNode) {
          return cleanNodesMapped[sortedRowNode.rowNode.id] = sortedRowNode.rowNode;
        });
        var changedNodes = rowNode.childrenAfterFilter.filter(function(rowNode2) {
          return !cleanNodesMapped[rowNode2.id];
        }).map(this.mapNodeToSortedNode.bind(this));
        changedNodes.sort(this.compareRowNodes.bind(this, sortOptions));
        if (changedNodes.length === 0) {
          return cleanNodes;
        } else if (cleanNodes.length === 0) {
          return changedNodes;
        } else {
          return this.mergeSortedArrays(sortOptions, cleanNodes, changedNodes);
        }
      };
      SortService2.prototype.mergeSortedArrays = function(sortOptions, arr1, arr2) {
        var res = [];
        var i = 0;
        var j = 0;
        while (i < arr1.length && j < arr2.length) {
          var compareResult = this.compareRowNodes(sortOptions, arr1[i], arr2[j]);
          if (compareResult < 0) {
            res.push(arr1[i++]);
          } else {
            res.push(arr2[j++]);
          }
        }
        while (i < arr1.length) {
          res.push(arr1[i++]);
        }
        while (j < arr2.length) {
          res.push(arr2[j++]);
        }
        return res;
      };
      SortService2.prototype.compareRowNodes = function(sortOptions, sortedNodeA, sortedNodeB) {
        var nodeA = sortedNodeA.rowNode;
        var nodeB = sortedNodeB.rowNode;
        for (var i = 0, len = sortOptions.length; i < len; i++) {
          var sortOption = sortOptions[i];
          var isInverted = sortOption.inverter === -1;
          var valueA = this.getValue(nodeA, sortOption.column);
          var valueB = this.getValue(nodeB, sortOption.column);
          var comparatorResult = void 0;
          var providedComparator = sortOption.column.getColDef().comparator;
          if (providedComparator) {
            comparatorResult = providedComparator(valueA, valueB, nodeA, nodeB, isInverted);
          } else {
            comparatorResult = _.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());
          }
          if (comparatorResult !== 0) {
            return comparatorResult * sortOption.inverter;
          }
        }
        return sortedNodeA.currentPos - sortedNodeB.currentPos;
      };
      SortService2.prototype.getValue = function(nodeA, column) {
        return this.valueService.getValue(column, nodeA);
      };
      SortService2.prototype.updateChildIndexes = function(rowNode) {
        if (_.missing(rowNode.childrenAfterSort)) {
          return;
        }
        var listToSort = rowNode.childrenAfterSort;
        for (var i = 0; i < listToSort.length; i++) {
          var child = listToSort[i];
          var firstChild = i === 0;
          var lastChild = i === rowNode.childrenAfterSort.length - 1;
          child.setFirstChild(firstChild);
          child.setLastChild(lastChild);
          child.setChildIndex(i);
        }
      };
      SortService2.prototype.updateGroupDataForHiddenOpenParents = function(changedPath) {
        var _this = this;
        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
          return;
        }
        var callback = function(rowNode) {
          _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);
          rowNode.childrenAfterSort.forEach(function(child) {
            if (child.hasChildren()) {
              callback(child);
            }
          });
        };
        changedPath.executeFromRootNode(function(rowNode) {
          return callback(rowNode);
        });
      };
      SortService2.prototype.pullDownGroupDataForHideOpenParents = function(rowNodes, clearOperation) {
        var _this = this;
        if (_.missing(rowNodes)) {
          return;
        }
        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
          return;
        }
        rowNodes.forEach(function(childRowNode) {
          var groupDisplayCols = _this.columnController.getGroupDisplayColumns();
          groupDisplayCols.forEach(function(groupDisplayCol) {
            var showRowGroup = groupDisplayCol.getColDef().showRowGroup;
            if (typeof showRowGroup !== "string") {
              console.error("ag-Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup");
              return;
            }
            var displayingGroupKey = showRowGroup;
            var rowGroupColumn = _this.columnController.getPrimaryColumn(displayingGroupKey);
            var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;
            if (thisRowNodeMatches) {
              return;
            }
            if (clearOperation) {
              childRowNode.setGroupValue(groupDisplayCol.getId(), null);
            } else {
              var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);
              if (parentToStealFrom) {
                childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);
              }
            }
          });
        });
      };
      __decorate$21([
        Autowired("sortController")
      ], SortService2.prototype, "sortController", void 0);
      __decorate$21([
        Autowired("columnController")
      ], SortService2.prototype, "columnController", void 0);
      __decorate$21([
        Autowired("valueService")
      ], SortService2.prototype, "valueService", void 0);
      __decorate$21([
        Autowired("gridOptionsWrapper")
      ], SortService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$21([
        PostConstruct
      ], SortService2.prototype, "init", null);
      SortService2 = __decorate$21([
        Bean("sortService")
      ], SortService2);
      return SortService2;
    }(BeanStub);
    var __extends$27 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$22 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FilterService = function(_super) {
      __extends$27(FilterService2, _super);
      function FilterService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FilterService2.prototype.postConstruct = function() {
        this.doingTreeData = this.gridOptionsWrapper.isTreeData();
      };
      FilterService2.prototype.filter = function(changedPath) {
        var filterActive = this.filterManager.isAnyFilterPresent();
        this.filterNodes(filterActive, changedPath);
      };
      FilterService2.prototype.filterNodes = function(filterActive, changedPath) {
        var _this = this;
        var filterCallback = function(rowNode, includeChildNodes) {
          if (rowNode.hasChildren()) {
            if (filterActive && !includeChildNodes) {
              rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function(childNode) {
                var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;
                var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter(childNode);
                return passBecauseChildren || passBecauseDataPasses;
              });
            } else {
              rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
            }
            _this.setAllChildrenCount(rowNode);
          } else {
            rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
            rowNode.setAllChildrenCount(null);
          }
        };
        if (this.doingTreeDataFiltering()) {
          var treeDataDepthFirstFilter_1 = function(rowNode, alreadyFoundInParent) {
            if (rowNode.childrenAfterGroup) {
              for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
                var childNode = rowNode.childrenAfterGroup[i];
                var foundInParent = alreadyFoundInParent || _this.filterManager.doesRowPassFilter(childNode);
                if (childNode.childrenAfterGroup) {
                  treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);
                } else {
                  filterCallback(childNode, foundInParent);
                }
              }
            }
            filterCallback(rowNode, alreadyFoundInParent);
          };
          var treeDataFilterCallback = function(rowNode) {
            return treeDataDepthFirstFilter_1(rowNode, false);
          };
          changedPath.executeFromRootNode(treeDataFilterCallback);
        } else {
          var defaultFilterCallback = function(rowNode) {
            return filterCallback(rowNode, false);
          };
          changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);
        }
      };
      FilterService2.prototype.setAllChildrenCountTreeData = function(rowNode) {
        var allChildrenCount = 0;
        rowNode.childrenAfterFilter.forEach(function(child) {
          allChildrenCount++;
          allChildrenCount += child.allChildrenCount;
        });
        rowNode.setAllChildrenCount(allChildrenCount);
      };
      FilterService2.prototype.setAllChildrenCountGridGrouping = function(rowNode) {
        var allChildrenCount = 0;
        rowNode.childrenAfterFilter.forEach(function(child) {
          if (child.group) {
            allChildrenCount += child.allChildrenCount;
          } else {
            allChildrenCount++;
          }
        });
        rowNode.setAllChildrenCount(allChildrenCount);
      };
      FilterService2.prototype.setAllChildrenCount = function(rowNode) {
        if (this.doingTreeData) {
          this.setAllChildrenCountTreeData(rowNode);
        } else {
          this.setAllChildrenCountGridGrouping(rowNode);
        }
      };
      FilterService2.prototype.doingTreeDataFiltering = function() {
        return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();
      };
      __decorate$22([
        Autowired("filterManager")
      ], FilterService2.prototype, "filterManager", void 0);
      __decorate$22([
        Autowired("gridOptionsWrapper")
      ], FilterService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$22([
        PostConstruct
      ], FilterService2.prototype, "postConstruct", null);
      FilterService2 = __decorate$22([
        Bean("filterService")
      ], FilterService2);
      return FilterService2;
    }(BeanStub);
    var __extends$28 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$23 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ImmutableService = function(_super) {
      __extends$28(ImmutableService2, _super);
      function ImmutableService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ImmutableService2.prototype.postConstruct = function() {
        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
          this.clientSideRowModel = this.rowModel;
        }
      };
      ImmutableService2.prototype.createTransactionForRowData = function(data) {
        if (_.missing(this.clientSideRowModel)) {
          console.error("ag-Grid: ImmutableService only works with ClientSideRowModel");
          return;
        }
        var getRowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
        if (!getRowNodeIdFunc || _.missing(getRowNodeIdFunc)) {
          console.error("ag-Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!");
          return;
        }
        var transaction = {
          remove: [],
          update: [],
          add: []
        };
        var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();
        var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();
        var orderMap = suppressSortOrder ? null : {};
        if (_.exists(data)) {
          data.forEach(function(dataItem, index) {
            var id = getRowNodeIdFunc(dataItem);
            var existingNode = existingNodesMap[id];
            if (orderMap) {
              orderMap[id] = index;
            }
            if (existingNode) {
              var dataHasChanged = existingNode.data !== dataItem;
              if (dataHasChanged) {
                transaction.update.push(dataItem);
              }
              existingNodesMap[id] = void 0;
            } else {
              transaction.add.push(dataItem);
            }
          });
        }
        _.iterateObject(existingNodesMap, function(id, rowNode) {
          if (rowNode) {
            transaction.remove.push(rowNode.data);
          }
        });
        return [transaction, orderMap];
      };
      __decorate$23([
        Autowired("rowModel")
      ], ImmutableService2.prototype, "rowModel", void 0);
      __decorate$23([
        Autowired("gridOptionsWrapper")
      ], ImmutableService2.prototype, "gridOptionsWrapper", void 0);
      __decorate$23([
        PostConstruct
      ], ImmutableService2.prototype, "postConstruct", null);
      ImmutableService2 = __decorate$23([
        Bean("immutableService")
      ], ImmutableService2);
      return ImmutableService2;
    }(BeanStub);
    var ClientSideRowModelModule = {
      moduleName: exports.ModuleNames.ClientSideRowModelModule,
      beans: [FilterStage, SortStage, FlattenStage, SortService, FilterService, ImmutableService],
      rowModels: { clientSide: ClientSideRowModel }
    };
    var __extends$29 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$24 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var InfiniteBlock = function(_super) {
      __extends$29(InfiniteBlock2, _super);
      function InfiniteBlock2(pageNumber, params) {
        var _this = _super.call(this, pageNumber, params) || this;
        _this.cacheParams = params;
        return _this;
      }
      InfiniteBlock2.prototype.getDisplayIndexStart = function() {
        return this.getBlockNumber() * this.cacheParams.blockSize;
      };
      InfiniteBlock2.prototype.getDisplayIndexEnd = function() {
        return this.getDisplayIndexStart() + this.cacheParams.blockSize;
      };
      InfiniteBlock2.prototype.createBlankRowNode = function(rowIndex) {
        var rowNode = _super.prototype.createBlankRowNode.call(this);
        rowNode.uiLevel = 0;
        this.setIndexAndTopOnRowNode(rowNode, rowIndex);
        return rowNode;
      };
      InfiniteBlock2.prototype.setDataAndId = function(rowNode, data, index) {
        if (_.exists(data)) {
          rowNode.setDataAndId(data, index.toString());
        } else {
          rowNode.setDataAndId(void 0, void 0);
        }
      };
      InfiniteBlock2.prototype.setRowNode = function(rowIndex, rowNode) {
        _super.prototype.setRowNode.call(this, rowIndex, rowNode);
        this.setIndexAndTopOnRowNode(rowNode, rowIndex);
      };
      InfiniteBlock2.prototype.init = function() {
        _super.prototype.init.call(this);
      };
      InfiniteBlock2.prototype.getNodeIdPrefix = function() {
        return null;
      };
      InfiniteBlock2.prototype.getRow = function(displayIndex) {
        return this.getRowUsingLocalIndex(displayIndex);
      };
      InfiniteBlock2.prototype.setIndexAndTopOnRowNode = function(rowNode, rowIndex) {
        rowNode.setRowIndex(rowIndex);
        rowNode.rowTop = this.cacheParams.rowHeight * rowIndex;
      };
      InfiniteBlock2.prototype.loadFromDatasource = function() {
        var _this = this;
        var params = {
          startRow: this.getStartRow(),
          endRow: this.getEndRow(),
          successCallback: this.pageLoaded.bind(this, this.getVersion()),
          failCallback: this.pageLoadFailed.bind(this),
          sortModel: this.cacheParams.sortModel,
          filterModel: this.cacheParams.filterModel,
          context: this.gridOptionsWrapper.getContext()
        };
        if (_.missing(this.cacheParams.datasource.getRows)) {
          console.warn("ag-Grid: datasource is missing getRows method");
          return;
        }
        window.setTimeout(function() {
          _this.cacheParams.datasource.getRows(params);
        }, 0);
      };
      __decorate$24([
        Autowired("gridOptionsWrapper")
      ], InfiniteBlock2.prototype, "gridOptionsWrapper", void 0);
      return InfiniteBlock2;
    }(RowNodeBlock);
    var __extends$2a = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$25 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$a = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var InfiniteCache = function(_super) {
      __extends$2a(InfiniteCache2, _super);
      function InfiniteCache2(params) {
        return _super.call(this, params) || this;
      }
      InfiniteCache2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("InfiniteCache");
      };
      InfiniteCache2.prototype.moveItemsDown = function(block, moveFromIndex, moveCount) {
        var startRow = block.getStartRow();
        var endRow = block.getEndRow();
        var indexOfLastRowToMove = moveFromIndex + moveCount;
        for (var currentRowIndex = endRow - 1; currentRowIndex >= startRow; currentRowIndex--) {
          if (currentRowIndex < indexOfLastRowToMove) {
            continue;
          }
          var indexOfNodeWeWant = currentRowIndex - moveCount;
          var nodeForThisIndex = this.getRow(indexOfNodeWeWant, true);
          if (nodeForThisIndex) {
            block.setRowNode(currentRowIndex, nodeForThisIndex);
          } else {
            block.setBlankRowNode(currentRowIndex);
            block.setDirty();
          }
        }
      };
      InfiniteCache2.prototype.insertItems = function(block, indexToInsert, items) {
        var pageStartRow = block.getStartRow();
        var pageEndRow = block.getEndRow();
        var newRowNodes = [];
        for (var index = 0; index < items.length; index++) {
          var rowIndex = indexToInsert + index;
          var currentRowInThisPage = rowIndex >= pageStartRow && rowIndex < pageEndRow;
          if (currentRowInThisPage) {
            var dataItem = items[index];
            var newRowNode = block.setNewData(rowIndex, dataItem);
            newRowNodes.push(newRowNode);
          }
        }
        return newRowNodes;
      };
      InfiniteCache2.prototype.insertItemsAtIndex = function(indexToInsert, items) {
        var _this = this;
        var newNodes = [];
        this.forEachBlockInReverseOrder(function(block) {
          var pageEndRow = block.getEndRow();
          if (pageEndRow <= indexToInsert) {
            return;
          }
          _this.moveItemsDown(block, indexToInsert, items.length);
          var newNodesThisPage = _this.insertItems(block, indexToInsert, items);
          newNodesThisPage.forEach(function(rowNode) {
            return newNodes.push(rowNode);
          });
        });
        if (this.isMaxRowFound()) {
          this.hack_setVirtualRowCount(this.getVirtualRowCount() + items.length);
        }
        this.onCacheUpdated();
        var event = {
          type: Events.EVENT_ROW_DATA_UPDATED,
          api: this.gridApi,
          columnApi: this.columnApi
        };
        this.eventService.dispatchEvent(event);
      };
      InfiniteCache2.prototype.getRow = function(rowIndex, dontCreatePage) {
        if (dontCreatePage === void 0) {
          dontCreatePage = false;
        }
        var blockId = Math.floor(rowIndex / this.cacheParams.blockSize);
        var block = this.getBlock(blockId);
        if (!block) {
          if (dontCreatePage) {
            return null;
          } else {
            block = this.createBlock(blockId);
          }
        }
        return block.getRow(rowIndex);
      };
      InfiniteCache2.prototype.createBlock = function(blockNumber) {
        var newBlock = this.createBean(new InfiniteBlock(blockNumber, this.cacheParams));
        this.postCreateBlock(newBlock);
        return newBlock;
      };
      InfiniteCache2.prototype.refreshCache = function() {
        this.forEachBlockInOrder(function(block) {
          return block.setDirty();
        });
        this.checkBlockToLoad();
      };
      __decorate$25([
        Autowired("columnApi")
      ], InfiniteCache2.prototype, "columnApi", void 0);
      __decorate$25([
        Autowired("gridApi")
      ], InfiniteCache2.prototype, "gridApi", void 0);
      __decorate$25([
        __param$a(0, Qualifier("loggerFactory"))
      ], InfiniteCache2.prototype, "setBeans", null);
      return InfiniteCache2;
    }(RowNodeCache);
    var __extends$2b = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$26 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var InfiniteRowModel = function(_super) {
      __extends$2b(InfiniteRowModel2, _super);
      function InfiniteRowModel2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      InfiniteRowModel2.prototype.getRowBounds = function(index) {
        return {
          rowHeight: this.rowHeight,
          rowTop: this.rowHeight * index
        };
      };
      InfiniteRowModel2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
        return false;
      };
      InfiniteRowModel2.prototype.init = function() {
        var _this = this;
        if (!this.gridOptionsWrapper.isRowModelInfinite()) {
          return;
        }
        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
        this.addEventListeners();
        this.addDestroyFunc(function() {
          return _this.destroyCache();
        });
      };
      InfiniteRowModel2.prototype.start = function() {
        this.setDatasource(this.gridOptionsWrapper.getDatasource());
      };
      InfiniteRowModel2.prototype.destroyDatasource = function() {
        if (this.datasource) {
          this.getContext().destroyBean(this.datasource);
          this.rowRenderer.datasourceChanged();
          this.datasource = null;
        }
      };
      InfiniteRowModel2.prototype.isLastRowFound = function() {
        return this.infiniteCache != null && this.infiniteCache.isMaxRowFound();
      };
      InfiniteRowModel2.prototype.addEventListeners = function() {
        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnEverything.bind(this));
      };
      InfiniteRowModel2.prototype.onFilterChanged = function() {
        this.reset();
      };
      InfiniteRowModel2.prototype.onSortChanged = function() {
        this.reset();
      };
      InfiniteRowModel2.prototype.onColumnEverything = function() {
        var resetRequired;
        if (this.cacheParams) {
          resetRequired = this.isSortModelDifferent();
        } else {
          resetRequired = true;
        }
        if (resetRequired) {
          this.reset();
        }
      };
      InfiniteRowModel2.prototype.isSortModelDifferent = function() {
        return !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());
      };
      InfiniteRowModel2.prototype.getType = function() {
        return Constants.ROW_MODEL_TYPE_INFINITE;
      };
      InfiniteRowModel2.prototype.setDatasource = function(datasource) {
        this.destroyDatasource();
        this.datasource = datasource;
        if (datasource) {
          this.reset();
        }
      };
      InfiniteRowModel2.prototype.isEmpty = function() {
        return !this.infiniteCache;
      };
      InfiniteRowModel2.prototype.isRowsToRender = function() {
        return !!this.infiniteCache;
      };
      InfiniteRowModel2.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
        return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];
      };
      InfiniteRowModel2.prototype.reset = function() {
        if (!this.datasource) {
          return;
        }
        var userGeneratingIds = _.exists(this.gridOptionsWrapper.getRowNodeIdFunc());
        if (!userGeneratingIds) {
          this.selectionController.reset();
        }
        this.resetCache();
        var event = this.createModelUpdatedEvent();
        this.eventService.dispatchEvent(event);
      };
      InfiniteRowModel2.prototype.createModelUpdatedEvent = function() {
        return {
          type: Events.EVENT_MODEL_UPDATED,
          api: this.gridApi,
          columnApi: this.columnApi,
          newPage: false,
          newData: false,
          keepRenderedRows: false,
          animate: false
        };
      };
      InfiniteRowModel2.prototype.resetCache = function() {
        this.destroyCache();
        var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
        var blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis();
        this.rowNodeBlockLoader = this.createBean(new RowNodeBlockLoader(maxConcurrentRequests, blockLoadDebounceMillis));
        this.cacheParams = {
          datasource: this.datasource,
          filterModel: this.filterManager.getFilterModel(),
          sortModel: this.sortController.getSortModel(),
          rowNodeBlockLoader: this.rowNodeBlockLoader,
          maxConcurrentRequests: this.defaultIfInvalid(maxConcurrentRequests, 2),
          initialRowCount: this.defaultIfInvalid(this.gridOptionsWrapper.getInfiniteInitialRowCount(), 1),
          maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),
          rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
          overflowSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheOverflowSize(), 1),
          blockSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheBlockSize(), 100),
          lastAccessedSequence: new NumberSequence()
        };
        this.infiniteCache = this.createBean(new InfiniteCache(this.cacheParams));
        this.infiniteCache.addEventListener(RowNodeCache.EVENT_CACHE_UPDATED, this.onCacheUpdated.bind(this));
      };
      InfiniteRowModel2.prototype.defaultIfInvalid = function(value, defaultValue) {
        return value > 0 ? value : defaultValue;
      };
      InfiniteRowModel2.prototype.destroyCache = function() {
        if (this.infiniteCache) {
          this.infiniteCache = this.destroyBean(this.infiniteCache);
        }
        if (this.rowNodeBlockLoader) {
          this.rowNodeBlockLoader = this.destroyBean(this.rowNodeBlockLoader);
        }
      };
      InfiniteRowModel2.prototype.onCacheUpdated = function() {
        var event = this.createModelUpdatedEvent();
        this.eventService.dispatchEvent(event);
      };
      InfiniteRowModel2.prototype.getRow = function(rowIndex) {
        return this.infiniteCache ? this.infiniteCache.getRow(rowIndex) : null;
      };
      InfiniteRowModel2.prototype.getRowNode = function(id) {
        var result = null;
        this.forEachNode(function(rowNode) {
          if (rowNode.id === id) {
            result = rowNode;
          }
        });
        return result;
      };
      InfiniteRowModel2.prototype.forEachNode = function(callback) {
        if (this.infiniteCache) {
          this.infiniteCache.forEachNodeDeep(callback, new NumberSequence());
        }
      };
      InfiniteRowModel2.prototype.getCurrentPageHeight = function() {
        return this.getRowCount() * this.rowHeight;
      };
      InfiniteRowModel2.prototype.getTopLevelRowCount = function() {
        return this.getRowCount();
      };
      InfiniteRowModel2.prototype.getTopLevelRowDisplayedIndex = function(topLevelIndex) {
        return topLevelIndex;
      };
      InfiniteRowModel2.prototype.getRowIndexAtPixel = function(pixel) {
        if (this.rowHeight !== 0) {
          var rowIndexForPixel = Math.floor(pixel / this.rowHeight);
          var lastRowIndex = this.getRowCount() - 1;
          if (rowIndexForPixel > lastRowIndex) {
            return lastRowIndex;
          } else {
            return rowIndexForPixel;
          }
        } else {
          return 0;
        }
      };
      InfiniteRowModel2.prototype.getRowCount = function() {
        return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() : 0;
      };
      InfiniteRowModel2.prototype.updateRowData = function(transaction) {
        if (_.exists(transaction.remove) || _.exists(transaction.update)) {
          console.warn("ag-Grid: updateRowData for InfiniteRowModel does not support remove or update, only add");
          return;
        }
        if (_.missing(transaction.addIndex)) {
          console.warn("ag-Grid: updateRowData for InfiniteRowModel requires add and addIndex to be set");
          return;
        }
        if (this.infiniteCache) {
          this.infiniteCache.insertItemsAtIndex(transaction.addIndex, transaction.add);
        }
      };
      InfiniteRowModel2.prototype.isRowPresent = function(rowNode) {
        return false;
      };
      InfiniteRowModel2.prototype.refreshCache = function() {
        if (this.infiniteCache) {
          this.infiniteCache.refreshCache();
        }
      };
      InfiniteRowModel2.prototype.purgeCache = function() {
        if (this.infiniteCache) {
          this.infiniteCache.purgeCache();
        }
      };
      InfiniteRowModel2.prototype.getVirtualRowCount = function() {
        if (this.infiniteCache) {
          return this.infiniteCache.getVirtualRowCount();
        } else {
          return null;
        }
      };
      InfiniteRowModel2.prototype.isMaxRowFound = function() {
        if (this.infiniteCache) {
          return this.infiniteCache.isMaxRowFound();
        }
      };
      InfiniteRowModel2.prototype.setVirtualRowCount = function(rowCount, maxRowFound) {
        if (this.infiniteCache) {
          this.infiniteCache.setVirtualRowCount(rowCount, maxRowFound);
        }
      };
      InfiniteRowModel2.prototype.getBlockState = function() {
        if (this.rowNodeBlockLoader) {
          return this.rowNodeBlockLoader.getBlockState();
        } else {
          return null;
        }
      };
      __decorate$26([
        Autowired("gridOptionsWrapper")
      ], InfiniteRowModel2.prototype, "gridOptionsWrapper", void 0);
      __decorate$26([
        Autowired("filterManager")
      ], InfiniteRowModel2.prototype, "filterManager", void 0);
      __decorate$26([
        Autowired("sortController")
      ], InfiniteRowModel2.prototype, "sortController", void 0);
      __decorate$26([
        Autowired("selectionController")
      ], InfiniteRowModel2.prototype, "selectionController", void 0);
      __decorate$26([
        Autowired("gridApi")
      ], InfiniteRowModel2.prototype, "gridApi", void 0);
      __decorate$26([
        Autowired("columnApi")
      ], InfiniteRowModel2.prototype, "columnApi", void 0);
      __decorate$26([
        Autowired("rowRenderer")
      ], InfiniteRowModel2.prototype, "rowRenderer", void 0);
      __decorate$26([
        PostConstruct
      ], InfiniteRowModel2.prototype, "init", null);
      __decorate$26([
        PreDestroy
      ], InfiniteRowModel2.prototype, "destroyDatasource", null);
      InfiniteRowModel2 = __decorate$26([
        Bean("rowModel")
      ], InfiniteRowModel2);
      return InfiniteRowModel2;
    }(BeanStub);
    var InfiniteRowModelModule = {
      moduleName: exports.ModuleNames.InfiniteRowModelModule,
      rowModels: { "infinite": InfiniteRowModel }
    };
    var __extends$2c = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$27 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var BaseGridSerializingSession = function() {
      function BaseGridSerializingSession2(config) {
        this.groupColumns = [];
        var columnController = config.columnController, valueService = config.valueService, gridOptionsWrapper = config.gridOptionsWrapper, processCellCallback = config.processCellCallback, processHeaderCallback = config.processHeaderCallback, processGroupHeaderCallback = config.processGroupHeaderCallback, processRowGroupCallback = config.processRowGroupCallback;
        this.columnController = columnController;
        this.valueService = valueService;
        this.gridOptionsWrapper = gridOptionsWrapper;
        this.processCellCallback = processCellCallback;
        this.processHeaderCallback = processHeaderCallback;
        this.processGroupHeaderCallback = processGroupHeaderCallback;
        this.processRowGroupCallback = processRowGroupCallback;
      }
      BaseGridSerializingSession2.prototype.prepare = function(columnsToExport) {
        this.groupColumns = _.filter(columnsToExport, function(col) {
          return !!col.getColDef().showRowGroup;
        });
      };
      BaseGridSerializingSession2.prototype.extractHeaderValue = function(column) {
        var value = this.getHeaderName(this.processHeaderCallback, column);
        return value != null ? value : "";
      };
      BaseGridSerializingSession2.prototype.extractRowCellValue = function(column, index, type, node) {
        var groupIndex = this.gridOptionsWrapper.isGroupMultiAutoColumn() ? node.rowGroupIndex : 0;
        var renderGroupSummaryCell = node && node.group && (index === groupIndex && this.groupColumns.indexOf(column) !== -1 || index === 0 && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnController.isPivotMode()));
        var valueForCell;
        if (renderGroupSummaryCell) {
          valueForCell = this.createValueForGroupNode(node);
        } else {
          valueForCell = this.valueService.getValue(column, node);
        }
        var value = this.processCell(node, column, valueForCell, this.processCellCallback, type);
        return value != null ? value : "";
      };
      BaseGridSerializingSession2.prototype.getHeaderName = function(callback, column) {
        if (callback) {
          return callback({
            column,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
          });
        }
        return this.columnController.getDisplayNameForColumn(column, "csv", true);
      };
      BaseGridSerializingSession2.prototype.createValueForGroupNode = function(node) {
        if (this.processRowGroupCallback) {
          return this.processRowGroupCallback({
            node,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
          });
        }
        var keys2 = [node.key];
        if (!this.gridOptionsWrapper.isGroupMultiAutoColumn()) {
          while (node.parent) {
            node = node.parent;
            keys2.push(node.key);
          }
        }
        return keys2.reverse().join(" -> ");
      };
      BaseGridSerializingSession2.prototype.processCell = function(rowNode, column, value, processCellCallback, type) {
        if (processCellCallback) {
          return processCellCallback({
            column,
            node: rowNode,
            value,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext(),
            type
          });
        }
        return value;
      };
      return BaseGridSerializingSession2;
    }();
    var GridSerializer = function(_super) {
      __extends$2c(GridSerializer2, _super);
      function GridSerializer2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      GridSerializer2.prototype.serialize = function(gridSerializingSession, params) {
        if (params === void 0) {
          params = {};
        }
        var rowSkipper = params.shouldRowBeSkipped || function() {
          return false;
        };
        var api = this.gridOptionsWrapper.getApi();
        var columnApi = this.gridOptionsWrapper.getColumnApi();
        var skipSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveSingleChildren();
        var skipLowestSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
        var context = this.gridOptionsWrapper.getContext();
        var isPivotMode = this.columnController.isPivotMode();
        var rowModelNormal = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        var onlySelectedNonStandardModel = !rowModelNormal && params.onlySelected;
        var columnsToExport = [];
        if (_.existsAndNotEmpty(params.columnKeys)) {
          columnsToExport = this.columnController.getGridColumns(params.columnKeys);
        } else if (params.allColumns && !isPivotMode) {
          columnsToExport = this.gridOptionsWrapper.isTreeData() ? this.columnController.getGridColumns([Constants.GROUP_AUTO_COLUMN_ID]) : [];
          columnsToExport = columnsToExport.concat(this.columnController.getAllPrimaryColumns() || []);
        } else {
          columnsToExport = this.columnController.getAllDisplayedColumns();
        }
        if (params.customHeader) {
          gridSerializingSession.addCustomContent(params.customHeader);
        }
        gridSerializingSession.prepare(columnsToExport);
        if (params.columnGroups) {
          var groupInstanceIdCreator = new GroupInstanceIdCreator();
          var displayedGroups = this.displayedGroupCreator.createDisplayedGroups(columnsToExport, this.columnController.getGridBalancedTree(), groupInstanceIdCreator, null);
          this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);
        }
        if (!params.skipHeader) {
          var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();
          columnsToExport.forEach(function(column, index) {
            gridRowIterator_1.onColumn(column, index, void 0);
          });
        }
        this.pinnedRowModel.forEachPinnedTopRow(processRow);
        if (isPivotMode) {
          if (this.rowModel.forEachPivotNode) {
            this.rowModel.forEachPivotNode(processRow);
          } else {
            this.rowModel.forEachNode(processRow);
          }
        } else {
          if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {
            var selectedNodes = this.selectionController.getSelectedNodes();
            selectedNodes.forEach(function(node) {
              processRow(node);
            });
          } else {
            if (rowModelNormal) {
              this.rowModel.forEachNodeAfterFilterAndSort(processRow);
            } else {
              this.rowModel.forEachNode(processRow);
            }
          }
        }
        this.pinnedRowModel.forEachPinnedBottomRow(processRow);
        if (params.customFooter) {
          gridSerializingSession.addCustomContent(params.customFooter);
        }
        function processRow(node) {
          var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;
          var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);
          if (node.group && (params.skipGroups || shouldSkipCurrentGroup)) {
            return;
          }
          if (params.skipFooters && node.footer) {
            return;
          }
          if (params.onlySelected && !node.isSelected()) {
            return;
          }
          if (params.skipPinnedTop && node.rowPinned === "top") {
            return;
          }
          if (params.skipPinnedBottom && node.rowPinned === "bottom") {
            return;
          }
          var nodeIsRootNode = node.level === -1;
          if (nodeIsRootNode && !node.leafGroup) {
            return;
          }
          var shouldRowBeSkipped = rowSkipper({ node, api, context });
          if (shouldRowBeSkipped) {
            return;
          }
          var rowAccumulator = gridSerializingSession.onNewBodyRow();
          columnsToExport.forEach(function(column, index) {
            rowAccumulator.onColumn(column, index, node);
          });
          if (params.getCustomContentBelowRow) {
            var content = params.getCustomContentBelowRow({ node, api, columnApi, context });
            if (content) {
              gridSerializingSession.addCustomContent(content);
            }
          }
        }
        return gridSerializingSession.parse();
      };
      GridSerializer2.prototype.recursivelyAddHeaderGroups = function(displayedGroups, gridSerializingSession, processGroupHeaderCallback) {
        var directChildrenHeaderGroups = [];
        displayedGroups.forEach(function(columnGroupChild) {
          var columnGroup = columnGroupChild;
          if (!columnGroup.getChildren) {
            return;
          }
          columnGroup.getChildren().forEach(function(it) {
            return directChildrenHeaderGroups.push(it);
          });
        });
        if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {
          this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);
        }
        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {
          this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);
        }
      };
      GridSerializer2.prototype.doAddHeaderHeader = function(gridSerializingSession, displayedGroups, processGroupHeaderCallback) {
        var _this = this;
        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();
        var columnIndex = 0;
        displayedGroups.forEach(function(columnGroupChild) {
          var columnGroup = columnGroupChild;
          var name;
          if (processGroupHeaderCallback) {
            name = processGroupHeaderCallback({
              columnGroup,
              api: _this.gridOptionsWrapper.getApi(),
              columnApi: _this.gridOptionsWrapper.getColumnApi(),
              context: _this.gridOptionsWrapper.getContext()
            });
          } else {
            name = _this.columnController.getDisplayNameForColumnGroup(columnGroup, "header");
          }
          gridRowIterator.onColumn(name || "", columnIndex++, columnGroup.getLeafColumns().length - 1);
        });
      };
      __decorate$27([
        Autowired("displayedGroupCreator")
      ], GridSerializer2.prototype, "displayedGroupCreator", void 0);
      __decorate$27([
        Autowired("columnController")
      ], GridSerializer2.prototype, "columnController", void 0);
      __decorate$27([
        Autowired("rowModel")
      ], GridSerializer2.prototype, "rowModel", void 0);
      __decorate$27([
        Autowired("pinnedRowModel")
      ], GridSerializer2.prototype, "pinnedRowModel", void 0);
      __decorate$27([
        Autowired("selectionController")
      ], GridSerializer2.prototype, "selectionController", void 0);
      __decorate$27([
        Autowired("columnFactory")
      ], GridSerializer2.prototype, "columnFactory", void 0);
      __decorate$27([
        Autowired("gridOptionsWrapper")
      ], GridSerializer2.prototype, "gridOptionsWrapper", void 0);
      GridSerializer2 = __decorate$27([
        Bean("gridSerializer")
      ], GridSerializer2);
      return GridSerializer2;
    }(BeanStub);
    var RowType;
    (function(RowType2) {
      RowType2[RowType2["HEADER_GROUPING"] = 0] = "HEADER_GROUPING";
      RowType2[RowType2["HEADER"] = 1] = "HEADER";
      RowType2[RowType2["BODY"] = 2] = "BODY";
    })(RowType || (RowType = {}));
    var __extends$2d = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$28 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var LINE_SEPARATOR = "\r\n";
    var CsvSerializingSession = function(_super) {
      __extends$2d(CsvSerializingSession2, _super);
      function CsvSerializingSession2(config) {
        var _this = _super.call(this, config) || this;
        _this.isFirstLine = true;
        _this.result = "";
        var suppressQuotes = config.suppressQuotes, columnSeparator = config.columnSeparator;
        _this.suppressQuotes = suppressQuotes;
        _this.columnSeparator = columnSeparator;
        return _this;
      }
      CsvSerializingSession2.prototype.addCustomContent = function(content) {
        var _this = this;
        if (!content) {
          return;
        }
        if (typeof content === "string") {
          if (!/^\s*\n/.test(content)) {
            this.beginNewLine();
          }
          content = content.replace(/\r?\n/g, LINE_SEPARATOR);
          this.result += content;
        } else {
          content.forEach(function(row) {
            _this.beginNewLine();
            row.forEach(function(cell, index) {
              if (index !== 0) {
                _this.result += _this.columnSeparator;
              }
              _this.result += _this.putInQuotes(cell.data.value || "");
              if (cell.mergeAcross) {
                _this.appendEmptyCells(cell.mergeAcross);
              }
            });
          });
        }
      };
      CsvSerializingSession2.prototype.onNewHeaderGroupingRow = function() {
        this.beginNewLine();
        return {
          onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
        };
      };
      CsvSerializingSession2.prototype.onNewHeaderGroupingRowColumn = function(header, index, span) {
        if (index != 0) {
          this.result += this.columnSeparator;
        }
        this.result += this.putInQuotes(header);
        this.appendEmptyCells(span);
      };
      CsvSerializingSession2.prototype.appendEmptyCells = function(count) {
        for (var i = 1; i <= count; i++) {
          this.result += this.columnSeparator + this.putInQuotes("");
        }
      };
      CsvSerializingSession2.prototype.onNewHeaderRow = function() {
        this.beginNewLine();
        return {
          onColumn: this.onNewHeaderRowColumn.bind(this)
        };
      };
      CsvSerializingSession2.prototype.onNewHeaderRowColumn = function(column, index, node) {
        if (index != 0) {
          this.result += this.columnSeparator;
        }
        this.result += this.putInQuotes(this.extractHeaderValue(column));
      };
      CsvSerializingSession2.prototype.onNewBodyRow = function() {
        this.beginNewLine();
        return {
          onColumn: this.onNewBodyRowColumn.bind(this)
        };
      };
      CsvSerializingSession2.prototype.onNewBodyRowColumn = function(column, index, node) {
        if (index != 0) {
          this.result += this.columnSeparator;
        }
        this.result += this.putInQuotes(this.extractRowCellValue(column, index, Constants.EXPORT_TYPE_CSV, node));
      };
      CsvSerializingSession2.prototype.putInQuotes = function(value) {
        if (this.suppressQuotes) {
          return value;
        }
        if (value === null || value === void 0) {
          return '""';
        }
        var stringValue;
        if (typeof value === "string") {
          stringValue = value;
        } else if (typeof value.toString === "function") {
          stringValue = value.toString();
        } else {
          console.warn("unknown value type during csv conversion");
          stringValue = "";
        }
        var valueEscaped = stringValue.replace(/"/g, '""');
        return '"' + valueEscaped + '"';
      };
      CsvSerializingSession2.prototype.parse = function() {
        return this.result;
      };
      CsvSerializingSession2.prototype.beginNewLine = function() {
        if (!this.isFirstLine) {
          this.result += LINE_SEPARATOR;
        }
        this.isFirstLine = false;
      };
      return CsvSerializingSession2;
    }(BaseGridSerializingSession);
    var BaseCreator = function() {
      function BaseCreator2() {
      }
      BaseCreator2.prototype.setBeans = function(beans) {
        this.beans = beans;
      };
      BaseCreator2.prototype.export = function(userParams) {
        if (this.isExportSuppressed()) {
          console.warn("ag-grid: Export cancelled. Export is not allowed as per your configuration.");
          return "";
        }
        var _a = this.getMergedParamsAndData(userParams), mergedParams = _a.mergedParams, data = _a.data;
        var fileNamePresent = mergedParams && mergedParams.fileName && mergedParams.fileName.length !== 0;
        var fileName = fileNamePresent ? mergedParams.fileName : this.getDefaultFileName();
        if (fileName.indexOf(".") === -1) {
          fileName = fileName + "." + this.getDefaultFileExtension();
        }
        this.beans.downloader.download(fileName, this.packageFile(data));
        return data;
      };
      BaseCreator2.prototype.getData = function(params) {
        return this.getMergedParamsAndData(params).data;
      };
      BaseCreator2.prototype.getMergedParamsAndData = function(userParams) {
        var mergedParams = this.mergeDefaultParams(userParams);
        var data = this.beans.gridSerializer.serialize(this.createSerializingSession(mergedParams), mergedParams);
        return { mergedParams, data };
      };
      BaseCreator2.prototype.mergeDefaultParams = function(userParams) {
        var baseParams = this.beans.gridOptionsWrapper.getDefaultExportParams();
        var params = {};
        _.assign(params, baseParams);
        _.assign(params, userParams);
        return params;
      };
      BaseCreator2.prototype.packageFile = function(data) {
        return new Blob(["\uFEFF", data], {
          type: window.navigator.msSaveOrOpenBlob ? this.getMimeType() : "octet/stream"
        });
      };
      return BaseCreator2;
    }();
    var CsvCreator = function(_super) {
      __extends$2d(CsvCreator2, _super);
      function CsvCreator2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      CsvCreator2.prototype.postConstruct = function() {
        this.setBeans({
          downloader: this.downloader,
          gridSerializer: this.gridSerializer,
          gridOptionsWrapper: this.gridOptionsWrapper
        });
      };
      CsvCreator2.prototype.exportDataAsCsv = function(params) {
        return this.export(params);
      };
      CsvCreator2.prototype.getDataAsCsv = function(params) {
        return this.getData(params);
      };
      CsvCreator2.prototype.getMimeType = function() {
        return "text/csv;charset=utf-8;";
      };
      CsvCreator2.prototype.getDefaultFileName = function() {
        return "export.csv";
      };
      CsvCreator2.prototype.getDefaultFileExtension = function() {
        return "csv";
      };
      CsvCreator2.prototype.createSerializingSession = function(params) {
        var _a = this, columnController = _a.columnController, valueService = _a.valueService, gridOptionsWrapper = _a.gridOptionsWrapper;
        var processCellCallback = params.processCellCallback, processHeaderCallback = params.processHeaderCallback, processGroupHeaderCallback = params.processGroupHeaderCallback, processRowGroupCallback = params.processRowGroupCallback, suppressQuotes = params.suppressQuotes, columnSeparator = params.columnSeparator;
        return new CsvSerializingSession({
          columnController,
          valueService,
          gridOptionsWrapper,
          processCellCallback: processCellCallback || void 0,
          processHeaderCallback: processHeaderCallback || void 0,
          processGroupHeaderCallback: processGroupHeaderCallback || void 0,
          processRowGroupCallback: processRowGroupCallback || void 0,
          suppressQuotes: suppressQuotes || false,
          columnSeparator: columnSeparator || ","
        });
      };
      CsvCreator2.prototype.isExportSuppressed = function() {
        return this.gridOptionsWrapper.isSuppressCsvExport();
      };
      __decorate$28([
        Autowired("columnController")
      ], CsvCreator2.prototype, "columnController", void 0);
      __decorate$28([
        Autowired("valueService")
      ], CsvCreator2.prototype, "valueService", void 0);
      __decorate$28([
        Autowired("downloader")
      ], CsvCreator2.prototype, "downloader", void 0);
      __decorate$28([
        Autowired("gridSerializer")
      ], CsvCreator2.prototype, "gridSerializer", void 0);
      __decorate$28([
        Autowired("gridOptionsWrapper")
      ], CsvCreator2.prototype, "gridOptionsWrapper", void 0);
      __decorate$28([
        PostConstruct
      ], CsvCreator2.prototype, "postConstruct", null);
      CsvCreator2 = __decorate$28([
        Bean("csvCreator")
      ], CsvCreator2);
      return CsvCreator2;
    }(BaseCreator);
    var __decorate$29 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Downloader = function() {
      function Downloader2() {
      }
      Downloader2.prototype.download = function(fileName, content) {
        if (window.navigator.msSaveOrOpenBlob) {
          window.navigator.msSaveOrOpenBlob(content, fileName);
        } else {
          var element = document.createElement("a");
          var url_1 = window.URL.createObjectURL(content);
          element.setAttribute("href", url_1);
          element.setAttribute("download", fileName);
          element.style.display = "none";
          document.body.appendChild(element);
          element.dispatchEvent(new MouseEvent("click", {
            bubbles: false,
            cancelable: true,
            view: window
          }));
          document.body.removeChild(element);
          window.setTimeout(function() {
            window.URL.revokeObjectURL(url_1);
          }, 0);
        }
      };
      Downloader2 = __decorate$29([
        Bean("downloader")
      ], Downloader2);
      return Downloader2;
    }();
    var __extends$2e = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2a = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var LINE_SEPARATOR$1 = "\r\n";
    var XmlFactory = function(_super) {
      __extends$2e(XmlFactory2, _super);
      function XmlFactory2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      XmlFactory2.prototype.createHeader = function(headerElement) {
        if (headerElement === void 0) {
          headerElement = {};
        }
        var headerStart = "<?";
        var headerEnd = "?>";
        var keys2 = ["version"];
        if (!headerElement.version) {
          headerElement.version = "1.0";
        }
        if (headerElement.encoding) {
          keys2.push("encoding");
        }
        if (headerElement.standalone) {
          keys2.push("standalone");
        }
        var att = keys2.map(function(key) {
          return key + '="' + headerElement[key] + '"';
        }).join(" ");
        return headerStart + "xml " + att + " " + headerEnd;
      };
      XmlFactory2.prototype.createXml = function(xmlElement, booleanTransformer) {
        var _this = this;
        var props = "";
        if (xmlElement.properties) {
          if (xmlElement.properties.prefixedAttributes) {
            xmlElement.properties.prefixedAttributes.forEach(function(prefixedSet) {
              Object.keys(prefixedSet.map).forEach(function(key) {
                props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);
              });
            });
          }
          if (xmlElement.properties.rawMap) {
            Object.keys(xmlElement.properties.rawMap).forEach(function(key) {
              props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);
            });
          }
        }
        var result = "<" + xmlElement.name + props;
        if (!xmlElement.children && xmlElement.textNode == null) {
          return result + "/>" + LINE_SEPARATOR$1;
        }
        if (xmlElement.textNode != null) {
          return result + ">" + xmlElement.textNode + "</" + xmlElement.name + ">" + LINE_SEPARATOR$1;
        }
        result += ">" + LINE_SEPARATOR$1;
        if (xmlElement.children) {
          xmlElement.children.forEach(function(it) {
            result += _this.createXml(it, booleanTransformer);
          });
        }
        return result + "</" + xmlElement.name + ">" + LINE_SEPARATOR$1;
      };
      XmlFactory2.prototype.returnAttributeIfPopulated = function(key, value, booleanTransformer) {
        if (!value && value !== "" && value !== 0) {
          return "";
        }
        var xmlValue = value;
        if (typeof value === "boolean") {
          if (booleanTransformer) {
            xmlValue = booleanTransformer(value);
          }
        }
        return " " + key + '="' + xmlValue + '"';
      };
      XmlFactory2 = __decorate$2a([
        Bean("xmlFactory")
      ], XmlFactory2);
      return XmlFactory2;
    }(BeanStub);
    var __extends$2f = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2b = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var crcTable = [
      0,
      1996959894,
      -301047508,
      -1727442502,
      124634137,
      1886057615,
      -379345611,
      -1637575261,
      249268274,
      2044508324,
      -522852066,
      -1747789432,
      162941995,
      2125561021,
      -407360249,
      -1866523247,
      498536548,
      1789927666,
      -205950648,
      -2067906082,
      450548861,
      1843258603,
      -187386543,
      -2083289657,
      325883990,
      1684777152,
      -43845254,
      -1973040660,
      335633487,
      1661365465,
      -99664541,
      -1928851979,
      997073096,
      1281953886,
      -715111964,
      -1570279054,
      1006888145,
      1258607687,
      -770865667,
      -1526024853,
      901097722,
      1119000684,
      -608450090,
      -1396901568,
      853044451,
      1172266101,
      -589951537,
      -1412350631,
      651767980,
      1373503546,
      -925412992,
      -1076862698,
      565507253,
      1454621731,
      -809855591,
      -1195530993,
      671266974,
      1594198024,
      -972236366,
      -1324619484,
      795835527,
      1483230225,
      -1050600021,
      -1234817731,
      1994146192,
      31158534,
      -1731059524,
      -271249366,
      1907459465,
      112637215,
      -1614814043,
      -390540237,
      2013776290,
      251722036,
      -1777751922,
      -519137256,
      2137656763,
      141376813,
      -1855689577,
      -429695999,
      1802195444,
      476864866,
      -2056965928,
      -228458418,
      1812370925,
      453092731,
      -2113342271,
      -183516073,
      1706088902,
      314042704,
      -1950435094,
      -54949764,
      1658658271,
      366619977,
      -1932296973,
      -69972891,
      1303535960,
      984961486,
      -1547960204,
      -725929758,
      1256170817,
      1037604311,
      -1529756563,
      -740887301,
      1131014506,
      879679996,
      -1385723834,
      -631195440,
      1141124467,
      855842277,
      -1442165665,
      -586318647,
      1342533948,
      654459306,
      -1106571248,
      -921952122,
      1466479909,
      544179635,
      -1184443383,
      -832445281,
      1591671054,
      702138776,
      -1328506846,
      -942167884,
      1504918807,
      783551873,
      -1212326853,
      -1061524307,
      -306674912,
      -1698712650,
      62317068,
      1957810842,
      -355121351,
      -1647151185,
      81470997,
      1943803523,
      -480048366,
      -1805370492,
      225274430,
      2053790376,
      -468791541,
      -1828061283,
      167816743,
      2097651377,
      -267414716,
      -2029476910,
      503444072,
      1762050814,
      -144550051,
      -2140837941,
      426522225,
      1852507879,
      -19653770,
      -1982649376,
      282753626,
      1742555852,
      -105259153,
      -1900089351,
      397917763,
      1622183637,
      -690576408,
      -1580100738,
      953729732,
      1340076626,
      -776247311,
      -1497606297,
      1068828381,
      1219638859,
      -670225446,
      -1358292148,
      906185462,
      1090812512,
      -547295293,
      -1469587627,
      829329135,
      1181335161,
      -882789492,
      -1134132454,
      628085408,
      1382605366,
      -871598187,
      -1156888829,
      570562233,
      1426400815,
      -977650754,
      -1296233688,
      733239954,
      1555261956,
      -1026031705,
      -1244606671,
      752459403,
      1541320221,
      -1687895376,
      -328994266,
      1969922972,
      40735498,
      -1677130071,
      -351390145,
      1913087877,
      83908371,
      -1782625662,
      -491226604,
      2075208622,
      213261112,
      -1831694693,
      -438977011,
      2094854071,
      198958881,
      -2032938284,
      -237706686,
      1759359992,
      534414190,
      -2118248755,
      -155638181,
      1873836001,
      414664567,
      -2012718362,
      -15766928,
      1711684554,
      285281116,
      -1889165569,
      -127750551,
      1634467795,
      376229701,
      -1609899400,
      -686959890,
      1308918612,
      956543938,
      -1486412191,
      -799009033,
      1231636301,
      1047427035,
      -1362007478,
      -640263460,
      1088359270,
      936918e3,
      -1447252397,
      -558129467,
      1202900863,
      817233897,
      -1111625188,
      -893730166,
      1404277552,
      615818150,
      -1160759803,
      -841546093,
      1423857449,
      601450431,
      -1285129682,
      -1000256840,
      1567103746,
      711928724,
      -1274298825,
      -1022587231,
      1510334235,
      755167117
    ];
    var ZipContainer = function(_super) {
      __extends$2f(ZipContainer2, _super);
      function ZipContainer2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.folders = [];
        _this.files = [];
        _this.addFolder = function(path) {
          _this.folders.push({
            path,
            created: new Date()
          });
        };
        return _this;
      }
      ZipContainer2.prototype.addFolders = function(paths) {
        paths.forEach(this.addFolder);
      };
      ZipContainer2.prototype.addFile = function(path, content) {
        this.files.push({
          path,
          created: new Date(),
          content
        });
      };
      ZipContainer2.prototype.clearStream = function() {
        this.folders = [];
        this.files = [];
      };
      ZipContainer2.prototype.getContent = function(mimeType) {
        if (mimeType === void 0) {
          mimeType = "application/zip";
        }
        var textOutput = this.buildFileStream();
        var uInt8Output = this.buildUint8Array(textOutput);
        this.clearStream();
        return new Blob([uInt8Output], { type: mimeType });
      };
      ZipContainer2.prototype.buildFileStream = function(fData) {
        if (fData === void 0) {
          fData = "";
        }
        var totalFiles = this.folders.concat(this.files);
        var len = totalFiles.length;
        var foData = "";
        var lL = 0;
        var cL = 0;
        for (var _i = 0, totalFiles_1 = totalFiles; _i < totalFiles_1.length; _i++) {
          var currentFile = totalFiles_1[_i];
          var _a = this.getHeader(currentFile, lL), fileHeader = _a.fileHeader, folderHeader = _a.folderHeader, content = _a.content;
          lL += fileHeader.length + content.length;
          cL += folderHeader.length;
          fData += fileHeader + content;
          foData += folderHeader;
        }
        var foEnd = this.buildFolderEnd(len, cL, lL);
        return fData + foData + foEnd;
      };
      ZipContainer2.prototype.getHeader = function(currentFile, offset) {
        var content = currentFile.content, path = currentFile.path, created = currentFile.created;
        var utf8_encode2 = _.utf8_encode, decToHex2 = _.decToHex;
        var utfPath = utf8_encode2(path);
        var isUTF8 = utfPath !== path;
        var time = this.convertTime(created);
        var dt = this.convertDate(created);
        var extraFields = "";
        if (isUTF8) {
          var uExtraFieldPath = decToHex2(1, 1) + decToHex2(this.getFromCrc32Table(utfPath), 4) + utfPath;
          extraFields = "up" + decToHex2(uExtraFieldPath.length, 2) + uExtraFieldPath;
        }
        var header = "\n\0" + (isUTF8 ? "\0\b" : "\0\0") + "\0\0" + decToHex2(time, 2) + decToHex2(dt, 2) + decToHex2(content ? this.getFromCrc32Table(content) : 0, 4) + decToHex2(content ? content.length : 0, 4) + decToHex2(content ? content.length : 0, 4) + decToHex2(utfPath.length, 2) + decToHex2(extraFields.length, 2);
        var fileHeader = "PK" + header + utfPath + extraFields;
        var folderHeader = "PK\0" + header + "\0\0\0\0\0\0" + (content ? "\0\0\0\0" : "\0\0\0") + decToHex2(offset, 4) + utfPath + extraFields;
        return { fileHeader, folderHeader, content: content || "" };
      };
      ZipContainer2.prototype.buildFolderEnd = function(tLen, cLen, lLen) {
        var decToHex2 = _.decToHex;
        return "PK\0\0\0\0" + decToHex2(tLen, 2) + decToHex2(tLen, 2) + decToHex2(cLen, 4) + decToHex2(lLen, 4) + "\0\0";
      };
      ZipContainer2.prototype.buildUint8Array = function(content) {
        var uint8 = new Uint8Array(content.length);
        for (var i = 0; i < uint8.length; i++) {
          uint8[i] = content.charCodeAt(i);
        }
        return uint8;
      };
      ZipContainer2.prototype.getFromCrc32Table = function(content, crc) {
        if (crc === void 0) {
          crc = 0;
        }
        if (!content.length) {
          return 0;
        }
        crc ^= -1;
        var j = 0;
        var k = 0;
        var l = 0;
        for (var i = 0; i < content.length; i++) {
          j = content.charCodeAt(i);
          k = (crc ^ j) & 255;
          l = crcTable[k];
          crc = crc >>> 8 ^ l;
        }
        return crc ^ -1;
      };
      ZipContainer2.prototype.convertTime = function(date) {
        var time = date.getHours();
        time <<= 6;
        time = time | date.getMinutes();
        time <<= 5;
        time = time | date.getSeconds() / 2;
        return time;
      };
      ZipContainer2.prototype.convertDate = function(date) {
        var dt = date.getFullYear() - 1980;
        dt <<= 4;
        dt = dt | date.getMonth() + 1;
        dt <<= 5;
        dt = dt | date.getDate();
        return dt;
      };
      ZipContainer2 = __decorate$2b([
        Bean("zipContainer")
      ], ZipContainer2);
      return ZipContainer2;
    }(BeanStub);
    var CsvExportModule = {
      moduleName: exports.ModuleNames.CsvExportModule,
      beans: [CsvCreator, Downloader, XmlFactory, GridSerializer, ZipContainer]
    };
    ModuleRegistry.register(ClientSideRowModelModule, false);
    ModuleRegistry.register(InfiniteRowModelModule, false);
    ModuleRegistry.register(CsvExportModule, false);
    exports.AgAbstractField = AgAbstractField;
    exports.AgAngleSelect = AgAngleSelect;
    exports.AgCheckbox = AgCheckbox;
    exports.AgColorPicker = AgColorPicker;
    exports.AgDialog = AgDialog;
    exports.AgGroupComponent = AgGroupComponent;
    exports.AgInputNumberField = AgInputNumberField;
    exports.AgInputRange = AgInputRange;
    exports.AgInputTextArea = AgInputTextArea;
    exports.AgInputTextField = AgInputTextField;
    exports.AgPanel = AgPanel;
    exports.AgRadioButton = AgRadioButton;
    exports.AgSelect = AgSelect;
    exports.AgSlider = AgSlider;
    exports.AgToggleButton = AgToggleButton;
    exports.AlignedGridsService = AlignedGridsService;
    exports.AnimateShowChangeCellRenderer = AnimateShowChangeCellRenderer;
    exports.AnimateSlideCellRenderer = AnimateSlideCellRenderer;
    exports.AutoWidthCalculator = AutoWidthCalculator;
    exports.Autowired = Autowired;
    exports.BaseComponentWrapper = BaseComponentWrapper;
    exports.Bean = Bean;
    exports.BeanStub = BeanStub;
    exports.BodyDropPivotTarget = BodyDropPivotTarget;
    exports.BodyDropTarget = BodyDropTarget;
    exports.CellComp = CellComp;
    exports.CellNavigationService = CellNavigationService;
    exports.CellPositionUtils = CellPositionUtils;
    exports.CellRendererFactory = CellRendererFactory;
    exports.ChangedPath = ChangedPath;
    exports.CheckboxSelectionComponent = CheckboxSelectionComponent;
    exports.ColDefUtil = ColDefUtil;
    exports.Color = Color;
    exports.Column = Column;
    exports.ColumnApi = ColumnApi;
    exports.ColumnController = ColumnController;
    exports.ColumnFactory = ColumnFactory;
    exports.ColumnGroup = ColumnGroup;
    exports.ColumnKeyCreator = ColumnKeyCreator;
    exports.ColumnUtils = ColumnUtils;
    exports.Component = Component;
    exports.ComponentUtil = ComponentUtil;
    exports.Constants = Constants;
    exports.Context = Context;
    exports.CssClassApplier = CssClassApplier;
    exports.DateFilter = DateFilter;
    exports.DisplayedGroupCreator = DisplayedGroupCreator;
    exports.DragAndDropService = DragAndDropService;
    exports.DragService = DragService;
    exports.Environment = Environment;
    exports.EventService = EventService;
    exports.Events = Events;
    exports.ExpressionService = ExpressionService;
    exports.FilterManager = FilterManager;
    exports.FloatingFilterMapper = FloatingFilterMapper;
    exports.FloatingFilterWrapper = FloatingFilterWrapper;
    exports.FocusController = FocusController;
    exports.Grid = Grid;
    exports.GridApi = GridApi;
    exports.GridCore = GridCore;
    exports.GridListener = GridListener;
    exports.GridOptionsWrapper = GridOptionsWrapper;
    exports.GridPanel = GridPanel;
    exports.GroupCellRenderer = GroupCellRenderer;
    exports.GroupInstanceIdCreator = GroupInstanceIdCreator;
    exports.GuiListener = GuiListener;
    exports.HeaderContainer = HeaderContainer;
    exports.HeaderNavigationService = HeaderNavigationService;
    exports.HeaderPositionUtils = HeaderPositionUtils;
    exports.HeaderRootComp = HeaderRootComp;
    exports.HeaderRowComp = HeaderRowComp;
    exports.HorizontalResizeService = HorizontalResizeService;
    exports.KeyCode = KeyCode;
    exports.KeyName = KeyName;
    exports.LargeTextCellEditor = LargeTextCellEditor;
    exports.Logger = Logger;
    exports.LoggerFactory = LoggerFactory;
    exports.ManagedFocusComponent = ManagedFocusComponent;
    exports.ModuleRegistry = ModuleRegistry;
    exports.MouseEventService = MouseEventService;
    exports.MoveColumnController = MoveColumnController;
    exports.NumberFilter = NumberFilter;
    exports.NumberSequence = NumberSequence;
    exports.Optional = Optional;
    exports.OriginalColumnGroup = OriginalColumnGroup;
    exports.PaginationProxy = PaginationProxy;
    exports.PinnedRowModel = PinnedRowModel;
    exports.PopupComponent = PopupComponent;
    exports.PopupEditorWrapper = PopupEditorWrapper;
    exports.PopupSelectCellEditor = PopupSelectCellEditor;
    exports.PopupService = PopupService;
    exports.PopupTextCellEditor = PopupTextCellEditor;
    exports.PostConstruct = PostConstruct;
    exports.PreConstruct = PreConstruct;
    exports.PreDestroy = PreDestroy;
    exports.Promise = Promise2;
    exports.PropertyKeys = PropertyKeys;
    exports.ProvidedFilter = ProvidedFilter;
    exports.Qualifier = Qualifier;
    exports.QuerySelector = QuerySelector;
    exports.RefSelector = RefSelector;
    exports.ResizeObserverService = ResizeObserverService;
    exports.RowComp = RowComp;
    exports.RowNode = RowNode;
    exports.RowNodeBlock = RowNodeBlock;
    exports.RowNodeBlockLoader = RowNodeBlockLoader;
    exports.RowNodeCache = RowNodeCache;
    exports.RowPositionUtils = RowPositionUtils;
    exports.RowRenderer = RowRenderer;
    exports.ScalarFilter = ScalarFilter;
    exports.ScrollVisibleService = ScrollVisibleService;
    exports.SelectCellEditor = SelectCellEditor;
    exports.SelectableService = SelectableService;
    exports.SelectionController = SelectionController;
    exports.SetLeftFeature = SetLeftFeature;
    exports.SimpleFilter = SimpleFilter;
    exports.SortController = SortController;
    exports.StandardMenuFactory = StandardMenuFactory;
    exports.StylingService = StylingService;
    exports.TabbedLayout = TabbedLayout;
    exports.TemplateService = TemplateService;
    exports.TextCellEditor = TextCellEditor;
    exports.TextFilter = TextFilter;
    exports.TextFloatingFilter = TextFloatingFilter;
    exports.Timer = Timer;
    exports.TooltipFeature = TooltipFeature;
    exports.TouchListener = TouchListener;
    exports.UserComponentFactory = UserComponentFactory;
    exports.UserComponentRegistry = UserComponentRegistry;
    exports.ValueCache = ValueCache;
    exports.ValueFormatterService = ValueFormatterService;
    exports.ValueService = ValueService;
    exports.VanillaFrameworkOverrides = VanillaFrameworkOverrides;
    exports.VirtualList = VirtualList;
    exports._ = _;
    exports.defaultGroupComparator = defaultGroupComparator;
    exports.initialiseAgGridWithAngular1 = initialiseAgGridWithAngular1;
    exports.initialiseAgGridWithWebComponents = initialiseAgGridWithWebComponents;
    exports.simpleHttpRequest = simpleHttpRequest;
    exports.stringToArray = stringToArray;
  }
});

// dep:@budibase_svelte-ag-grid___ag-grid-community
var budibase_svelte_ag_grid_ag_grid_community_default = require_ag_grid_community_cjs();
export {
  budibase_svelte_ag_grid_ag_grid_community_default as default
};
/**
 * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
 * @version v24.1.0
 * @link http://www.ag-grid.com/
 * @license MIT
 */
/**
 * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components * @version v24.1.0
 * @link http://www.ag-grid.com/
' * @license MIT
 */
//# sourceMappingURL=@budibase_svelte-ag-grid___ag-grid-community.js.map
