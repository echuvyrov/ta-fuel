
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model FoodLog
 * 
 */
export type FoodLog = {
  id: string
  food_name: string
  food_qty: number
  protein_grams: number
  fat_grams: number
  carbs_grams: number
  kkcals: number
  feeding_date: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FoodReference
 * 
 */
export type FoodReference = {
  id: string
  food_name: string
  food_qty: number
  protein_grams: number
  fat_grams: number
  carbs_grams: number
  kkcals: number
  createdAt: Date
  updatedAt: Date
  imageBase64: string
}

/**
 * Model TargetTotals
 * 
 */
export type TargetTotals = {
  id: string
  feeding_date: string
  fat_grams: number
  carbs_grams: number
  protein_grams: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more FoodLogs
 * const foodLogs = await prisma.foodLog.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more FoodLogs
   * const foodLogs = await prisma.foodLog.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.foodLog`: Exposes CRUD operations for the **FoodLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodLogs
    * const foodLogs = await prisma.foodLog.findMany()
    * ```
    */
  get foodLog(): Prisma.FoodLogDelegate<GlobalReject>;

  /**
   * `prisma.foodReference`: Exposes CRUD operations for the **FoodReference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FoodReferences
    * const foodReferences = await prisma.foodReference.findMany()
    * ```
    */
  get foodReference(): Prisma.FoodReferenceDelegate<GlobalReject>;

  /**
   * `prisma.targetTotals`: Exposes CRUD operations for the **TargetTotals** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TargetTotals
    * const targetTotals = await prisma.targetTotals.findMany()
    * ```
    */
  get targetTotals(): Prisma.TargetTotalsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.6.1
   * Query Engine version: 694eea289a8462c80264df36757e4fdc129b1b32
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    FoodLog: 'FoodLog',
    FoodReference: 'FoodReference',
    TargetTotals: 'TargetTotals'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model FoodLog
   */


  export type AggregateFoodLog = {
    _count: FoodLogCountAggregateOutputType | null
    _avg: FoodLogAvgAggregateOutputType | null
    _sum: FoodLogSumAggregateOutputType | null
    _min: FoodLogMinAggregateOutputType | null
    _max: FoodLogMaxAggregateOutputType | null
  }

  export type FoodLogAvgAggregateOutputType = {
    food_qty: number | null
    protein_grams: number | null
    fat_grams: number | null
    carbs_grams: number | null
    kkcals: number | null
  }

  export type FoodLogSumAggregateOutputType = {
    food_qty: number | null
    protein_grams: number | null
    fat_grams: number | null
    carbs_grams: number | null
    kkcals: number | null
  }

  export type FoodLogMinAggregateOutputType = {
    id: string | null
    food_name: string | null
    food_qty: number | null
    protein_grams: number | null
    fat_grams: number | null
    carbs_grams: number | null
    kkcals: number | null
    feeding_date: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodLogMaxAggregateOutputType = {
    id: string | null
    food_name: string | null
    food_qty: number | null
    protein_grams: number | null
    fat_grams: number | null
    carbs_grams: number | null
    kkcals: number | null
    feeding_date: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodLogCountAggregateOutputType = {
    id: number
    food_name: number
    food_qty: number
    protein_grams: number
    fat_grams: number
    carbs_grams: number
    kkcals: number
    feeding_date: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FoodLogAvgAggregateInputType = {
    food_qty?: true
    protein_grams?: true
    fat_grams?: true
    carbs_grams?: true
    kkcals?: true
  }

  export type FoodLogSumAggregateInputType = {
    food_qty?: true
    protein_grams?: true
    fat_grams?: true
    carbs_grams?: true
    kkcals?: true
  }

  export type FoodLogMinAggregateInputType = {
    id?: true
    food_name?: true
    food_qty?: true
    protein_grams?: true
    fat_grams?: true
    carbs_grams?: true
    kkcals?: true
    feeding_date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodLogMaxAggregateInputType = {
    id?: true
    food_name?: true
    food_qty?: true
    protein_grams?: true
    fat_grams?: true
    carbs_grams?: true
    kkcals?: true
    feeding_date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodLogCountAggregateInputType = {
    id?: true
    food_name?: true
    food_qty?: true
    protein_grams?: true
    fat_grams?: true
    carbs_grams?: true
    kkcals?: true
    feeding_date?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FoodLogAggregateArgs = {
    /**
     * Filter which FoodLog to aggregate.
     * 
    **/
    where?: FoodLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodLogs to fetch.
     * 
    **/
    orderBy?: Enumerable<FoodLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FoodLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodLogs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodLogs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodLogs
    **/
    _count?: true | FoodLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodLogMaxAggregateInputType
  }

  export type GetFoodLogAggregateType<T extends FoodLogAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodLog[P]>
      : GetScalarType<T[P], AggregateFoodLog[P]>
  }




  export type FoodLogGroupByArgs = {
    where?: FoodLogWhereInput
    orderBy?: Enumerable<FoodLogOrderByWithAggregationInput>
    by: Array<FoodLogScalarFieldEnum>
    having?: FoodLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodLogCountAggregateInputType | true
    _avg?: FoodLogAvgAggregateInputType
    _sum?: FoodLogSumAggregateInputType
    _min?: FoodLogMinAggregateInputType
    _max?: FoodLogMaxAggregateInputType
  }


  export type FoodLogGroupByOutputType = {
    id: string
    food_name: string
    food_qty: number
    protein_grams: number
    fat_grams: number
    carbs_grams: number
    kkcals: number
    feeding_date: string
    createdAt: Date
    updatedAt: Date
    _count: FoodLogCountAggregateOutputType | null
    _avg: FoodLogAvgAggregateOutputType | null
    _sum: FoodLogSumAggregateOutputType | null
    _min: FoodLogMinAggregateOutputType | null
    _max: FoodLogMaxAggregateOutputType | null
  }

  type GetFoodLogGroupByPayload<T extends FoodLogGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FoodLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodLogGroupByOutputType[P]>
            : GetScalarType<T[P], FoodLogGroupByOutputType[P]>
        }
      >
    >


  export type FoodLogSelect = {
    id?: boolean
    food_name?: boolean
    food_qty?: boolean
    protein_grams?: boolean
    fat_grams?: boolean
    carbs_grams?: boolean
    kkcals?: boolean
    feeding_date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type FoodLogGetPayload<S extends boolean | null | undefined | FoodLogArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FoodLog :
    S extends undefined ? never :
    S extends { include: any } & (FoodLogArgs | FoodLogFindManyArgs)
    ? FoodLog 
    : S extends { select: any } & (FoodLogArgs | FoodLogFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof FoodLog ? FoodLog[P] : never
  } 
      : FoodLog


  type FoodLogCountArgs = Merge<
    Omit<FoodLogFindManyArgs, 'select' | 'include'> & {
      select?: FoodLogCountAggregateInputType | true
    }
  >

  export interface FoodLogDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one FoodLog that matches the filter.
     * @param {FoodLogFindUniqueArgs} args - Arguments to find a FoodLog
     * @example
     * // Get one FoodLog
     * const foodLog = await prisma.foodLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FoodLogFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FoodLogFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FoodLog'> extends True ? Prisma__FoodLogClient<FoodLogGetPayload<T>> : Prisma__FoodLogClient<FoodLogGetPayload<T> | null, null>

    /**
     * Find the first FoodLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodLogFindFirstArgs} args - Arguments to find a FoodLog
     * @example
     * // Get one FoodLog
     * const foodLog = await prisma.foodLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FoodLogFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FoodLogFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FoodLog'> extends True ? Prisma__FoodLogClient<FoodLogGetPayload<T>> : Prisma__FoodLogClient<FoodLogGetPayload<T> | null, null>

    /**
     * Find zero or more FoodLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodLogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodLogs
     * const foodLogs = await prisma.foodLog.findMany()
     * 
     * // Get first 10 FoodLogs
     * const foodLogs = await prisma.foodLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodLogWithIdOnly = await prisma.foodLog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FoodLogFindManyArgs>(
      args?: SelectSubset<T, FoodLogFindManyArgs>
    ): PrismaPromise<Array<FoodLogGetPayload<T>>>

    /**
     * Create a FoodLog.
     * @param {FoodLogCreateArgs} args - Arguments to create a FoodLog.
     * @example
     * // Create one FoodLog
     * const FoodLog = await prisma.foodLog.create({
     *   data: {
     *     // ... data to create a FoodLog
     *   }
     * })
     * 
    **/
    create<T extends FoodLogCreateArgs>(
      args: SelectSubset<T, FoodLogCreateArgs>
    ): Prisma__FoodLogClient<FoodLogGetPayload<T>>

    /**
     * Create many FoodLogs.
     *     @param {FoodLogCreateManyArgs} args - Arguments to create many FoodLogs.
     *     @example
     *     // Create many FoodLogs
     *     const foodLog = await prisma.foodLog.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FoodLogCreateManyArgs>(
      args?: SelectSubset<T, FoodLogCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a FoodLog.
     * @param {FoodLogDeleteArgs} args - Arguments to delete one FoodLog.
     * @example
     * // Delete one FoodLog
     * const FoodLog = await prisma.foodLog.delete({
     *   where: {
     *     // ... filter to delete one FoodLog
     *   }
     * })
     * 
    **/
    delete<T extends FoodLogDeleteArgs>(
      args: SelectSubset<T, FoodLogDeleteArgs>
    ): Prisma__FoodLogClient<FoodLogGetPayload<T>>

    /**
     * Update one FoodLog.
     * @param {FoodLogUpdateArgs} args - Arguments to update one FoodLog.
     * @example
     * // Update one FoodLog
     * const foodLog = await prisma.foodLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FoodLogUpdateArgs>(
      args: SelectSubset<T, FoodLogUpdateArgs>
    ): Prisma__FoodLogClient<FoodLogGetPayload<T>>

    /**
     * Delete zero or more FoodLogs.
     * @param {FoodLogDeleteManyArgs} args - Arguments to filter FoodLogs to delete.
     * @example
     * // Delete a few FoodLogs
     * const { count } = await prisma.foodLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FoodLogDeleteManyArgs>(
      args?: SelectSubset<T, FoodLogDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodLogs
     * const foodLog = await prisma.foodLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FoodLogUpdateManyArgs>(
      args: SelectSubset<T, FoodLogUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FoodLog.
     * @param {FoodLogUpsertArgs} args - Arguments to update or create a FoodLog.
     * @example
     * // Update or create a FoodLog
     * const foodLog = await prisma.foodLog.upsert({
     *   create: {
     *     // ... data to create a FoodLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodLog we want to update
     *   }
     * })
    **/
    upsert<T extends FoodLogUpsertArgs>(
      args: SelectSubset<T, FoodLogUpsertArgs>
    ): Prisma__FoodLogClient<FoodLogGetPayload<T>>

    /**
     * Find one FoodLog that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {FoodLogFindUniqueOrThrowArgs} args - Arguments to find a FoodLog
     * @example
     * // Get one FoodLog
     * const foodLog = await prisma.foodLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FoodLogFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FoodLogFindUniqueOrThrowArgs>
    ): Prisma__FoodLogClient<FoodLogGetPayload<T>>

    /**
     * Find the first FoodLog that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodLogFindFirstOrThrowArgs} args - Arguments to find a FoodLog
     * @example
     * // Get one FoodLog
     * const foodLog = await prisma.foodLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FoodLogFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FoodLogFindFirstOrThrowArgs>
    ): Prisma__FoodLogClient<FoodLogGetPayload<T>>

    /**
     * Count the number of FoodLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodLogCountArgs} args - Arguments to filter FoodLogs to count.
     * @example
     * // Count the number of FoodLogs
     * const count = await prisma.foodLog.count({
     *   where: {
     *     // ... the filter for the FoodLogs we want to count
     *   }
     * })
    **/
    count<T extends FoodLogCountArgs>(
      args?: Subset<T, FoodLogCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodLogAggregateArgs>(args: Subset<T, FoodLogAggregateArgs>): PrismaPromise<GetFoodLogAggregateType<T>>

    /**
     * Group by FoodLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodLogGroupByArgs['orderBy'] }
        : { orderBy?: FoodLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodLogGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FoodLogClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FoodLog base type for findUnique actions
   */
  export type FoodLogFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FoodLog
     * 
    **/
    select?: FoodLogSelect | null
    /**
     * Filter, which FoodLog to fetch.
     * 
    **/
    where: FoodLogWhereUniqueInput
  }

  /**
   * FoodLog: findUnique
   */
  export interface FoodLogFindUniqueArgs extends FoodLogFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FoodLog base type for findFirst actions
   */
  export type FoodLogFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FoodLog
     * 
    **/
    select?: FoodLogSelect | null
    /**
     * Filter, which FoodLog to fetch.
     * 
    **/
    where?: FoodLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodLogs to fetch.
     * 
    **/
    orderBy?: Enumerable<FoodLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodLogs.
     * 
    **/
    cursor?: FoodLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodLogs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodLogs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodLogs.
     * 
    **/
    distinct?: Enumerable<FoodLogScalarFieldEnum>
  }

  /**
   * FoodLog: findFirst
   */
  export interface FoodLogFindFirstArgs extends FoodLogFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FoodLog findMany
   */
  export type FoodLogFindManyArgs = {
    /**
     * Select specific fields to fetch from the FoodLog
     * 
    **/
    select?: FoodLogSelect | null
    /**
     * Filter, which FoodLogs to fetch.
     * 
    **/
    where?: FoodLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodLogs to fetch.
     * 
    **/
    orderBy?: Enumerable<FoodLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodLogs.
     * 
    **/
    cursor?: FoodLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodLogs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodLogs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FoodLogScalarFieldEnum>
  }


  /**
   * FoodLog create
   */
  export type FoodLogCreateArgs = {
    /**
     * Select specific fields to fetch from the FoodLog
     * 
    **/
    select?: FoodLogSelect | null
    /**
     * The data needed to create a FoodLog.
     * 
    **/
    data: XOR<FoodLogCreateInput, FoodLogUncheckedCreateInput>
  }


  /**
   * FoodLog createMany
   */
  export type FoodLogCreateManyArgs = {
    /**
     * The data used to create many FoodLogs.
     * 
    **/
    data: Enumerable<FoodLogCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FoodLog update
   */
  export type FoodLogUpdateArgs = {
    /**
     * Select specific fields to fetch from the FoodLog
     * 
    **/
    select?: FoodLogSelect | null
    /**
     * The data needed to update a FoodLog.
     * 
    **/
    data: XOR<FoodLogUpdateInput, FoodLogUncheckedUpdateInput>
    /**
     * Choose, which FoodLog to update.
     * 
    **/
    where: FoodLogWhereUniqueInput
  }


  /**
   * FoodLog updateMany
   */
  export type FoodLogUpdateManyArgs = {
    /**
     * The data used to update FoodLogs.
     * 
    **/
    data: XOR<FoodLogUpdateManyMutationInput, FoodLogUncheckedUpdateManyInput>
    /**
     * Filter which FoodLogs to update
     * 
    **/
    where?: FoodLogWhereInput
  }


  /**
   * FoodLog upsert
   */
  export type FoodLogUpsertArgs = {
    /**
     * Select specific fields to fetch from the FoodLog
     * 
    **/
    select?: FoodLogSelect | null
    /**
     * The filter to search for the FoodLog to update in case it exists.
     * 
    **/
    where: FoodLogWhereUniqueInput
    /**
     * In case the FoodLog found by the `where` argument doesn't exist, create a new FoodLog with this data.
     * 
    **/
    create: XOR<FoodLogCreateInput, FoodLogUncheckedCreateInput>
    /**
     * In case the FoodLog was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FoodLogUpdateInput, FoodLogUncheckedUpdateInput>
  }


  /**
   * FoodLog delete
   */
  export type FoodLogDeleteArgs = {
    /**
     * Select specific fields to fetch from the FoodLog
     * 
    **/
    select?: FoodLogSelect | null
    /**
     * Filter which FoodLog to delete.
     * 
    **/
    where: FoodLogWhereUniqueInput
  }


  /**
   * FoodLog deleteMany
   */
  export type FoodLogDeleteManyArgs = {
    /**
     * Filter which FoodLogs to delete
     * 
    **/
    where?: FoodLogWhereInput
  }


  /**
   * FoodLog: findUniqueOrThrow
   */
  export type FoodLogFindUniqueOrThrowArgs = FoodLogFindUniqueArgsBase
      

  /**
   * FoodLog: findFirstOrThrow
   */
  export type FoodLogFindFirstOrThrowArgs = FoodLogFindFirstArgsBase
      

  /**
   * FoodLog without action
   */
  export type FoodLogArgs = {
    /**
     * Select specific fields to fetch from the FoodLog
     * 
    **/
    select?: FoodLogSelect | null
  }



  /**
   * Model FoodReference
   */


  export type AggregateFoodReference = {
    _count: FoodReferenceCountAggregateOutputType | null
    _avg: FoodReferenceAvgAggregateOutputType | null
    _sum: FoodReferenceSumAggregateOutputType | null
    _min: FoodReferenceMinAggregateOutputType | null
    _max: FoodReferenceMaxAggregateOutputType | null
  }

  export type FoodReferenceAvgAggregateOutputType = {
    food_qty: number | null
    protein_grams: number | null
    fat_grams: number | null
    carbs_grams: number | null
    kkcals: number | null
  }

  export type FoodReferenceSumAggregateOutputType = {
    food_qty: number | null
    protein_grams: number | null
    fat_grams: number | null
    carbs_grams: number | null
    kkcals: number | null
  }

  export type FoodReferenceMinAggregateOutputType = {
    id: string | null
    food_name: string | null
    food_qty: number | null
    protein_grams: number | null
    fat_grams: number | null
    carbs_grams: number | null
    kkcals: number | null
    createdAt: Date | null
    updatedAt: Date | null
    imageBase64: string | null
  }

  export type FoodReferenceMaxAggregateOutputType = {
    id: string | null
    food_name: string | null
    food_qty: number | null
    protein_grams: number | null
    fat_grams: number | null
    carbs_grams: number | null
    kkcals: number | null
    createdAt: Date | null
    updatedAt: Date | null
    imageBase64: string | null
  }

  export type FoodReferenceCountAggregateOutputType = {
    id: number
    food_name: number
    food_qty: number
    protein_grams: number
    fat_grams: number
    carbs_grams: number
    kkcals: number
    createdAt: number
    updatedAt: number
    imageBase64: number
    _all: number
  }


  export type FoodReferenceAvgAggregateInputType = {
    food_qty?: true
    protein_grams?: true
    fat_grams?: true
    carbs_grams?: true
    kkcals?: true
  }

  export type FoodReferenceSumAggregateInputType = {
    food_qty?: true
    protein_grams?: true
    fat_grams?: true
    carbs_grams?: true
    kkcals?: true
  }

  export type FoodReferenceMinAggregateInputType = {
    id?: true
    food_name?: true
    food_qty?: true
    protein_grams?: true
    fat_grams?: true
    carbs_grams?: true
    kkcals?: true
    createdAt?: true
    updatedAt?: true
    imageBase64?: true
  }

  export type FoodReferenceMaxAggregateInputType = {
    id?: true
    food_name?: true
    food_qty?: true
    protein_grams?: true
    fat_grams?: true
    carbs_grams?: true
    kkcals?: true
    createdAt?: true
    updatedAt?: true
    imageBase64?: true
  }

  export type FoodReferenceCountAggregateInputType = {
    id?: true
    food_name?: true
    food_qty?: true
    protein_grams?: true
    fat_grams?: true
    carbs_grams?: true
    kkcals?: true
    createdAt?: true
    updatedAt?: true
    imageBase64?: true
    _all?: true
  }

  export type FoodReferenceAggregateArgs = {
    /**
     * Filter which FoodReference to aggregate.
     * 
    **/
    where?: FoodReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodReferences to fetch.
     * 
    **/
    orderBy?: Enumerable<FoodReferenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FoodReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodReferences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodReferences.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FoodReferences
    **/
    _count?: true | FoodReferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodReferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodReferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodReferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodReferenceMaxAggregateInputType
  }

  export type GetFoodReferenceAggregateType<T extends FoodReferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateFoodReference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoodReference[P]>
      : GetScalarType<T[P], AggregateFoodReference[P]>
  }




  export type FoodReferenceGroupByArgs = {
    where?: FoodReferenceWhereInput
    orderBy?: Enumerable<FoodReferenceOrderByWithAggregationInput>
    by: Array<FoodReferenceScalarFieldEnum>
    having?: FoodReferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodReferenceCountAggregateInputType | true
    _avg?: FoodReferenceAvgAggregateInputType
    _sum?: FoodReferenceSumAggregateInputType
    _min?: FoodReferenceMinAggregateInputType
    _max?: FoodReferenceMaxAggregateInputType
  }


  export type FoodReferenceGroupByOutputType = {
    id: string
    food_name: string
    food_qty: number
    protein_grams: number
    fat_grams: number
    carbs_grams: number
    kkcals: number
    createdAt: Date
    updatedAt: Date
    imageBase64: string
    _count: FoodReferenceCountAggregateOutputType | null
    _avg: FoodReferenceAvgAggregateOutputType | null
    _sum: FoodReferenceSumAggregateOutputType | null
    _min: FoodReferenceMinAggregateOutputType | null
    _max: FoodReferenceMaxAggregateOutputType | null
  }

  type GetFoodReferenceGroupByPayload<T extends FoodReferenceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FoodReferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodReferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodReferenceGroupByOutputType[P]>
            : GetScalarType<T[P], FoodReferenceGroupByOutputType[P]>
        }
      >
    >


  export type FoodReferenceSelect = {
    id?: boolean
    food_name?: boolean
    food_qty?: boolean
    protein_grams?: boolean
    fat_grams?: boolean
    carbs_grams?: boolean
    kkcals?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    imageBase64?: boolean
  }


  export type FoodReferenceGetPayload<S extends boolean | null | undefined | FoodReferenceArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FoodReference :
    S extends undefined ? never :
    S extends { include: any } & (FoodReferenceArgs | FoodReferenceFindManyArgs)
    ? FoodReference 
    : S extends { select: any } & (FoodReferenceArgs | FoodReferenceFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof FoodReference ? FoodReference[P] : never
  } 
      : FoodReference


  type FoodReferenceCountArgs = Merge<
    Omit<FoodReferenceFindManyArgs, 'select' | 'include'> & {
      select?: FoodReferenceCountAggregateInputType | true
    }
  >

  export interface FoodReferenceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one FoodReference that matches the filter.
     * @param {FoodReferenceFindUniqueArgs} args - Arguments to find a FoodReference
     * @example
     * // Get one FoodReference
     * const foodReference = await prisma.foodReference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FoodReferenceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FoodReferenceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FoodReference'> extends True ? Prisma__FoodReferenceClient<FoodReferenceGetPayload<T>> : Prisma__FoodReferenceClient<FoodReferenceGetPayload<T> | null, null>

    /**
     * Find the first FoodReference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodReferenceFindFirstArgs} args - Arguments to find a FoodReference
     * @example
     * // Get one FoodReference
     * const foodReference = await prisma.foodReference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FoodReferenceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FoodReferenceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FoodReference'> extends True ? Prisma__FoodReferenceClient<FoodReferenceGetPayload<T>> : Prisma__FoodReferenceClient<FoodReferenceGetPayload<T> | null, null>

    /**
     * Find zero or more FoodReferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodReferenceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FoodReferences
     * const foodReferences = await prisma.foodReference.findMany()
     * 
     * // Get first 10 FoodReferences
     * const foodReferences = await prisma.foodReference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodReferenceWithIdOnly = await prisma.foodReference.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FoodReferenceFindManyArgs>(
      args?: SelectSubset<T, FoodReferenceFindManyArgs>
    ): PrismaPromise<Array<FoodReferenceGetPayload<T>>>

    /**
     * Create a FoodReference.
     * @param {FoodReferenceCreateArgs} args - Arguments to create a FoodReference.
     * @example
     * // Create one FoodReference
     * const FoodReference = await prisma.foodReference.create({
     *   data: {
     *     // ... data to create a FoodReference
     *   }
     * })
     * 
    **/
    create<T extends FoodReferenceCreateArgs>(
      args: SelectSubset<T, FoodReferenceCreateArgs>
    ): Prisma__FoodReferenceClient<FoodReferenceGetPayload<T>>

    /**
     * Create many FoodReferences.
     *     @param {FoodReferenceCreateManyArgs} args - Arguments to create many FoodReferences.
     *     @example
     *     // Create many FoodReferences
     *     const foodReference = await prisma.foodReference.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FoodReferenceCreateManyArgs>(
      args?: SelectSubset<T, FoodReferenceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a FoodReference.
     * @param {FoodReferenceDeleteArgs} args - Arguments to delete one FoodReference.
     * @example
     * // Delete one FoodReference
     * const FoodReference = await prisma.foodReference.delete({
     *   where: {
     *     // ... filter to delete one FoodReference
     *   }
     * })
     * 
    **/
    delete<T extends FoodReferenceDeleteArgs>(
      args: SelectSubset<T, FoodReferenceDeleteArgs>
    ): Prisma__FoodReferenceClient<FoodReferenceGetPayload<T>>

    /**
     * Update one FoodReference.
     * @param {FoodReferenceUpdateArgs} args - Arguments to update one FoodReference.
     * @example
     * // Update one FoodReference
     * const foodReference = await prisma.foodReference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FoodReferenceUpdateArgs>(
      args: SelectSubset<T, FoodReferenceUpdateArgs>
    ): Prisma__FoodReferenceClient<FoodReferenceGetPayload<T>>

    /**
     * Delete zero or more FoodReferences.
     * @param {FoodReferenceDeleteManyArgs} args - Arguments to filter FoodReferences to delete.
     * @example
     * // Delete a few FoodReferences
     * const { count } = await prisma.foodReference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FoodReferenceDeleteManyArgs>(
      args?: SelectSubset<T, FoodReferenceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FoodReferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodReferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FoodReferences
     * const foodReference = await prisma.foodReference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FoodReferenceUpdateManyArgs>(
      args: SelectSubset<T, FoodReferenceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FoodReference.
     * @param {FoodReferenceUpsertArgs} args - Arguments to update or create a FoodReference.
     * @example
     * // Update or create a FoodReference
     * const foodReference = await prisma.foodReference.upsert({
     *   create: {
     *     // ... data to create a FoodReference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FoodReference we want to update
     *   }
     * })
    **/
    upsert<T extends FoodReferenceUpsertArgs>(
      args: SelectSubset<T, FoodReferenceUpsertArgs>
    ): Prisma__FoodReferenceClient<FoodReferenceGetPayload<T>>

    /**
     * Find one FoodReference that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {FoodReferenceFindUniqueOrThrowArgs} args - Arguments to find a FoodReference
     * @example
     * // Get one FoodReference
     * const foodReference = await prisma.foodReference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FoodReferenceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FoodReferenceFindUniqueOrThrowArgs>
    ): Prisma__FoodReferenceClient<FoodReferenceGetPayload<T>>

    /**
     * Find the first FoodReference that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodReferenceFindFirstOrThrowArgs} args - Arguments to find a FoodReference
     * @example
     * // Get one FoodReference
     * const foodReference = await prisma.foodReference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FoodReferenceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FoodReferenceFindFirstOrThrowArgs>
    ): Prisma__FoodReferenceClient<FoodReferenceGetPayload<T>>

    /**
     * Count the number of FoodReferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodReferenceCountArgs} args - Arguments to filter FoodReferences to count.
     * @example
     * // Count the number of FoodReferences
     * const count = await prisma.foodReference.count({
     *   where: {
     *     // ... the filter for the FoodReferences we want to count
     *   }
     * })
    **/
    count<T extends FoodReferenceCountArgs>(
      args?: Subset<T, FoodReferenceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodReferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FoodReference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodReferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodReferenceAggregateArgs>(args: Subset<T, FoodReferenceAggregateArgs>): PrismaPromise<GetFoodReferenceAggregateType<T>>

    /**
     * Group by FoodReference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodReferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodReferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodReferenceGroupByArgs['orderBy'] }
        : { orderBy?: FoodReferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodReferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodReferenceGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FoodReference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FoodReferenceClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FoodReference base type for findUnique actions
   */
  export type FoodReferenceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FoodReference
     * 
    **/
    select?: FoodReferenceSelect | null
    /**
     * Filter, which FoodReference to fetch.
     * 
    **/
    where: FoodReferenceWhereUniqueInput
  }

  /**
   * FoodReference: findUnique
   */
  export interface FoodReferenceFindUniqueArgs extends FoodReferenceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FoodReference base type for findFirst actions
   */
  export type FoodReferenceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FoodReference
     * 
    **/
    select?: FoodReferenceSelect | null
    /**
     * Filter, which FoodReference to fetch.
     * 
    **/
    where?: FoodReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodReferences to fetch.
     * 
    **/
    orderBy?: Enumerable<FoodReferenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FoodReferences.
     * 
    **/
    cursor?: FoodReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodReferences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodReferences.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FoodReferences.
     * 
    **/
    distinct?: Enumerable<FoodReferenceScalarFieldEnum>
  }

  /**
   * FoodReference: findFirst
   */
  export interface FoodReferenceFindFirstArgs extends FoodReferenceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FoodReference findMany
   */
  export type FoodReferenceFindManyArgs = {
    /**
     * Select specific fields to fetch from the FoodReference
     * 
    **/
    select?: FoodReferenceSelect | null
    /**
     * Filter, which FoodReferences to fetch.
     * 
    **/
    where?: FoodReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FoodReferences to fetch.
     * 
    **/
    orderBy?: Enumerable<FoodReferenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FoodReferences.
     * 
    **/
    cursor?: FoodReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FoodReferences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FoodReferences.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FoodReferenceScalarFieldEnum>
  }


  /**
   * FoodReference create
   */
  export type FoodReferenceCreateArgs = {
    /**
     * Select specific fields to fetch from the FoodReference
     * 
    **/
    select?: FoodReferenceSelect | null
    /**
     * The data needed to create a FoodReference.
     * 
    **/
    data: XOR<FoodReferenceCreateInput, FoodReferenceUncheckedCreateInput>
  }


  /**
   * FoodReference createMany
   */
  export type FoodReferenceCreateManyArgs = {
    /**
     * The data used to create many FoodReferences.
     * 
    **/
    data: Enumerable<FoodReferenceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FoodReference update
   */
  export type FoodReferenceUpdateArgs = {
    /**
     * Select specific fields to fetch from the FoodReference
     * 
    **/
    select?: FoodReferenceSelect | null
    /**
     * The data needed to update a FoodReference.
     * 
    **/
    data: XOR<FoodReferenceUpdateInput, FoodReferenceUncheckedUpdateInput>
    /**
     * Choose, which FoodReference to update.
     * 
    **/
    where: FoodReferenceWhereUniqueInput
  }


  /**
   * FoodReference updateMany
   */
  export type FoodReferenceUpdateManyArgs = {
    /**
     * The data used to update FoodReferences.
     * 
    **/
    data: XOR<FoodReferenceUpdateManyMutationInput, FoodReferenceUncheckedUpdateManyInput>
    /**
     * Filter which FoodReferences to update
     * 
    **/
    where?: FoodReferenceWhereInput
  }


  /**
   * FoodReference upsert
   */
  export type FoodReferenceUpsertArgs = {
    /**
     * Select specific fields to fetch from the FoodReference
     * 
    **/
    select?: FoodReferenceSelect | null
    /**
     * The filter to search for the FoodReference to update in case it exists.
     * 
    **/
    where: FoodReferenceWhereUniqueInput
    /**
     * In case the FoodReference found by the `where` argument doesn't exist, create a new FoodReference with this data.
     * 
    **/
    create: XOR<FoodReferenceCreateInput, FoodReferenceUncheckedCreateInput>
    /**
     * In case the FoodReference was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FoodReferenceUpdateInput, FoodReferenceUncheckedUpdateInput>
  }


  /**
   * FoodReference delete
   */
  export type FoodReferenceDeleteArgs = {
    /**
     * Select specific fields to fetch from the FoodReference
     * 
    **/
    select?: FoodReferenceSelect | null
    /**
     * Filter which FoodReference to delete.
     * 
    **/
    where: FoodReferenceWhereUniqueInput
  }


  /**
   * FoodReference deleteMany
   */
  export type FoodReferenceDeleteManyArgs = {
    /**
     * Filter which FoodReferences to delete
     * 
    **/
    where?: FoodReferenceWhereInput
  }


  /**
   * FoodReference: findUniqueOrThrow
   */
  export type FoodReferenceFindUniqueOrThrowArgs = FoodReferenceFindUniqueArgsBase
      

  /**
   * FoodReference: findFirstOrThrow
   */
  export type FoodReferenceFindFirstOrThrowArgs = FoodReferenceFindFirstArgsBase
      

  /**
   * FoodReference without action
   */
  export type FoodReferenceArgs = {
    /**
     * Select specific fields to fetch from the FoodReference
     * 
    **/
    select?: FoodReferenceSelect | null
  }



  /**
   * Model TargetTotals
   */


  export type AggregateTargetTotals = {
    _count: TargetTotalsCountAggregateOutputType | null
    _avg: TargetTotalsAvgAggregateOutputType | null
    _sum: TargetTotalsSumAggregateOutputType | null
    _min: TargetTotalsMinAggregateOutputType | null
    _max: TargetTotalsMaxAggregateOutputType | null
  }

  export type TargetTotalsAvgAggregateOutputType = {
    fat_grams: number | null
    carbs_grams: number | null
    protein_grams: number | null
  }

  export type TargetTotalsSumAggregateOutputType = {
    fat_grams: number | null
    carbs_grams: number | null
    protein_grams: number | null
  }

  export type TargetTotalsMinAggregateOutputType = {
    id: string | null
    feeding_date: string | null
    fat_grams: number | null
    carbs_grams: number | null
    protein_grams: number | null
  }

  export type TargetTotalsMaxAggregateOutputType = {
    id: string | null
    feeding_date: string | null
    fat_grams: number | null
    carbs_grams: number | null
    protein_grams: number | null
  }

  export type TargetTotalsCountAggregateOutputType = {
    id: number
    feeding_date: number
    fat_grams: number
    carbs_grams: number
    protein_grams: number
    _all: number
  }


  export type TargetTotalsAvgAggregateInputType = {
    fat_grams?: true
    carbs_grams?: true
    protein_grams?: true
  }

  export type TargetTotalsSumAggregateInputType = {
    fat_grams?: true
    carbs_grams?: true
    protein_grams?: true
  }

  export type TargetTotalsMinAggregateInputType = {
    id?: true
    feeding_date?: true
    fat_grams?: true
    carbs_grams?: true
    protein_grams?: true
  }

  export type TargetTotalsMaxAggregateInputType = {
    id?: true
    feeding_date?: true
    fat_grams?: true
    carbs_grams?: true
    protein_grams?: true
  }

  export type TargetTotalsCountAggregateInputType = {
    id?: true
    feeding_date?: true
    fat_grams?: true
    carbs_grams?: true
    protein_grams?: true
    _all?: true
  }

  export type TargetTotalsAggregateArgs = {
    /**
     * Filter which TargetTotals to aggregate.
     * 
    **/
    where?: TargetTotalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TargetTotals to fetch.
     * 
    **/
    orderBy?: Enumerable<TargetTotalsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TargetTotalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TargetTotals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TargetTotals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TargetTotals
    **/
    _count?: true | TargetTotalsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TargetTotalsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TargetTotalsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TargetTotalsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TargetTotalsMaxAggregateInputType
  }

  export type GetTargetTotalsAggregateType<T extends TargetTotalsAggregateArgs> = {
        [P in keyof T & keyof AggregateTargetTotals]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTargetTotals[P]>
      : GetScalarType<T[P], AggregateTargetTotals[P]>
  }




  export type TargetTotalsGroupByArgs = {
    where?: TargetTotalsWhereInput
    orderBy?: Enumerable<TargetTotalsOrderByWithAggregationInput>
    by: Array<TargetTotalsScalarFieldEnum>
    having?: TargetTotalsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TargetTotalsCountAggregateInputType | true
    _avg?: TargetTotalsAvgAggregateInputType
    _sum?: TargetTotalsSumAggregateInputType
    _min?: TargetTotalsMinAggregateInputType
    _max?: TargetTotalsMaxAggregateInputType
  }


  export type TargetTotalsGroupByOutputType = {
    id: string
    feeding_date: string
    fat_grams: number
    carbs_grams: number
    protein_grams: number
    _count: TargetTotalsCountAggregateOutputType | null
    _avg: TargetTotalsAvgAggregateOutputType | null
    _sum: TargetTotalsSumAggregateOutputType | null
    _min: TargetTotalsMinAggregateOutputType | null
    _max: TargetTotalsMaxAggregateOutputType | null
  }

  type GetTargetTotalsGroupByPayload<T extends TargetTotalsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TargetTotalsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TargetTotalsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TargetTotalsGroupByOutputType[P]>
            : GetScalarType<T[P], TargetTotalsGroupByOutputType[P]>
        }
      >
    >


  export type TargetTotalsSelect = {
    id?: boolean
    feeding_date?: boolean
    fat_grams?: boolean
    carbs_grams?: boolean
    protein_grams?: boolean
  }


  export type TargetTotalsGetPayload<S extends boolean | null | undefined | TargetTotalsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TargetTotals :
    S extends undefined ? never :
    S extends { include: any } & (TargetTotalsArgs | TargetTotalsFindManyArgs)
    ? TargetTotals 
    : S extends { select: any } & (TargetTotalsArgs | TargetTotalsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TargetTotals ? TargetTotals[P] : never
  } 
      : TargetTotals


  type TargetTotalsCountArgs = Merge<
    Omit<TargetTotalsFindManyArgs, 'select' | 'include'> & {
      select?: TargetTotalsCountAggregateInputType | true
    }
  >

  export interface TargetTotalsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one TargetTotals that matches the filter.
     * @param {TargetTotalsFindUniqueArgs} args - Arguments to find a TargetTotals
     * @example
     * // Get one TargetTotals
     * const targetTotals = await prisma.targetTotals.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TargetTotalsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TargetTotalsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TargetTotals'> extends True ? Prisma__TargetTotalsClient<TargetTotalsGetPayload<T>> : Prisma__TargetTotalsClient<TargetTotalsGetPayload<T> | null, null>

    /**
     * Find the first TargetTotals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetTotalsFindFirstArgs} args - Arguments to find a TargetTotals
     * @example
     * // Get one TargetTotals
     * const targetTotals = await prisma.targetTotals.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TargetTotalsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TargetTotalsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TargetTotals'> extends True ? Prisma__TargetTotalsClient<TargetTotalsGetPayload<T>> : Prisma__TargetTotalsClient<TargetTotalsGetPayload<T> | null, null>

    /**
     * Find zero or more TargetTotals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetTotalsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TargetTotals
     * const targetTotals = await prisma.targetTotals.findMany()
     * 
     * // Get first 10 TargetTotals
     * const targetTotals = await prisma.targetTotals.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const targetTotalsWithIdOnly = await prisma.targetTotals.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TargetTotalsFindManyArgs>(
      args?: SelectSubset<T, TargetTotalsFindManyArgs>
    ): PrismaPromise<Array<TargetTotalsGetPayload<T>>>

    /**
     * Create a TargetTotals.
     * @param {TargetTotalsCreateArgs} args - Arguments to create a TargetTotals.
     * @example
     * // Create one TargetTotals
     * const TargetTotals = await prisma.targetTotals.create({
     *   data: {
     *     // ... data to create a TargetTotals
     *   }
     * })
     * 
    **/
    create<T extends TargetTotalsCreateArgs>(
      args: SelectSubset<T, TargetTotalsCreateArgs>
    ): Prisma__TargetTotalsClient<TargetTotalsGetPayload<T>>

    /**
     * Create many TargetTotals.
     *     @param {TargetTotalsCreateManyArgs} args - Arguments to create many TargetTotals.
     *     @example
     *     // Create many TargetTotals
     *     const targetTotals = await prisma.targetTotals.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TargetTotalsCreateManyArgs>(
      args?: SelectSubset<T, TargetTotalsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TargetTotals.
     * @param {TargetTotalsDeleteArgs} args - Arguments to delete one TargetTotals.
     * @example
     * // Delete one TargetTotals
     * const TargetTotals = await prisma.targetTotals.delete({
     *   where: {
     *     // ... filter to delete one TargetTotals
     *   }
     * })
     * 
    **/
    delete<T extends TargetTotalsDeleteArgs>(
      args: SelectSubset<T, TargetTotalsDeleteArgs>
    ): Prisma__TargetTotalsClient<TargetTotalsGetPayload<T>>

    /**
     * Update one TargetTotals.
     * @param {TargetTotalsUpdateArgs} args - Arguments to update one TargetTotals.
     * @example
     * // Update one TargetTotals
     * const targetTotals = await prisma.targetTotals.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TargetTotalsUpdateArgs>(
      args: SelectSubset<T, TargetTotalsUpdateArgs>
    ): Prisma__TargetTotalsClient<TargetTotalsGetPayload<T>>

    /**
     * Delete zero or more TargetTotals.
     * @param {TargetTotalsDeleteManyArgs} args - Arguments to filter TargetTotals to delete.
     * @example
     * // Delete a few TargetTotals
     * const { count } = await prisma.targetTotals.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TargetTotalsDeleteManyArgs>(
      args?: SelectSubset<T, TargetTotalsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TargetTotals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetTotalsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TargetTotals
     * const targetTotals = await prisma.targetTotals.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TargetTotalsUpdateManyArgs>(
      args: SelectSubset<T, TargetTotalsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TargetTotals.
     * @param {TargetTotalsUpsertArgs} args - Arguments to update or create a TargetTotals.
     * @example
     * // Update or create a TargetTotals
     * const targetTotals = await prisma.targetTotals.upsert({
     *   create: {
     *     // ... data to create a TargetTotals
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TargetTotals we want to update
     *   }
     * })
    **/
    upsert<T extends TargetTotalsUpsertArgs>(
      args: SelectSubset<T, TargetTotalsUpsertArgs>
    ): Prisma__TargetTotalsClient<TargetTotalsGetPayload<T>>

    /**
     * Find one TargetTotals that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TargetTotalsFindUniqueOrThrowArgs} args - Arguments to find a TargetTotals
     * @example
     * // Get one TargetTotals
     * const targetTotals = await prisma.targetTotals.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TargetTotalsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TargetTotalsFindUniqueOrThrowArgs>
    ): Prisma__TargetTotalsClient<TargetTotalsGetPayload<T>>

    /**
     * Find the first TargetTotals that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetTotalsFindFirstOrThrowArgs} args - Arguments to find a TargetTotals
     * @example
     * // Get one TargetTotals
     * const targetTotals = await prisma.targetTotals.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TargetTotalsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TargetTotalsFindFirstOrThrowArgs>
    ): Prisma__TargetTotalsClient<TargetTotalsGetPayload<T>>

    /**
     * Count the number of TargetTotals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetTotalsCountArgs} args - Arguments to filter TargetTotals to count.
     * @example
     * // Count the number of TargetTotals
     * const count = await prisma.targetTotals.count({
     *   where: {
     *     // ... the filter for the TargetTotals we want to count
     *   }
     * })
    **/
    count<T extends TargetTotalsCountArgs>(
      args?: Subset<T, TargetTotalsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TargetTotalsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TargetTotals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetTotalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TargetTotalsAggregateArgs>(args: Subset<T, TargetTotalsAggregateArgs>): PrismaPromise<GetTargetTotalsAggregateType<T>>

    /**
     * Group by TargetTotals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetTotalsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TargetTotalsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TargetTotalsGroupByArgs['orderBy'] }
        : { orderBy?: TargetTotalsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TargetTotalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTargetTotalsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TargetTotals.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TargetTotalsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TargetTotals base type for findUnique actions
   */
  export type TargetTotalsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TargetTotals
     * 
    **/
    select?: TargetTotalsSelect | null
    /**
     * Filter, which TargetTotals to fetch.
     * 
    **/
    where: TargetTotalsWhereUniqueInput
  }

  /**
   * TargetTotals: findUnique
   */
  export interface TargetTotalsFindUniqueArgs extends TargetTotalsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TargetTotals base type for findFirst actions
   */
  export type TargetTotalsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TargetTotals
     * 
    **/
    select?: TargetTotalsSelect | null
    /**
     * Filter, which TargetTotals to fetch.
     * 
    **/
    where?: TargetTotalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TargetTotals to fetch.
     * 
    **/
    orderBy?: Enumerable<TargetTotalsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TargetTotals.
     * 
    **/
    cursor?: TargetTotalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TargetTotals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TargetTotals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TargetTotals.
     * 
    **/
    distinct?: Enumerable<TargetTotalsScalarFieldEnum>
  }

  /**
   * TargetTotals: findFirst
   */
  export interface TargetTotalsFindFirstArgs extends TargetTotalsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TargetTotals findMany
   */
  export type TargetTotalsFindManyArgs = {
    /**
     * Select specific fields to fetch from the TargetTotals
     * 
    **/
    select?: TargetTotalsSelect | null
    /**
     * Filter, which TargetTotals to fetch.
     * 
    **/
    where?: TargetTotalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TargetTotals to fetch.
     * 
    **/
    orderBy?: Enumerable<TargetTotalsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TargetTotals.
     * 
    **/
    cursor?: TargetTotalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TargetTotals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TargetTotals.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TargetTotalsScalarFieldEnum>
  }


  /**
   * TargetTotals create
   */
  export type TargetTotalsCreateArgs = {
    /**
     * Select specific fields to fetch from the TargetTotals
     * 
    **/
    select?: TargetTotalsSelect | null
    /**
     * The data needed to create a TargetTotals.
     * 
    **/
    data: XOR<TargetTotalsCreateInput, TargetTotalsUncheckedCreateInput>
  }


  /**
   * TargetTotals createMany
   */
  export type TargetTotalsCreateManyArgs = {
    /**
     * The data used to create many TargetTotals.
     * 
    **/
    data: Enumerable<TargetTotalsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TargetTotals update
   */
  export type TargetTotalsUpdateArgs = {
    /**
     * Select specific fields to fetch from the TargetTotals
     * 
    **/
    select?: TargetTotalsSelect | null
    /**
     * The data needed to update a TargetTotals.
     * 
    **/
    data: XOR<TargetTotalsUpdateInput, TargetTotalsUncheckedUpdateInput>
    /**
     * Choose, which TargetTotals to update.
     * 
    **/
    where: TargetTotalsWhereUniqueInput
  }


  /**
   * TargetTotals updateMany
   */
  export type TargetTotalsUpdateManyArgs = {
    /**
     * The data used to update TargetTotals.
     * 
    **/
    data: XOR<TargetTotalsUpdateManyMutationInput, TargetTotalsUncheckedUpdateManyInput>
    /**
     * Filter which TargetTotals to update
     * 
    **/
    where?: TargetTotalsWhereInput
  }


  /**
   * TargetTotals upsert
   */
  export type TargetTotalsUpsertArgs = {
    /**
     * Select specific fields to fetch from the TargetTotals
     * 
    **/
    select?: TargetTotalsSelect | null
    /**
     * The filter to search for the TargetTotals to update in case it exists.
     * 
    **/
    where: TargetTotalsWhereUniqueInput
    /**
     * In case the TargetTotals found by the `where` argument doesn't exist, create a new TargetTotals with this data.
     * 
    **/
    create: XOR<TargetTotalsCreateInput, TargetTotalsUncheckedCreateInput>
    /**
     * In case the TargetTotals was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TargetTotalsUpdateInput, TargetTotalsUncheckedUpdateInput>
  }


  /**
   * TargetTotals delete
   */
  export type TargetTotalsDeleteArgs = {
    /**
     * Select specific fields to fetch from the TargetTotals
     * 
    **/
    select?: TargetTotalsSelect | null
    /**
     * Filter which TargetTotals to delete.
     * 
    **/
    where: TargetTotalsWhereUniqueInput
  }


  /**
   * TargetTotals deleteMany
   */
  export type TargetTotalsDeleteManyArgs = {
    /**
     * Filter which TargetTotals to delete
     * 
    **/
    where?: TargetTotalsWhereInput
  }


  /**
   * TargetTotals: findUniqueOrThrow
   */
  export type TargetTotalsFindUniqueOrThrowArgs = TargetTotalsFindUniqueArgsBase
      

  /**
   * TargetTotals: findFirstOrThrow
   */
  export type TargetTotalsFindFirstOrThrowArgs = TargetTotalsFindFirstArgsBase
      

  /**
   * TargetTotals without action
   */
  export type TargetTotalsArgs = {
    /**
     * Select specific fields to fetch from the TargetTotals
     * 
    **/
    select?: TargetTotalsSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const FoodLogScalarFieldEnum: {
    id: 'id',
    food_name: 'food_name',
    food_qty: 'food_qty',
    protein_grams: 'protein_grams',
    fat_grams: 'fat_grams',
    carbs_grams: 'carbs_grams',
    kkcals: 'kkcals',
    feeding_date: 'feeding_date',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FoodLogScalarFieldEnum = (typeof FoodLogScalarFieldEnum)[keyof typeof FoodLogScalarFieldEnum]


  export const FoodReferenceScalarFieldEnum: {
    id: 'id',
    food_name: 'food_name',
    food_qty: 'food_qty',
    protein_grams: 'protein_grams',
    fat_grams: 'fat_grams',
    carbs_grams: 'carbs_grams',
    kkcals: 'kkcals',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    imageBase64: 'imageBase64'
  };

  export type FoodReferenceScalarFieldEnum = (typeof FoodReferenceScalarFieldEnum)[keyof typeof FoodReferenceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TargetTotalsScalarFieldEnum: {
    id: 'id',
    feeding_date: 'feeding_date',
    fat_grams: 'fat_grams',
    carbs_grams: 'carbs_grams',
    protein_grams: 'protein_grams'
  };

  export type TargetTotalsScalarFieldEnum = (typeof TargetTotalsScalarFieldEnum)[keyof typeof TargetTotalsScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type FoodLogWhereInput = {
    AND?: Enumerable<FoodLogWhereInput>
    OR?: Enumerable<FoodLogWhereInput>
    NOT?: Enumerable<FoodLogWhereInput>
    id?: StringFilter | string
    food_name?: StringFilter | string
    food_qty?: FloatFilter | number
    protein_grams?: FloatFilter | number
    fat_grams?: FloatFilter | number
    carbs_grams?: FloatFilter | number
    kkcals?: FloatFilter | number
    feeding_date?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FoodLogOrderByWithRelationInput = {
    id?: SortOrder
    food_name?: SortOrder
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
    feeding_date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodLogWhereUniqueInput = {
    id?: string
  }

  export type FoodLogOrderByWithAggregationInput = {
    id?: SortOrder
    food_name?: SortOrder
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
    feeding_date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FoodLogCountOrderByAggregateInput
    _avg?: FoodLogAvgOrderByAggregateInput
    _max?: FoodLogMaxOrderByAggregateInput
    _min?: FoodLogMinOrderByAggregateInput
    _sum?: FoodLogSumOrderByAggregateInput
  }

  export type FoodLogScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FoodLogScalarWhereWithAggregatesInput>
    OR?: Enumerable<FoodLogScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FoodLogScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    food_name?: StringWithAggregatesFilter | string
    food_qty?: FloatWithAggregatesFilter | number
    protein_grams?: FloatWithAggregatesFilter | number
    fat_grams?: FloatWithAggregatesFilter | number
    carbs_grams?: FloatWithAggregatesFilter | number
    kkcals?: FloatWithAggregatesFilter | number
    feeding_date?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FoodReferenceWhereInput = {
    AND?: Enumerable<FoodReferenceWhereInput>
    OR?: Enumerable<FoodReferenceWhereInput>
    NOT?: Enumerable<FoodReferenceWhereInput>
    id?: StringFilter | string
    food_name?: StringFilter | string
    food_qty?: FloatFilter | number
    protein_grams?: FloatFilter | number
    fat_grams?: FloatFilter | number
    carbs_grams?: FloatFilter | number
    kkcals?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    imageBase64?: StringFilter | string
  }

  export type FoodReferenceOrderByWithRelationInput = {
    id?: SortOrder
    food_name?: SortOrder
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    imageBase64?: SortOrder
  }

  export type FoodReferenceWhereUniqueInput = {
    id?: string
  }

  export type FoodReferenceOrderByWithAggregationInput = {
    id?: SortOrder
    food_name?: SortOrder
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    imageBase64?: SortOrder
    _count?: FoodReferenceCountOrderByAggregateInput
    _avg?: FoodReferenceAvgOrderByAggregateInput
    _max?: FoodReferenceMaxOrderByAggregateInput
    _min?: FoodReferenceMinOrderByAggregateInput
    _sum?: FoodReferenceSumOrderByAggregateInput
  }

  export type FoodReferenceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FoodReferenceScalarWhereWithAggregatesInput>
    OR?: Enumerable<FoodReferenceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FoodReferenceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    food_name?: StringWithAggregatesFilter | string
    food_qty?: FloatWithAggregatesFilter | number
    protein_grams?: FloatWithAggregatesFilter | number
    fat_grams?: FloatWithAggregatesFilter | number
    carbs_grams?: FloatWithAggregatesFilter | number
    kkcals?: FloatWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    imageBase64?: StringWithAggregatesFilter | string
  }

  export type TargetTotalsWhereInput = {
    AND?: Enumerable<TargetTotalsWhereInput>
    OR?: Enumerable<TargetTotalsWhereInput>
    NOT?: Enumerable<TargetTotalsWhereInput>
    id?: StringFilter | string
    feeding_date?: StringFilter | string
    fat_grams?: FloatFilter | number
    carbs_grams?: FloatFilter | number
    protein_grams?: FloatFilter | number
  }

  export type TargetTotalsOrderByWithRelationInput = {
    id?: SortOrder
    feeding_date?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    protein_grams?: SortOrder
  }

  export type TargetTotalsWhereUniqueInput = {
    id?: string
  }

  export type TargetTotalsOrderByWithAggregationInput = {
    id?: SortOrder
    feeding_date?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    protein_grams?: SortOrder
    _count?: TargetTotalsCountOrderByAggregateInput
    _avg?: TargetTotalsAvgOrderByAggregateInput
    _max?: TargetTotalsMaxOrderByAggregateInput
    _min?: TargetTotalsMinOrderByAggregateInput
    _sum?: TargetTotalsSumOrderByAggregateInput
  }

  export type TargetTotalsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TargetTotalsScalarWhereWithAggregatesInput>
    OR?: Enumerable<TargetTotalsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TargetTotalsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    feeding_date?: StringWithAggregatesFilter | string
    fat_grams?: FloatWithAggregatesFilter | number
    carbs_grams?: FloatWithAggregatesFilter | number
    protein_grams?: FloatWithAggregatesFilter | number
  }

  export type FoodLogCreateInput = {
    id?: string
    food_name: string
    food_qty: number
    protein_grams: number
    fat_grams: number
    carbs_grams: number
    kkcals: number
    feeding_date: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodLogUncheckedCreateInput = {
    id?: string
    food_name: string
    food_qty: number
    protein_grams: number
    fat_grams: number
    carbs_grams: number
    kkcals: number
    feeding_date: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    food_qty?: FloatFieldUpdateOperationsInput | number
    protein_grams?: FloatFieldUpdateOperationsInput | number
    fat_grams?: FloatFieldUpdateOperationsInput | number
    carbs_grams?: FloatFieldUpdateOperationsInput | number
    kkcals?: FloatFieldUpdateOperationsInput | number
    feeding_date?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    food_qty?: FloatFieldUpdateOperationsInput | number
    protein_grams?: FloatFieldUpdateOperationsInput | number
    fat_grams?: FloatFieldUpdateOperationsInput | number
    carbs_grams?: FloatFieldUpdateOperationsInput | number
    kkcals?: FloatFieldUpdateOperationsInput | number
    feeding_date?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodLogCreateManyInput = {
    id?: string
    food_name: string
    food_qty: number
    protein_grams: number
    fat_grams: number
    carbs_grams: number
    kkcals: number
    feeding_date: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    food_qty?: FloatFieldUpdateOperationsInput | number
    protein_grams?: FloatFieldUpdateOperationsInput | number
    fat_grams?: FloatFieldUpdateOperationsInput | number
    carbs_grams?: FloatFieldUpdateOperationsInput | number
    kkcals?: FloatFieldUpdateOperationsInput | number
    feeding_date?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    food_qty?: FloatFieldUpdateOperationsInput | number
    protein_grams?: FloatFieldUpdateOperationsInput | number
    fat_grams?: FloatFieldUpdateOperationsInput | number
    carbs_grams?: FloatFieldUpdateOperationsInput | number
    kkcals?: FloatFieldUpdateOperationsInput | number
    feeding_date?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodReferenceCreateInput = {
    id?: string
    food_name: string
    food_qty: number
    protein_grams: number
    fat_grams: number
    carbs_grams: number
    kkcals: number
    createdAt?: Date | string
    updatedAt?: Date | string
    imageBase64: string
  }

  export type FoodReferenceUncheckedCreateInput = {
    id?: string
    food_name: string
    food_qty: number
    protein_grams: number
    fat_grams: number
    carbs_grams: number
    kkcals: number
    createdAt?: Date | string
    updatedAt?: Date | string
    imageBase64: string
  }

  export type FoodReferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    food_qty?: FloatFieldUpdateOperationsInput | number
    protein_grams?: FloatFieldUpdateOperationsInput | number
    fat_grams?: FloatFieldUpdateOperationsInput | number
    carbs_grams?: FloatFieldUpdateOperationsInput | number
    kkcals?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageBase64?: StringFieldUpdateOperationsInput | string
  }

  export type FoodReferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    food_qty?: FloatFieldUpdateOperationsInput | number
    protein_grams?: FloatFieldUpdateOperationsInput | number
    fat_grams?: FloatFieldUpdateOperationsInput | number
    carbs_grams?: FloatFieldUpdateOperationsInput | number
    kkcals?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageBase64?: StringFieldUpdateOperationsInput | string
  }

  export type FoodReferenceCreateManyInput = {
    id?: string
    food_name: string
    food_qty: number
    protein_grams: number
    fat_grams: number
    carbs_grams: number
    kkcals: number
    createdAt?: Date | string
    updatedAt?: Date | string
    imageBase64: string
  }

  export type FoodReferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    food_qty?: FloatFieldUpdateOperationsInput | number
    protein_grams?: FloatFieldUpdateOperationsInput | number
    fat_grams?: FloatFieldUpdateOperationsInput | number
    carbs_grams?: FloatFieldUpdateOperationsInput | number
    kkcals?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageBase64?: StringFieldUpdateOperationsInput | string
  }

  export type FoodReferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    food_name?: StringFieldUpdateOperationsInput | string
    food_qty?: FloatFieldUpdateOperationsInput | number
    protein_grams?: FloatFieldUpdateOperationsInput | number
    fat_grams?: FloatFieldUpdateOperationsInput | number
    carbs_grams?: FloatFieldUpdateOperationsInput | number
    kkcals?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageBase64?: StringFieldUpdateOperationsInput | string
  }

  export type TargetTotalsCreateInput = {
    id?: string
    feeding_date: string
    fat_grams: number
    carbs_grams: number
    protein_grams: number
  }

  export type TargetTotalsUncheckedCreateInput = {
    id?: string
    feeding_date: string
    fat_grams: number
    carbs_grams: number
    protein_grams: number
  }

  export type TargetTotalsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    feeding_date?: StringFieldUpdateOperationsInput | string
    fat_grams?: FloatFieldUpdateOperationsInput | number
    carbs_grams?: FloatFieldUpdateOperationsInput | number
    protein_grams?: FloatFieldUpdateOperationsInput | number
  }

  export type TargetTotalsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    feeding_date?: StringFieldUpdateOperationsInput | string
    fat_grams?: FloatFieldUpdateOperationsInput | number
    carbs_grams?: FloatFieldUpdateOperationsInput | number
    protein_grams?: FloatFieldUpdateOperationsInput | number
  }

  export type TargetTotalsCreateManyInput = {
    id?: string
    feeding_date: string
    fat_grams: number
    carbs_grams: number
    protein_grams: number
  }

  export type TargetTotalsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    feeding_date?: StringFieldUpdateOperationsInput | string
    fat_grams?: FloatFieldUpdateOperationsInput | number
    carbs_grams?: FloatFieldUpdateOperationsInput | number
    protein_grams?: FloatFieldUpdateOperationsInput | number
  }

  export type TargetTotalsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    feeding_date?: StringFieldUpdateOperationsInput | string
    fat_grams?: FloatFieldUpdateOperationsInput | number
    carbs_grams?: FloatFieldUpdateOperationsInput | number
    protein_grams?: FloatFieldUpdateOperationsInput | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type FoodLogCountOrderByAggregateInput = {
    id?: SortOrder
    food_name?: SortOrder
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
    feeding_date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodLogAvgOrderByAggregateInput = {
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
  }

  export type FoodLogMaxOrderByAggregateInput = {
    id?: SortOrder
    food_name?: SortOrder
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
    feeding_date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodLogMinOrderByAggregateInput = {
    id?: SortOrder
    food_name?: SortOrder
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
    feeding_date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodLogSumOrderByAggregateInput = {
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FoodReferenceCountOrderByAggregateInput = {
    id?: SortOrder
    food_name?: SortOrder
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    imageBase64?: SortOrder
  }

  export type FoodReferenceAvgOrderByAggregateInput = {
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
  }

  export type FoodReferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    food_name?: SortOrder
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    imageBase64?: SortOrder
  }

  export type FoodReferenceMinOrderByAggregateInput = {
    id?: SortOrder
    food_name?: SortOrder
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    imageBase64?: SortOrder
  }

  export type FoodReferenceSumOrderByAggregateInput = {
    food_qty?: SortOrder
    protein_grams?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    kkcals?: SortOrder
  }

  export type TargetTotalsCountOrderByAggregateInput = {
    id?: SortOrder
    feeding_date?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    protein_grams?: SortOrder
  }

  export type TargetTotalsAvgOrderByAggregateInput = {
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    protein_grams?: SortOrder
  }

  export type TargetTotalsMaxOrderByAggregateInput = {
    id?: SortOrder
    feeding_date?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    protein_grams?: SortOrder
  }

  export type TargetTotalsMinOrderByAggregateInput = {
    id?: SortOrder
    feeding_date?: SortOrder
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    protein_grams?: SortOrder
  }

  export type TargetTotalsSumOrderByAggregateInput = {
    fat_grams?: SortOrder
    carbs_grams?: SortOrder
    protein_grams?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}